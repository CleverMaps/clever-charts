{"version":3,"file":"histogram-1.0.0.js","sources":["../src/utils/SelectionUtils.js","../src/utils/PositionUtils.js","../src/Histogram.js","../src/utils/Observable.js","../src/HistogramDefaults.js","../src/HistogramData.js","../src/HistogramSelection.js","../src/HistogramHandle.js","../src/HistogramRenderer.js"],"sourcesContent":["import * as Defaults from \"../HistogramDefaults\";\n\n/**\n * @public\n * @param {HistogramData} histogramData \n */\nexport function getDefaultSelection(histogramData){\n    var minMax = histogramData.getMinMax();\n    var colors = Defaults.DEFAULT_COLORS;\n    var start = minMax.min;\n    var step = (minMax.max - minMax.min) / colors.length;\n    return colors.map(color=>{\n        var from = start;\n        var to = start + step;\n        start += step;\n\n        return {\n            from:from, \n            to:to,\n            color:color\n        }\n    });\n}","/**\n * @public\n * Returns handle positions offsets so that labels don't conflict visually\n * @param {HistogramData} histogramData \n * @returns {Array} label offsets\n */\nexport function getHandlePositionOffsets(handle1, handle2, maskPadding, width){\n    var label1Box = handle1.getLabelBox();\n    var label2Box = handle2.getLabelBox();\n\n    // calculate conflict number\n    var conflictDiff = label2Box.x - (label1Box.x + label1Box.width)-maskPadding;\n    // and handle if there is not enough space\n    if (conflictDiff<0){\n        // pos1 diff to the left\n        var posDiff1 = conflictDiff/2;\n        // pos2 diff to to right\n        var posDiff2 = conflictDiff/2;\n\n        // position left to 0 if position would be lower than 0\n        var xMin = label1Box.x+posDiff1;\n        if (xMin < 0){\n            posDiff1 = label1Box.x; \n            // also shift right label so we keep it visible\n            posDiff2 = posDiff2*2\n        }\n\n        // same with max value\n        var xMax = label2Box.x+label2Box.width-posDiff2;\n        if (xMax > width){\n            // needs to consider 2px offset otherwise label woudl shift, TODO: investigate why\n            var offset = 2;\n            posDiff2 += xMax-width-offset; \n            posDiff1 = posDiff1*2\n        }\n        return [posDiff1, -posDiff2];                  \n    }\n\n    return [0,0];\n}","import * as d3 from \"d3\";\nimport { Observable } from \"./utils/Observable\";\nimport * as Defaults from \"./HistogramDefaults\";\nimport * as SelectionUtils from \"./utils/SelectionUtils\";\nimport { HistogramData } from \"./HistogramData\";\nimport { HistogramSelection } from \"./HistogramSelection\";\nimport { HistogramRenderer } from \"./HistogramRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main histogram class\n * @param {Object} options\n */\nclass Histogram {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Margin of the widget\n\t\t */\n\t\tthis._options.margin = getOptionValue(options.margin, Defaults.MARGIN);\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar color \n\t\t */\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Over bar color \n\t\t */\n\t\tthis._options.overSelectionColor = getOptionValue(options.overSelectionColor, Defaults.OVER_SELECTION_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.selectionColor = getOptionValue(options.selectionColor, Defaults.SELECTION_COLOR);\n\t\t\n\t\t/**\n\t\t * @public\n\t\t * Enable selection toggle \n\t\t */\n\t\tthis._options.enableSelectionToggle = getOptionValue(options.enableSelectionToggle, Defaults.ENABLE_SELECTION_TOGGLE);\n\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Mask padding\n\t\t */\n\t\tthis._options.maskPadding = getOptionValue(options.maskPadding, Defaults.MASK_PADDING);\n\n\t\t/**\n\t\t * @public\n\t\t * selection array\n\t\t */\n\t\tthis._options.selection = getOptionValue(options.selection, null);\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * histogramRenderer\n\t\t */\n\t\tthis._histogramRenderer = new HistogramRenderer(this._options);\n\n\t\tthis._histogramRenderer.on(\"selectionOver\", selectionIndex=>{\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"selectionChanged\", (selection)=>{\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\n\t\t})\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._histogramRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Array} data\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetData(data, selection) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar histogramData = new HistogramData(data, this._options);\n\n\t\tif (!selection) {\n\t\t\tthis._options.selection = SelectionUtils.getDefaultSelection(histogramData);\n\t\t} else {\n\t\t\tthis._options.selection = selection;\n\t\t}\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + histogramData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tvar histogramSelection = new HistogramSelection(this._options.selection);\n\n\t\tthis._histogramRenderer.refresh(histogramData, histogramSelection);\n\n\t\treturn this;\n\t}\n\n}\n\nexport default Histogram;","/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nclass Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tthis._handlers[event].push(handler);\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Fire widget event\r\n\t * @param {String} event event name\r\n\t * @param {*} ...args event arguments\r\n\t */\r\n\tfire(event, ...args) {\r\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tvar handlers = this._handlers[event];\r\n\t\tfor (var i = 0; i < handlers.length; i++) {\r\n\t\t\thandlers[i].apply(this, args);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n}\r\nexport {Observable}","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default widget height\r\n */\r\nexport const HEIGHT = 150;\r\n\r\n/**\r\n * @public\r\n * Default widget height\r\n */\r\nexport const MARGIN = 25;\r\n\r\n/**\r\n * @public\r\n * Default inactive bar color\r\n */\r\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const OVER_SELECTION_COLOR = \"#ffea00\";\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const SELECTION_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Enable selection toggle\r\n */\r\nexport const ENABLE_SELECTION_TOGGLE = true;\r\n\r\n/**\r\n * @public\r\n * Default padding of label mask\r\n */\r\nexport const MASK_PADDING = 10;\r\n\r\n/**\r\n * @public\r\n * Default colors \r\n */\r\nexport const DEFAULT_COLORS = [\"#e6f3fb\", \"#cbe7f6\", \"#b1dbf2\", \"#98cfee\", \"#7ec4ea\"];","import * as d3 from \"d3\";\n\n/**\n * @class\n * HistogramData representing data for the histogram view\n */\nclass HistogramData {\n\t/**\n\t * @param {data} data\n\t * @param {Object} options\n\t */\n\tconstructor(data, options) {\n\t\tthis._histogramData = this._loadHistogramData(data, options.width);\n\t\tthis._minMax = this._calculateMinMax(this._histogramData);\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns histogram data\n\t * @returns {Array} histogram data\n\t */\n\tgetData() {\n\t\treturn this._histogramData;\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given histogramData\n\t* @param {Array} histogramData\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(histogramData) {\n\t\tvar min = d3.min(histogramData, function (d) { return d.value; });\n\t\tvar max = d3.max(histogramData, function (d) { return d.value; });\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t* Returns value ratio between bars and data\n\t* @return {Number} value ratio \n\t*/\n\tgetValueRatio() {\n\t\tvar range = this._minMax.max - this._minMax.min;\n\t\treturn range / this._options.width;\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.min;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns data value from given position \n\t * @param {Number} position\n\t */\n\tpositionToValue(position) {\n\t\tvar valueRatio = this.getValueRatio();\n\t\tvar minMax = this.getMinMax();\n\t\treturn position * valueRatio + minMax.min;\n\t}\n\n\t/**\n\t * @public\n\t * Returns position from given data value \n\t * @param {Number} value\n\t */\n\tvalueToPosition(value) {\n\t\tvar valueRatio = this.getValueRatio();\n\t\tvar minMax = this.getMinMax();\n\t\treturn Math.round(value / valueRatio - minMax.min / valueRatio);\n\t}\n\n\t/** \n\t* @private\n\t* @param {Array} buckets\n\t* @param {int} numOfBarsPerBucket - number of bars per column\\\n\t* @returns {Array} data from given buckets \n\t*/\n\t_loadHistogramData(data, width) {\n\t\tvar histogramData = [];\n\t\tvar numOfBarsPerBucket = width / data.length;\n\t\tdata.forEach((bucket) => {\n\t\t\tvar step = (bucket.max - bucket.min) / numOfBarsPerBucket;\n\t\t\td3.range(bucket.min, bucket.max, step).forEach((value) => {\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tvolume: bucket.content[0].frequency\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\treturn histogramData;\n\t}\n}\n\nexport { HistogramData };","/**\n * @class\n * HistogramSelection representing histogram selection\n */\nclass HistogramSelection {\n\t/**\n\t * @param {Array} selection\n\t */\n    constructor(selection) {\n\t\tthis._selection = selection.slice();\n    }\n\n\t/**\n\t * @public\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\treturn this._selection;\n\t}\n\n\t/**\n\t * @public \n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push(s.from);\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push(s.to);\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t\n}\n\nexport {HistogramSelection};","import * as d3 from \"d3\";\nimport style from \"./Histogram.css\";\nimport { Observable } from \"./utils/Observable\";\n\n/**\n * Gradient index shared for all instances\n */\nvar gradientIndex = 0;\n\n/**\n * @class\n * HistogramHandle representing control handle for histogram\n */\nclass HistogramHandle {\n\t/**\n\t * @param {D3Selection} groupEl\n\t * @param {Number} value\n\t * @param {Number} index\n\t * @param {HistoryData} histogramData\n\t * @param {Object} options\n\t */\n\tconstructor(groupEl, value, index, histogramData, options) {\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"drag\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when drag on handle starts\n\t\t\t * @param {HistogramHandle} handle\n\t\t\t */\n\t\t\t\"startDrag\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when drag on handle ends\n\t\t\t * @param {HistogramHandle} handle\n\t\t\t */\n\t\t\t\"endDrag\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * handle element\n\t\t */\n\t\tthis._handleEl = null;\n\t\t\n\t\t/**\n\t\t * @private\n\t\t * handle line element\n\t\t */\n\t\tthis._handleLineEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle circle element\n\t\t */\n\t\tthis._handleCircleEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle mask element\n\t\t */\n\t\tthis._handleMaskEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle mask gradient element\n\t\t */\n\t\tthis._handleMaskGradientEl = null;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * handle label element\n\t\t */\n\t\tthis._handleLabelEl = null;\t\t\n\n\t\t/**\n\t\t * @private \n\t\t * True if handle is over\n\t\t */\n\t\tthis._isOver = false;\n\t\t\n\t\t/**\n\t\t * @private \n\t\t * Main group element\n\t\t */\t\t\n\t\tthis._groupEl = groupEl;\n\t\t/**\n\t\t * @private \n\t\t * handle index\n\t\t */\t\t\n\t\tthis._index = index;\n\t\t/**\n\t\t * @private \n\t\t * handle value\n\t\t */\t\t\n\t\tthis._value = value;\n\t\t/**\n\t\t * @private \n\t\t * handle position\n\t\t */\t\t\n\t\tthis._position = histogramData.valueToPosition(value);\n\t\t/**\n\t\t * @private \n\t\t * bar options\n\t\t */\t\t\n\t\tthis._options = options;\n\t\t/**\n\t\t * @private \n\t\t * histogram data\n\t\t */\t\t\n\t\tthis._histogramData = histogramData;\n\n\t\t/**\n\t\t * @private \n\t\t * elements\n\t\t */\t\t\n\t\tthis._elements = [];\t\t\n\t\t\n\t\tthis._renderHandle();\n\t}\n\n\t/**\n\t * @public\n\t * Destroys this handle\n\t */\n\tdestroy(){\n\t\tthis._elements.forEach(element=>element.remove());\n\t\tthis._elements = [];\n\t}\n\n\t/**\n\t * @private\n\t   * Renders drag handle\n\t   */\n\t_renderHandle() {\n\t\tthis._elements = [\n\t\t\tthis._createHandleElement(),\n\t\t\tthis._createHandleLineElement(),\n\t\t\tthis._createHandleCircleElement(),\n\t\t\tthis._createDragMaskElement(),\n\t\t\tthis._createMaskGradientElement(),\n\t\t\tthis._createDragLabelElement()\n\t\t];\n\n\t\tthis._handleHoverState();\n\t\tthis._handleDrag();\n\t}\t\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Returns X position of this handle\n\t * @returns {Number} X position handle\n\t */\n\tgetXPosition() {\n\t\treturn parseInt(this._handleEl.attr(\"x\"))+5;\n\t}\n\n\t/**\n\t * @public\n\t * Sets hover state\n\t */\n\tsetHoverState(){\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleMaskEl.attr(\"visibility\", \"visible\");\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 3);\n\t}\n\t\n\t/**\n\t * @public \n\t * @returns {SVGRect} \n\t * Returns drag label box for this handle\n\t */\n\tgetLabelBox(){\n\t\treturn this._handleLabelEl.node().getBBox();\n\t}\n\n\t/**\n\t * @public \n\t * Shifts handle label by given offset so it can handle label position conflicts\n\t */\n\tsetLabelOffset(offset){\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(\"+offset+\", 0)\")\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(\"+offset+\", 0)\")\n\t}\n\n\t/**\n\t * @public\n\t * Unsets hover state\n\t */\n\tunsetHoverState(){\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleMaskEl.attr(\"visibility\", \"hidden\");\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 1);\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(0, 0)\")\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(0, 0)\")\n\t}\n\n\t/**\n\t * @public\n\t * Enables this handle \n\t */\n\tenable(){\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"all\"));\n\t}\n\n\t/**\n\t * @public\n\t * Disables this handle \n\t */\n\tdisable(){\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"none\"));\n\t}\n\n\t/**\n\t * @private\n\t * Handle hover state\n\t */\n\t_handleHoverState(){\n\t\t// line hover effect\n\t\tthis._handleEl.on(\"mouseover\", () => {\n\t\t\tthis._isOver = true;\n\t\t\tthis.setHoverState();\n\t\t})\n\t\tthis._handleEl.on(\"mouseout\", () => {\n\t\t\tthis._isOver = false;\n\t\t\tthis.unsetHoverState();\n\t\t})\n\t}\n\n\t/**\n\t * @private\n\t * handles what happens when drag starts\n\t */\n\t_onStartDrag(){\n\t\tthis._groupEl.classed(style[\"dragging\"], true);\n\t\tthis._observable.fire(\"startDrag\", this);\n\t}\n\n\t/**\n\t * @private\n\t * handles what happens on drag\n\t */\n\t_onDrag(){\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar xpos = Math.round(Math.max(Math.min(d3.event.x, width), 0));\n\t\tvar format = this._options.format;\n\n\t\tthis._handleEl.attr(\"x\", xpos - 5);\n\t\tthis._handleLineEl.attr(\"x\", xpos - 2);\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\" + xpos + \",\" + height + \")\");\n\t\tthis._handleEl.attr(\"data-handle-value\", this._histogramData.positionToValue(xpos))\n\n\t\tthis.setHoverState();\n\n\t\tthis._handleLabelEl.text(() => {\n\t\t\treturn format(this._histogramData.positionToValue(xpos));\n\t\t})\n\n\t\tthis._updateLabelPosition(xpos);\n\t\tthis._observable.fire(\"drag\");\t\t\n\t}\t\n\n\t/**\n\t * @private\n\t * handles what happens when drag ends\n\t */\n\t_onEndDrag(){\n\t\tthis._groupEl.classed(style[\"dragging\"], false);\n\t\tif (!this._isOver) {\n\t\t\tthis.unsetHoverState();\n\t\t}\n\n\t\tthis._observable.fire(\"endDrag\", this);\t\t\n\t}\n\n\t/**\n\t * @private\n\t * Handles handle drag \n\t */\n\t_handleDrag(){\n\t\tthis._handleEl.call(d3.drag()\n\t\t\t.on(\"drag\", this._onDrag.bind(this))\n\t\t\t.on(\"start\", this._onStartDrag.bind(this))\n\t\t\t.on(\"end\", this._onEndDrag.bind(this)));\n\t}\n\n\t/**\n\t * @private\n\t * Updates label position\n\t * @param {Number} position \n\t */\n\t_updateLabelPosition(position) {\n\t\tvar label = this._handleLabelEl.node();\n\t\tvar maskPadding = this._options.maskPadding;\t\t\n\n\t\t// we need to calculate text length so we can create mask and center text\n\t\tvar textLength = label.getComputedTextLength();\n\t\tvar maskWidth = textLength + maskPadding * 2;\n\t\tvar xPosition = position - textLength / 2;\n\n\t\t// handle when dragging towards left side\n\t\tif (xPosition < 0) {\n\t\t\txPosition = 0;\n\t\t}\n\n\t\t// handle when dragging towards right side\n\t\tif (xPosition + textLength > this._options.width) {\n\t\t\txPosition = this._options.width  - textLength;\n\t\t\tthis._handleLabelEl.attr(\"x\", this._options.width);\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"end\");\n\t\t} else {\n\t\t\tthis._handleLabelEl.attr(\"x\", xPosition);\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"start\");\n\t\t}\n\n\t\t// position mask\n\t\tthis._handleMaskEl.attr(\"x\", () => {\n\t\t\treturn parseInt(xPosition) - maskPadding;\n\t\t});\n\n\t\tthis._handleMaskGradientEl.attr(\"x1\", xPosition - maskPadding);\n\t\tthis._handleMaskGradientEl.attr(\"x2\", xPosition + maskWidth - maskPadding);\n\n\t\tthis._handleMaskEl.attr(\"width\", maskWidth);\n\t\tthis._handleMaskEl.attr(\"height\", 20);\n\t}\n\t\t\n\t/**\n\t * Creates mask gradient element\n\t * @param {Number} handleIndex \n\t */\n\t_createMaskGradientElement(){\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\n\t\t\t.attr(\"id\", \"brush-mask-gradient-\" + gradientIndex++)\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\n\t\t\t.attr(\"y1\", 0).attr(\"x1\", 50)\n\t\t\t.attr(\"y2\", 0).attr(\"x2\", 0);\n\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\n\t\t\t.data([\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\n\t\t\t])\n\t\t\t.enter().append(\"stop\")\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\n\n\t\treturn this._handleMaskGradientEl;\n\t}\n\n\t/**\n\t * @private \n\t * Renders main handle element \n\t * @returns {SVGElement}\n\t */\n\t_createHandleElement(){\n\t\tthis._handleEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"custom-handle\"])\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"data-handle-index\", this._index)\n\t\t\t.attr(\"data-handle-value\", this._value)\n\t\t\t.attr(\"cursor\", \"ew-resize\")\n\t\t\t.attr(\"width\", 10)\n\t\t\t.attr(\"height\", this._options.height + 5)\n\t\t\t.attr(\"x\", this._position - 5);\n\n\t\treturn this._handleEl;\n\t}\n\n\t/**\n\t * @private \n\t * Renders handle line element \n\t * @returns {SVGElement} \n\t */\n\t_createHandleLineElement(){\n\t\tthis._handleLineEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"custom-handle-line\"])\n\t\t\t.attr(\"width\", 4)\n\t\t\t.attr(\"height\", this._options.height)\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"x\", this._position - 2);\n\n\t\treturn this._handleLineEl;\n\t}\t\n\n\t/**\n\t * @private \n\t * Renders handle circle element \n\t * @returns {SVGElement} \n\t */\n\t_createHandleCircleElement(){\n\t\tthis._handleCircleEl = this._groupEl.append(\"circle\")\n\t\t\t.attr(\"class\", style[\"custom-handle-circle\"])\n\t\t\t.attr(\"transform\", \"translate(\" + this._position + \",\" + this._options.height + \")\")\n\t\t\t.attr(\"fill\", \"#ffffff\")\n\t\t\t.attr(\"fill-opacity\", 1)\n\t\t\t.attr(\"stroke\", \"#000\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"cursor\", \"ew-resize\")\n\t\t\t.attr(\"r\", 3.5);\n\n\t\treturn this._handleCircleEl;\n\t}\t\t\n\n\t/**\n\t * @private \n\t * Renders drag mask element \n\t * @returns {SVGElement} \n\t */\n\t_createDragMaskElement(){\n\t\tthis._handleMaskEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"drag-label-mask\"])\n\t\t\t.attr(\"fill\", \"url(#brush-mask-gradient-\" + gradientIndex+\")\")\n\t\t\t.attr(\"y\", this._options.height + 12)\n\t\t\t.attr(\"visibility\", \"hidden\");\t\t\t\n\n\t\treturn this._handleMaskEl;\n\t}\n\t\n\t/**\n\t * @private \n\t * Renders handle label element \n\t * @returns {SVGElement}  \n\t */\n\t_createDragLabelElement(){\n\t\tvar format = this._options.format;\n\t\tvar data = this._histogramData;\n\t\tvar height = this._options.height;\n\t\tthis._handleLabelEl = this._groupEl.append(\"text\")\n\t\t\t.attr(\"class\", style[\"drag-label\"])\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.text(() => {\n\t\t\t\treturn format(data.positionToValue(this._position));\n\t\t\t}).attr(\"y\", height + 22);\n\n\t\t\n\t\tthis._updateLabelPosition(this._position);\n\t\treturn this._handleLabelEl;\n\t}\n}\n\nexport { HistogramHandle };","import style from \"./Histogram.css\";\nimport {HistogramHandle} from \"./HistogramHandle\";\nimport { Observable } from \"./utils/Observable\";\nimport * as PositionUtils from \"./utils/PositionUtils\"\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Histogram renderer class\n * @param {Object} options\n */\nclass HistogramRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Histogram options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Bar data \n\t\t */\n\t\tthis._historyData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = d3.scaleBand().range([0, options.width]);\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = d3.scaleLinear().range([options.height, 0]);\n\n\t\t/**\n\t\t * @private\n\t\t * index of over selection  \n\t\t */\n\t\tthis._overSelectionIndex = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * true if handle is dragged\n\t\t */\n\t\tthis._draggingHandle = false;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous data for animation\n\t\t */\n\t\tthis._prevData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous selection for animation\n\t\t */\n\t\tthis._prevSelection = null;\n\n\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a category\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is changed\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\"\n\t\t]);\t\t\n    }\n\n\t/**\n\t * @public\n\t * Returns whether histogram has been rendered or not\n\t * @returns {boolean} true if histogram has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector){\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar margin = this._options.margin;\n\n\t\t// render SVG\n\t\tvar svg = this._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width + margin * 2)\n\t\t\t.attr(\"height\", height + margin * 2);\n\n\t\t// render group element\n\t\tvar g = this._groupEl = this._svgEl.append(\"g\")\n\t\t\t.classed(style.inactive, true)\n\t\t\t.attr(\"transform\",\n\t\t\t\"translate(\" + margin + \",\" + margin + \")\");\n\n\t\t// handle hover over svg element\n\t\tsvg.on(\"mouseover.hover\", ()=>{\n\t\t\tg.classed(style.active, true)\n\t\t\tg.classed(style.inactive, false)\n\t\t})\n\n\t\tsvg.on(\"mouseout.hover\", ()=>{\n\t\t\tg.classed(style.inactive, true)\n\t\t\tg.classed(style.active, false)\n\t\t})\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t} \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._groupEl.node().innerHTML = \"\";\n\t}\n\n\t/**\n\t * @private\n\t * Destroys selection controls \n\t */\n\t_destroyHandles(){\n\t\tthis._handles.forEach(handle=>handle.destroy());\n\t\tthis._handles = [];\n\t}\n\n\t/**\n\t * @private\n\t * Handles click on handle\n\t * @param {Number} handleIndex\n\t * @param {Number} handleValue \n\t */\n\t_onHandleClick(handleIndex, handleValue){\n\t\t// TODO: replace this by CAN API or options \n\t\tvar promptResult = window.prompt(\"value\", this._options.format(handleValue));\n\t\tif (promptResult == null){\n\t\t\treturn;\n\t\t}\n\n\t\t// must be within min max range\n\t\tvar minMax = this._histogramData.getMinMax();\n\t\tpromptResult = Math.min(minMax.max, promptResult);\n\t\tpromptResult = Math.max(minMax.min, promptResult);\n\n\t\tvar points = this._histogramSelection.getSelectionPoints();\n\t\tpoints[handleIndex] = promptResult;\n\t\tvar positions = points\n\t\t\t.map(value=>this._histogramData.valueToPosition(value))\n\t\t\t.sort((p1,p2)=>p1-p2);\n\t\t\n\t\tthis._updateSelectionPositions(positions);\n\t\tthis._updateSelection();\n\n\t\t// TODO: update handles without destroying them\n\t\tthis._destroyHandles();\n\t\tthis._renderHandles();\n\t}\n\n\t/**\n\t * @private\n\t * Toggles selection\n\t * @param {Number} selectionIndex \n\t */\n\t_toggleSelection(selectionIndex){\n\t\tvar selection = this._options.selection[selectionIndex];\n\t\tselection.disabled = !selection.disabled;\n\t\tvar enabled = !selection.disabled;\n\t\tthis._updateSelection();\n\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t}\t\n\n\t/**\n\t * @private\n\t * Handles click on chart\n\t */\n\t_onClick(){\n\t\tvar target = d3.select(d3.event.target);\n\t\tvar selectionIndex = target.attr(\"data-selection-index\");\n\t\tvar handleIndex = target.attr(\"data-handle-index\");\n\n\t\tif (selectionIndex != null){\n\t\t\tthis._toggleSelection(selectionIndex)\n\t\t} else if (handleIndex != null){\n\t\t\tthis._onHandleClick(handleIndex, target.attr(\"data-handle-value\"));\n\t\t}\n\t}\n\t/**\n\t * @private\n\t * Handles handle click \n\t */\n\t_handleClick(){\n\t\tthis._groupEl.on(\"click\", this._onClick.bind(this));\n\t}\n\n\t/**\n\t * @private\n\t * Refreshes histogram data \n\t * @param {HistogramData}\n\t * @param {HistogramSelection}\n\t */\n\trefresh(histogramData, histogramSelection){\n\t\tthis._histogramData = histogramData;\n\t\tthis._histogramSelection = histogramSelection;\n\t\t\n\t\tthis._clear();\n\n\t\tthis._xAxis.domain(histogramData.getData().map(function (d) {return d.value; }));\n\t\tthis._yAxis.domain([0, d3.max(histogramData.getData(), function (d) { return d.volume; })]);\n\n\t\tthis._renderXAxis();\t\t\n\t\tthis._renderDataBars();\n\t\tthis._renderSelection();\n\t\tthis._updateSelection();\n\n\t\tthis._handleHoverState();\n\t\tif (this._options.enableSelectionToggle){\n\t\t\tthis._handleClick();\n\t\t}\n\t\t\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * Updates selection controls on hover\n\t * @param {Number} selectionIndex \n\t */\n\t_updateSelectionControlsHoverState(selectionIndex){\n\t\t// get all handles sorted by X position\n\t\tvar handles = this._handles.slice().sort((h1,h2)=>{\n\t\t\treturn h1.getXPosition() - h2.getXPosition();\n\t\t});\n\n\t\t// unset hover state on all handles\n\t\thandles.forEach(handle=>handle.unsetHoverState());\n\n\t\t// selection is active, active both handles for active selection\n\t\tif (selectionIndex != null){\n\t\t\tvar handle1 = handles[selectionIndex];\n\t\t\tvar handle2 = handles[selectionIndex+1];\n\n\t\t\thandle1.setHoverState();\n\t\t\thandle2.setHoverState();\n\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.maskPadding, this._options.width);\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\n\t\t}\n\t}\t\n\n\t/**\n\t * \n\t * @private \n\t * Handles what happens when mouse is over selection\n\t * @param {String} type \n\t * @param {Number} i \n\t * @param {HTMLElement[]} array \n\t */\n\t_onSelectionMouseOver(d, i, nodes){\n\t\t// prevent selection when dragging handles\n\t\tif (this._draggingHandle){\n\t\t\treturn;\n\t\t}\n\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0.00)\")\n\t\tvar selectionIndex = parseInt(d3.select(d3.event.target).attr(\"data-selection-index\"));\n\t\tif (this._overSelectionIndex != selectionIndex){\n\t\t\tthis._overSelectionIndex = selectionIndex;\n\t\t\tthis._updateSelection();\n\t\t\tthis._updateSelectionControlsHoverState(selectionIndex);\n\t\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @private \n\t * Handles what happens when mouse is out of selection\n\t * @param {String} type \n\t * @param {Number} i \n\t * @param {HTMLElement[]} array \n\t */\n\t_onSelectionMouseOut(d, i, nodes){\n\t\t// prevent selection when dragging handles\n\t\tif (this._draggingHandle){\n\t\t\treturn;\n\t\t}\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0)\")\n\t\tthis._overSelectionIndex = null;\n\t\tthis._updateSelectionControlsHoverState(null);\n\t\tthis._updateSelection();\n\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\n\t}\n\n\t/**\n\t * @private \n\t * Handles hover state\n\t */\n\t_handleHoverState(){\n\t\tvar g = this._groupEl;\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseout\", this._onSelectionMouseOut.bind(this));\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseover\", this._onSelectionMouseOver.bind(this));\n\t}\t\n\n\t/**\n\t * @private \n\t * Handles when handle is dragged\n\t */\n\t_onHandleDrag(){\n\t\tvar positions = this._handles.map(handle=>handle.getXPosition()).sort((p1, p2)=>{\n\t\t\treturn p1-p2;\n\t\t});\n\n\t\tthis._updateSelectionPositions(positions);\n\t}\n\n\t/**\n\t* @private\n\t* Updates selection with new positions\n\t* @param {Array} positions\n\t*/\n\t_updateSelectionPositions(positions){\n\t\tvar selection = this._histogramSelection.getSelection();\n\t\tpositions.forEach((p, index)=>{\n\t\t\tif (index>selection.length-1){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tselection[index].from = this._histogramData.positionToValue(p);\n\t\t\tselection[index].to = this._histogramData.positionToValue(positions[index+1]);\n\t\t});\n\n\t\tthis._updateSelection();\n\t}\t\n\n\t/**\n\t* @private\n\t* Renders selection bars\n\t*/\n\t_renderSelection() {\n\t\tvar height = this._options.height;\n\t\tvar selection = this._histogramSelection.getSelection();\n\n\t\t// hover selection bars\n\t\tthis._groupEl.selectAll(\".\"+style.selectionbar)\n\t\t\t.data(selection)\n\t\t\t.enter().append(\"rect\")\n\t\t\t.attr(\"class\", style.selectionbar)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\n\t\t\t.attr(\"height\", height);      \n\n\n\t\tthis._renderHandles();\n\t}\n\n\t/**\n\t* @private\n\t* Renders selection controls\n\t*/\n\t_renderHandles(){\n\t\t// render selection controls\n\t\tthis._handles = this._histogramSelection.getSelectionPoints().map((value, index)=>{\n\t\t\tvar handle = new HistogramHandle(this._groupEl, value, index, this._histogramData, this._options);\n\t\t\thandle.on(\"drag\", ()=>{\n\t\t\t\tthis._onHandleDrag();\n\t\t\t}, this);\n\n\t\t\tvar startSelectionSnapshot;\n\n\t\t\t// disable other handles when draggin starts\n\t\t\thandle.on(\"startDrag\", ()=>{\n\t\t\t\tstartSelectionSnapshot = JSON.stringify(this._options.selection);\n\t\t\t\t\n\t\t\t\tthis._draggingHandle = true;\n\t\t\t\tthis._handles.forEach(handle=>handle.disable());\n\t\t\t\thandle.enable();\n\t\t\t}, this);\n\n\t\t\t// enable all handles when draggin starts\n\t\t\thandle.on(\"endDrag\", ()=>{\n\t\t\t\tthis._draggingHandle = false;\n\t\t\t\tthis._handles.forEach(handle=>handle.enable());\n\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._options.selection);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\treturn handle;\n\t\t});\n\t}\n\n\t/**\n\t * @private\n\t * Renders data bars\n\t*/\n\t_renderDataBars() { \n\t\tvar data = this._histogramData.getData();\n\t\tvar prevData = this._prevData;\n\t\tvar height = this._options.height;\n\n\t\tvar x = this._xAxis;\n\t\tvar y = this._yAxis;\n\n\t\t// animate from previous data if available\n\t\tif (prevData){\n\t\t\tx.domain(prevData.map(function (d) {return d.value; }));\n\t\t\ty.domain([0, d3.max(prevData, function (d) { return d.volume; })]);\n\n\t\t\tthis._groupEl.selectAll(\".\"+style.bar)\n\t\t\t\t.data(prevData)\n\t\t\t\t.enter().append(\"rect\")\n\t\t\t\t.attr(\"class\", style.bar)\n\t\t\t\t.attr(\"x\", function (d) { return x(d.value); })\n\t\t\t\t.attr(\"width\", x.bandwidth())\n\t\t\t\t.attr(\"y\", function (d) { return Math.round(y(d.volume)); })\n\t\t\t\t.attr(\"height\", function (d) { return Math.round(height - y(d.volume)); })\n\n\t\t\tx.domain(data.map(function (d) {return d.value; }));\n\t\t\ty.domain([0, d3.max(data, function (d) { return d.volume; })]);\t\t\t\t\n\n\t\t\tthis._groupEl.selectAll(\".\"+style.bar)\n\t\t\t\t.data(data)\n\t\t\t\t.transition()\n\t\t\t\t.duration(500)\n\t\t\t\t.attr(\"y\", function (d) { return Math.round(y(d.volume)); })\n\t\t\t\t.attr(\"height\", function (d) { return Math.round(height - y(d.volume)); })\n\t\t} else {\n\t\t\t// append the rectangles for the bar chart\n\t\t\tthis._groupEl.selectAll(\".\"+style.bar)\n\t\t\t\t.data(data)\n\t\t\t\t.enter().append(\"rect\")\n\t\t\t\t.attr(\"class\", style.bar)\n\t\t\t\t.attr(\"x\", function (d) { return x(d.value); })\n\t\t\t\t.attr(\"width\", x.bandwidth())\n\t\t\t\t.attr(\"y\", function (d) { return Math.round(y(d.volume)); })\n\t\t\t\t.attr(\"height\", function (d) { return Math.round(height - y(d.volume)); })\n\t\t}\n\n\t\tthis._prevData = data.slice();\n\t}\n\n\t/**\n\t* @private\n\t* Returns bar color based on X position\n\n\t* @param {Number} barX\n\t* @param {Array} selection\n\t* @returns {Number} bar category index\n\t*/\n\t_getBarSelectionIndex(barX, selection){\n\t\tfor (var i=0;i<selection.length;i++){\n\t\t\tvar s = selection[i];\n\t\t\tvar within = barX >= this._histogramData.valueToPosition(s.from) && barX < this._histogramData.valueToPosition(s.to);\n\t\t\tif (within) return i;\n\t\t}\n\n\t\treturn null;\n\t}\t\n\n\t/**\n\t* @private\n\t* Updates selection\n\t*/\n\t_updateSelection(){\n\t\tvar selection = this._histogramSelection.getSelection();\n\t\tvar inactiveBarColor = this._options.inactiveBarColor;\n\t\tvar overSelectionColor = this._options.overSelectionColor;\n\n\t\t// handle bar colors\n\t\tthis._groupEl.selectAll(\".\"+style.bar).attr(\"fill\", (d)=> {\n\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\n\t\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection);\n\t\t\tif (barSelectionIndex == null){\n\t\t\t\treturn inactiveBarColor;\n\t\t\t} else if (selection[barSelectionIndex].disabled){\n\t\t\t\treturn inactiveBarColor;\n\t\t\t} if (this._overSelectionIndex == barSelectionIndex){\n\t\t\t\treturn overSelectionColor;\n\t\t\t} else {\n\t\t\t\treturn selection[barSelectionIndex].color || this._options.selectionColor;                    \n\t\t\t}\n\t\t});\n\n\t\t// space filling rectangles\n\t\tthis._groupEl.selectAll(\".\"+style.selectionbar)\n\t\t\t.data(selection)\n\t\t\t.attr(\"data-selection-index\", function(d,i){\n\t\t\t\treturn i;\n\t\t\t})\n\t\t\t.attr(\"x\", (d) => { \n\t\t\t\treturn this._histogramData.valueToPosition(d.from);\n\t\t\t})\n\t\t\t.attr(\"width\", (d) => {\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\n\t\t\t})\n\n\t\tthis._prevSelection = selection;\n\t}\n\n\t/**\n\t* @private\n\t* Renders X axis \n\t*/        \n\t_renderXAxis(){\n\t\tvar minMax = this._histogramData.getMinMax();\n\t\tvar format = this._options.format;\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\n\t\t// create bottom axis\n\t\tvar axis = d3.axisBottom(this._xAxis)\n\t\t\t.tickValues([minMax.min, minMax.max])\n\t\t\t.tickSize(0)\n\t\t\t.tickFormat(format)\n\t\t\t.tickPadding(15);\n\n\t\tvar axisGroup = this._groupEl.append(\"g\")\n\t\t\t.attr(\"transform\", \"translate(0,\" + height + \")\")\n\t\t\t.classed(style[\"x-axis\"], true)\n\t\t\t.call(axis);\n\n\t\taxisGroup.selectAll(\".tick\").attr(\"transform\", function(d, i){\n\t\t\treturn [\"translate(0,0)\", \"translate(\"+width+\",0)\"][i];\n\t\t})\n\n\t\taxisGroup.selectAll(\".tick>text\").attr(\"x\", 0);\n\n\t\taxisGroup.selectAll(\".tick\").attr(\"text-anchor\", function(d, i){\n\t\t\treturn [\"start\", \"end\"][i];\n\t\t})\n\t}\t\n\t\n}\n\nexport {HistogramRenderer};"],"names":["getDefaultSelection","histogramData","minMax","getMinMax","colors","Defaults","start","min","step","max","length","map","from","to","color","getHandlePositionOffsets","handle1","handle2","maskPadding","width","label1Box","getLabelBox","label2Box","conflictDiff","x","posDiff1","posDiff2","xMax","getOptionValue","optionValue","defaultOptionValue","Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","args","i","apply","DEFAULT_COLORS","HistogramData","data","options","_histogramData","_loadHistogramData","_minMax","_calculateMinMax","_options","d3","d","value","num","numParts","toString","split","position","getValueRatio","valueRatio","Math","round","numOfBarsPerBucket","forEach","bucket","content","frequency","HistogramSelection","selection","_selection","slice","result","getSelection","s","index","gradientIndex","HistogramHandle","groupEl","_observable","_handleEl","_handleLineEl","_handleCircleEl","_handleMaskEl","_handleMaskGradientEl","_handleLabelEl","_isOver","_groupEl","_index","_value","_position","valueToPosition","_elements","_renderHandle","element","remove","_createHandleElement","_createHandleLineElement","_createHandleCircleElement","_createDragMaskElement","_createMaskGradientElement","_createDragLabelElement","_handleHoverState","_handleDrag","eventName","on","parseInt","attr","node","getBBox","offset","setHoverState","unsetHoverState","classed","style","fire","height","xpos","format","positionToValue","text","_this2","_updateLabelPosition","call","_onDrag","bind","_onStartDrag","_onEndDrag","label","textLength","getComputedTextLength","maskWidth","xPosition","append","selectAll","enter","_this3","HistogramRenderer","_containerEl","_svgEl","_historyData","_xAxis","range","_yAxis","_overSelectionIndex","_rendered","_draggingHandle","_prevData","_prevSelection","selector","ct","margin","svg","g","inactive","active","innerHTML","_handles","handle","destroy","handleIndex","handleValue","promptResult","window","prompt","points","_histogramSelection","getSelectionPoints","positions","_this","sort","p1","p2","_updateSelectionPositions","_updateSelection","_destroyHandles","_renderHandles","selectionIndex","disabled","enabled","target","_toggleSelection","_onHandleClick","_onClick","histogramSelection","_clear","domain","getData","volume","_renderXAxis","_renderDataBars","_renderSelection","enableSelectionToggle","_handleClick","handles","h1","h2","getXPosition","labelOffsets","PositionUtils","setLabelOffset","nodes","_updateSelectionControlsHoverState","selectionbar","_onSelectionMouseOut","_onSelectionMouseOver","p","_onHandleDrag","startSelectionSnapshot","JSON","stringify","disable","enable","prevData","y","bar","bandwidth","transition","duration","barX","inactiveBarColor","overSelectionColor","_this4","barSelectionIndex","_getBarSelectionIndex","selectionColor","axis","tickValues","tickSize","tickFormat","tickPadding","axisGroup","_histogramRenderer","render","isRendered","SelectionUtils","getPrecision","refresh"],"mappings":"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"}