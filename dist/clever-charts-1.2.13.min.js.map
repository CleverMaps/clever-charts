{"version":3,"file":"clever-charts-1.2.13.min.js","sources":["../src/utils/Observable.js","../src/doughnut/DoughnutRenderer.js","../src/doughnut/Doughnut.js","../src/doughnut/DoughnutDefaults.js","../src/histogram/HistogramDefaults.js","../src/histogram/HistogramData.js","../src/histogram/selection/HistogramHandle.js","../src/histogram/utils/PositionUtils.js","../src/histogram/selection/HistogramSelectionRenderer.js","../src/histogram/HistogramRenderer.js","../src/histogram/selection/HistogramSelection.js","../src/histogram/selection/MultipleHistogramSelectionImpl.js","../src/histogram/selection/DefaultHistogramSelectionImpl.js","../src/histogram/selection/FilterHistogramSelectionImpl.js","../src/histogram/selection/InvertedFilterHistogramSelectionImpl.js","../src/histogram/selection/HistogramSelectionFactory.js","../src/histogram/Histogram.js","../src/line/LineDefaults.js","../src/line/LineData.js","../src/line/TooltipRenderer.js","../src/line/LineRenderer.js","../src/line/Line.js","../src/barchart/defaults/BarchartDefaults.js","../src/barchart/data/BarchartData.js","../src/barchart/data/DetailsData.js","../src/barchart/data/TooltipData.js","../src/barchart/data/BarData.js","../src/barchart/data/StripeData.js","../src/barchart/JsonDataConverter.js","../src/barchart/components/Component.js","../src/utils/CleverChartsUtils.js","../src/barchart/components/Tooltip.js","../src/barchart/components/OnlyTool.js","../src/barchart/components/Details.js","../src/barchart/components/Stripe.js","../src/barchart/components/Bar.js","../src/barchart/components/Barchart.js","../src/linechart/Component.js","../src/linechart/LinechartDefaults.js","../src/linechart/LinechartLine.js","../src/linechart/LinechartMask.js","../src/linechart/LinechartLabel.js","../src/linechart/LinechartTooltip.js","../src/linechart/LinechartAnnotation.js","../src/CleverCharts.js","../src/linechart/Linechart.js"],"sourcesContent":["/**\n * @class\n * Observable class, handles binding and firing events\n * @param {Array} events list of events for this observable\n */\nexport default class Observable {\n    /**\n     * @param {Array} events\n     */\n    constructor(events = []) {\n        // create a map of handlers where each event has an array of bound handlers\n        this._handlers = events.reduce((acc, cur)=>{\n            acc[cur] = [];\n            return acc;\n        },{});\n    }\n\n\t/**\n\t * @public\n\t * Bind event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t */\n    on(event, handler) {\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tthis._handlers[event].push(handler);\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Unbind event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler, optional\n\t */\n    off(event, handler) {\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tif (!handler) {\n\t\t\tthis._handlers[event] = [];\n\t\t} else {\n\t\t\tvar handlers = this._handlers[event];\n\t\t\tvar index = handlers.indexOf(handler);\n\t\t\tif (index != -1){\n\t\t\t\thandlers.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Add new event to be handled\n\t * @param {String} event\n\t */\n\tadd(event) {\n\t\tif (!(event in this._handlers)) {\n\t\t\tthis._handlers[event] = [];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Fire widget event\n\t * @param {String} event event name\n\t * @param {*} ...args event arguments\n\t */\n\tfire(event, ...args) {\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tvar handlers = this._handlers[event];\n\t\tfor (var i = 0; i < handlers.length; i++) {\n\t\t\thandlers[i].apply(this, args);\n\t\t}\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Destorys this observable, removes events and so on \n\t */\n\tdestroy() {\n\t\tthis._handlers = null;\n\t\treturn this;\n    }\n\t\n}","import style from \"./Doughnut.css\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\nconst tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n\n/**\n * @class\n * Doughnut renderer class\n * @param {Object} options\n */\nexport default class DoughnutRenderer {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Doughnut options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Doughnut has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over\n\t\t\t */\n\t\t\t\"mouseOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out\n\t\t\t */\n\t\t\t\"mouseOut\"\n\t\t]);\t\t\n\t}\n\n\t/**\n\t * @public\n\t * Returns whether Doughnut has been rendered or not\n\t * @returns {boolean} true if Doughnut has been rendered\n\t */\n\tisRendered() {\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Doughnut} returns this widget instance\n\t */\n\trender(selector) {\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._containerEl.node().offsetWidth;\n\t\tvar height = this._containerEl.node().offsetHeight;\n\t\tvar value = this._value = this._options.value;\n\t\tvar angle = this._angle = value / 100 * tau;\n\t\tvar innerRadius = this._innerRadius = this._options.innerRadius;\n\t\tvar outerRadius = this._outerRadius = this._options.outerRadius;\n\n\t\t// arc settings\n\t\tvar arc = this._arc = d3.arc()\n\t\t\t.innerRadius(innerRadius)\n\t\t\t.outerRadius(outerRadius)\n\t\t\t.startAngle(0);\n\n\t\t// render SVG\n\t\tthis._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"class\", style[\"svg\"]);\n\n\t\t// render group\n\t\tvar g = this._groupEl = this._svgEl\n\t\t\t.append(\"g\")\n\t\t\t.attr(\"class\", style[\"doughnut\"])\n\t\t\t.attr(\"transform\", \"translate(\" + width / 2 + \", \" + height / 2 + \")\");\n\n\t\t// render inactive doughtnut\t\n\t\tthis._inactiveArc = g.append(\"path\")\n\t\t\t.datum({ endAngle: tau })\n\t\t\t.attr(\"fill\", this._options.inactiveColor)\n\t\t\t.attr(\"d\", arc);\n\n\t\t// render active doughtnut\t\n\t\tthis._activeArc = g.append(\"path\")\n\t\t\t.datum({ endAngle: angle })\n\t\t\t.attr(\"fill\", this._options.activeColor)\n\t\t\t.attr(\"d\", arc);\n\n\t\t// render background\t\n\t\tthis._backgroundArc = g.append(\"circle\")\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\n\t\t\t.attr(\"r\", innerRadius)\n\t\t\t.attr(\"cx\", 0)\n\t\t\t.attr(\"cy\", 0)\n\n\t\t// render background\t\n\t\tthis._backgroundArc = g.append(\"circle\")\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\n\t\t\t.attr(\"r\", innerRadius)\n\t\t\t.attr(\"cx\", 0)\n\t\t\t.attr(\"cy\", 0)\n\n\t\t// hover element, this needs to be rendered in order to have stable and animation\n\t\t// independent hover \n\t\tthis._hoverEl = g.append(\"rect\")\n\t\t\t.attr(\"fill\", \"transparent\")\n\t\t\t.attr(\"x\", -width/2)\n\t\t\t.attr(\"y\", -height/2)\n\t\t\t.attr(\"width\",width)\n\t\t\t.attr(\"height\",height)\n\n\t\tg.on(\"mouseover\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOver\");\n\t\t})\n\n\t\tg.on(\"mouseout\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOut\");\n\t\t})\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t\t * Bind widget event\n\t\t * @param {String} event event name\n\t\t * @param {Function} handler event handler\n\t\t * @returns {Doughnut} returns this widget instance\n\t\t */\n\t\ton(eventName, handler) {\n\t\t\tthis._observable.on(eventName, handler);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Unbind widget event\n\t\t * @param {String} event event name\n\t\t * @param {Function} [handler] event handler\n\t\t * @returns {Doughnut} returns this widget instance\n\t\t */\n\t\toff(eventName, handler) {\n\t\t\tthis._observable.off(eventName, handler);\n\t\t\treturn this;\n\t\t}\t\n\t\n\n\t/**\n\t * @public\n\t * @param {opts} new options\n\t * Updates doughnut with new options\n\t */\n\tupdate(opts) {\n\t\tvar options = opts || {};\n\n\t\tif (typeof options.value == \"undefined\"){\n\t\t\toptions.value = this._value;\n\t\t} else {\n\t\t\tthis._value = options.value;\n\t\t}\n\n\t\t// first tween foreground, note that this is also changing this._arc radiuses \n\t\tvar activeArcTransition = this._activeArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"d\", this._arcTween(options, true))\n\n\t\t// se we only get new path on background as it uses radiuses saved in the previous call\n\t\tthis._inactiveArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"d\", () => {\n\t\t\t\treturn () => {\n\t\t\t\t\treturn this._arc({ endAngle: tau });\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis._backgroundArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"r\", () => {\n\t\t\t\treturn () => {\n\t\t\t\t\treturn this._innerRadius;\n\t\t\t\t}\n\t\t\t});\n\n\t\tif (options.activeColor && options.activeColor !== this._options.activeColor){\n\t\t\tthis._options.activeColor = options.activeColor;\n\t\t\tactiveArcTransition.attr(\"fill\", options.activeColor)\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * @param {options} new options\n\t * returns tween function for arc \n\t */\n\t_arcTween(options) {\n\t\tvar angle = options.value / 100 * tau;\n\t\t// change angle if new value is provided \n\t\tif (typeof options.value != \"undefined\") {\n\t\t\tangle = options.value / 100 * tau;\n\t\t}\n\n\t\t// handle new radiuses\n\t\tvar innerRadius = this._innerRadius;\n\t\tvar outerRadius = this._outerRadius;\n\n\t\tif (typeof options.innerRadius != \"undefined\") {\n\t\t\tinnerRadius = options.innerRadius;\n\t\t}\n\n\t\tif (typeof options.outerRadius != \"undefined\") {\n\t\t\touterRadius = options.outerRadius;\n\t\t}\n\n\t\t// get interpolation fns between new radiuses and old ones\n\t\t// for simlicity, do this even if value doesn't change as we\n\t\t// likely generate new path anyway\n\t\tvar interpolateOuterRadius = d3.interpolate(this._outerRadius, outerRadius);\n\t\tvar interpolateInnerRadius = d3.interpolate(this._innerRadius, innerRadius);\n\n\t\treturn (d) => {\n\t\t\t// get angle interpolation fn \n\t\t\tvar interpolateAngle = d3.interpolate(d.endAngle, angle);\n\n\t\t\treturn (t) => {\n\t\t\t\t// on each cycle, set new radiuses and endAngle\n\t\t\t\tthis._arc.outerRadius(this._outerRadius = interpolateOuterRadius(t));\n\t\t\t\tthis._arc.innerRadius(this._innerRadius = interpolateInnerRadius(t));\n\n\t\t\t\td.endAngle = this._angle = interpolateAngle(t);\n\t\t\t\treturn this._arc(d);\n\t\t\t};\n\t\t};\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Doughnut UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered) {\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n\t}\n\n}","import Observable from \"../utils/Observable\";\nimport * as Defaults from \"./DoughnutDefaults\";\nimport DoughnutRenderer from \"./DoughnutRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main doughnut class\n * @param {Object} options\n */\nclass Doughnut {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.outerRadius = getOptionValue(options.outerRadius, Defaults.OUTER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.innerRadius = getOptionValue(options.innerRadius, Defaults.INNER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Active color\n\t\t */\n\t\tthis._options.activeColor = getOptionValue(options.activeColor, Defaults.ACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.inactiveColor = getOptionValue(options.inactiveColor, Defaults.INACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.backgroundColor = getOptionValue(options.backgroundColor, Defaults.BACKGROUND_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Value\n\t\t */\n\t\tthis._options.value = getOptionValue(options.value, Defaults.VALUE);\n\n\t\t/**\n\t\t * @public\n\t\t * Animation duration\n\t\t */\n\t\tthis._options.animationDuration = getOptionValue(options.animationDuration, Defaults.ANIMATION_DURATION);\n\n\t\t/**\n\t\t * @public\n\t\t * Render to container\n\t\t */\n\t\tthis._options.renderTo = getOptionValue(options.renderTo, null);\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over\n\t\t\t */\n\t\t\t\"mouseOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out\n\t\t\t */\n\t\t\t\"mouseOut\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * DoughnutRenderer\n\t\t */\n\t\tthis._doughnutRenderer = new DoughnutRenderer(this._options);\n\n\t\tthis._doughnutRenderer.on(\"mouseOver\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOver\")\n\t\t});\n\n\t\tthis._doughnutRenderer.on(\"mouseOut\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOut\")\n\t\t});\n\n\t\tif (options.renderTo){\n\t\t\tthis.render(options.renderTo);\n\t\t}\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._doughnutRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Doughnut} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._doughnutRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Object} options\n\t * @returns {Doughnut} returns this widget instance \n\t */\n\tupdate(options) {\n\t\tif (!this._doughnutRenderer.isRendered()) {\n\t\t\tthrow \"Can't call update() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tthis._doughnutRenderer.update(options);\n\n\t\treturn this;\n\t}\n}\n\nexport default Doughnut;\n","/**\n * @public\n * Default outer radius\n */\nexport const OUTER_RADIUS = 10;\n\n/**\n * @public\n * Default inner radius\n */\nexport const INNER_RADIUS = 10;\n\n/**\n * @public\n * Default value\n */\nexport const VALUE = 0;\n\n/**\n * @public\n * Default active color\n */\nexport const ACTIVE_COLOR = \"#49ace2\";\n\n/**\n * @public\n * Default inactive color\n */\nexport const INACTIVE_COLOR = \"#F0F0F0\";\n\n/**\n * @public\n * Default background color\n */\nexport const BACKGROUND_COLOR = \"transparent\";\n\n/**\n * @public\n * Default animation duration\n */\nexport const ANIMATION_DURATION = 250;","/**\n * @public\n * Default widget width\n */\nexport const WIDTH = 360;\n\n/**\n * @public\n * Default widget height\n */\nexport const HEIGHT = 150;\n\n/**\n * @public\n * Default widget margin\n */\nexport const MARGIN = {\n    top:0,\n    left:5,\n    right:5,\n    bottom:15\n};\n\n/**\n * Default label margin from x axis\n */\nexport const LABEL_MARGIN = 7;\n\n/**\n * @public\n * Default inactive bar color\n */\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\n\n/**\n * @public\n * Default inactive bar opacity\n */\nexport const INACTIVE_BAR_OPACITY = 1;\n\n/**\n * @public\n * Default over bar color\n */\nexport const OVER_SELECTION_COLOR = \"#ffea00\";\n\n/**\n * @public\n * Default over selection opacity\n */\nexport const OVER_SELECTION_OPACITY = 1;\n\n/**\n * @public\n * Default over bar color\n */\nexport const SELECTION_COLOR = \"#49ace2\";\n\n/**\n * @public\n * Enable selection toggle\n */\nexport const ENABLE_SELECTION_TOGGLE = true;\n\n/**\n * @public\n * Default font size\n */\nexport const FONT_SIZE = 11;\n\n/**\n * @public\n * Default colors \n */\nexport const DEFAULT_COLORS = [\"#e6f3fb\", \"#cbe7f6\", \"#b1dbf2\", \"#98cfee\", \"#7ec4ea\"];\n\n/**\n * @public\n * Default width of active handle area\n */\nexport const ACTIVE_HANDLE_AREA_WIDTH = 4;","import * as d3 from \"d3\";\n\n/**\n * @class\n * HistogramData representing data for the histogram view\n */\nexport default class HistogramData {\n\t/**\n\t * @param {data} data\n\t * @param {Object} options\n\t */\n\tconstructor(data, options) {\n\t\tthis._histogramData = this._loadHistogramData(data, options.width);\n\t\tthis._minMax = this._calculateMinMax(this._histogramData);\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns histogram data\n\t * @returns {Array} histogram data\n\t */\n\tgetData() {\n\t\treturn this._histogramData;\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given histogramData\n\t* @param {Array} histogramData\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(histogramData) {\n\t\tvar min = d3.min(histogramData, function (d) { return d.value; });\n\t\tvar max = d3.max(histogramData, function (d) { return d.value; });\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t* Returns value ratio between bars and data\n\t* @return {Number} value ratio \n\t*/\n\tgetValueRatio() {\n\t\tvar range = this._minMax.max - this._minMax.min;\n\t\treturn range / this._options.width;\n\t}\n\n\t/**\n\t * @public\n\t * Returns data value from given position \n\t * @param {Number} position\n\t */\n\tpositionToValue(position) {\n\t\tvar minMax = this.getMinMax();\n\t\t// return min if position is 0\n\t\tif (position === 0){\n\t\t\treturn minMax.min;\n\t\t}\n\n\t\t// return max if position is at the end\n\t\tif (position === this._options.width){\n\t\t\treturn minMax.max;\n\t\t}\n\n\t\t// else calculate based on value ratio and min/max\n\t\tvar valueRatio = this.getValueRatio();\n\t\treturn position * valueRatio + minMax.min;\n\t}\n\n\t/**\n\t * @public\n\t * Returns position from given data value \n\t * @param {Number} value\n\t */\n\tvalueToPosition(value) {\n\t\tvar valueRatio = this.getValueRatio();\n\t\tvar minMax = this.getMinMax();\n\t\tvar constrainedValue = Math.min(Math.max(value, minMax.min), minMax.max);\n\t\t\n\t\treturn Math.round(constrainedValue / valueRatio - minMax.min / valueRatio);\n\t}\n\n\t/** \n\t* @private\n\t* @param {Array} buckets\n\t* @param {int} numOfBarsPerBucket - number of bars per column\\\n\t* @returns {Array} data from given buckets \n\t*/\n\t_loadHistogramData(data, width) {\n\t\tvar histogramData = [];\n\t\t// calculate number of bars per bucket excluding last pixel for max value\n\t\tvar numOfBarsPerBucket = (width-1) / data.length;\n\n\t\tdata.forEach((bucket, i) => {\n\t\t\tvar step = (bucket.max - bucket.min) / numOfBarsPerBucket;\n\t\t\t// support array as well as single values\n\t\t\tconst volume = Array.isArray(bucket.volume)?bucket.volume:[bucket.volume];\n\n\t\t\td3.range(bucket.min, bucket.max, step).forEach((value) => {\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tvolume: volume\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// adding max value pixel as each non-last bucket ends one pixel before next bucket starts\n\t\t\tif (i == data.length-1){\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: bucket.max,\n\t\t\t\t\tvolume: volume\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn histogramData;\n\t}\n}","import * as d3 from \"d3\";\nimport style from \"../Histogram.css\";\nimport * as Defaults from \"../HistogramDefaults\";\nimport Observable from \"../../utils/Observable\";\n\n/**\n * Gradient index shared for all instances\n */\nvar gradientIndex = 0;\n\n/**\n * @class\n * HistogramHandle representing control handle for histogram\n */\nexport default class HistogramHandle {\n\t/**\n\t * @param {D3Selection} groupEl\n\t * @param {Number} value\n\t * @param {Number} index\n\t * @param {HistoryData} histogramData\n\t * @param {Object} options\n\t */\n\tconstructor(groupEl, value, index, histogramData, options) {\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"drag\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when drag on handle starts\n\t\t\t * @param {HistogramHandle} handle\n\t\t\t */\n\t\t\t\"startDrag\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when drag on handle ends\n\t\t\t * @param {HistogramHandle} handle\n\t\t\t */\n\t\t\t\"endDrag\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * handle element\n\t\t */\n\t\tthis._handleEl = null;\n\t\t\n\t\t/**\n\t\t * @private\n\t\t * handle line element\n\t\t */\n\t\tthis._handleLineEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle circle element\n\t\t */\n\t\tthis._handleCircleEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle mask element\n\t\t */\n\t\tthis._handleMaskEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle mask gradient element\n\t\t */\n\t\tthis._handleMaskGradientEl = null;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * handle label element\n\t\t */\n\t\tthis._handleLabelEl = null;\t\t\n\n\t\t/**\n\t\t * @private \n\t\t * True if handle is over\n\t\t */\n\t\tthis._isOver = false;\n\t\t\n\t\t/**\n\t\t * @private \n\t\t * Main group element\n\t\t */\t\t\n\t\tthis._groupEl = groupEl;\n\t\t/**\n\t\t * @private \n\t\t * handle index\n\t\t */\t\t\n\t\tthis._index = index;\n\t\t/**\n\t\t * @private \n\t\t * handle value\n\t\t */\t\t\n\t\tthis._value = value;\n\t\t/**\n\t\t * @private \n\t\t * initial handle value\n\t\t */\t\t\n\t\tthis._initialValue = new Number(value);\t\t\n\t\t/**\n\t\t * @private \n\t\t * handle position\n\t\t */\t\t\n\t\tthis._position = histogramData.valueToPosition(value);\n\t\t/**\n\t\t * @private \n\t\t * initial handle position\n\t\t */\t\t\n\t\tthis._initialPosition = new Number(this._position);\n\t\t/**\n\t\t * @private \n\t\t * bar options\n\t\t */\t\t\n\t\tthis._options = options;\n\t\t/**\n\t\t * @private \n\t\t * histogram data\n\t\t */\t\t\n\t\tthis._histogramData = histogramData;\n\t\t/**\n\t\t * @private \n\t\t * Cache for storing label size, enhances performance when animating\n\t\t */\t\t\n\t\tthis._labelSizeCache = {};\n\n\t\t/**\n\t\t * @private \n\t\t * elements\n\t\t */\t\t\n\t\tthis._elements = [];\t\t\n\t\t\n\t\tthis._renderHandle();\n\t}\n\n\t/**\n\t * @public\n\t * Destroys this handle\n\t */\n\tdestroy(){\n\t\tthis._elements.forEach(element=>element.remove());\n\t\tthis._elements = [];\n\t}\n\n\t/**\n\t * @private\n\t   * Renders drag handle\n\t   */\n\t_renderHandle() {\n\t\tthis._elements = [\n\t\t\tthis._createHandleElement(),\n\t\t\tthis._createHandleLineElement(),\n\t\t\tthis._createHandleCircleElement(),\n\t\t\tthis._createDragMaskElement(),\n\t\t\tthis._createMaskGradientElement(),\n\t\t\tthis._createDragLabelElement()\n\t\t];\n\n\t\tthis._handleHoverState();\n\t\tthis._handleDrag();\n\t}\t\n\n\thide(){\n\t\tthis._elements.forEach(element=>element.attr(\"visibility\", \"hidden\"));\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Returns X position of this handle\n\t * @returns {Number} X position handle\n\t */\n\tgetXPosition() {\n\t\treturn parseInt(this._handleEl.attr(\"x\"))+Defaults.ACTIVE_HANDLE_AREA_WIDTH/2;\n\t}\n\n\t/**\n\t * @public\n\t * Sets hover state\n\t */\n\tsetHoverState(){\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 3);\n\t\tthis._updateLabelPosition(this._position);\n\t}\n\t\n\t/**\n\t * @public \n\t * @returns {SVGRect} \n\t * Returns drag label box for this handle\n\t */\n\tgetLabelBox(){\n\t\treturn this._handleLabelEl.node().getBBox();\n\t}\n\n\t/**\n\t * @public \n\t * Shifts handle label by given offset so it can handle label position conflicts\n\t */\n\tsetLabelOffset(offset){\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\n\t\tthis._updateLabelPosition(this._position);\n\t}\n\n\t/**\n\t * @public \n\t * Sets handle position\n\t */\n\tsetHandleXPosition(position){\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\"+position+\", \"+this._options.height+\")\")\n\t\treturn this;\n\t}\n\n\tsetLabelText(text){\n\t\tthis._handleLabelEl.text(text);\n\t\treturn this;\n\t}\n\n\tshowLabel(){\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\n\t\treturn this;\n\t}\n\n\thideLabel(){\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\n\t\treturn this;\n\t}\t\n\n\tsetLabelPosition(position){\n\t\tthis.setLabelOffset(0);\n\t\tthis._updateLabelPosition(position);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Unsets hover state\n\t */\n\tunsetHoverState(){\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 1);\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(0, 0)\")\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(0, 0)\")\n\t}\n\n\t/**\n\t * @public\n\t * Enables this handle \n\t */\n\tenable(){\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"all\"));\n\t}\n\n\t/**\n\t * @public\n\t * Disables this handle \n\t */\n\tdisable(){\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"none\"));\n\t}\n\n\t/**\n\t * @private\n\t * Handle hover state\n\t */\n\t_handleHoverState(){\n\t\t// line hover effect\n\t\tthis._handleEl.on(\"mouseover\", () => {\n\t\t\tthis._isOver = true;\n\t\t\tthis.setHoverState();\n\t\t})\n\t\tthis._handleEl.on(\"mouseout\", () => {\n\t\t\tthis._isOver = false;\n\t\t\tthis.unsetHoverState();\n\t\t})\n\t}\n\n\t/**\n\t * @private\n\t * handles what happens when drag starts\n\t */\n\t_onStartDrag(){\n\t\tthis._groupEl.classed(style[\"dragging\"], true);\n\t\tthis._observable.fire(\"startDrag\", this);\n\t}\n\n\t/**\n\t * @private\n\t * handles what happens on drag\n\t */\n\t_onDrag(){\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar xpos = Math.round(Math.max(Math.min(d3.event.x, width), 0));\n\n\t\tthis._handleEl.attr(\"x\", xpos - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\n\t\tthis._handleLineEl.attr(\"x\", xpos - 2);\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\" + xpos + \",\" + height + \")\");\n\t\tthis._handleEl.attr(\"data-handle-value\", this._histogramData.positionToValue(xpos))\n\n\t\tthis.setHoverState();\n\n\t\tthis._position = xpos;\n\n\t\t// prevent recalculating value for the same position\n\t\tif (parseInt(this._position) !== parseInt(this._initialPosition)){\n\t\t\tthis._value = this._histogramData.positionToValue(xpos);\n\t\t} else {\n\t\t\tthis._value = this._initialValue;\n\t\t}\n\n\t\tthis._handleLabelEl.text(this._getLabelText())\n\n\t\tthis._updateLabelPosition(xpos);\n\t\tthis._observable.fire(\"drag\");\t\t\n\t}\n\n\t_getLabelText() {\n\t\treturn this._options.format(this._value);\n\t}\n\t/**\n\t * @private\n\t * handles what happens when drag ends\n\t */\n\t_onEndDrag(){\n\t\tthis._groupEl.classed(style[\"dragging\"], false);\n\t\tif (!this._isOver) {\n\t\t\tthis.unsetHoverState();\n\t\t}\n\n\t\tthis._observable.fire(\"endDrag\", this);\t\t\n\t}\n\n\t/**\n\t * @private\n\t * Handles handle drag \n\t */\n\t_handleDrag(){\n\t\tthis._handleEl.call(d3.drag()\n\t\t\t.on(\"drag\", this._onDrag.bind(this))\n\t\t\t.on(\"start\", this._onStartDrag.bind(this))\n\t\t\t.on(\"end\", this._onEndDrag.bind(this)));\n\t}\n\t/**\n\t * @private\n\t * Return computed or stored label length\n\t * @param {SVGElement}\n\t * @param {Number} length \n\t */\n\t_getComputedLabelTextLength(label){\n\t\tvar content = label.innerHTML;\n\t\tthis._labelSizeCache[content] = this._labelSizeCache[content] || label.getComputedTextLength();\n\t\treturn this._labelSizeCache[content];\n\t}\n\n\t/**\n\t * @private\n\t * Updates label position\n\t * @param {Number} position \n\t */\n\t_updateLabelPosition(position) {\n\t\tvar label = this._handleLabelEl.node();\n\t\tvar maskPadding = this._options.fontSize;\t\t\n\n\t\t// we need to calculate text length so we can create mask and center text\n\t\tvar textLength = this._getComputedLabelTextLength(label);\n\t\tvar maskWidth = textLength + maskPadding * 2;\n\t\tvar xPosition = position - textLength / 2;\n\n\t\t// handle when dragging towards left side\n\t\tif (xPosition < 0) {\n\t\t\txPosition = 0;\n\t\t}\n\n\t\t// handle when dragging towards right side\n\t\tif (xPosition + textLength > this._options.width) {\n\t\t\txPosition = this._options.width  - textLength;\n\t\t\tthis._handleLabelEl.attr(\"x\", this._options.width);\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"end\");\n\t\t} else {\n\t\t\tthis._handleLabelEl.attr(\"x\", xPosition);\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"start\");\n\t\t}\n\n\t\t// position mask\n\t\tthis._handleMaskEl.attr(\"x\", () => {\n\t\t\treturn parseInt(xPosition) - maskPadding;\n\t\t});\n\n\t\tthis._handleMaskGradientEl.attr(\"x1\", xPosition - maskPadding);\n\t\tthis._handleMaskGradientEl.attr(\"x2\", xPosition + maskWidth - maskPadding);\n\n\t\tthis._handleMaskEl.attr(\"width\", maskWidth);\n\t\tthis._handleMaskEl.attr(\"height\", this._options.fontSize);\n\t}\n\t\t\n\t/**\n\t * Creates mask gradient element\n\t * @param {Number} handleIndex \n\t */\n\t_createMaskGradientElement(){\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\n\t\t\t.attr(\"id\", \"brush-mask-gradient-\" + gradientIndex++)\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\n\t\t\t.attr(\"y1\", 0).attr(\"x1\", 50)\n\t\t\t.attr(\"y2\", 0).attr(\"x2\", 0);\n\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\n\t\t\t.data([\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\n\t\t\t])\n\t\t\t.enter().append(\"stop\")\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\n\n\t\treturn this._handleMaskGradientEl;\n\t}\n\n\t/**\n\t * @private \n\t * Renders main handle element \n\t * @returns {SVGElement}\n\t */\n\t_createHandleElement(){\n\t\tthis._handleEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"custom-handle\"])\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"data-handle-index\", this._index)\n\t\t\t.attr(\"data-handle-value\", this._value)\n\t\t\t.attr(\"cursor\", \"ew-resize\")\n\t\t\t.attr(\"width\", Defaults.ACTIVE_HANDLE_AREA_WIDTH)\n\t\t\t.attr(\"height\", this._options.height + 5)\n\t\t\t.attr(\"x\", this._position - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\n\n\t\treturn this._handleEl;\n\t}\n\n\t/**\n\t * @private \n\t * Renders handle line element \n\t * @returns {SVGElement} \n\t */\n\t_createHandleLineElement(){\n\t\tthis._handleLineEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"custom-handle-line\"])\n\t\t\t.attr(\"width\", 4)\n\t\t\t.attr(\"height\", this._options.height)\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"x\", this._position - 2);\n\n\t\treturn this._handleLineEl;\n\t}\t\n\n\t/**\n\t * @private \n\t * Renders handle circle element \n\t * @returns {SVGElement} \n\t */\n\t_createHandleCircleElement(){\n\t\tthis._handleCircleEl = this._groupEl.append(\"circle\")\n\t\t\t.attr(\"class\", style[\"custom-handle-circle\"])\n\t\t\t.attr(\"transform\", \"translate(\" + this._position + \",\" + this._options.height + \")\")\n\t\t\t.attr(\"fill\", \"#ffffff\")\n\t\t\t.attr(\"fill-opacity\", 1)\n\t\t\t.attr(\"stroke\", \"#000\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"cursor\", \"ew-resize\")\n\t\t\t.attr(\"r\", 3.5);\n\n\t\treturn this._handleCircleEl;\n\t}\t\t\n\n\t/**\n\t * @private \n\t * Renders drag mask element \n\t * @returns {SVGElement} \n\t */\n\t_createDragMaskElement(){\n\t\tthis._handleMaskEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"drag-label-mask\"])\n\t\t\t.attr(\"fill\", \"url(#brush-mask-gradient-\" + gradientIndex+\")\")\n\t\t\t.attr(\"y\", this._options.height + Defaults.LABEL_MARGIN)\n\t\t\t.attr(\"display\", \"none\");\t\t\t\n\n\t\treturn this._handleMaskEl;\n\t}\n\t\n\t/**\n\t * @private \n\t * Renders handle label element \n\t * @returns {SVGElement}  \n\t */\n\t_createDragLabelElement(){\n\t\tvar format = this._options.format;\n\t\tvar height = this._options.height;\n\t\tthis._handleLabelEl = this._groupEl.append(\"text\")\n\t\t\t.attr(\"class\", style[\"drag-label\"])\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"font-size\", this._options.fontSize)\n\t\t\t.text(() => {\n\t\t\t\tvar formattedValue = format(this._initialValue);\n\t\t\t\treturn formattedValue;\n\t\t\t})\n\t\t\t.attr(\"y\", height + this._options.fontSize + Defaults.LABEL_MARGIN);\n\n\t\t\n\t\tthis._updateLabelPosition(this._position);\n\t\treturn this._handleLabelEl;\n\t}\n}","/**\n * @public\n * Returns handle positions offsets so that labels don't conflict visually\n * @param {HistogramData} histogramData \n * @returns {Array} label offsets\n */\nexport function getHandlePositionOffsets(handle1, handle2, maskPadding, width){\n    var label1Box = handle1.getLabelBox();\n    var label2Box = handle2.getLabelBox();\n\n    // calculate conflict number\n    var conflictDiff = label2Box.x - (label1Box.x + label1Box.width)-maskPadding;\n    // and handle if there is not enough space\n    if (conflictDiff<0){\n        // pos1 diff to the left\n        var posDiff1 = conflictDiff/2;\n        // pos2 diff to to right\n        var posDiff2 = conflictDiff/2;\n\n        // position left to 0 if position would be lower than 0\n        var xMin = label1Box.x+posDiff1;\n        if (xMin < 0){\n            posDiff1 = label1Box.x; \n            // also shift right label so we keep it visible\n            posDiff2 = posDiff2*2\n        }\n\n        // same with max value\n        var xMax = label2Box.x+label2Box.width-posDiff2;\n        if (xMax > width){\n            posDiff2 += xMax-width; \n            posDiff1 = posDiff1*2\n        }\n        return [posDiff1, -posDiff2];                  \n    }\n\n    return [0,0];\n}","import style from \"../Histogram.css\";\nimport HistogramHandle from \"./HistogramHandle\";\nimport Observable from \"../../utils/Observable\";\nimport * as PositionUtils from \"../utils/PositionUtils\"\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Histogram renderer class\n * @param {Object} options\n */\nexport default class HistogramSelectionRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Histogram options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Bar data \n\t\t */\n\t\tthis._histogramData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * history selection\n\t\t */\n\t\tthis._histogramSelection = null;\n\n\t\t/**\n\t\t * @private\n\t\t * index of over selection  \n\t\t */\n\t\tthis._overSelectionIndex = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * selection handles\n\t\t */\n\t\tthis._handles = [];\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * true if handle is dragged\n\t\t */\n\t\tthis._draggingHandle = false;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous selection for animation\n\t\t */\n\t\tthis._prevSelection = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * true if animation is run\n\t\t */\n\t\tthis._animating = false;\n\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a category\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is changed\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\t\t\n    }\n\n\t/**\n\t * @public\n\t * Returns whether histogram has been rendered or not\n\t * @returns {boolean} true if histogram has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * @param {DOMElement}  \n\t * @returns {HistogramSelectionRenderer} returns this widget instance\n\t */\n\trender(groupEl){\n\t\tthis._rendered = true;\n\t\tthis._groupEl = groupEl\n\n\t\treturn this;\n\t} \t\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._destroyHandles();\n\t\tif (this._selectionBarGroups){\n\t\t\tthis._selectionBarGroups.remove();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Destroys selection controls \n\t */\n\t_destroyHandles(){\n\t\tthis._handles.forEach(handle=>handle.destroy());\n\t\tthis._handles = [];\n\t}\n\n\t/**\n\t * @private\n\t * Handles click on handle\n\t * @param {Number} handleIndex\n\t * @param {Number} handleValue \n\t */\n\t_onHandleClick(handleIndex, handleValue){\n\t\t// call prompt handler if available\n\t\tif (this._options.promptHandler){\n\t\t\tthis._options.promptHandler(handleValue).then((promptResult)=>{\n\t\t\t\tvar startSelectionSnapshot = JSON.stringify(this._histogramSelection.getOutputSelection());\n\t\t\t\tpromptResult = parseFloat(promptResult);\n\t\t\t\t// must be within min max range\n\t\t\t\tvar minMax = this._histogramData.getMinMax();\n\t\t\t\tpromptResult = Math.min(minMax.max, promptResult);\n\t\t\t\tpromptResult = Math.max(minMax.min, promptResult);\n\n\t\t\t\tvar points = this._histogramSelection.getSelectionPoints();\n\t\t\t\tpoints[handleIndex] = {\n\t\t\t\t\tvalue:promptResult\n\t\t\t\t};\n\n\t\t\t\tvar positions = points\n\t\t\t\t\t.sort((p1,p2)=>p1.value-p2.value)\n\t\t\t\t\t.map(point=>this._histogramData.valueToPosition(point.value));\n\t\t\t\t\n\t\t\t\tthis._updateSelectionPositions(positions, points);\n\t\t\t\tthis._updateSelection();\n\n\t\t\t\t// TODO: update handles without destroying them\n\t\t\t\tthis._destroyHandles();\n\t\t\t\tthis._renderHandles();\n\n\t\t\t\t// fire selection change if selection is changed\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t}\n\n\t/**\n\t * @private\n\t * Toggles selection\n\t * @param {Number} selectionIndex \n\t */\n\t_toggleSelection(selectionIndex){\n\t\tvar selection = this._options.selection[selectionIndex];\n\t\tselection.disabled = !selection.disabled;\n\t\tvar enabled = !selection.disabled;\n\t\tthis._updateSelection();\n\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t}\t\n\n\t/**\n\t * @private\n\t * Handles click on chart\n\t */\n\t_onClick(){\n\t\tvar target = d3.select(d3.event.target);\n\t\tvar selectionIndex = target.attr(\"data-selection-index\");\n\t\tvar handleIndex = target.attr(\"data-handle-index\");\n\n\t\tif (selectionIndex != null && this._histogramSelection.allowsToggle()){\n\t\t\tthis._toggleSelection(selectionIndex)\n\t\t} else if (handleIndex != null){\n\t\t\tthis._onHandleClick(handleIndex, target.attr(\"data-handle-value\"));\n\t\t}\n\t}\n\t/**\n\t * @private\n\t * Handles handle click \n\t */\n\t_handleClick(){\n\t\tthis._groupEl.on(\"click\", this._onClick.bind(this));\n\t}\n\n\t/**\n\t * @private\n\t * Refreshes histogram data \n\t * @param {HistogramData}\n\t * @param {HistogramSelection}\n\t * @param {Object} options\n\t */\n\trefresh(histogramData, histogramSelection, options){\n\t\tthis._animate = options && options.animate;\n\t\tif (this._animate && this._histogramSelection && this._histogramSelection.getSelection().length == histogramSelection.getSelection().length){\n\t\t\tthis._prevSelection = this._histogramSelection.getSelection();\n\t\t\tthis._prevHistogramData = this._histogramSelection.getSelection();\n\t\t}\n\n\t\tif (this._animate && this._histogramData){\n\t\t\tthis._prevHistogramData = this._histogramData;\n\t\t}\n\n\t\tthis._histogramData = histogramData;\n\t\tthis._histogramSelection = histogramSelection;\n\t\t\n\t\tthis._clear();\n\t\tthis._renderSelection();\n\t\tthis._updateSelection();\n\n\t\tthis._handleHoverState();\n\t\tthis._handleClick();\n\n\t\treturn this;\n\t}\n\n\tsetSelection(histogramSelection, options){\n\t\tif (this.needRefresh(this._histogramSelection, histogramSelection)) {\n\t\t\treturn this.refresh(this._histogramData, histogramSelection, options);\n\t\t}\n\t\tthis._histogramSelection = histogramSelection;\n\t\tthis._updateSelection();\n\t\treturn this;\n\t}\n\n\tneedRefresh(prevHistogramSelection, histogramSelection) {\n\t\tif (!prevHistogramSelection || !histogramSelection) {\n\t\t\treturn true;\n\t\t}\n\t\tconst prev = prevHistogramSelection.getSelection();\n\t\tconst curr = histogramSelection.getSelection();\n\t\treturn (\n\t\t\t!prev || !curr ||\n\t\t\tprev.length !== curr.length ||\n\t\t\tcurr.reduce((acc, sel, i) => sel.from === prev[i].from && sel.to === prev[i].to ? acc : true, false)\n\t\t);\n\t}\n\n\t/**\n\t * @private\n\t * Updates selection controls on hover\n\t * @param {Number} selectionIndex \n\t */\n\t_updateSelectionControlsHoverState(selectionIndex){\n\t\t// get all handles sorted by X position\n\t\tvar handles = this._handles.slice().sort((h1,h2)=>{\n\t\t\treturn h1.getXPosition() - h2.getXPosition();\n\t\t});\n\n\t\t// unset hover state on all handles\n\t\thandles.forEach(handle=>handle.unsetHoverState());\n\n\t\t// selection is active, active both handles for active selection\n\t\tif (selectionIndex != null){\n\t\t\tvar handle1 = handles[selectionIndex];\n\t\t\tvar handle2 = handles[selectionIndex+1];\n\n\t\t\thandle1.setHoverState();\n\t\t\thandle2.setHoverState();\n\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\n\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\n\t\t}\n\t}\t\n\n\t/**\n\t * \n\t * @private \n\t * Handles what happens when mouse is over selection\n\t * @param {String} type \n\t * @param {Number} i \n\t * @param {HTMLElement[]} array \n\t */\n\t_onSelectionMouseOver(d, i, nodes){\n\t\t// prevent selection when dragging handles\n\t\tif (this._draggingHandle){\n\t\t\treturn;\n\t\t}\n\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0.00)\")\n\t\tvar selectionIndex = parseInt(d3.select(d3.event.target).attr(\"data-selection-index\"));\n\t\tif (this._overSelectionIndex != selectionIndex){\n\t\t\tthis._overSelectionIndex = selectionIndex;\n\t\t\tthis._updateSelection();\n\t\t\tthis._updateSelectionControlsHoverState(selectionIndex);\n\t\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @private \n\t * Handles what happens when mouse is out of selection\n\t * @param {String} type \n\t * @param {Number} i \n\t * @param {HTMLElement[]} array \n\t */\n\t_onSelectionMouseOut(d, i, nodes){\n\t\t// prevent selection when dragging handles\n\t\tif (this._draggingHandle){\n\t\t\treturn;\n\t\t}\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0)\")\n\n\t\tthis._overSelectionIndex = null;\n\t\tthis._updateSelectionControlsHoverState(null);\n\t\tthis._updateSelection();\n\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\n\t\t\n\t}\n\n\t/**\n\t * @private \n\t * Handles hover state\n\t */\n\t_handleHoverState(){\n\t\tvar g = this._groupEl;\n        g.selectAll(\".\"+style.selectionbargroup).on(\"mouseout\", this._onSelectionMouseOut.bind(this));\n        g.selectAll(\".\"+style.selectionbargroup).on(\"mouseover\", this._onSelectionMouseOver.bind(this));\n\t}\n\n\t/**\n\t * @private \n\t * Handles when handle is dragged\n\t */\n\t_onHandleDrag(){\n\t\tvar positions = this._handles.map(handle=>handle.getXPosition()).sort((p1, p2)=>{\n\t\t\treturn p1-p2;\n\t\t});\n\n\t\tthis._updateSelectionPositions(positions);\n\t\tthis._updateSelection();\n\t}\n\n\t/**\n\t* @private\n\t* Updates selection with new positions\n\t* @param {Array} positions\n\t* @param {Array} points\n\t*/\n\t_updateSelectionPositions(positions, points){\n\t\tvar selection = this._histogramSelection.getSelection();\n\t\tpositions.forEach((p, index)=>{\n\t\t\tif (index>selection.length-1){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar position = {\n\t\t\t\tfrom:p,\n\t\t\t\tto:positions[index+1]\n\t\t\t};\n\n\t\t\tvar value = {\n\t\t\t\tfrom:points?points[index].value:this._histogramData.positionToValue(position.from),\n\t\t\t\tto:points?points[index+1].value:this._histogramData.positionToValue(position.to),\n\t\t\t};\n\n\t\t\t[\"from\", \"to\"].forEach(pos=>{\n\t\t\t\tconst selectionChanged = points?\n\t\t\t\t\t// if new points are given, we need to compare selection values\n\t\t\t\t\tselection[index][pos] !== value[pos]:\n\t\t\t\t\t// otherwise, we need to compare selection position\n\t\t\t\t\tselection[index][\"position\"][pos] !== position[pos];\n\n\t\t\t\t// update selection on change\n\t\t\t\tif (selectionChanged){\n\t\t\t\t\tselection[index][pos] = value[pos];\t\n\t\t\t\t\tselection[index][\"position\"][pos] = position[pos];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\t\n\n\t/**\n\t* @private\n\t* Renders selection bars\n\t*/\n\t_renderSelection() {\n\t\tvar height = this._options.height;\n\t\tvar selection = this._histogramSelection.getSelection();\n\n\t\t// hover selection bars\n\t\tthis._selectionBarGroups = this._groupEl.selectAll(\".\"+style.selectionbargroup)\n\t\t\t.data([...selection].reverse()) // reverse because left icons needs to be in foreground\n\t\t\t.enter().append(\"g\")\n\t\t\t.attr(\"class\", style.selectionbargroup)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"height\", height);\n\n\t\tthis._selectionBarsIcons = this._selectionBarGroups.append(\"image\")\n\t\t\t.attr(\"class\", style.selectionbaricon)\n\t\t\t.attr(\"xlink:href\", function(d) {\n\t\t\t\treturn d.icon ? d.icon.src : null;\n\t\t\t});\n\n\t\tthis._selectionBars = this._selectionBarGroups.append(\"rect\")\n\t\t\t.attr(\"class\", style.selectionbar)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\n\t\t\t.attr(\"height\", height);\n\t\tthis._renderHandles();\n\t}\n\n\t/**\n\t* @private\n\t* Renders selection controls\n\t*/\n\t_renderHandles(){\n\t\t// render selection controls\n\t\tthis._handles = this._histogramSelection.getSelectionPoints().map((point, index)=>{\n\t\t\tvar value = point.value;\n\n\t\t\tvar handle = new HistogramHandle(this._groupEl, value, index, this._histogramData, this._options);\n\n\t\t\tif(point.hidden){\n\t\t\t\thandle.hide();\n\t\t\t}\n\n\t\t\thandle.on(\"drag\", ()=>{\n\t\t\t\tthis._onHandleDrag();\n\t\t\t}, this);\n\n\t\t\tvar startSelectionSnapshot;\n\n\t\t\t// disable other handles when draggin starts\n\t\t\thandle.on(\"startDrag\", ()=>{\n\t\t\t\tstartSelectionSnapshot = JSON.stringify(this._options.selection);\n\t\t\t\t\n\t\t\t\tthis._draggingHandle = true;\n\t\t\t\tthis._handles.forEach(handle=>handle.disable());\n\t\t\t\thandle.enable();\n\t\t\t}, this);\n\n\t\t\t// enable all handles when draggin starts\n\t\t\thandle.on(\"endDrag\", ()=>{\n\t\t\t\tthis._draggingHandle = false;\n\t\t\t\tthis._handles.forEach(handle=>handle.enable());\n\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\n\t\t\n\t\t\treturn handle;\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Returns bar color based on X position\n\n\t* @param {Number} barX\n\t* @param {Array} selection\n\t* @returns {Number} bar category index\n\t* @param {HistogramData} histogram data \n\t*/\n\t_getBarSelectionIndex(barX, selection, data){\n\t\tfor (var i=0;i<selection.length;i++){\n\t\t\tvar s = selection[i];\n\t\t\tvar isLast = i == selection.length-1;\n\t\t\tvar within = barX >= data.valueToPosition(s.from) && (barX < data.valueToPosition(s.to) || (isLast && barX <= data.valueToPosition(s.to)));\n\t\t\tif (within) return i;\n\t\t}\n\n\t\treturn null;\n\t}\t\n\n\t/**\n\t * @private\n\t * Returns selection color\n\t * @param {Object} selection\n\t * @param {Object} d datum\n\t */\n\t_getSelectionColor(selection, d){\n\t\tif (selection.colors){\n\t\t\treturn selection.colors[d.volumeIndex];\n\t\t}\n\n\t\tif (selection.color){\n\t\t\treturn selection.color\n\t\t}\n\n\t\treturn this._options.selectionColor;\n\t}\n\n\t/**\n\t * @private\n\t * Returns bar color for given bar position with given selection\n\t * @param {Number} barX \n\t * @param {Array} selection \n\t * @param {HistogramData} histogram data \n\t */\n\t_getBarColor (barX, selection, data, d){\n\t\tvar inactiveBarColor = this._options.inactiveBarColor;\n\t\tvar overSelectionColor = this._options.overSelectionColor;\n        var segmentDivider = this._options.segmentDivider;\n\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\n\t\tif (barSelectionIndex == null){\n\t\t\treturn inactiveBarColor;\n\t\t} else if (segmentDivider && selection.some(sel => (barX === sel.position.to || barX === sel.position.from) && !sel.disabled)) {\n\t\t\treturn segmentDivider;\n\t\t} else if (selection[barSelectionIndex].disabled){\n\t\t\treturn inactiveBarColor;\n\t\t} else if (this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex){\n\t\t\treturn overSelectionColor;\n\t\t} else {\n\t\t\treturn this._getSelectionColor(selection[barSelectionIndex], d);\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Returns bar color for given bar position with given selection\n\t * @param {Number} barX \n\t * @param {Array} selection \n\t * @param {HistogramData} histogram data \n\t */\n\t_getBarOpacity (barX, selection, data){\n\t\tvar defaultOpacity = 1;\n\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\n\t\tvar isOver = this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex;\n\t\tvar isDisabled = barSelectionIndex != null && selection[barSelectionIndex].disabled;\n\n\t\tif (isOver){\n\t\t\treturn this._options.overSelectionOpacity;\n\t\t}\n\n\t\tif (isDisabled){\n\t\t\treturn this._options.inactiveBarOpacity;\n\t\t}\n\t\t\n\t\t// otherwise use set opacity if \n\t\tif (barSelectionIndex != null && selection[barSelectionIndex].opacity != null){\n\t\t\treturn selection[barSelectionIndex].opacity;\n\t\t} \n\n\t\treturn defaultOpacity;\n\t}\t\n\n\t/**\n\t * Runs onTransition as a transition between two selections\n\t * @param {Array} selection1 \n\t * @param {Array} selection2 \n\t * @param {Function} onTransition handler\n\t */\n\t_onSelectionTransition(selection1, selection2, data1, data2, onTransition, onComplete){\n\t\tselection1.forEach((s1,selectionIndex)=>{\n\t\t\tvar s2 = selection2[selectionIndex];\n\t\t\tvar width = this._options.width;\n\t\t\tif (selection1[selectionIndex]){\n\t\t\t\tvar transitions = [];\n\t\t\t\tvar frames = [];\n\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.from)), Math.round(data2.valueToPosition(s2.from))]);\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.to)), Math.round(data2.valueToPosition(s2.to))]);\n\n\t\t\t\t// make sure duration is calculated based on transition length\n\t\t\t\tframes = [Math.abs((transitions[0][0] - transitions[0][1])/width), Math.abs((transitions[1][0] - transitions[1][1])/width)];\n\n\t\t\t\ttransitions.forEach((t, handleIndex)=>{\n\t\t\t\t\tvar duration = 0;\n\n\t\t\t\t\twhile(t[0] !== t[1]){\n\t\t\t\t\t\tsetTimeout(onTransition.bind(this, t[0], selectionIndex, handleIndex), duration);\n\t\t\t\t\t\t\n\t\t\t\t\t\tduration = duration+0.5/frames[handleIndex];\n\t\t\t\t\t\tt[0] = t[0]>t[1]?t[0]-1:t[0]+1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// call final complete fn only if duration is > 0, this prevents premature animation end\n\t\t\t\t\t// when one of the sides is in the same position\n\t\t\t\t\tif (duration>0){\n\t\t\t\t\t\tsetTimeout(function(p, si, hi){\n\t\t\t\t\t\t\tonTransition(p, si, hi)\n\t\t\t\t\t\t\tonComplete(p, si, hi);\n\t\t\t\t\t\t}.bind(this, t[1], selectionIndex, handleIndex), ++duration);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Updates selection\n\t*/\n\t_updateSelection(){\n\t\tvar selection = this._histogramSelection.getSelection();\n\t\tvar bars = this._groupEl.selectAll(\".\"+style.bar);\n\n\t\t// fills bars with given selection\n\t\tvar fillBars = (s, data) => {\n\t\t\t// handle bar colors\n\t\t\tbars.attr(\"fill\", (d)=> {\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\n\t\t\t\treturn this._getBarColor(barX, s, data, d);\n\t\t\t})\n\n\t\t\t// handle bar opacity\n\t\t\tbars.attr(\"fill-opacity\", (d)=> {\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\n\t\t\t\treturn this._getBarOpacity(barX, s, data, d);\n\t\t\t})\n\t\t}\n\n\t\t// handle animation if previous selection is set\n\t\tif (this._animate && this._prevSelection){\n\t\t\tvar prevSelection = this._prevSelection;\n\t\t\tvar prevData = this._prevHistogramData;\n\t\t\t\n\t\t\t// set prev selection\n\t\t\tfillBars(prevSelection, this._prevHistogramData);\n\n\t\t\t// set handle positions to prev selection\n\t\t\tprevSelection.forEach((s, i)=>{\n\t\t\t\tvar p1 = this._prevHistogramData.valueToPosition(s.from);\n\t\t\t\tvar p2 = this._prevHistogramData.valueToPosition(s.to);\n\n\t\t\t\tthis._handles[i].setHandleXPosition(p1).setLabelPosition(p1);\n\t\t\t\tthis._handles[i+1].setHandleXPosition(p2).setLabelPosition(p2)\n\t\t\t});\n\n\t\t\tthis._animating = true;\n\t\t\t//fill bars on selection transition and move handles\n\t\t\tthis._onSelectionTransition(prevSelection, selection, prevData, this._histogramData, \n\t\t\t\t// on transition callback\n\t\t\t\t(p, selectionIndex, handleIndex)=>{\n\t\t\t\t\tvar bar = d3.select(bars.nodes()[p]);\n\t\t\t\t\tbar.attr(\"fill\", d=>{\n\t\t\t\t\t\treturn this._getBarColor(p, selection, this._histogramData, d);\n\t\t\t\t\t});\n\n\t\t\t\t\t//var handleText = this._options.format(this._histogramData.positionToValue(p));\n\t\t\t\t\t// move handles\n\t\t\t\t\t[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].setHandleXPosition(p).setLabelPosition(p)\n\n\t\t\t\t// on complete callback\t\t\n\t\t\t},()=>{\n\t\t\t\t\t// hide handles\n\t\t\t\t\t//[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].hideLabel();\n\t\t\t\t\tfillBars(selection, this._histogramData)\n\t\t\t\t\tthis._animating = false;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tthis._prevSelection = null;\n\t\t\tthis._prevHistogramData = null;\n\t\t\n\t\t} else {\n\t\t\tfillBars(selection, this._histogramData)\n\t\t}\n\t\t\n\t\t// selection rects\n\t\tthis._selectionBarGroups\n            .data([...selection].reverse()) // reverse because left icons needs to be in foreground\n\t\t\t.attr(\"transform\", (d) => {\n\t\t\t\treturn `translate(${this._histogramData.valueToPosition(d.from)}, 0)`;\n\t\t\t})\n\t\t\t.attr(\"width\", (d) => {\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\n\t\t\t});\n\n        this._selectionBarsIcons\n            .data([...selection].reverse()) // reverse because left icons needs to be in foreground\n            .attr(\"data-selection-index\", function(d,i){\n                return selection.length - i - 1;\n            })\n            .attr(\"visibility\", (d) => d.disabled ? \"hidden\" : \"visible\")\n            .attr(\"x\", (d) => {\n                return (this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from))/2;\n            })\n            .attr(\"y\", (d) => {\n                return d.icon && d.icon.align === \"bottom\" ? 3*this._options.height/4 : this._options.height/2;\n            })\n            .attr(\"transform\", (d) => {\n                if (!d.icon) {\n                    return null;\n                }\n                const y = d.icon.align === \"bottom\" ? -d.icon.height : -d.icon.height/2;\n                return `translate(${-this.selectionIconWidth(d)/2},${y})`\n            })\n            .attr(\"width\", this.selectionIconWidth.bind(this))\n            .attr(\"height\", (d) => {\n                return d.icon ? d.icon.height : null;\n            });\n\n\t\tthis._selectionBars\n            .data([...selection].reverse()) // reverse because left icons needs to be in foreground\n\t\t\t.attr(\"data-selection-index\", function(d,i){\n\t\t\t\treturn selection.length - i - 1;\n\t\t\t})\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\n\t\t\t.attr(\"width\", (d) => {\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\n\t\t\t});\n\t}\n\n\tselectionIconWidth(selection){\n\t\tif (!selection.icon) {\n\t\t\treturn null;\n\t\t} else if (selection.icon.width === \"stretch\") {\n\t\t\treturn this._histogramData.valueToPosition(selection.to) - this._histogramData.valueToPosition(selection.from);\n\t\t} else {\n\t\t\treturn selection.icon.width\n\t\t}\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\t// show label without calculating offsets when animating\n\t\tif (this._animating) {\n\t\t\treturn this._handles.forEach(handle=>handle.showLabel());\n\t\t}\n\n\t\tthis._histogramSelection.getSelection().forEach((s,i)=>{\n\t\t\tvar handle1 = this._handles[i];\n\t\t\tvar handle2 = this._handles[i+1];\n\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\n\t\t});\n\t\t\n\t\tthis._handles.forEach(handle=>handle.showLabel());\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._handles.forEach(handle=>handle.hideLabel());\n\t}\t\t\n\n\t/**\n\t * @public\n\t * Destorys histogram UI  \n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._clear();\n\n\t\treturn this;\n    }\t\t\n}","import style from \"./Histogram.css\";\nimport HistogramSelectionRenderer from \"./selection/HistogramSelectionRenderer\";\nimport * as Defaults from \"./HistogramDefaults\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Histogram renderer class\n * @param {Object} options\n */\nexport default class HistogramRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Histogram options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Bar data \n\t\t */\n\t\tthis._historyData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = d3.scaleBand().range([0, options.width]);\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = d3.scaleLinear().range([options.height, 0]);\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous data for animation\n\t\t */\n\t\tthis._prevData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * selection renderer\n\t\t */\n\t\tthis._selectionRenderer = new HistogramSelectionRenderer(options);\n\n\t\t/**\n\t\t * @private\n\t\t * True if labels are visible\n\t\t */\n\t\tthis._labelsVisible = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a category\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is changed\n\t\t\t * @param {Array} selection\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\t\t\n\n\t\t// relay selection events\n\t\tthis._selectionRenderer.on(\"selectionOver\", (selectionIndex)=>{\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"selectionChanged\", (selection)=>{\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t\t});\t\t\n    }\n\n\t/**\n\t * @public\n\t * Returns whether histogram has been rendered or not\n\t * @returns {boolean} true if histogram has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector){\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar margin = Defaults.MARGIN;\n\n\t\t// render SVG\n\t\tvar svg = this._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width + margin.left + margin.right)\n\t\t\t.attr(\"height\", height + margin.top + this._options.fontSize + margin.bottom)\n\t\t\t.classed(style.histogram, true);\n\n\t\t// render group element\n\t\tvar g = this._groupEl = this._svgEl.append(\"g\")\n\t\t\t.classed(style.inactive, true)\n\t\t\t.attr(\"transform\",\n\t\t\t\"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\t\t// handle hover over svg element\n\t\tsvg.on(\"mouseover.hover\", ()=>{\n\t\t\tg.classed(style.active, true)\n\t\t\tg.classed(style.inactive, false)\n\t\t})\n\n\t\tsvg.on(\"mouseout.hover\", ()=>{\n\t\t\tg.classed(style.inactive, true)\n\t\t\tg.classed(style.active, false)\n\t\t})\n\n\t\tthis._selectionRenderer.render(g);\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t} \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._groupEl.node().innerHTML = \"\";\n\t}\n\n\t/**\n\t * @private\n\t * Refreshes histogram data \n\t * @param {HistogramData}\n\t * @param {HistogramSelection}\n\t * @param {Object} options\n\t */\n\trefresh(histogramData, histogramSelection, options){\n\t\tthis._animate = options && options.animate;\n\n\t\tthis._histogramData = histogramData;\t\t\n\t\tthis._clear();\n\n\t\tthis._xAxis.domain(histogramData.getData().map(function (d) {return d.value; }));\n\t\tthis._yAxis.domain([0, d3.max(histogramData.getData(), function (d) { return Math.max.apply(Math, d.volume); })]);\n\n\t\tthis._renderXAxis();\t\t\n\t\tthis._renderDataBars();\n\n\t\tthis._prevData = histogramData.getData();\t\t\t\n\n\t\tthis._selectionRenderer.refresh(histogramData, histogramSelection, options);\t\n\n\t\tif (this._labelsVisible){\n\t\t\tthis.showSelectionLabels()\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tsetSelection(histogramSelection, options){\n\t\tthis._selectionRenderer.setSelection(histogramSelection, options);\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\tthis._selectionRenderer.showSelectionLabels();\n\t\t// hide axis labels when selection labels are visible\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"none\");\n\t\tthis._labelsVisible = true;\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._selectionRenderer.hideSelectionLabels();\n\t\t// show axis labels when selection labels are not visible\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"block\");\t\t\n\t\tthis._labelsVisible = false;\n\t}\t\n\n\t/**\n\t * @private\n\t * Renders data bars\n\t*/\n\t_renderDataBars() { \n\t\tvar data = this._histogramData.getData();\n\t\t// var prevData = this._prevData;\n\t\tvar height = this._options.height;\n\n\t\tvar y = this._yAxis;\n\n\t\tdata.forEach(d=>{\n\t\t\td.volume.forEach((v, i)=>{\n\t\t\t\tthis._groupEl\n\t\t\t\t\t.append(\"rect\")\n\t\t\t\t\t.datum({\n\t\t\t\t\t\tvalue:d.value,\n\t\t\t\t\t\tvolumeIndex:i\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"class\", style.bar)\n\t\t\t\t\t.attr(\"x\", this._histogramData.valueToPosition(d.value))\n\t\t\t\t\t.attr(\"width\", \"1\")\n\t\t\t\t\t.attr(\"y\", Math.floor(y(d.volume[i])))\n\t\t\t\t\t.attr(\"height\", Math.ceil(height - y(d.volume[i])))\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Renders X axis \n\t*/        \n\t_renderXAxis(){\n\t\tvar minMax = this._histogramData.getMinMax();\n\t\tvar format = this._options.format;\n\t\tvar height = this._options.height + this._options.fontSize + Defaults.LABEL_MARGIN;\n\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"])\n\t\t\t.data([minMax.min, minMax.max])\n\t\t\t.enter()\n\t\t\t.append(\"text\")\n\t\t\t.text((d)=>format(d))\n\t\t\t.attr(\"font-size\", this._options.fontSize)\n\t\t\t.attr(\"transform\", (d, i)=>{\n\t\t\t\treturn [\n\t\t\t\t\t\"translate(\"+0+\",\" + height + \")\",\n\t\t\t\t\t\"translate(\"+this._options.width+\",\" + height + \")\"\n\t\t\t\t][i]\n\t\t\t})\n\t\t\t.attr(\"text-anchor\", function(d, i){\n\t\t\t\treturn [\"start\", \"end\"][i];\n\t\t\t})\n\t\t\t.classed(style[\"x-axis\"], true)\n\t}\n\n\t/**\n\t * @public\n\t * Destorys histogram UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\t\tthis._selectionRenderer.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","/**\n * @abstract\n * abstract HistogramSelection class\n */\nexport default class HistogramSelection {\n\tconstructor(histogramData, selection){\n\t\tthis._selection = this.getSelectionWithPositions(histogramData, selection);\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelection()\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\treturn this._selection;\n\t}\n\n\t/**\n\t * @public\n\t * @abstract\n\t * @returns {Array} histogram selection\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\tthrow \"HistogramSelection.getOutputSelection() has to be implemented\";\n\t}\n\n\t/**\n\t * @public \n\t * @abstract\n\t * @returns {String}\n\t * Returns histogram selection type\n\t */\n\tgetSelectionType(){\n\t\tthrow \"HistogramSelection.getSelectionType() has to be implemented\";\n\t}\n\n\t/**\n\t * @abstract\n\t * @public \n\t * @returns {Boolean}\n\t * Returns true if toogle is allowed\n\t */\n\tallowsToggle(){\n\t\tthrow \"HistogramSelection.allowsToggle() has to be implemented\";\n\t}\t\n\n\t/**\n\t * @public\n\t * @abstract \n\t * @returns {Array}\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tthrow \"HistogramSelection.getSelection() has to be implemented\";\n\t}  \t\n\n\t/**\n\t * @public\n\t * @param {Array} histogramData\n\t * @param {Array} selection\n\t * @returns {Array}\n\t * Returns modified selection with positions\n\t */\n\tgetSelectionWithPositions(histogramData, selection){\n\t\treturn selection.map(s=>{\n\t\t\treturn Object.assign(s, {\n\t\t\t\tposition:{\n\t\t\t\t\tfrom:histogramData.valueToPosition(s.from),\n\t\t\t\t\tto:histogramData.valueToPosition(s.to)\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nvar SelectionTypes = {\n\tMULTI:\"multi\",\n\tFILTER:\"filter\",\n\tINVERTED_FILTER:\"inverted-filter\"\n}\n\nexport {SelectionTypes} ","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class MultipleHistogramSelection extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.MULTI;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn true;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\t\t\t\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t \t\n}","import MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport * as Defaults from \"../HistogramDefaults\";\n\n/**\n * @class\n * DefaultHistogramSelectionImpl representing histogram selection\n */\nexport default class DefaultHistogramSelectionImpl extends MultipleHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData) {\n\t\tvar minMax = histogramData.getMinMax();\n\t\tvar colors = Defaults.DEFAULT_COLORS;\n\t\tvar start = minMax.min;\n\t\tvar step = (minMax.max - minMax.min) / colors.length;\n\t\tvar selection = colors.map(color=>{\n\t\t\tvar from = start;\n\t\t\tvar to = start + step;\n\t\t\tstart += step;\n\n\t\t\treturn {\n\t\t\t\tfrom:from, \n\t\t\t\tto:to,\n\t\t\t\tcolor:color\n\t\t\t}\n\t\t});\n\n\t\tsuper(histogramData, selection);\n    }\n}","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class FilterHistogramSelectionImpl extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tif (selection.length != 1){\n\t\t\tthrow \"Filter selection doesn't allow more than one selection\"\n\t\t}\n\t\tsuper(histogramData, selection);\n\t}\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.FILTER;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn false;\n\t}\t\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t\n}","import FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class InvertedFilterHistogramSelectionImpl extends FilterHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n\n\t\tthis._selection = this._getInvertedSelection(histogramData, selection);\n    }\n\n\n\t_getInvertedSelection(histogramData, selection){\n\t\tvar minMax = histogramData.getMinMax();\n\n\t\tvar invertedSelection = [\n\t\t\t{\n\t\t\t\tfrom:minMax.min,\n\t\t\t\tto:selection[0].from\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].from,\n\t\t\t\tdisabled:true,\n\t\t\t\tto:selection[0].to\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].to,\n\t\t\t\tto:minMax.max\n\t\t\t}\n\t\t];\n\n\t\treturn this.getSelectionWithPositions(histogramData, invertedSelection);\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:this._selection[1].from,\n\t\t\t\tto:this._selection[1].to\n\t\t\t}\n\t\t];\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.INVERTED_FILTER;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = super.getSelectionPoints();\n\t\t\n\t\tresult[0].hidden = true;\n\t\tresult[result.length-1].hidden = true;\n\n\t\treturn result;\n\t}  \t\n}","import DefaultHistogramSelectionImpl from \"./DefaultHistogramSelectionImpl\";\nimport MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport InvertedFilterHistogramSelectionImpl from \"./InvertedFilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * HistogramSelection factory returns appropriate selection implementation\n */\nexport default class HistogramSelectionFactory {\n\t/**\n\t * @param {Object} options\n\t */\n\tconstructor(options) {\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * @param {HistogramData} histogramData\n\t * @returns {HistogramSelection} returns histogram selection\n\t * Returns histogram selection\n\t */\n\tgetHistogramSelection(selection, histogramData){\t\t\n\t\t// use default histogram selection if selection is not provided\n\t\tif (!selection){\n\t\t\treturn new DefaultHistogramSelectionImpl(histogramData, this._options.selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.FILTER){\n\t\t\treturn new FilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.INVERTED_FILTER){\n\t\t\treturn new InvertedFilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else {\n\t\t\treturn new MultipleHistogramSelectionImpl(histogramData, selection);\n\t\t}\n\t}  \t\n}","import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./HistogramDefaults\";\nimport HistogramData from \"./HistogramData\";\nimport HistogramRenderer from \"./HistogramRenderer\";\nimport HistogramSelectionFactory from \"./selection/HistogramSelectionFactory\"\nimport {SelectionTypes} from \"./selection/HistogramSelection\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main histogram class\n * @param {Object} options\n */\nclass Histogram {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * prompt handler\n\t\t */\n\t\tthis._options.promptHandler = options.promptHandler || null;\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar color \n\t\t */\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar opacity \n\t\t */\n\t\tthis._options.inactiveBarOpacity = getOptionValue(options.inactiveBarOpacity, Defaults.INACTIVE_BAR_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Over bar color \n\t\t */\n\t\tthis._options.overSelectionColor = getOptionValue(options.overSelectionColor, Defaults.OVER_SELECTION_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Over selection opacity \n\t\t */\n\t\tthis._options.overSelectionOpacity = getOptionValue(options.overSelectionOpacity, Defaults.OVER_SELECTION_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.selectionColor = getOptionValue(options.selectionColor, Defaults.SELECTION_COLOR);\n\t\t\n\t\t/**\n\t\t * @public\n\t\t * Enable selection toggle \n\t\t */\n\t\tthis._options.enableSelectionToggle = getOptionValue(options.enableSelectionToggle, Defaults.ENABLE_SELECTION_TOGGLE);\n\n\t\t/**\n\t\t * @public\n\t\t * Font size\n\t\t */\n\t\tthis._options.fontSize = getOptionValue(options.fontSize, Defaults.FONT_SIZE);\n\n\t\t/**\n\t\t * @public\n\t\t * selection type\n\t\t */\n\t\tthis._options.selectionType = getOptionValue(options.selectionType, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Color selections should be divided by vertical line. If null no divider is rendered.\n\t\t */\n\t\tthis._options.segmentDivider = getOptionValue(options.segmentDivider, null);\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t * @param {MouseEvent} browser event\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * histogramRenderer\n\t\t */\n\t\tthis._histogramRenderer = new HistogramRenderer(this._options);\n\n\t\tthis._histogramRenderer.on(\"selectionOver\", selectionIndex=>{\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled, d3.event);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"selectionChanged\", (selection)=>{\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t\t});\n\t\t\n\t\tthis._selectionFactory = new HistogramSelectionFactory(this._options);\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Histogram} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._histogramRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._histogramRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Array} data\n\t * @param {Array} selection\n\t * @param {Object} set data options\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetData(data, selection, options) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar histogramData = this._histogramData = new HistogramData(data, this._options);\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, histogramData);\n\n\t\tthis._options.selection = histogramSelection.getSelection();\n\t\tthis._selection = selection;\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = (value => String(value));\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._histogramRenderer.refresh(histogramData, histogramSelection, options);\n\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * @public\n\t * Sets selection type\n\t * @param {String} selectionType\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetSelectionType(selectionType){\n\t\tthis._options.selectionType = selectionType;\n\t\tthis.setSelection(this._selection);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\tthis._histogramRenderer.showSelectionLabels();\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._histogramRenderer.hideSelectionLabels();\n\t}\n\n\t/**\n\t * @deprecated use setSelection instead\n\t */\n\tupdateSelection(selection, options) {\n\t\treturn this.setSelection(selection, options);\n\t}\n\t\n\t/**\n\t * @public\n\t * Sets selection\n\t * @param {Array} selection\n\t * @param {Object} options\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetSelection(selection, options) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tif (!this._histogramData) {\n\t\t\tthrow \"Can't call setSelection() when no data is available.\"\n\t\t}\n\t\t// Do not want to mutate given object\n\t\tconst selectionCopy = JSON.parse(JSON.stringify(selection));\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selectionCopy, this._histogramData);\n\t\tthis._options.selection = histogramSelection.getSelection();\n\t\tthis._selection = selectionCopy;\n\t\tthis._histogramRenderer.setSelection(this._histogramSelection, options);\n\n\t\treturn this;\n\t}\n\n}\n\nHistogram.SelectionTypes = SelectionTypes;\nexport default Histogram;\n","/**\n * @public\n * Default widget width\n */\nexport const WIDTH = 360;\n\n/**\n * @public\n * Default widget height\n */\nexport const HEIGHT = 200;\n\n/**\n * @public\n * Default line color\n */\nexport const LINE_COLOR = \"#7ed321\";\n\n/**\n * @public\n * Default line colors\n */\nexport const LINE_COLORS = [];\n\n/**\n * @public\n * Default line opacity\n */\nexport const LINE_OPACITY = 1;\n\n/**\n * @public\n * Default fill color\n */\nexport const FILL_COLOR = \"#7ed321\";\n\n/**\n * @public\n * Default fill colors\n */\nexport const FILL_COLORS = [];\n\n/**\n * @public\n * Default fill opacity\n */\nexport const FILL_OPACITY = 0.1;\n\n/**\n * @public\n * Default line width\n */\nexport const LINE_WIDTH = 3;\n\n/**\n * @public\n * Default dot size\n */\nexport const DOT_SIZE = 6;\n\n/**\n * @public\n * Default margin \n */\nexport const MARGIN = {\n    bottom:28\n};\n\n/**\n * @public \n * Default axis color \n */\nexport const AXIS_COLOR = \"#f0f0f0\";\n\n\n/**\n * @public \n * Vertical label offset\n */\nexport const LABEL_OFFSET = 5;\n\n\n/**\n * @public \n * Zero line color\n */\nexport const ZERO_LINE_COLOR = \"#bababa\";","import * as d3 from \"d3\";\n\n/**\n * @class\n * series representing data for the line\n */\nexport default class LineData {\n\t/**\n\t * @param {Array} series\n\t * @param {Object} options\n\t */\n\tconstructor(series) {\n\t\tthis._series = series.slice();\n\t\tthis._minMax = this._calculateMinMax(this._series);\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns line series\n\t * @returns {Array} line series\n\t */\n\tgetSeries() {\n\t\treturn this._series;\n\t}\n\n\t/**\n\t * @public\n\t * Returns all data from all series merged into one array\n\t * @returns {Array}\n\t */\n\tgetAllData() {\n\t\treturn [].concat.apply([], this._series);\n\t}\n\n\t/**\n\t * Returns merged data where each unique label has an array of values\n\t */\n\tgetMergedData() {\n\t\tvar dataMap = {};\n\t\tthis.getAllData().forEach((item=>{\n\t\t\tconst result = dataMap[item.label] || {\n\t\t\t\tlabel:item.label,\n\t\t\t\tvalues:[],\n\t\t\t\ttooltips:[]\n\t\t\t};\n\t\t\tresult.values.push(item.value);\n\t\t\tresult.tooltips.push(item.tooltip);\n\t\t\tdataMap[item.label] = result;\n\t\t}));\n\n\t\treturn Object.values(dataMap);\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given series\n\t* @param {Array} series\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(series) {\n\t\tvar data = [].concat.apply([], series);\n\t\tvar min = d3.min(data, function (d) { return d.value; });\n\t\tvar max = d3.max(data, function (d) { return d.value; });\n\n\t\tif (data.length <= series.length) {\n\t\t\tmin = Math.min(min, 0);\n\t\t\tmax = Math.max(max, 0);\n\t\t}\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.max;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}","import style from \"./Line.css\";\nimport * as Defaults from \"./LineDefaults\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\nvar gradientID = 0;\n\n/**\n * @class\n * Line renderer class\n * @param {Object} options\n */\nexport default class TooltipRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Line options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Line data \n\t\t */\n\t\tthis._lineData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Line has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n    }\n\n\t/**\n\t * @public\n\t * Returns whether Line has been rendered or not\n\t * @returns {boolean} true if Line has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {LineHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(groupEl){\n\t\tthis._groupEl = groupEl;\n\t\tthis._rendered = true;\n\n\t\tthis._groupEl.on(\"mouseout\", this._onMouseOut.bind(this))\n\n\t\treturn this;\n\t}\n\n\t_getTextAnchor(xPos, bottomLabelWidth, width){\n\t\tvar xpos = xPos;\n\t\tif (xpos - bottomLabelWidth/2 < 0){\n\t\t\treturn \"start\"\n\t\t} else if (xpos + bottomLabelWidth/2 > width){\n\t\t\treturn \"end\"\n\t\t} else {\n\t\t\treturn \"middle\";\n\t\t}\n\t}\n\n\t_getTooltipHTML(d){\n\t\treturn d.tooltips.filter((tooltip, index)=>{\n\t\t\treturn d.values[index] != null;\n\t\t}).map((tooltip, index)=>{\n\t\t\tconst value = tooltip || this._options.format(d.values[index]);\n\t\t\tvar color = this._options.lineColors[index] || this._options.lineColor;\n\t\t\tconst icon = `\n\t\t\t\t<span style=\"display:inline-block;position:relative;top:-1px;margin-right:5px;width:6px;height:6px;border-radius:50%;background-color:${color}\"></span>\n\t\t\t`;\n\n\t\t\tif (d.tooltips.length>1){\n\t\t\t\treturn icon + value;\n\t\t\t} else {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\t\n\t\t}).join(\"<br />\");\n\t}\n\n\t_onHoverAreaOver(d){\n\t\tvar duration = this._tooltipGroup.attr(\"visibility\") == \"visible\"?0:0;\n\t\tvar x = this._xAxis;\n\t\tvar y = this._yAxis;\n\t\tvar width = this._options.width;\n\t\tvar xPos = x(d.label);\n\n\t\t// update tooltip position\n\t\tthis._tooltipGroup\n\t\t\t.transition()\n\t\t\t.duration(duration)\n\t\t\t.attr(\"visibility\", \"visible\")\n\t\t\t.attr(\"transform\", \"translate(\"+xPos+\", 0)\")\n\n\t\t// update tooltip bottom label\n\t\tvar bottomLabelWidth = this._tooltipBottomLabel.node().getBBox().width;\n\t\tvar bottomMaskPadding = 25;\n\t\tvar textAnchor = this._getTextAnchor(xPos, bottomLabelWidth, width);\n\n\t\tthis._tooltipBottomLabel\n\t\t\t.text(d.label)\n\t\t\t.attr(\"text-anchor\", textAnchor);\n\n\t\tthis._tooltipBottomLabel.attr(\"transform\", ()=>{\n\t\t\treturn {\n\t\t\t\t\"start\":\"translate(\"+-xPos+\", 0)\",\n\t\t\t\t\"middle\":\"translate(0, 0)\",\n\t\t\t\t\"end\":\"translate(\"+(width-xPos)+\", 0)\"\n\t\t\t}[textAnchor]\n\t\t});\n\t\t\n\t\tvar bottomMaskWidth = bottomMaskPadding*2 + bottomLabelWidth;\n\t\tthis._tooltipBottomLabelMask\n\t\t\t.attr(\"width\", bottomMaskWidth)\n\t\t\t.attr(\"x\", ()=>{\n\t\t\t\treturn {\n\t\t\t\t\t\"start\":-xPos-bottomMaskPadding,\n\t\t\t\t\t\"middle\":-bottomMaskWidth/2,\n\t\t\t\t\t\"end\":width-xPos-bottomMaskWidth+bottomMaskPadding,\n\t\t\t\t}[textAnchor]\n\t\t\t})\n\n\t\tthis._handleMaskGradientEl.attr(\"x1\", -bottomMaskWidth/2);\n\t\tthis._handleMaskGradientEl.attr(\"x2\", bottomMaskWidth/2);\t\t\t\n\n\t\t// update tooltip top label \n\t\tvar tooltipHtml = this._getTooltipHTML(d);\n\t\tthis._tooltipTopLabel.node().innerHTML = tooltipHtml;\n\t\tvar labelLeft = this._getLabelLeft(xPos);\n\n\t\t// if value is not null or undefined\n\t\tif (d.values.some(d => d != null)){\n\t\t\tthis._tooltipTopLabel\n\t\t\t\t.style(\"left\", labelLeft+\"px\")\n\t\t\t\t.style(\"visibility\", \"visible\")\n\t\t\t\t.style(\"top\", y(Math.max.apply(Math,d.values))-50+\"px\")\n\n\t\t\t// update line circle\n\t\t\tthis._tooltipLineCircle\n\t\t\t\t.transition()\n\t\t\t\t.duration(duration)\n\t\t\t\t.style(\"visibility\", (circle, i)=>{\n\t\t\t\t\treturn d.values[i]?\"visible\":\"hidden\";\n\t\t\t\t})\n\t\t\t\t.attr(\"cy\", (circle, i)=>{\n\t\t\t\t\treturn d.values[i]?y(d.values[i]):0\n\t\t\t\t})\t\t\t\t\n\t\t} else {\n\t\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\");\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\n\t\t}\n\t\n\t}\n\n\t_getLabelLeft(xPos){\n\t\tvar labelWidth = this._tooltipTopLabel.node().offsetWidth;\n\t\tvar labelLeft = xPos-labelWidth/2;\n\t\t\n\t\tif (labelLeft<0){\n\t\t\tlabelLeft = 0;\n\t\t}\n\n\t\tif (labelLeft>this._options.width - labelWidth){\n\t\t\tlabelLeft = this._options.width - labelWidth;\n\t\t}\n\n\t\treturn labelLeft;\n\t}\n\n\t_onMouseOut(){\n\t\t// only hide when mouse is outside of widget\n\t\tif (!this._groupEl.node().parentNode.contains(d3.event.relatedTarget)){\n\t\t\tthis._hideTooltip();\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\n\t\t}\n\t\t\n\t}\n\n\t_hideTooltip(){\n\t\tthis._tooltipGroup.attr(\"visibility\", \"hidden\")\n\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\")\n\t}\n\n\t_renderTooltip(){\n\t\tvar data = this._lineData.getMergedData();\n\t\t\n\t\tvar series = this._lineData.getSeries();\n\t\tvar hoverWidth;\n\t\tif (data.length>series.length){\n\t\t\thoverWidth = this._options.width / (data.length-1);\n\t\t} else {\n\t\t\thoverWidth = this._options.width;\n\t\t}\n\n\t\tthis._hoverAreas = this._groupEl\n\t\t\t.selectAll(\".\"+style[\"tooltip-hover-area\"])\n\t\t\t.data(data)\n\t\t\t.enter()\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"tooltip-hover-area\"])\n\t\t\t.attr(\"width\", hoverWidth)\n\t\t\t.attr(\"fill-opacity\", 0.00)\n\t\t\t.attr(\"x\", (d)=>{\n\t\t\t\treturn this._xAxis(d.label) - hoverWidth/2\n\t\t\t})\n\t\t\t.attr(\"height\", this._options.height)\n\t\t\t.on(\"mouseover\", this._onHoverAreaOver.bind(this))\n\n\t\tthis._tooltipGroup = this._groupEl\n\t\t\t.append(\"g\")\n\t\t\t.attr(\"visibility\", \"hidden\")\n\t\t\t.attr(\"class\", style[\"tooltip-group\"])\n\n\n\t\tthis._tooltipLineCircle = this._tooltipGroup\n\t\t\t.selectAll(\".\"+style[\"tooltip-line-circle\"])\n\t\t\t.data(series)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"visibility\", \"hidden\")\n\t\t\t.attr(\"class\", style[\"tooltip-line-circle\"])\n\t\t\t.attr(\"stroke-width\", this._options.lineWidth)\n\t\t\t.attr(\"stroke\", (d, i)=>{\n\t\t\t\treturn this._options.lineColors[i] || this._options.lineColor;\n\t\t\t})\n\t\t\t.attr(\"stroke-opacity\", this._options.lineOpacity)\n\t\t\t.attr(\"r\", 2.5+this._options.lineWidth/2)\n\n\t\tthis._tooltipAxisCircle = this._tooltipGroup\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"class\", style[\"tooltip-axis-circle\"])\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"cy\", this._options.height - Defaults.MARGIN.bottom)\n\t\t\t.attr(\"r\", 2.5 + 1/2)\n\n\t\tthis._tooltipBottomLabelMask = this._tooltipGroup\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"fill\", \"url(#\"+this._handleMaskGradientEl.attr(\"id\")+\")\")\n\t\t\t.attr(\"class\", style[\"tooltip-label-mask\"])\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET-15)\n\t\t\t.attr(\"height\", 20)\n\n\t\tthis._tooltipBottomLabel = this._tooltipGroup\n\t\t\t.append(\"text\")\n\t\t\t.attr(\"class\", style[\"tooltip-label\"])\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET)\n\t\t\t.attr(\"text-anchor\", \"start\")\n\t\t\t.text(data[0].label)\n\n\t\tthis._tooltipTopLabel = d3.select(this._groupEl.node().parentNode.parentNode)\n\t\t\t.insert(\"span\", \":first-child\")\n\t\t\t.attr(\"class\", style[\"tooltip-top-label\"])\n\t\t\t.style(\"position\", \"absolute\")\n\t\t\t.style(\"visibility\", \"hidden\")\n\n\t\tthis._tooltipRendered = true;\n\t}\n\n\t/**\n\t * Creates mask gradient element\n\t * @param {Number} handleIndex \n\t */\n\t_createMaskGradientElement(){\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\n\t\t\t.attr(\"id\", style[\"tooltip-label-mask\"]+\"-\"+(gradientID++)+\"-gradient\")\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\n\t\t\t.attr(\"y1\", \"0\").attr(\"x1\", \"0\")\n\t\t\t.attr(\"y2\", \"0\").attr(\"x2\", \"0\");\n\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\n\t\t\t.data([\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\n\t\t\t])\n\t\t\t.enter().append(\"stop\")\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\n\n\t\treturn this._handleMaskGradientEl;\n\t}\n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tif (this._tooltipRendered){\n\t\t\tthis._hoverAreas.remove();\n\t\t\tthis._tooltipGroup.remove();\n\t\t\tthis._tooltipTopLabel.remove();\n\t\t\tthis._tooltipRendered = false;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Sets line data \n\t * @param {LineData}\n\t */\n\tupdate(lineData, x, y){\n\t\tthis._xAxis = x;\n\t\tthis._yAxis = y; \n\t\tthis._lineData = lineData;\n\n\t\tthis._createMaskGradientElement();\n\t\tthis._clear();\n\t\tthis._renderTooltip();\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Line UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._clear();\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","import style from \"./Line.css\";\nimport * as Defaults from \"./LineDefaults\";\nimport Observable from \"../utils/Observable\";\nimport TooltipRenderer from \"./TooltipRenderer\";\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Line renderer class\n * @param {Object} options\n */\nexport default class LineRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Line options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Line data \n\t\t */\n\t\tthis._lineData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Line has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous data for animation\n\t\t */\n\t\tthis._prevData = null;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n\n\t\tthis._tooltipRenderer = new TooltipRenderer(options);\n    }\n\n\t/**\n\t * @public\n\t * Returns whether Line has been rendered or not\n\t * @returns {boolean} true if Line has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {LineHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(selector){\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\n\t\t// force position relative so the toolip shows correctly\n\t\tct.style(\"position\", \"relative\");\n\n\t\t// render SVG\n\t\tthis._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.classed(style.svg, true)\n\t\t\t.classed(style.line, true);\n\n\t\t// render group element\n\t\tthis._groupEl = this._svgEl.append(\"g\");\n\n\t\tthis._tooltipRenderer.render(this._groupEl);\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t} \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._groupEl.node().innerHTML = \"\";\n\t}\n\n\t/**\n\t * @private\n\t * Sets line data \n\t * @param {LineData}\n\t */\n\tupdate(lineData){\n\t\tthis._lineData = lineData;\t\t\n\t\tthis._clear();\n\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar verticalSpacing = this._options.verticalSpacing;\n\n\t\tvar series = lineData.getSeries();\n\t\tvar allData = lineData.getAllData()\n\t\tvar minMax = lineData.getMinMax();\n\n\t\tvar x = this._xAxis = d3.scalePoint().range([0, width]);\t\n\t\tvar y = this._yAxis = d3.scaleLinear().range([height-verticalSpacing, verticalSpacing]);\n\n\t\tx.domain(allData.map(function (d) {return d.label; }));\n\t\ty.domain([minMax.min, minMax.max]);\n\n\t\tthis._renderZeroLine(allData);\n\t\tseries.forEach((data, seriesIndex)=>{\n\t\t\tthis._renderDataLines(data, seriesIndex);\n\t\t});\n\t\tthis._renderXAxis(allData);\n\t\tthis._tooltipRenderer.update(lineData, x, y);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * Renders x axis\n\t*/\n\t_renderXAxis(data){\n\t\tthis._groupEl.append(\"line\")\n\t\t\t.attr(\"x1\", 0)\n\t\t\t.attr(\"x2\", this._options.width)\n\t\t\t.attr(\"y1\", this._options.height-Defaults.MARGIN.bottom)\n\t\t\t.attr(\"y2\", this._options.height-Defaults.MARGIN.bottom)\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke\", this._options.axisColor)\n\n\t\t// render to labels on start and end sides if multiple items are available\n\t\tif (data.length>1){\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[0].label)\n\t\t\t\t.attr(\"x\", 0)\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\n\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[data.length-1].label)\n\t\t\t\t.attr(\"x\", this._options.width)\n\t\t\t\t.attr(\"text-anchor\", \"end\")\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\n\n\t\t// render single label in the middle if only one item is available\t\t\t\t\n\t\t} else if (data.length == 1){\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[0].label)\n\t\t\t\t.attr(\"x\", this._options.width/2)\n\t\t\t\t.attr(\"text-anchor\", \"middle\")\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\n\t\t}\t\n\t}\n\t/**\n\t * Returns true if graph should render zero line\n\t * @param {Array} data \n\t */\n\t_showZeroLine(){\n\t\tvar zeroLinePosition = this._yAxis(0);\n\t\tvar axisPosition = this._options.height-Defaults.MARGIN.bottom;\n\t\tvar treshold = 10;\n\t\treturn zeroLinePosition<axisPosition-treshold;\n\t}\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * Renders zero line\n\t*/\n\t_renderZeroLine(){\n\t\tif (this._showZeroLine()){\n\t\t\tthis._groupEl.append(\"line\")\n\t\t\t\t.attr(\"x1\", 0)\n\t\t\t\t.attr(\"x2\", this._options.width)\n\t\t\t\t.attr(\"y1\", Math.round(this._yAxis(0)))\n\t\t\t\t.attr(\"y2\", Math.round(this._yAxis(0)))\n\t\t\t\t.attr(\"stroke-dasharray\",\"2 ,2\")\n\t\t\t\t.attr(\"stroke\", this._options.zeroLineColor)\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * @param {Number} seriesIndex\n\t * Renders data lines\n\t*/\n\t_renderDataLines(data, seriesIndex) { \n\t\tvar x = this._xAxis;\n\t\tvar y = this._yAxis;\n\t\t\n\t\tvar options = this._options;\n\t\tvar minHeight = this._options.height-Defaults.MARGIN.bottom;\n\t\tvar areaZero = this._showZeroLine()?Math.min(minHeight, y(0)):minHeight;\n\t\tvar lineColor = options.lineColors[seriesIndex] || options.lineColor;\n\t\tvar fillColor = options.fillColors[seriesIndex] || options.fillColor;\n\n\t\t// define the area\n\t\tvar area = d3.area()\n\t\t\t.x(function(d) {return x(d.label); })\n\t\t\t.y0(areaZero)\n\t\t\t.y1(function(d) { return y(d.value); });\n\n\t\t// define the line\n\t\tvar line = d3.line()\n\t\t\t.x(function(d) { return x(d.label); })\n\t\t\t.y(function(d) { return y(d.value); });\t\t\n\n\t\t// apply grouping if needed (null or other splits)\n\t\tconst groupedData = this._getGroupedData(data);\n\n\t\tgroupedData.forEach(lineData=>{\n\t\t\t// only add area if not rendering a dot\n\t\t\tif (lineData.length>1){\n\t\t\t\t// add the area path\n\t\t\t\tthis._groupEl.append(\"path\")\n\t\t\t\t.data([lineData])\n\t\t\t\t.attr(\"class\", style[\"area\"])\n\t\t\t\t.attr(\"fill\", fillColor)\n\t\t\t\t.attr(\"fill-opacity\", options.fillOpacity)\n\t\t\t\t.attr(\"d\", area);\n\t\t\t}\n\n\t\t\tif (lineData.length){\n\t\t\t\t// add the line path\n\t\t\t\tthis._groupEl.append(\"path\")\n\t\t\t\t\t.data([lineData])\n\t\t\t\t\t.attr(\"fill\", \"none\")\n\t\t\t\t\t.attr(\"stroke-linecap\", \"round\")\n\t\t\t\t\t.attr(\"stroke\", lineColor)\n\t\t\t\t\t.attr(\"stroke-opacity\", 1)\n\t\t\t\t\t// note that in case of a single item, dot is rendered with a different size\n\t\t\t\t\t.attr(\"stroke-width\", lineData.length>1?options.lineWidth:options.dotSize)\n\t\t\t\t\t.attr(\"class\", style[\"line\"])\n\t\t\t\t\t.attr(\"d\", (d)=>{\n\t\t\t\t\t\tvar path = line(d);\n\t\t\t\t\t\t// Fix issue in Chrome on Mac and Surface where\n\t\t\t\t\t\t// path points are not rendererd if it's a single point \n\t\t\t\t\t\tif (path && path.split(\",\").length == 2){\n\t\t\t\t\t\t\treturn path + \" \" + path;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn path;\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\t\n\n\t}\n\n\t/**\n\t * @private\n\t * Splits given array into multiple in case there is null in value\n\t * @param {Array} data \n\t */\n\t_getGroupedData(data){\n\t\tlet group = [];\n\t\tconst result = [group];\n\t\t\n\t\tdata.forEach(item=>{\n\t\t\tif (item.value === null){\n\t\t\t\tgroup = [];\n\t\t\t\tresult.push(group);\n\t\t\t} else {\n\t\t\t\tgroup.push(item);\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Line UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./LineDefaults\";\nimport LineData from \"./LineData\";\nimport LineRenderer from \"./LineRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main Line class\n * @param {Object} options\n */\nclass Line {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Line width\n\t\t */\n\t\tthis._options.lineWidth = getOptionValue(options.lineWidth, Defaults.LINE_WIDTH);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Dot size\n\t\t */\n\t\tthis._options.dotSize = getOptionValue(options.dotSize, Defaults.DOT_SIZE);\t\t\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Line color \n\t\t */\n\t\tthis._options.lineColor = getOptionValue(options.lineColor, Defaults.LINE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Line colors \n\t\t */\n\t\tthis._options.lineColors = getOptionValue(options.lineColors, Defaults.LINE_COLORS);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Line opacity \n\t\t */\n\t\tthis._options.lineOpacity = getOptionValue(options.lineOpacity, Defaults.LINE_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill color \n\t\t */\n\t\tthis._options.fillColor = getOptionValue(options.fillColor, Defaults.FILL_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill colors\n\t\t */\n\t\tthis._options.fillColors = getOptionValue(options.fillColors, Defaults.FILL_COLORS);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Fill opacity\n\t\t */\n\t\tthis._options.fillOpacity = getOptionValue(options.fillOpacity, Defaults.FILL_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.axisColor = getOptionValue(options.axisColor, Defaults.AXIS_COLOR);\t\t\n\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.zeroLineColor = getOptionValue(options.zeroLineColor, Defaults.ZERO_LINE_COLOR);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Vertical spacing\n\t\t */\n\t\tthis._options.verticalSpacing = getOptionValue(options.verticalSpacing, this._options.height / 4);\t\t\n\t\t\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * LineRenderer\n\t\t */\n\t\tthis._lineRenderer = new LineRenderer(this._options);\n\n\t\tthis._lineRenderer.on(\"pointOver\", data=>{\n\t\t\tthis._observable.fire(\"pointOver\", data);\n\t\t})\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Line} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._lineRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._lineRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets multiple series of data\n\t * @param {Array[]} series\n\t * @returns {Line} returns this widget instance \n\t */\n\tsetSeries(series) {\n\t\treturn this.setData.apply(this, series);\n\t}\n\n\t/**\n\t * Sets line data\n\t * @param {...Array} series\n\t * @returns {Line} returns this widget instance \n\t */\n\tsetData(...series) {\n\t\tif (!this._lineRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar lineData = this._lineData = new LineData(series, this._options);\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + this._lineData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._lineRenderer.update(lineData);\n\n\t\treturn this;\n\t}\n}\n\nexport default Line;\n","\nexport const WIDTH = 360;\nexport const HEIGHT = 129;\nexport const LABEL_FONT_SIZE = 13;\nexport const TOOLTIP_FONT_SIZE = 11;\nexport const TOOLTIP_SYMBOL = '_circle';\nexport const ACTIVE_COLORS = [\"#49ace2\", \"#ca62dc\"];\nexport const DETAILS_HIDDEN = false;\nexport const DETAILS_BOTTOM_SPACE = 10;\nexport const MINMAX = \"sum\";\nexport const DUAL_VALUE = false;\nexport const ENABLE_BAR_HOVER = false;\nexport const ENABLE_BAR_TOGGLE = false;\nexport const FORMAT = \",f\";\nexport const BAR_HEIGHT = 43;\nexport const BAR_DISABLED = false;\nexport const HORIZONTAL_PADDING = 10;\nexport const STRIPE_HEIGHT = 5;\nexport const STRIPE_BACKGROUND_COLOR = \"#f0f0f0\";\nexport const TOOLTIP_SPACE = 7;\nexport const CORNER_ROUNDED = true;\nexport const SHOW_ONLY_TOOL = true;\nexport const ONLY_TOOL_TEXT = 'Only';\nexport const SHOW_LABEL_CIRCLE = false;\nexport const LABEL_CIRCLE_RADIUS = 3.5;\n","export default class BarchartData {\n\n\tconstructor(\n\t\t_,\n\t\tdetailsData,\n\t\tbarsData\n\t) {\n\t\tif (typeof barsData === 'undefined') throw \"barsData is required parameter\";\n\n\t\tthis._detailsData = detailsData;\n\t\tthis._barsData = barsData;\n\t}\n\n\t/**\n\t * @param {BarchartData} barchartData\n\t */\n\tstatic copyAs(barchartData) {\n\t\treturn new BarchartData(\n\t\t\t{},\n\t\t\tbarchartData.details,\n\t\t\tbarchartData.bars\n\t\t);\n\t}\n\n\tget details() {\n\t\treturn this._detailsData;\n\t}\n\tset details(detailsData) {\n\t\tthis._detailsData = detailsData;\n\t}\n\n\tget bars() {\n\t\treturn this._barsData;\n\t}\n\tgetBar(index) {\n\t\treturn this._barsData[index];\n\t}\n\tsetBar(index, barData) {\n\t\tthis._barsData[index] = barData;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (minMax === \"sum\") {\n\n\t\t\tlet containsNegativeVal = false;\n\t\t\tlet containsPositiveVal = false;\n\t\t\tconst sum = this.bars.reduce((sum, bar) => {\n\t\t\t\tconst min = bar.calculateMinMax(minMax).min;\n\t\t\t\tconst max = bar.calculateMinMax(minMax).max;\n\t\t\t\tif (min < 0) containsNegativeVal = true;\n\t\t\t\tif (max > 0) containsPositiveVal = true;\n\t\t\t\treturn sum + Math.max(Math.abs(min), Math.abs(max));\n\t\t\t}, 0);\n\n\t\t\treturn {\n\t\t\t\tmin: containsNegativeVal ? -sum : 0,\n\t\t\t\tmax: containsPositiveVal ? sum : 0\n\t\t\t}\n\n\t\t} else if (minMax === \"auto\") {\n\n\t\t\treturn {\n\t\t\t\tmin: this.bars.reduce((min, bar) => Math.min(min, bar.calculateMinMax(minMax).min), 0),\n\t\t\t\tmax: this.bars.reduce((max, bar) => Math.max(max, bar.calculateMinMax(minMax).max), 0)\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn minMax;\n\t\t}\n\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\treturn this.bars.reduce((max, bar) => Math.max(max, bar.getPrecision(precision)), 0)\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n}","export default class DetailsData {\n\n\tconstructor(\n\t\t{\n\t\t\tlabel,\n\t\t\tdisabled,\n\t\t\tcolor\n\t\t},\n\t\ttooltips\n\t) {\n\t\tif (typeof label === 'undefined') throw \"label is required parameter\";\n\n\t\tthis._label = label;\n\t\tthis._disabled = disabled;\n\t\tthis._color = color;\n\t\tthis._tooltips = tooltips;\n\t}\n\n\t/**\n\t * @param {DetailsData} detailsData\n\t */\n\tstatic copyAs(detailsData) {\n\t\treturn new DetailsData(\n\t\t\t{\n\t\t\t\tlabel: detailsData.label,\n\t\t\t\tdisabled: detailsData.disabled,\n\t\t\t\tcolor: detailsData.color\n\t\t\t},\n\t\t\tdetailsData.tooltips,\n\t\t);\n\t}\n\n\tget label() {\n\t\treturn this._label;\n\t}\n\tset label(label) {\n\t\tthis._label = label;\n\t}\n\n\tget tooltips() {\n\t\treturn this._tooltips;\n\t}\n\tgetTooltip(index) {\n\t\treturn this._tooltips[index];\n\t}\n\taddTooltip(tooltipData) {\n\t\tif (typeof this._tooltips === 'undefined') {\n\t\t\tthis._tooltips = [];\n\t\t}\n\t\tthis._tooltips.push(tooltipData);\n\t}\n\tsetTooltip(index, tooltipData) {\n\t\tthis._tooltips[index] = tooltipData;\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\tset disabled(disabled) {\n\t\tthis._disabled = disabled;\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\tif (!this.tooltips) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn this.tooltips.reduce((max, tooltip) => Math.max(max, tooltip.getPrecision()), 0);\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n}\n","\nexport default class TooltipData {\n\n\tconstructor(\n\t\t{\n\t\t\ttext,\n\t\t\tsymbol,\n\t\t\tcolor\n\t\t}\n\t) {\n\t\tif (typeof text === 'undefined') throw \"text is required parameter\";\n\t\tthis._symbol = symbol;\n\t\tthis._color = color;\n\t\tthis._text = text;\n\t}\n\n\t/**\n\t * @param {TooltipData} tooltipData\n\t */\n\tstatic copyAs(tooltipData) {\n\t\treturn new TooltipData({\n\t\t\ttext: tooltipData.text,\n\t\t\tsymbol: tooltipData.symbol,\n\t\t\tcolor: tooltipData.color\n\t\t});\n\t}\n\n\tget symbol() {\n\t\treturn this._symbol;\n\t}\n\tset symbol(symbol) {\n\t\tthis._symbol = symbol;\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tget text() {\n\t\treturn this._text;\n\t}\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\tif (this.isNumber()) {\n\t\t\t\tconst str = this.text.toString();\n\t\t\t\tif (str.includes('.')) {\n\t\t\t\t\treturn str.split(\".\")[1].length;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n\tisNumber() {\n\t\treturn !isNaN(parseFloat(this.text)) && isFinite(this.text);\n\t}\n\n}","\nexport default class BarData {\n\n\tconstructor(\n\t\t{\n\t\t\tdisabled,\n\t\t\thighlighted\n\t\t},\n\t\tdetailsData,\n\t\tstripesData\n\t) {\n\t\tif (typeof stripesData === 'undefined') throw \"stripesData is required parameter\";\n\n\t\tthis._disabled = disabled;\n\t\tthis._highlighted = highlighted;\n\t\tthis._detailsData = detailsData;\n\t\tthis._stripesData = stripesData;\n\t}\n\n\t/**\n\t * @param {BarData} barData\n\t */\n\tstatic copyAs(barData) {\n\t\treturn new BarData(\n\t\t\t{\n\t\t\t\tdisabled: barData.disabled,\n\t\t\t\thighlighted: barData.highlighted\n\t\t\t},\n\t\t\tbarData.details,\n\t\t\tbarData.stripes\n\t\t);\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\tset disabled(disabled) {\n\t\tthis._disabled = disabled;\n\t}\n\n\tget highlighted() {\n\t\treturn this._highlighted;\n\t}\n\tset highlighted(highlighted) {\n\t\tthis._highlighted = highlighted;\n\t}\n\n\tget details() {\n\t\treturn this._detailsData;\n\t}\n\tset details(detailsData) {\n\t\tthis._detailsData = detailsData;\n\t}\n\n\tget stripes() {\n\t\treturn this._stripesData;\n\t}\n\tgetStripe(index) {\n\t\treturn this._stripesData[index];\n\t}\n\tsetStripe(index, stripeData) {\n\t\tthis._stripesData[index] = stripeData;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (minMax === \"sum\") {\n\n\t\t\tlet containsNegativeVal = false;\n\t\t\tlet containsPositiveVal = false;\n\t\t\tconst absMax = this.stripes.reduce((sum, stripe) => {\n\t\t\t\tconst min = stripe.calculateMinMax(minMax).min;\n\t\t\t\tconst max = stripe.calculateMinMax(minMax).max;\n\t\t\t\tif (min < 0) containsNegativeVal = true;\n\t\t\t\tif (max > 0) containsPositiveVal = true;\n\t\t\t\treturn sum + Math.max(Math.abs(min), Math.abs(max))\n\t\t\t}, 0);\n\n\t\t\treturn {\n\t\t\t\tmin: containsNegativeVal ? -absMax : 0,\n\t\t\t\tmax: containsPositiveVal ? absMax : 0\n\t\t\t}\n\n\t\t} else if (minMax === \"auto\") {\n\n\t\t\treturn {\n\t\t\t\tmin: this.stripes.reduce((min, stripe) => Math.min(min, stripe.calculateMinMax(minMax).min), 0),\n\t\t\t\tmax: this.stripes.reduce((max, stripe) => Math.max(max, stripe.calculateMinMax(minMax).max), 0)\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn minMax;\n\t\t}\n\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (typeof this.details === 'undefined') {\n\t\t\treturn 0;\n\t\t}\n\t\tif (this.details === null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.details.getPrecision(precision);\n\t}\n\n}","\nexport default class StripeData {\n\n\tconstructor(\n\t\t{\n\t\t\tvalue,\n\t\t\tcolor,\n\t\t\tright: {\n\t\t\t\tvalue: leftValue,\n\t\t\t\tcolor: leftColor\n\t\t\t} = {},\n\t\t\tleft: {\n\t\t\t\tvalue: rightValue,\n\t\t\t\tcolor: rightColor\n\t\t\t} = {}\n\t\t}\n\t) {\n\t\tif (typeof value === 'undefined') {\n\t\t\tif (typeof leftValue === 'undefined') throw \"value or leftValue is required parameter\";\n\t\t\tif (typeof rightValue === 'undefined') throw \"value or rightValue is required parameter\";\n\n\t\t\tthis._right = {\n\t\t\t\tvalue: leftValue,\n\t\t\t\tcolor: leftColor\n\t\t\t};\n\t\t\tthis._left = {\n\t\t\t\tvalue: rightValue,\n\t\t\t\tcolor: rightColor\n\t\t\t}\n\t\t} else {\n\t\t\tthis._value = value;\n\t\t\tthis._color = color;\n\t\t}\n\t}\n\n\t/**\n\t * @param {StripeData} stripeData\n\t */\n\tstatic copyAs(stripeData) {\n\t\tif (stripeData.dual) {\n\t\t\treturn new StripeData({\n\t\t\t\tright: stripeData.right,\n\t\t\t\tleft: stripeData.left\n\t\t\t});\n\t\t} else {\n\t\t\treturn new StripeData({\n\t\t\t\tvalue: stripeData.value,\n\t\t\t\tcolor: stripeData.color,\n\t\t\t});\n\t\t}\n\t}\n\n\tget dual() {\n\t\treturn (typeof this._value === 'undefined');\n\t}\n\n\tget value() {\n\t\treturn this._value;\n\t}\n\tset value(value) {\n\t\tthis._value = value;\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tget left() {\n\t\treturn this._left;\n\t}\n\tset left(leftData) {\n\t\tthis._left = leftData;\n\t}\n\n\tget right() {\n\t\treturn this._right;\n\t}\n\tset right(rightData) {\n\t\tthis._right = rightData;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (this.dual) {\n\t\t\tif (minMax === \"sum\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.left.value, this.right.value),\n\t\t\t\t\tmax: Math.max(0, this.left.value + this.right.value)\n\t\t\t\t}\n\t\t\t} else if (minMax === \"auto\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.left.value, this.right.value),\n\t\t\t\t\tmax: Math.max(0, this.left.value, this.right.value)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn minMax;\n\t\t\t}\n\n\t\t} else {\n\t\t\tif (minMax === \"sum\" || minMax === \"auto\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.value),\n\t\t\t\t\tmax: Math.max(0, this.value)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn minMax;\n\t\t\t}\n\t\t}\n\t}\n\n}","import BarchartData from \"./data/BarchartData\";\nimport DetailsData from \"./data/DetailsData\";\nimport TooltipData from \"./data/TooltipData\";\nimport BarData from \"./data/BarData\";\nimport StripeData from \"./data/StripeData\";\n\nclass JsonDataConverter {\n\n\tconvert(barchartJsonData) {\n\n\t\tlet detailsData;\n\t\tif (typeof barchartJsonData.details !== 'undefined') {\n\t\t\tlet tooltipsData;\n\t\t\tif (typeof barchartJsonData.details.tooltips !== 'undefined') {\n\t\t\t\ttooltipsData = barchartJsonData.details.tooltips.map(\n\t\t\t\t\ttooltipJsonData => new TooltipData(tooltipJsonData)\n\t\t\t\t);\n\t\t\t}\n\t\t\tdetailsData = new DetailsData(barchartJsonData.details, tooltipsData);\n\t\t}\n\n\t\tconst barsData = barchartJsonData.bars.map(barJsonData => {\n\n\t\t\tlet detailsData;\n\t\t\tif (typeof barJsonData.details !== 'undefined') {\n\t\t\t\tlet tooltipsData;\n\t\t\t\tif (typeof barJsonData.details.tooltips !== 'undefined') {\n\t\t\t\t\ttooltipsData = barJsonData.details.tooltips.map(\n\t\t\t\t\t\ttooltipJsonData => new TooltipData(tooltipJsonData)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tdetailsData = new DetailsData(barJsonData.details, tooltipsData);\n\t\t\t}\n\n\t\t\tconst stripesData = barJsonData.stripes.map(stripeJsonData => new StripeData(stripeJsonData));\n\n\t\t\treturn new BarData(barJsonData, detailsData, stripesData);\n\t\t});\n\n\t\tconst barchartData = new BarchartData(barchartJsonData, detailsData, barsData);\n\n\t\treturn barchartData;\n\n\t}\n\n}\n\nexport default JsonDataConverter;\n","import style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport Observable from \"../../utils/Observable\";\nimport JsonDataConverter from \"../JsonDataConverter\";\n\nlet MASK_INDEX = 0;\n\nclass Component {\n\n\tconstructor(\n\t\twidth,\n\t\theight,\n\t\tclassName = \"component\",\n\t\talignRight = false,\n\t\talignBottom = false\n\t) {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tthis._container = null;\n\t\tthis._maskIndex = MASK_INDEX++;\n\t\tthis._className = className;\n\t\tthis._observable = new Observable([\n\t\t\t\"enter\",\n\t\t\t\"leave\",\n\t\t\t\"click\"\n\t\t]);\n\t\tthis._alignRight = alignRight;\n\t\tthis._alignBottom = alignBottom;\n\n\t\tthis._data = null;\n\t}\n\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\n\n\tget width() {\n\t\treturn this._width;\n\t}\n\n\tget height() {\n\t\treturn this._height;\n\t}\n\n\tget className() {\n\t\treturn this._className;\n\t}\n\n\tget container() {\n\t\treturn this._container;\n\t}\n\n\tget alignRight() {\n\t\treturn this._alignRight;\n\t}\n\n\tget alignBottom() {\n\t\treturn this._alignBottom;\n\t}\n\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\tset width(value) {\n\t\tthis._width = value;\n\t\tif (this.isRendered()) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"width\", value);\n\t\t}\n\t\tif (this.alignRight) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"x\", -value);\n\t\t}\n\t}\n\n\tset height(value) {\n\t\tthis._height = value;\n\t\tif (this.isRendered()) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"height\", value);\n\t\t}\n\t\tif (this.alignBottom) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"y\", -value);\n\t\t}\n\t}\n\n\t_renderContainer(selector, x = 0, y = 0){\n\n\t\treturn d3.select(selector).append(\"g\")\n\t\t\t.attr(\"class\", style[this.className])\n\t\t\t.attr(\"transform\", `translate(${x}, ${y})`)\n\n\t}\n\n\trender(selector, x = 0, y = 0, index = 0){\n\t\tthis.destroy();\n\n\t\tthis._container = this._renderContainer(selector, x, y);\n\n\t\tthis._container.datum(index);\n\n\t\tthis._container\n\t\t\t.on(\"click\", (index) => {\n\t\t\t\tthis._observable.fire(\"click\", index)\n\t\t\t})\n\t\t\t.on(\"mouseenter\", (index) => {\n\t\t\t\tthis._observable.fire(\"enter\", index)\n\t\t\t})\n\t\t\t.on(\"mouseleave\", (index) => {\n\t\t\t\tthis._observable.fire(\"leave\", index)\n\t\t\t});\n\n\t\tif (!this._container) {\n\t\t\tthrow `Component ${this._className} was not rendered. Check your selector: ${selector}`;\n\t\t}\n\n\t\t// clickable area\n\t\tconst clickableArea = this._container.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"clickable-area\"])\n\t\t\t.attr(\"fill\", \"transparent\")\n\t\t\t.attr(\"width\", this.width)\n\t\t\t.attr(\"height\", this.height);\n\n\t\tif (this.alignBottom) {\n\t\t\tclickableArea.attr(\"y\", -this.height);\n\t\t}\n\t\tif (this.alignRight) {\n\t\t\tclickableArea.attr(\"x\", -this.width);\n\t\t}\n\n\t\tthis._render(index);\n\n\t\treturn this;\n\t}\n\n\t_render(index){\n\t\t// prepared to be implemented by subclasses\n\t}\n\n\tdestroy(){\n\t\tif (this.isRendered()) {\n\t\t\tthis.clearData();\n\t\t\tthis._container.datum(null);\n\t\t\tthis._container.remove();\n\t\t\tthis._container = null;\n\t\t}\n\t\treturn this;\n\t}\n\n\tisRendered(){\n\t\treturn this._container !== null;\n\t}\n\n\tsetData(data) {\n\t\tif (!this.isRendered()) {\n\t\t\tthrow \"Can't call setData() when component is not rendered, please call .render() first.\"\n\t\t}\n\n\t\t// Is plain object = not class => convert\n\t\tif (data.constructor.name === \"Object\") {\n\t\t\tdata = new JsonDataConverter().convert(data);\n\t\t}\n\n\t\tthis.clearData();\n\t\tthis._data = data;\n\t\tthis._setData(data);\n\t\treturn this;\n\t}\n\n\tclearData() {\n\t\tif (!this.isRendered()) {\n\t\t\tthrow \"Can't call clearData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\t\tthis._clearData();\n\t\tthis._data = null;\n\t\treturn this;\n\t}\n\n\t_setData(data) {\n\t\t// prepared to be implemented by subclasses\n\t}\n\n\t_clearData() {\n\t\t// prepared to be implemented by subclasses\n\t}\n}\n\nexport default Component;\n","/**\n * @public\n * Returns element text width\n * @param {element} element\n * @param {canvas} canvas\n * @returns {number} text width in pixels\n */\nexport function calculateTextWidth(element, canvas) {\n\n    const context = canvas.node().getContext(\"2d\");\n\n    const style = window.getComputedStyle(element.node());\n    const fontStyle = style.getPropertyValue(\"font-style\");\n    const fontVariant = style.getPropertyValue(\"font-variant\");\n    const fontWeight = style.getPropertyValue(\"font-weight\");\n    const fontStrech = style.getPropertyValue(\"font-strech\");\n    const fontSize = style.getPropertyValue(\"font-size\");\n    const fontFamily = style.getPropertyValue(\"font-family\");\n    context.font = `${fontStyle} ${fontVariant} ${fontWeight} ${fontStrech} ${fontSize} ${fontFamily}`;\n\n    var metrics = context.measureText(element.text());\n\n    return metrics.width;\n}","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport * as CleverChartsUtils from \"../../utils/CleverChartsUtils\";\n\nclass Tooltip extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\tfontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\twidth = fontSize,\n\t\t\theight = fontSize,\n\t\t\tsymbol,\n\t\t\tactiveColor = Defaults.ACTIVE_COLORS[0],\n\t\t\tformat = Defaults.FORMAT,\n\t\t\tspace = Defaults.TOOLTIP_SPACE\n\t\t}\n\t) {\n\t\tsuper(width, height, \"tooltip\", true, true);\n\t\tthis._fontSize = fontSize;\n\t\tthis._symbol = symbol;\n\t\tthis._activeColor = activeColor;\n\t\tthis._format = format;\n\t\tthis._space = space;\n\n\t\tthis._canvas;\n\t}\n\n\t_render() {\n\n\t\tthis.container.append(\"text\")\n\t\t\t.text(\"-\")\n\t\t\t.attr(\"class\", style[\"tooltip-text\"])\n\t\t\t.attr(\"text-anchor\",\"end\")\n\t\t\t.attr(\"font-size\", this.fontSize);\n\n\t\tif (d3.select(\".text-width-helper\").empty()) {\n\t\t\tthis._canvas = d3.select(\"body\")\n\t\t\t\t.append('canvas')\n\t\t\t\t.attr(\"class\", \"text-width-helper\")\n\t\t\t\t.style(\"display\",\"none\")\n\t\t\t\t.text(\"Helper element for computing text width\");\n\t\t} else {\n\t\t\tthis._canvas = d3.select(\".text-width-helper\");\n\t\t}\n\n\t}\n\n\t/**\n\t * @param {TooltipData} data\n\t */\n\t_setData(data) {\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = data.getPrecision(\"max\");\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tlet text = data.text;\n\t\tif (data.isNumber()) {\n\t\t\ttext = d3.format(format)(data.text);\n\t\t}\n\n\t\tconst tooltipText = this.container.select(`.${style[\"tooltip-text\"]}`)\n\t\t\t.text(text);\n\n\t\tlet tooltipWidth = CleverChartsUtils.calculateTextWidth(tooltipText, this._canvas);\n\n\t\tif (data.symbol || this.symbol) {\n\n\t\t\tlet color;\n\t\t\tif (data.color instanceof Array) {\n\t\t\t\tthis._renderTwoColoredFill(data.color[0], data.color[1]);\n\t\t\t\tcolor = \"url(#two-colored-symbol-\"+this._maskIndex+\")\";\n\t\t\t} else if (this.activeColor instanceof Array) {\n\t\t\t\tthis._renderTwoColoredFill(this.activeColor[0], this.activeColor[1]);\n\t\t\t\tcolor = \"url(#two-colored-symbol-\"+this._maskIndex+\")\";\n\t\t\t} else {\n\t\t\t\tcolor = data.color ? data.color : this.activeColor;\n\t\t\t}\n\n\t\t\tconst symbol = data.symbol ? data.symbol : this.symbol;\n\n\t\t\tif (symbol === \"_circle\") {\n\n\t\t\t\tthis.container.append(\"circle\")\n\t\t\t\t\t.attr(\"r\", 3)\n\t\t\t\t\t.attr(\"fill\", color)\n\t\t\t\t\t.attr(\"cx\", -tooltipWidth - this.space)\n\t\t\t\t\t.attr(\"cy\", -this.fontSize/3);\n\n\t\t\t\ttooltipWidth += 6 + this.space;\n\n\t\t\t} else {\n\n\t\t\t\tconst tooltipSymbol = this.container.append(\"text\")\n\t\t\t\t\t.text(data.symbol ? data.symbol : this.symbol)\n\t\t\t\t\t.attr(\"class\", style[\"symbol\"])\n\t\t\t\t\t.attr(\"text-anchor\",\"end\")\n\t\t\t\t\t.attr(\"font-size\", this.fontSize)\n\t\t\t\t\t.attr(\"fill\", color)\n\t\t\t\t\t.attr(\"x\", -tooltipWidth - this.space);\n\n\t\t\t\ttooltipWidth += CleverChartsUtils.calculateTextWidth(tooltipSymbol, this._canvas) + this.space;\n\t\t\t}\n\n\t\t}\n\t\tthis.width = tooltipWidth;\n\t}\n\n\t_renderTwoColoredFill(color1, color2) {\n\n\t\tconst twoColoredFill = this.container.append(\"pattern\")\n\t\t\t.attr(\"id\", \"two-colored-symbol-\"+this._maskIndex)\n\t\t\t.attr(\"width\", \"1\")\n\t\t\t.attr(\"height\", \"1\")\n\t\t\t.attr(\"patternContentUnits\", \"objectBoundingBox\");\n\n\t\ttwoColoredFill.append('rect')\n\t\t\t.attr('fill', color1)\n\t\t\t.attr(\"width\", \"1\")\n\t\t\t.attr(\"height\", \"1\");\n\n\t\ttwoColoredFill.append('path')\n\t\t\t.attr('fill', color2)\n\t\t\t.attr('d', 'M0,0 L1,0 L1,1 Z');\n\t}\n\n\t_clearData() {\n\t\tthis.container.select(`.${style[\"tooltip-text\"]}`)\n\t\t\t.text(\"-\");\n\n\t\tthis.container.select(`.${style[\"symbol\"]}`).remove()\n\t}\n\n\tget fontSize() {\n\t\treturn this._fontSize;\n\t}\n\n\tget symbol() {\n\t\treturn this._symbol;\n\t}\n\n\tget activeColor() {\n\t\treturn this._activeColor;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget space() {\n\t\treturn this._space;\n\t}\n}\n\nexport default Tooltip;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport * as CleverChartsUtils from \"../../utils/CleverChartsUtils\";\n\nclass OnlyTool extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\tfontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\tonlyToolText = Defaults.ONLY_TOOL_TEXT,\n\t\t\twidth = fontSize,\n\t\t\theight = fontSize,\n\t\t}\n\t) {\n\t\tsuper(width, height, \"onlyTool\", true, true);\n\t\tthis._fontSize = fontSize;\n\t\tthis._onlyToolText = onlyToolText;\n\n\t\tthis._canvas;\n\t}\n\n\t_render() {\n\n\t\tthis._onlyToolTextSvg = this.container.append(\"text\")\n\t\t\t.text(this.onlyToolText)\n\t\t\t.attr(\"class\", style[\"onlyTool\"])\n\t\t\t.attr(\"x\", \"-7\")\n\t\t\t.attr(\"text-anchor\",\"end\")\n\t\t\t.attr(\"font-size\", this.fontSize);\n\n\t\tif (d3.select(\".text-width-helper\").empty()) {\n\t\t\tthis._canvas = d3.select(\"body\")\n\t\t\t\t.append('canvas')\n\t\t\t\t.attr(\"class\", \"text-width-helper\")\n\t\t\t\t.style(\"display\",\"none\")\n\t\t\t\t.text(\"Helper element for computing text width\");\n\t\t} else {\n\t\t\tthis._canvas = d3.select(\".text-width-helper\");\n\t\t}\n\n\t\tthis.width = CleverChartsUtils.calculateTextWidth(this._onlyToolTextSvg, this._canvas) + 14;\n\t}\n\n\tget onlyToolText() {\n\t\treturn this._onlyToolText;\n\t}\n\n\tget fontSize() {\n\t\treturn this._fontSize;\n\t}\n}\n\nexport default OnlyTool;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport Tooltip from \"./Tooltip\";\nimport OnlyTool from \"./OnlyTool\";\nimport * as CleverChartsUtils from \"../../utils/CleverChartsUtils\";\n\nclass Details extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = labelFontSize + 10,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tformat = Defaults.FORMAT,\n\t\t\thorizontalPadding = Defaults.HORIZONTAL_PADDING,\n\t\t\tshowOnlyTool = Defaults.SHOW_ONLY_TOOL,\n\t\t\tonlyToolText = Defaults.ONLY_TOOL_TEXT,\n\t\t\tenableToggle = Defaults.ENABLE_BAR_TOGGLE,\n\t\t\tshowLabelCircle = Defaults.SHOW_LABEL_CIRCLE\n\t\t}\n\t) {\n\t\tsuper(width, height, \"details\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._format = format;\n\t\tthis._horizontalPadding = horizontalPadding;\n\t\tthis._showOnlyTool = showOnlyTool;\n\t\tthis._onlyToolText = onlyToolText;\n\t\tthis._enableToggle = enableToggle;\n\t\tthis._showLabelCircle = showLabelCircle;\n\n\t\tthis._tooltips;\n\t\tthis._tooltipsBackground;\n\t\tthis._label;\n\t\tthis._labelCircle;\n\n\t\tthis._tipWrapper;\n\t\tthis._tip;\n\t\tthis._canvas;\n\n\t\tthis._observable\n\t\t\t.add(\"selectOnly\");\n\t}\n\n\t_render() {\n\t\tlet labelPadding = this.horizontalPadding;\n\n\t\tif (this.showLabelCircle) {\n\t\t\tlabelPadding = this.horizontalPadding + 2 * Defaults.LABEL_CIRCLE_RADIUS + 10;\n\t\t\tthis._labelCircle = this.container.append(\"circle\")\n\t\t\t\t.attr(\"r\", Defaults.LABEL_CIRCLE_RADIUS)\n\t\t\t\t.attr(\"fill\", 'transparent')\n\t\t\t\t.attr(\"cx\", Defaults.LABEL_CIRCLE_RADIUS)\n\t\t\t\t.attr(\"cy\", 2 * this.labelFontSize/3);\n\t\t}\n\n\t\tthis._label = this.container.append(\"text\")\n\t\t\t.text(\"\")\n\t\t\t.attr(\"class\", style[\"label\"])\n\t\t\t.attr(\"x\", labelPadding)\n\t\t\t.attr(\"y\", this.labelFontSize)\n\t\t\t.attr(\"font-size\", this.labelFontSize);\n\n\t\tconst gradient = this.container.append(\"linearGradient\")\n\t\t\t.attr(\"id\", \"tooltips-background\");\n\n\t\tgradient.append(\"stop\")\n\t\t\t.attr(\"offset\", \"0%\")\n\t\t\t.attr(\"stop-color\", \"white\")\n\t\t\t.attr(\"stop-opacity\", \"0\");\n\t\tgradient.append(\"stop\")\n\t\t\t.attr(\"offset\", \"100%\")\n\t\t\t.attr(\"stop-color\", \"white\")\n\t\t\t.attr(\"stop-opacity\", \"1\");\n\n\t\tif (d3.select(\".text-width-helper\").empty()) {\n\t\t\tthis._canvas = d3.select(\"body\")\n\t\t\t\t.append('canvas')\n\t\t\t\t.attr(\"class\", \"text-width-helper\")\n\t\t\t\t.style(\"display\",\"none\")\n\t\t\t\t.text(\"Helper element for computing text width\");\n\t\t} else {\n\t\t\tthis._canvas = d3.select(\".text-width-helper\");\n\t\t}\n\n\t\tif (d3.select('.' + style[\"tip\"]).empty()) {\n\t\t\tthis._tipWrapper = d3.select(\"body\").append('span')\n\t\t\t\t.attr(\"class\", style['tip-wrapper']);\n\t\t\tthis._tip = this._tipWrapper.append('span')\n\t\t\t\t.attr(\"class\", style['tip']);\n\t\t} else {\n\t\t\tthis._tipWrapper = d3.select('.' + style[\"tip-wrapper\"]);\n\t\t\tthis._tip = d3.select('.' + style[\"tip\"]);\n\t\t}\n\t}\n\n\t/**\n\t * @param {DetailsData} data\n\t */\n\t_setData(data) {\n\t\tthis._clearData();\n\n\t\tif (this._labelCircle) {\n\t\t\tthis._labelCircle.attr('fill', data.color);\n\t\t}\n\n\t\tthis._label.text(data.label);\n\t\tthis.container.classed(style['details-disabled'], data.disabled);\n\n\t\tif (data.tooltips) {\n\t\t\tthis._createTooltips(data);\n\t\t\tthis._renderAndSetTooltipsData(data.tooltips);\n\t\t}\n\n\t\tif (this.showOnlyTool && this.enableToggle) {\n\t\t\tthis._createOnlyTool();\n\t\t\tthis._renderOnlyTool();\n\t\t}\n\n\t\tif (CleverChartsUtils.calculateTextWidth(this._label, this._canvas) > this._rightSideStart) {\n\t\t\tthis._handleLongLabel(this._rightSideStart);\n\t\t}\n\t}\n\n\t_createOnlyTool() {\n\t\tthis._onlyTool = new OnlyTool({\n\t\t\tfontSize: this.tooltipFontSize - 1,\n\t\t\tonlyToolText: this.onlyToolText\n\t\t});\n\t}\n\n\t_renderOnlyTool() {\n\t\tconst index = this.container.datum();\n\t\tthis._onlyTool.render(this.container.node(), this._rightSideStart, this.labelFontSize - 1, index)\n\t\t\t.on(\"click\", (index) => {\n\t\t\t\td3.event.stopPropagation();\n\t\t\t\tthis._observable.fire(\"selectOnly\", index);\n\t\t\t});\n\t\tthis._rightSideStart -= this._onlyTool.width + 24;\n\t}\n\n\t/**\n\t * @param {DetailsData} detailsData\n\t */\n\t_createTooltips(detailsData) {\n\t\tconst tooltipsData = detailsData.tooltips;\n\t\tconst tooltipsReversed = tooltipsData.slice();\n\t\ttooltipsReversed.reverse();\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = detailsData.getPrecision(\"max\");\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tthis._tooltips = tooltipsData.map((_, index) => new Tooltip({\n\t\t\tfontSize: this.tooltipFontSize,\n\t\t\tsymbol: tooltipsData.length>1 ? this.tooltipSymbol : undefined,\n\t\t\tactiveColor: this.activeColors[index % this.activeColors.length],\n\t\t\tformat: format\n\t\t}));\n\t}\n\n\t/**\n\t * @param {TooltipData[]} tooltipsData\n\t */\n\t_renderAndSetTooltipsData(tooltipsData) {\n\t\tlet previousTooltipX = this.width - this.horizontalPadding;\n\t\tthis._tooltips.forEach((_, index) => {\n\t\t\tconst reversedIndex = this._tooltips.length - 1 - index;\n\t\t\tconst tooltipReversed = this._tooltips[reversedIndex];\n\t\t\tconst tooltipData = tooltipsData[reversedIndex];\n\n\t\t\ttooltipReversed.render(this.container.node(), previousTooltipX, this.labelFontSize, reversedIndex);\n\t\t\ttooltipReversed.setData(tooltipData);\n\n\t\t\tpreviousTooltipX -= tooltipReversed.width + 24;\n\t\t});\n\n\t\tthis._rightSideStart = previousTooltipX + 12;\n\t}\n\n\t_handleLongLabel(maxWidth) {\n\t\t// render white background under values\n\t\tthis._tooltipsBackground = this.container\n\t\t\t.insert(\"g\", \"g.\" + style[\"tooltip\"]);\n\n\t\tconst gradientWidth = 40;\n\t\tconst xOffset = -10;\n\t\tthis._tooltipsBackground\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"x\", maxWidth - xOffset)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", this.width - maxWidth + xOffset)\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.attr(\"fill\", \"white\");\n\t\tthis._tooltipsBackground\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"x\", maxWidth - xOffset - gradientWidth)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", gradientWidth + 1) // 1 px extra looks better\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.attr(\"fill\", \"url(#tooltips-background)\");\n\n\t\t// handle label tooltips\n\t\tthis._label.on(\"mouseenter\", () => {\n\t\t\tconst right = document.documentElement.getBoundingClientRect().width\n\t\t\t\t- this._getOffset(this._label.node()).left;\n\t\t\tthis._tipWrapper\n\t\t\t\t.style(\"right\", right + \"px\")\n\t\t\t\t.style(\"top\", this._getOffset(this._label.node()).top + \"px\");\n\t\t\tthis._tip\n\t\t\t\t.text(this._label.text())\n\t\t\t\t.style(\"transition-delay\", \".5s\")\n\t\t\t\t.style(\"transform\", \"scale(1)\")\n\t\t});\n\t\tthis._label.on(\"mouseleave\", () => {\n\t\t\tthis._tip\n\t\t\t\t.style(\"transition-delay\", \"0s\")\n\t\t\t\t.style(\"transform\", \"scale(0)\");\n\t\t});\n\t}\n\n\t_getOffset(el) {\n\t\tconst rect = el.getBoundingClientRect();\n\t\treturn {\n\t\t\tleft: rect.left + window.scrollX,\n\t\t\ttop: rect.top + window.scrollY\n\t\t};\n\t}\n\n\t_clearData() {\n\t\tthis.container.select(`.${style[\"label\"]}`).text(\"-\");\n\t\tthis.container.selectAll(`.${style[\"tooltip\"]}`).remove();\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\tset activeColors(activeColors) {\n\t\tthis._activeColors = activeColors;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\tset format(format) {\n\t\tthis._format = format;\n\t}\n\n\tget horizontalPadding() {\n\t\treturn this._horizontalPadding;\n\t}\n\n\tget tooltips() {\n\t\treturn this._tooltips;\n\t}\n\n\tget showOnlyTool() {\n\t\treturn this._showOnlyTool;\n\t}\n\n\tget onlyToolText() {\n\t\treturn this._onlyToolText;\n\t}\n\n\tget enableToggle() {\n\t\treturn this._enableToggle;\n\t}\n\n\tget showLabelCircle() {\n\t\treturn this._showLabelCircle;\n\t}\n}\n\nexport default Details;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport * as d3 from \"d3\";\nimport style from \"../Barchart.css\";\n\nlet COLOR_PATTERN_INDEX = 0;\n\nclass Stripe extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.STRIPE_HEIGHT,\n\t\t\tbackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\ttopCornerRounded = Defaults.CORNER_ROUNDED,\n\t\t\tbottomCornerRounded = Defaults.CORNER_ROUNDED,\n\t\t\tcondensed = Defaults.DETAILS_HIDDEN\n\t\t}) {\n\t\tsuper(width, height, \"stripe\");\n\t\tthis._backgroundColor = backgroundColor;\n\t\tthis._activeColors = activeColors;\n\t\tthis._dualValue = dualValue;\n\t\tthis._minMax = minMax;\n\t\tthis._topCornerRounded = topCornerRounded;\n\t\tthis._bottomCornerRounded = bottomCornerRounded;\n\t\tthis._condensed = condensed;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget backgroundColor() {\n\t\treturn this._backgroundColor;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget topCornerRounded() {\n\t\treturn this._topCornerRounded;\n\t}\n\n\tget bottomCornerRounded() {\n\t\treturn this._bottomCornerRounded;\n\t}\n\n\tget condensed() {\n\t\treturn this._condensed;\n\t}\n\n\t_render() {\n\n\t\tconst clipPath = this.container.append(\"clipPath\")\n\t\t\t.attr(\"id\", \"rounded-corners-\"+this._maskIndex);\n\n        if (this.topCornerRounded && this.bottomCornerRounded) {\n            clipPath\n                .append(\"rect\")\n                .attr(\"width\", this.width)\n                .attr(\"height\", this.height)\n                .attr(\"rx\", Math.min(this.width, this.height)/2)\n                .attr(\"ry\", Math.min(this.width, this.height)/2);\n        } else if (!this.topCornerRounded && !this.bottomCornerRounded) {\n            clipPath\n                .append(\"rect\")\n                .attr(\"width\", this.width)\n                .attr(\"height\", this.height);\n        } else {\n            clipPath\n                .append(\"rect\")\n                .attr(\"width\", this.width - 2*this.height)\n                .attr(\"height\", this.height)\n                .attr(\"x\", this.height);\n            if (this.topCornerRounded) {\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.height)\n                    .attr(\"cy\", this.height)\n                    .attr(\"r\", this.height);\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.width - this.height)\n                    .attr(\"cy\", this.height)\n                    .attr(\"r\", this.height);\n            }\n            if (this.bottomCornerRounded) {\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.height)\n                    .attr(\"cy\", 0)\n                    .attr(\"r\", this.height);\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.width - this.height)\n                    .attr(\"cy\", 0)\n                    .attr(\"r\", this.height);\n            }\n        }\n\n\t\tthis._renderProgress(0, this.width, this.backgroundColor, \"stripe-background\");\n\t}\n\n\t/**\n\t * @param {StripeData} data\n\t */\n\t_setData(data) {\n\n\t\tif (this.dualValue) {\n\n\t\t\tthis._renderStripe(0, this.width/2-0.5,\n\t\t\t\tdata.left.value,\n\t\t\t\tdata.left.color ? data.left.color : this.activeColors[1] ? this.activeColors[1] : this.activeColors[0],\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tthis._renderStripe(this.width/2+0.5, this.width,\n\t\t\t\tdata.right.value,\n\t\t\t\tdata.right.color ? data.right.color : this.activeColors[0],\n\t\t\t\tfalse\n\t\t\t);\n\n\t\t} else {\n\t\t\tthis._renderStripe(0, this.width, data.value, data.color ? data.color : this.activeColors[0]);\n\t\t}\n\t}\n\n\t_clearData() {\n\t\tthis.container.selectAll(style[\"progress\"]).remove();\n\t}\n\n\n\t_renderXBase(x) {\n\n\t\tthis.container.append(\"line\")\n\t\t\t.attr(\"x1\", x)\n\t\t\t.attr(\"x2\", x)\n\t\t\t.attr(\"y1\", 0)\n\t\t\t.attr(\"y2\", this.condensed ? -4 : -7)\n\t\t\t.attr(\"stroke\", \"#C9C9C9\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke-dasharray\", [1,2]);\n\n\t\tthis.container.append(\"line\")\n\t\t\t.attr(\"x1\", x)\n\t\t\t.attr(\"x2\", x)\n\t\t\t.attr(\"y1\", this.height)\n\t\t\t.attr(\"y2\", this.height + (this.condensed ? 4 : 7))\n\t\t\t.attr(\"stroke\", \"#C9C9C9\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke-dasharray\", [1,2]);\n\t}\n\n\t_renderStripe(x1, x2, value, color, alignRight = false) {\n\n\t\tconst axis = d3.scaleLinear()\n\t\t\t.range([x1, x2]);\n\n\t\tif (alignRight) {\n\t\t\taxis.domain([this.minMax.max, this.minMax.min]);\n\t\t} else {\n\t\t\taxis.domain([this.minMax.min, this.minMax.max]);\n\t\t}\n\n\t\tconst xBase = axis(0);\n\n\t\tif (this.minMax.min < 0 && this.minMax.max > 0) {\n\t\t\tthis._renderXBase(xBase);\n\t\t}\n\n\t\tif (alignRight === value < 0) {\n\n\t\t\tthis._renderProgress(xBase, axis(value), color);\n\n\t\t} else {\n\n\t\t\tthis._renderProgress(axis(value), xBase, color);\n\n\t\t}\n\n\t}\n\n\t_renderProgress(x1, x2, color, className = \"progress\") {\n\n\t\tif (color instanceof Array) {\n\t\t\tthis._renderTwoColoredFill(color[0], color[1]);\n\t\t}\n\n\t\tthis.container.append(\"rect\")\n\t\t\t.attr(\"fill\", color instanceof Array ? \"url(#two-colored-\"+this._maskIndex+\"-\"+COLOR_PATTERN_INDEX+\")\" : color)\n\t\t\t.attr(\"class\", style[className])\n\t\t\t.attr(\"x\", x1)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", x2-x1)\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.attr(\"transform\", \"translate(\" + 0 + \", \" + 0 + \")\")\n\t\t\t.attr(\"clip-path\", \"url(#rounded-corners-\"+this._maskIndex+\")\");\n\n\t}\n\n\t_renderTwoColoredFill(color1, color2) {\n\n\t\tCOLOR_PATTERN_INDEX++;\n\n\t\tconst twoColoredFill = this.container.append(\"pattern\")\n\t\t\t.attr(\"id\", \"two-colored-\"+this._maskIndex+\"-\"+COLOR_PATTERN_INDEX)\n\t\t\t.attr(\"width\", \"20\")\n\t\t\t.attr(\"height\", \"20\")\n\t\t\t.attr(\"patternUnits\", \"userSpaceOnUse\");\n\n\t\ttwoColoredFill.append('rect')\n\t\t\t.attr('fill', color1)\n\t\t\t.attr(\"width\", \"20\")\n\t\t\t.attr(\"height\", \"20\");\n\n\t\ttwoColoredFill.append('path')\n\t\t\t.attr('fill', color2)\n\t\t\t.attr('d', 'M20,0 L10,0 L20,10 Z');\n\t\ttwoColoredFill.append('path')\n\t\t\t.attr('fill', color2)\n\t\t\t.attr('d', 'M0,0 L20,20 L10,20 L0,10 Z');\n\t}\n\n\n}\n\nexport default Stripe;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport Details from \"./Details\";\nimport Stripe from \"./Stripe\";\nimport style from \"../Barchart.css\";\nimport DetailsData from \"../data/DetailsData\";\n\nclass Bar extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.BAR_HEIGHT,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\tdetailsHidden = Defaults.DETAILS_HIDDEN,\n\t\t\tdetailsHeight = labelFontSize + Defaults.DETAILS_BOTTOM_SPACE,\n\t\t\tenableHover = Defaults.ENABLE_BAR_HOVER,\n\t\t\tenableToggle = Defaults.ENABLE_BAR_TOGGLE,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tdisabled = Defaults.BAR_DISABLED,\n\t\t\tformat = Defaults.FORMAT,\n\t\t\thorizontalPadding = Defaults.HORIZONTAL_PADDING,\n\t\t\tstripeHeight = Defaults.STRIPE_HEIGHT,\n\t\t\tstripeBackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR,\n\t\t\tshowOnlyTool = Defaults.SHOW_ONLY_TOOL,\n\t\t\tonlyToolText = Defaults.ONLY_TOOL_TEXT,\n\t\t\tshowLabelCircle = Defaults.SHOW_LABEL_CIRCLE\n\t\t}\n\t) {\n\t\tsuper(width, height, \"bar\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._minMax = minMax;\n\t\tthis._detailsHidden = detailsHidden;\n\t\tthis._detailsHeight = detailsHeight;\n\t\tthis._enableHover = enableHover;\n\t\tthis._enableToggle = enableToggle;\n\t\tthis._dualValue = dualValue;\n\t\tthis._disabled = disabled;\n\t\tthis._format = format;\n\t\tthis._horizontalPadding = horizontalPadding;\n\t\tthis._stripeHeight = stripeHeight;\n\t\tthis._stripeBackgroundColor = stripeBackgroundColor;\n\t\tthis._showOnlyTool = showOnlyTool;\n\t\tthis._onlyToolText = onlyToolText;\n\t\tthis._showLabelCircle = showLabelCircle;\n\n\t\tthis._details;\n\t\tthis._stripes;\n\n\t\tthis._observable\n\t\t\t.add(\"disabled\")\n\t\t\t.add(\"selectOnly\");\n\t}\n\n\t_render() {\n\t\tif (!this.detailsHidden) {\n\t\t\tthis._createDetails();\n\t\t\tthis._renderDetails();\n\t\t}\n\n\t\tthis.container.classed(style['hover-enabled'], this.enableHover);\n\n\t\tif (this.enableToggle) {\n\t\t\tthis._doEnableToggle();\n\t\t}\n\t}\n\n\t/**\n\t * @param {BarData} data\n\t */\n\t_setData(data) {\n\t\tthis._disabled = data.disabled;\n\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\n\t\tthis.container.classed(style[\"bar-highlighted\"], data.highlighted);\n\n\t\tthis._setDetailsData(data.details);\n\n\t\tthis._createStripes(data);\n\t\tthis._renderStripes();\n\t\tthis._setStripesData(data);\n\t}\n\n\t_clearData() {\n\t\tif (!this.detailsHidden) {\n\t\t\tthis._details.clearData();\n\t\t}\n\t}\n\n\t_setDisabledValue(data) {\n\t\tthis._disabled = data.disabled;\n\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\n\t}\n\n\t_createDetails() {\n\t\tthis._details = new Details({\n\t\t\twidth: this.width,\n\t\t\theight: this.detailsHeight,\n\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\tactiveColors: this.activeColors,\n\t\t\tformat: this.format,\n\t\t\thorizontalPadding: this.horizontalPadding,\n\t\t\tshowOnlyTool: this.showOnlyTool,\n\t\t\tonlyToolText: this.onlyToolText,\n\t\t\tenableToggle: this.enableToggle,\n\t\t\tshowLabelCircle: this.showLabelCircle\n\t\t});\n\t}\n\n\t_renderDetails() {\n\t\tconst index = this.container.datum();\n\t\tthis._details.render(this.container.node(), 0, 0, index)\n\t\t\t.on(\"selectOnly\", (index) => {\n\t\t\t\tthis._observable.fire(\"selectOnly\", index);\n\t\t\t});\n\t}\n\n\t_setDetailsData(detailsData) {\n\t\tif (this.details) {\n\t\t\tconst detailsDataDefault = DetailsData.copyAs(detailsData);\n\t\t\tthis.details.setData(detailsDataDefault);\n\t\t}\n\t}\n\n\t_createStripes(data) {\n\t\tconst minMax = data.calculateMinMax(this.minMax);\n\t\tthis._stripes = data.stripes.map((stripe, index) => {\n\t\t\tlet colors;\n\t\t\tif (data.stripes.length > 1) {\n\t\t\t\tcolors = [this.activeColors[index % this.activeColors.length]]\n\t\t\t} else {\n\t\t\t\tcolors = this.activeColors.slice();\n\t\t\t}\n\n\t\t\treturn new Stripe({\n\t\t\t\twidth: this.width,\n\t\t\t\tactiveColors: colors,\n\t\t\t\tdualValue: this.dualValue,\n\t\t\t\tminMax: minMax,\n\t\t\t\theight: this.stripeHeight,\n\t\t\t\tbackgroundColor: this.stripeBackgroundColor,\n\t\t\t\ttopCornerRounded: index === 0,\n\t\t\t\tbottomCornerRounded: index === data.stripes.length-1,\n\t\t\t\tcondensed: this.detailsHidden\n\t\t\t});\n\t\t});\n\t}\n\n\t_renderStripes() {\n\t\tconst detailsHeight = this.detailsHidden ? 0 : this.detailsHeight;\n\t\tthis.stripes.forEach((stripe, index) => {\n\t\t\tstripe.render(this.container.node(), 0, detailsHeight + 5 * index, index);\n\t\t});\n\t}\n\n\t_setStripesData(data) {\n\t\tdata.stripes.forEach((stripeData, index) => this.stripes[index].setData(stripeData));\n\t}\n\n\t_doEnableToggle() {\n\t\tthis.container.attr(\"cursor\", \"pointer\");\n\t\tthis.on(\"click\", (index) => {\n\t\t\tthis._disabled = !this._disabled;\n\t\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\n\t\t\tthis._observable.fire(\"disabled\", index, this._disabled);\n\t\t});\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget detailsHidden() {\n\t\treturn this._detailsHidden;\n\t}\n\n\tget detailsHeight() {\n\t\treturn this._detailsHeight;\n\t}\n\n\tget enableToggle() {\n\t\treturn this._enableToggle;\n\t}\n\n\tget enableHover() {\n\t\treturn this._enableHover;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget horizontalPadding() {\n\t\treturn this._horizontalPadding;\n\t}\n\n\tget stripeHeight() {\n\t\treturn this._stripeHeight;\n\t}\n\n\tget stripeBackgroundColor() {\n\t\treturn this._stripeBackgroundColor;\n\t}\n\n\tget stripes() {\n\t\treturn this._stripes;\n\t}\n\n\tget details() {\n\t\treturn this._details;\n\t}\n\n\tget showOnlyTool() {\n\t\treturn this._showOnlyTool;\n\t}\n\n\tget onlyToolText() {\n\t\treturn this._onlyToolText;\n\t}\n\n\tget showLabelCircle() {\n\t\treturn this._showLabelCircle;\n\t}\n}\n\nexport default Bar;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport Bar from \"./Bar\";\nimport Details from \"./Details\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport BarData from \"../data/BarData\";\nimport TooltipData from \"../data/TooltipData\";\nimport DetailsData from \"../data/DetailsData\";\nimport BarchartData from \"../data/BarchartData\";\n\nclass Barchart extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.HEIGHT,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\tdetailsVisible = Defaults.DETAILS_HIDDEN,\n\t\t\tdetailsBottomSpace = Defaults.DETAILS_BOTTOM_SPACE,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tbarHeight = Defaults.BAR_HEIGHT,\n\t\t\tenableBarHover = Defaults.ENABLE_BAR_HOVER,\n\t\t\tenableBarToggle = Defaults.ENABLE_BAR_TOGGLE,\n\t\t\tformat = Defaults.FORMAT,\n\t\t\thorizontalPadding = Defaults.HORIZONTAL_PADDING,\n\t\t\tstripeHeight = Defaults.STRIPE_HEIGHT,\n\t\t\tstripeBackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR,\n\t\t\tshowOnlyTool = Defaults.SHOW_ONLY_TOOL,\n\t\t\tonlyToolText = Defaults.ONLY_TOOL_TEXT,\n\t\t\tshowLabelCircle = Defaults.SHOW_LABEL_CIRCLE\n\t\t}\n\t) {\n\t\tsuper(width, height, \"barchart\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._minMax = minMax;\n\t\tthis._detailsVisible = detailsVisible;\n\t\tthis._detailsBottomSpace = detailsBottomSpace;\n\t\tthis._dualValue = dualValue;\n\t\tthis._barHeight = barHeight;\n\t\tthis._enableBarHover = enableBarHover;\n\t\tthis._enableBarToggle = enableBarToggle;\n\t\tthis._format = format;\n\t\tthis._horizontalPadding = horizontalPadding;\n\t\tthis._stripeHeight = stripeHeight;\n\t\tthis._stripeBackgroundColor = stripeBackgroundColor;\n\t\tthis._showOnlyTool = showOnlyTool;\n\t\tthis._onlyToolText = onlyToolText;\n\t\tthis._showLabelCircle = showLabelCircle;\n\n\t\tthis._details;\n\t\tthis._bars;\n\n\t\tthis._observable\n\t\t\t.add(\"barEnter\")\n\t\t\t.add(\"barLeave\")\n\t\t\t.add(\"barClick\")\n\t\t\t.add(\"barDisabled\")\n\t\t\t.add(\"barsEnter\")\n\t\t\t.add(\"barsLeave\")\n\t\t\t.add(\"selectOnly\");\n\n\t}\n\n\tisBarDisabled(index) {\n\t\treturn this.bars[index].disabled;\n\t}\n\n\tupdateData(updateFunction) {\n\t\tthis.setData(updateFunction(this.data));\n\t}\n\n\tupdateDetailsData(updateFunction) {\n\t\tthis.setDetailsData(updateFunction(this.details.data));\n\t}\n\n\tupdateBarData(index, updateFunction) {\n\t\tthis.setBarData(index, updateFunction(this.bars[index].data));\n\t}\n\n\tsetDetailsData(detailsData) {\n\t\tconst detailsDataDefault = DetailsData.copyAs(detailsData);\n\t\tthis.details.setData(detailsDataDefault);\n\t}\n\n\tsetBarData(index, barData) {\n\t\tconst barDataDefault = BarData.copyAs(barData);\n\n\t\tthis._setDefaultBarDetails(barData);\n\n\t\tthis.bars[index].setData(barDataDefault);\n\t}\n\n\t_setDefaultBarDetails(barData) {\n\n\t\tif (!barData.details) {\n\t\t\tbarData.details = new DetailsData({\n\t\t\t\tlabel: this.data.details.label\n\t\t\t});\n\t\t}\n\n\t\tif (typeof barData.details.tooltips === 'undefined') {\n\n\t\t\tbarData.stripes.forEach((stripeData, index) => {\n\n\t\t\t\tlet colors;\n\t\t\t\tif (barData.stripes.length > 1) {\n\t\t\t\t\tcolors = [this.activeColors[index % this.activeColors.length]]\n\t\t\t\t} else {\n\t\t\t\t\tcolors = this.activeColors.slice();\n\t\t\t\t}\n\n\t\t\t\tif (this.dualValue) {\n\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\n\t\t\t\t\t\ttext: stripeData.left.value,\n\t\t\t\t\t\tsymbol: this.tooltipSymbol,\n\t\t\t\t\t\tcolor: stripeData.left.color ? stripeData.left.color : (colors[1] ? colors[1] : colors[0])\n\t\t\t\t\t}));\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\n\t\t\t\t\t\ttext: stripeData.right.value,\n\t\t\t\t\t\tsymbol: this.tooltipSymbol,\n\t\t\t\t\t\tcolor: stripeData.right.color ? stripeData.right.color : colors[0]\n\t\t\t\t\t}));\n\t\t\t\t} else {\n\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\n\t\t\t\t\t\ttext: stripeData.value,\n\t\t\t\t\t\tsymbol: barData.stripes.length > 1 ? this.tooltipSymbol : undefined,\n\t\t\t\t\t\tcolor: stripeData.color ? stripeData.color : colors[0]\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t});\n\t\t}\n\n\t}\n\n\t_renderContainer(selector, x = 0, y = 0){\n\n\t\tthis._svgWrapper = d3.select(selector).append(\"svg\")\n\t\t\t.attr(\"class\", style[this.className])\n\t\t\t.attr(\"width\", this.width)\n\t\t\t.attr(\"height\", this.height);\n\n\t\tthis._svgWrapper.style({\n\t\t\t'position': 'relative',\n\t\t\t'left': x,\n\t\t\t'top': y\n\t\t});\n\n\t\treturn this._svgWrapper.append(\"g\")\n\t}\n\n\t_render() {\n\t\tif (this.detailsVisible) {\n\t\t\tthis._createDetails();\n\t\t\tthis._renderDetails();\n\t\t}\n\n\t\tthis._doSelectOnly();\n\t}\n\n\t_doSelectOnly() {\n\t\tthis.on(\"selectOnly\", (onlyIndex) => {\n\t\t\tthis.bars.forEach((bar, index) => {\n\t\t\t\tconst barData = bar.data;\n\t\t\t\tbarData.disabled = onlyIndex !== index;\n\t\t\t\tbar._setDisabledValue(barData);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @param {BarchartData} data\n\t */\n\t_setData(data) {\n\n\t\tdata.bars.forEach((barData) => this._setDefaultBarDetails(barData));\n\n\t\tif (this.detailsVisible) {\n\t\t\tthis._adjustDetails(data);\n\t\t\tthis.setDetailsData(data.details);\n\t\t}\n\n\t\tthis._adjustHeight(data);\n\n\t\tthis._createBars(data);\n\n\t\tthis._renderBars();\n\n\t\tdata.bars.forEach((barData, index) => this.setBarData(index, barData));\n\t}\n\n\t_clearData() {\n\t\tif (this.detailsVisible) {\n\t\t\tthis._details.clearData();\n\t\t}\n\t\tthis._container.selectAll(`.${style[\"bar\"]}`).remove();\n\t}\n\n\t_adjustDetails(data) {\n\t\tif (!this.details.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = data.getPrecision(\"max\");\n\t\t\tthis.details.format = spec.toString();\n\t\t}\n\n\t\tif (this.dualValue && data.details.tooltips && data.bars[0].stripes.length === 1) {\n\t\t\tthis.details.activeColors = this.details.activeColors.slice().reverse();\n\t\t}\n\t}\n\n\t_createDetails() {\n\n\t\tthis._details = new Details({\n\t\t\twidth: this.width,\n\t\t\theight: this.detailsHeight,\n\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\tactiveColors: this.activeColors,\n\t\t\tformat: this.format,\n\t\t\tshowOnlyTool: false\n\t\t});\n\t}\n\n\t_renderDetails() {\n\t\tthis._details.render(this._container.node(), 0, 0);\n\t}\n\n\t_createBars(data) {\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = data.getPrecision(\"max\");\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tconst minMax = data.calculateMinMax(this.minMax);\n\n\t\tthis._bars = data.bars.map(() => new Bar({\n\t\t\twidth: this.width,\n\t\t\theight: this.barHeight,\n\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\tactiveColors: this.activeColors,\n\t\t\tdetailsHidden: this.detailsVisible,\n\t\t\tdetailsHeight: this.detailsHeight,\n\t\t\tdualValue: this.dualValue,\n\t\t\tenableToggle: this.enableBarToggle,\n\t\t\tenableHover: this.enableBarHover,\n\t\t\tminMax: minMax,\n\t\t\tformat: format,\n\t\t\thorizontalPadding: this.horizontalPadding,\n\t\t\tstripeHeight: this.stripeHeight,\n\t\t\tstripeBackgroundColor: this.stripeBackgroundColor,\n\t\t\tshowOnlyTool: this.showOnlyTool,\n\t\t\tonlyToolText: this.onlyToolText,\n\t\t\tshowLabelCircle: this.showLabelCircle\n\t\t}));\n\t}\n\n\t_renderBars() {\n\n\t\tconst barsContainer = this._container.append(\"g\")\n\t\t\t.on(\"mouseenter\", () => {\n\t\t\t\tthis._observable.fire(\"barsEnter\");\n\t\t\t})\n\t\t\t.on(\"mouseleave\", () => {\n\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\tthis.details.setData(this.data.details);\n\t\t\t\t}\n\t\t\t\tthis._observable.fire(\"barsLeave\");\n\t\t\t});\n\n\t\tthis.bars.forEach((bar, index) => {\n\n\t\t\tconst topDetailsWidth = (this.detailsVisible ? this.detailsHeight : 0);\n\n\t\t\tbar.render(barsContainer.node(), 0, topDetailsWidth + this.barHeight*index, index)\n\t\t\t\t.on(\"click\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barClick\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"enter\", (index) => {\n\t\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\t\tthis.details.setData(this.bars[index].data.details);\n\t\t\t\t\t}\n\t\t\t\t\tthis._observable.fire(\"barEnter\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"leave\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barLeave\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"disabled\", (index, disabled) => {\n\t\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\t\tconst detailsData = this.details.data;\n\t\t\t\t\t\tdetailsData.disabled = disabled;\n\t\t\t\t\t\tthis.details.setData(detailsData);\n\t\t\t\t\t}\n\t\t\t\t\tthis._observable.fire(\"barDisabled\", index, disabled);\n\t\t\t\t})\n\t\t\t\t.on(\"selectOnly\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"selectOnly\", index);\n\t\t\t\t});\n\t\t});\n\n\t}\n\n\t_adjustHeight(data) {\n\t\tlet height = data.bars.length * this.barHeight;\n\t\tif (this.detailsVisible) {\n\t\t\theight += this.detailsHeight;\n\t\t}\n\t\tthis.height = height;\n\t\tthis._svgWrapper.attr(\"height\", height);\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget detailsVisible() {\n\t\treturn this._detailsVisible;\n\t}\n\n\tget detailsBottomSpace() {\n\t\treturn this._detailsBottomSpace;\n\t}\n\n\tget detailsHeight() {\n\t\treturn this._detailsBottomSpace + this._labelFontSize;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget barHeight() {\n\t\treturn this._barHeight;\n\t}\n\n\tget enableBarHover() {\n\t\treturn this._enableBarHover;\n\t}\n\n\tget enableBarToggle() {\n\t\treturn this._enableBarToggle;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget horizontalPadding() {\n\t\treturn this._horizontalPadding;\n\t}\n\n\tget stripeHeight() {\n\t\treturn this._stripeHeight;\n\t}\n\n\tget stripeBackgroundColor() {\n\t\treturn this._stripeBackgroundColor;\n\t}\n\n\n\tget details() {\n\t\treturn this._details;\n\t}\n\n\tget bars() {\n\t\treturn this._bars;\n\t}\n\n\tget showOnlyTool() {\n\t\treturn this._showOnlyTool;\n\t}\n\n\tget onlyToolText() {\n\t\treturn this._onlyToolText;\n\t}\n\n\tget showLabelCircle() {\n\t\treturn this._showLabelCircle;\n\t}\n}\n\nexport default Barchart;\n","import style from \"./Linechart.css\";\nimport * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\n\nclass Component {\n\n\tconstructor(\n\t\tclassName = \"component\"\n\t) {\n\t\tthis._container = null;\n\t\tthis._className = className;\n\t\tthis._observable = new Observable([\n\t\t\t\"enter\",\n\t\t\t\"leave\",\n\t\t\t\"click\"\n\t\t]);\n\n\t\tthis._lastData = null;\n\t}\n\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\n\n\tget className() {\n\t\treturn this._className;\n\t}\n\n\tget container() {\n\t\treturn this._container;\n\t}\n\n    get observable() {\n        return this._observable;\n    }\n\n\t_renderContainer(selector, x = 0, y = 0){\n\n\t\treturn d3.select(selector).append(\"g\")\n\t\t\t.attr(\"class\", style[this.className])\n\t\t\t.attr(\"transform\", `translate(${x}, ${y})`)\n\n\t}\n\n\trender(selector, x = 0, y = 0, index = 0){\n\t\tthis.destroy();\n\n\t\tthis._container = this._renderContainer(selector, x, y);\n\n        if (!this._container) {\n            throw `Component ${this._className} was not rendered. Check your selector: ${selector}`;\n        }\n\n\t\tthis._container.datum(index);\n\n\t\tthis._container\n\t\t\t.on(\"click\", (index) => {\n\t\t\t\tthis._observable.fire(\"click\", index)\n\t\t\t})\n\t\t\t.on(\"mouseenter\", (index) => {\n\t\t\t\tthis._observable.fire(\"enter\", index)\n\t\t\t})\n\t\t\t.on(\"mouseleave\", (index) => {\n\t\t\t\tthis._observable.fire(\"leave\", index)\n\t\t\t});\n\n\t\treturn this;\n\t}\n\n\tdestroy(){\n\t\tif (this.isRendered()) {\n            this._lastData = null;\n\t\t\tthis._clearData();\n\t\t\tthis._container.datum(null);\n\t\t\tthis._container.remove();\n\t\t\tthis._container = null;\n\t\t}\n\t\treturn this;\n\t}\n\n\tisRendered(){\n\t\treturn this._container !== null;\n\t}\n\n\tsetData(data) {\n\t\tif (!this.isRendered()) {\n\t\t\tthrow \"Can't call setData() when component is not rendered, please call .render() first.\"\n\t\t}\n\t\tthis._setData(this._container, data, this._lastData);\n\t\tthis._lastData = Object.assign({}, this._lastData, data);\n\t\treturn this;\n\t}\n\n\t_setData(container, data, lastData) {\n\t\t// prepared to be implemented by subclasses\n\t}\n\n    _clearData(container) {\n        // prepared to be implemented by subclasses\n    }\n}\n\nexport default Component;\n","\nexport const WIDTH = 360;\nexport const HEIGHT = 200;\nexport const ENABLE_LINE_TOOLTIP = true;\n\nexport const LINE_COLOR = \"#0081ff\";\nexport const LINE_OPACITY = 1;\nexport const FILL_COLOR = \"#0081ff\";\nexport const FILL_OPACITY = 0.1;\nexport const LINE_WIDTH = 3;\nexport const DOT_SIZE = 6;\n\nexport const HIGHLIGHT_COLOR = \"#f8e71c\";\n\nexport const LABEL_OFFSET = 23;\nexport const MARGIN_TOP = 13;\nexport const MARGIN_BOTTOM = 28;\n\nexport const AXIS_COLOR = \"#f0f0f0\";\nexport const ZERO_LINE_COLOR = \"#bababa\";\n\n\n\n","import style from \"./Linechart.css\";\nimport Component from './Component';\nimport {\n    DOT_SIZE,\n    FILL_COLOR,\n    FILL_OPACITY,\n    LINE_COLOR,\n    LINE_OPACITY,\n    LINE_WIDTH,\n    MARGIN_BOTTOM\n} from './LinechartDefaults';\nimport * as d3 from 'd3';\n\nclass LinechartLine extends Component {\n    constructor() {\n        super('linechart-line');\n    }\n\n    _setData(container, data, lastData) {\n        if (Object.keys(data).length === 1 && data.appearance) {\n            return this._updateAppearance(data.appearance);\n        }\n        if (Object.keys(data).length === 1 && (data.point || data.point === null)) {\n            const pointData = Object.assign({}, lastData, data);\n            return this._updatePoint(pointData);\n        }\n\n        this.container.selectAll(\"*\").remove();\n        const newData = Object.assign({}, lastData, data);\n        this._parts = this._renderLine(newData);\n        this._point = this._renderPoint();\n        this._updateAppearance(newData.appearance);\n        this._updatePoint(newData);\n    }\n\n    _renderPoint() {\n        return this.container.append(\"circle\")\n            .attr(\"visibility\", \"hidden\")\n            .attr(\"class\", style[\"tooltip-line-circle\"]);\n    }\n\n    _updatePoint({point, appearance, lineData, xAxis, yAxis}) {\n        if (!point) {\n            this._point.attr(\"visibility\", \"hidden\");\n            return;\n        }\n        lineData.forEach(item => {\n            if (point && item.value !== null && String(point) === String(item.id)) {\n                this._point\n                    .attr(\"visibility\", \"visible\")\n                    .attr(\"stroke-width\", appearance.lineWidth || LINE_WIDTH)\n                    .attr(\"stroke\", appearance.lineColor || LINE_COLOR)\n                    .attr(\"stroke-opacity\", appearance.lineOpacity || LINE_OPACITY)\n                    .attr(\"r\", 2.5 + (appearance.lineWidth || LINE_WIDTH)/2)\n                    .attr(\"transform\", \"translate(\"+xAxis(point)+\", \"+yAxis(item.value)+\")\")\n            }\n        });\n    }\n\n    _updateAppearance({lineColor, lineOpacity, fillColor, fillOpacity, lineWidth, dotSize}) {\n        this._parts.forEach(part => {\n            const strokeWidth = part.path.data()[0].length > 1 ? (lineWidth || LINE_WIDTH): (dotSize || DOT_SIZE);\n\n            part.path\n                .attr(\"stroke\", lineColor || LINE_COLOR)\n                .attr(\"stroke-opacity\", isNaN(lineOpacity) ? LINE_OPACITY : lineOpacity)\n                // note that in case of a single item, dot is rendered with a different size\n                .attr(\"stroke-width\", strokeWidth);\n\n            if (part.area) {\n                part.area\n                    .attr(\"fill\", fillColor || FILL_COLOR)\n                    .attr(\"fill-opacity\", isNaN(fillOpacity) ? FILL_OPACITY : fillOpacity);\n            }\n        });\n    }\n\n    _renderLine({height, xAxis, yAxis, lineData, renderAreas}) {\n        let minHeight = height - MARGIN_BOTTOM;\n        let areaZero = Math.max(Math.min(minHeight, yAxis(0)), 0);\n\n        // define the area\n        let area = d3.area()\n            .x(function(d) { return xAxis(d.id); })\n            .y0(areaZero)\n            .y1(function(d) { return yAxis(d.value); });\n\n        // define the line\n        let path = d3.line()\n            .x(function(d) { return xAxis(d.id); })\n            .y(function(d) { return yAxis(d.value); });\n\n        // apply grouping if needed (null or other splits)\n        const groupedData = this._getPartedData(lineData);\n\n        return groupedData.map(partData => {\n            const part = {};\n\n            // only add area if not rendering a dot\n            if (renderAreas && partData.length>1){\n                // add the area path\n                part.area = this.container.append(\"path\")\n                    .data([partData])\n                    .attr(\"class\", style[\"area\"])\n                    .attr(\"d\", area);\n            }\n\n            if (partData.length){\n\n                // add the line path\n                part.path = this.container.append(\"path\")\n                    .data([partData])\n                    .attr(\"fill\", \"none\")\n                    .attr(\"stroke-linecap\", \"round\")\n                    .attr(\"class\", style[\"line\"])\n                    .attr(\"d\", d => {\n                        const p = path(d);\n                        // Fix issue in Chrome on Mac and Surface where\n                        // path points are not rendered if it's a single point\n                        if (p && p.split(\",\").length == 2){\n                            return p + \" \" + p;\n                        }\n                        return p;\n                    });\n            }\n\n            return part;\n        });\n    }\n\n    _getPartedData(data){\n        let group;\n        let lastEmpty = true;\n        const result = [];\n\n        data.forEach(item => {\n            if (item.value === null) {\n                lastEmpty = true;\n            } else {\n                if (lastEmpty) {\n                    group = [];\n                    result.push(group);\n                }\n                group.push(item);\n                lastEmpty = false;\n            }\n        });\n\n        return result;\n    }\n\n    _shouldRenderZeroLine(yAxis, height){\n        const zeroLinePosition = yAxis(0);\n        const axisPosition = height - MARGIN_BOTTOM;\n        const treshold = 10;\n        return zeroLinePosition < axisPosition - treshold;\n    }\n}\n\nexport default LinechartLine;\n","import style from \"./Linechart.css\";\nimport * as d3 from \"d3\";\nimport Component from './Component';\nimport {DOT_SIZE, LINE_WIDTH, MARGIN_TOP, MARGIN_BOTTOM} from './LinechartDefaults';\nimport LinechartLine from './LinechartLine';\n\nclass LinechartMask extends Component {\n\n    constructor(width, height, enableLineTooltip) {\n        super('linechart-mask');\n        this._width = width;\n        this._height = height;\n        this._enableLineTooltip = enableLineTooltip;\n        this.observable.add('lineEnter');\n        this.observable.add('lineLeave');\n        this.observable.add('tooltipEnter');\n        this.observable.add('tooltipLeave');\n        this.observable.add('annotationEnter');\n        this.observable.add('annotationLeave');\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    get enableLineTooltip() {\n        return this._enableLineTooltip;\n    }\n\n    _setData(container, data, lastData) {\n        const verticalSpacing = this.height / 4;\n        const xAxis = d3.scalePoint().range([0, this.width]);\n        const yAxis = d3.scaleLinear().range([this.height-verticalSpacing, MARGIN_TOP]);\n        xAxis.domain(data.series[0].data.map(function (d) { return d.id; }));\n        const minMax = this._calculateMinMax(data.series);\n        yAxis.domain([minMax.min, minMax.max]);\n        const mergedData = this._mergeSeriesData(data.series);\n        this._renderTooltipAreas(container, xAxis, yAxis, mergedData);\n        if (this.enableLineTooltip) {\n            this._renderTooltipLines(container, xAxis, yAxis, data.series);\n        }\n        this._renderAnnotations(container, xAxis, data.annotations, mergedData);\n    }\n\n    _renderAnnotations(container, xAxis, annotations, mergedData) {\n        const mergedAnnotations = this._mergeAnnotations(annotations);\n\n        Object.keys(mergedAnnotations).forEach((id, index) => {\n            if (typeof xAxis(id) === 'undefined') {\n                console.warn(`Annotation (in mask component) ${JSON.stringify(mergedAnnotations[id])} has id '${id}' which is not present in linechart data`);\n                return;\n            }\n            const annotationGroup = container.append(\"g\")\n                .on(\"mouseenter\", () => this.observable.fire(\"annotationEnter\", mergedAnnotations[id], mergedData[id], id, index))\n                .on(\"mouseleave\", () => this.observable.fire(\"annotationLeave\", mergedAnnotations[id], mergedData[id], id, index));\n            annotationGroup.append(\"line\")\n                .attr(\"x1\", xAxis(id))\n                .attr(\"x2\", xAxis(id))\n                .attr(\"y1\", 0)\n                .attr(\"y2\", this.height - MARGIN_BOTTOM)\n                .attr(\"stroke-width\", 3)\n                .attr(\"stroke\", 'transparent');\n            if (mergedAnnotations[id].length > 1) {\n                annotationGroup.append(\"circle\")\n                    .attr(\"fill\", \"transparent\")\n                    .attr(\"cx\", xAxis(id))\n                    .attr(\"cy\", this.height - MARGIN_BOTTOM)\n                    .attr(\"r\", 7.5);\n            }\n        });\n    }\n\n    _mergeAnnotations(annotations) {\n        const merged = {};\n        annotations.forEach(annotation => {\n            merged[annotation.id] = merged[annotation.id] || [];\n            merged[annotation.id].push(annotation);\n        });\n        return merged;\n    }\n\n    _renderTooltipAreas(container, xAxis, yAxis, mergedData) {\n        let hoverWidth = this.width;\n        if (Object.keys(mergedData).length > 1) {\n            hoverWidth = this.width / (Object.keys(mergedData).length-1);\n        }\n\n        Object.keys(mergedData).forEach((valueId, valueIndex) => {\n            container.append(\"rect\")\n                .attr(\"class\", style[\"tooltip-hover-area\"])\n                .attr(\"width\", hoverWidth)\n                .attr(\"fill-opacity\", 0)\n                .attr(\"x\", () => {\n                    return xAxis(valueId) - hoverWidth/2\n                })\n                .attr(\"height\", this.height)\n                .on(\"mouseover\", () => this.observable.fire('tooltipEnter', mergedData[valueId], valueId, valueIndex))\n                .on(\"mouseleave\", () => this.observable.fire('tooltipLeave', mergedData[valueId], valueId, valueIndex))\n        });\n    }\n\n    _mergeSeriesData(series) {\n        const data = {};\n        series.forEach(line => {\n            line.data.forEach(lineValue => {\n                data[lineValue.id] = data[lineValue.id] || [];\n                data[lineValue.id].push({\n                    id: lineValue.id,\n                    label: lineValue.label,\n                    value: lineValue.value,\n                    tooltip: lineValue.tooltip,\n                    appearance: line.appearance\n                });\n            });\n        });\n        return data;\n    }\n\n    _renderTooltipLines(container, xAxis, yAxis, series) {\n        Array.from(series).reverse().forEach((lineData, lineIndex) => {\n            if (lineData.title) {\n                this._renderTooltipLine(container, xAxis, yAxis, lineData, series.length-1 - lineIndex);\n            }\n        });\n    }\n\n    _renderTooltipLine(container, xAxis, yAxis, lineData, lineIndex) {\n\n        const maskAppearance = Object.assign({}, lineData.appearance, {\n            lineOpacity: 0,\n            lineWidth: (lineData.appearance.lineWidth || LINE_WIDTH)*2,\n            dotSize: (lineData.appearance.dotSize || DOT_SIZE)*2\n        });\n\n        const line = new LinechartLine();\n        line.render(container.node());\n        line.setData({\n            height: this.height,\n            xAxis,\n            yAxis,\n            lineData: lineData.data,\n            appearance: maskAppearance,\n            renderAreas: false\n        });\n        line.on(\"enter\", () => this.observable.fire('lineEnter', lineData, lineIndex))\n            .on(\"leave\", () => this.observable.fire('lineLeave', lineData, lineIndex));\n    }\n\n    _calculateMinMax(series) {\n        const data = [];\n        series.forEach((line) => {\n            line.data.forEach((item) => {\n                data.push(item);\n            });\n        });\n\n        var min = d3.min(data, function (d) { return d.value; });\n        var max = d3.max(data, function (d) { return d.value; });\n\n        if (data.length <= series.length) {\n            min = Math.min(min, 0);\n            max = Math.max(max, 0);\n        }\n\n        return {\n            min: min,\n            max: max\n        }\n    }\n\n    _getGroupedData(data){\n        let group = [];\n        const result = [group];\n\n        data.forEach(item=>{\n            if (item.value === null){\n                group = [];\n                result.push(group);\n            } else {\n                group.push(item);\n            }\n        });\n\n        return result;\n    }\n\n}\n\nexport default LinechartMask;\n","import style from \"./Linechart.css\";\nimport Component from './Component';\nimport {LABEL_OFFSET} from './LinechartDefaults';\n\nlet gradientID = 0;\n\nclass LinechartLabel extends Component {\n    constructor() {\n        super('linechart-label');\n    }\n\n    _setData(container, data, lastData) {\n        if (Object.keys(data).length === 1 && typeof data.visible !== 'undefined') {\n            return this.container.attr(\"visibility\", data.visible ? \"visible\" : \"hidden\");\n        }\n\n        this.container.selectAll(\"*\").remove();\n        const annotationCircles = data.annotationCircles || [];\n        const valueId = data.valueId;\n        const newData = Object.assign({}, lastData, data);\n        this._renderLabel(newData);\n        if (newData.renderDot && annotationCircles.indexOf(valueId) < 0) {\n            this._renderCircle(newData);\n        }\n        this.container.attr(\"visibility\", data.visible ? \"visible\" : \"hidden\");\n    }\n\n    _renderCircle(data) {\n        this.container.append(\"circle\")\n            .attr(\"class\", style[\"label-axis-circle\"])\n            .attr(\"stroke-width\", 1)\n            .attr(\"cx\", data.x)\n            .attr(\"cy\", data.y)\n            .attr(\"r\", 2.5 + 1/2);\n    }\n\n    _renderLabel(data) {\n        const labelMask = this.container.append(\"rect\")\n            .attr(\"class\", style[\"tooltip-label-mask\"])\n            .attr(\"y\", data.y + LABEL_OFFSET - 15)\n            .attr(\"height\", 20);\n\n        const label = this.container.append(\"text\")\n            .attr(\"class\", style[\"tooltip-label\"])\n            .attr(\"y\", data.y + LABEL_OFFSET)\n            .text(data.label);\n\n        const bottomLabelWidth = label.node().getComputedTextLength();\n        const bottomMaskPadding = 25;\n        const textAnchor = this._getTextAnchor(data.x, bottomLabelWidth, data.width);\n        const bottomMaskWidth = bottomMaskPadding*2 + bottomLabelWidth;\n\n        this._createMaskGradientElement(this.container, bottomMaskWidth);\n\n        labelMask\n            .attr(\"width\", bottomMaskWidth)\n            .attr(\"fill\", \"url(#\"+this.container.select('linearGradient').attr(\"id\")+\")\")\n            .attr(\"x\", -bottomMaskWidth/2)\n            .attr(\"transform\", () => {\n                return {\n                    \"start\":\"translate(\"+bottomLabelWidth/2+\", 0)\",\n                    \"middle\":\"translate(\"+data.x+\", 0)\",\n                    \"end\":\"translate(\"+(data.width-bottomLabelWidth/2)+\", 0)\"\n                }[textAnchor]\n            });\n\n        label\n            .attr(\"text-anchor\", textAnchor)\n            .attr(\"transform\", () => {\n                return {\n                    \"start\":\"translate(0, 0)\",\n                    \"middle\":\"translate(\"+data.x+\", 0)\",\n                    \"end\":\"translate(\"+data.width+\", 0)\"\n                }[textAnchor]\n            });\n    }\n\n    _createMaskGradientElement(container, bottomMaskWidth){\n        const gradientEdge = 15/bottomMaskWidth;\n        const colorWhite = 'rgba(255,255,255,1)';\n        const colorTransparent = 'rgba(255,255,255,0)';\n\n        const handleMaskGradientEl = container.append(\"linearGradient\")\n            .attr(\"id\", style[\"tooltip-label-mask\"]+\"-\"+(gradientID++)+\"-gradient\")\n            .attr(\"gradientUnits\", \"userSpaceOnUse\")\n            .attr(\"y1\", \"0\").attr(\"x1\", -bottomMaskWidth/2)\n            .attr(\"y2\", \"0\").attr(\"x2\", bottomMaskWidth/2);\n\n        handleMaskGradientEl.selectAll(\"stop\")\n            .data([\n                { offset: \"0\", color: colorTransparent},\n                { offset: gradientEdge, color: colorWhite},\n                { offset: 1 - gradientEdge, color: colorWhite},\n                { offset: \"1\", color: colorTransparent}\n            ])\n            .enter().append(\"stop\")\n            .attr(\"offset\", function (d) { return d.offset; })\n            .attr(\"stop-color\", function (d) { return d.color; });\n    }\n\n    _getTextAnchor(xPos, bottomLabelWidth, width){\n        var xpos = xPos;\n        if (xpos - bottomLabelWidth/2 < 0){\n            return \"start\"\n        } else if (xpos + bottomLabelWidth/2 > width){\n            return \"end\"\n        } else {\n            return \"middle\";\n        }\n    }\n\n}\n\nexport default LinechartLabel;\n","import style from \"./Linechart.css\";\nimport Component from './Component';\nimport * as d3 from 'd3';\n\nclass LinechartTooltip extends Component {\n    constructor() {\n        super('linechart-tooltip');\n    }\n\n    _renderContainer(selector, x = 0, y = 0){\n        // force position relative so the toolip shows correctly\n        d3.select(selector).style(\"position\", \"relative\");\n\n        return d3.select(selector).insert(\"span\", \":first-child\")\n            .attr(\"class\", style[\"tooltip-top-label\"])\n            .style(\"position\", \"absolute\")\n            .style(\"visibility\", \"hidden\");\n    }\n\n    _setData(container, data, lastData) {\n        const newData = Object.assign({}, lastData, data);\n        this._renderTooltip(newData);\n    }\n\n    _renderTooltip(data) {\n        this.container.node().innerHTML = data.html;\n        this.container\n            .style(\"left\", `${this._getLabelLeft(data.x, data.width)}px`)\n            .style(\"top\", `${this._getLabelTop(data.y)}px`)\n            .style(\"visibility\", data.visible ? \"visible\" : \"hidden\")\n            .classed(style[\"dark\"], data.dark);\n    }\n\n    _getLabelLeft(xPos, width){\n        const labelWidth = this.container.node().offsetWidth;\n        let labelLeft = xPos-labelWidth/2;\n\n        if (labelLeft<0){\n            labelLeft = 0;\n        }\n\n        if (labelLeft > width - labelWidth){\n            labelLeft = width - labelWidth;\n        }\n\n        return labelLeft;\n    }\n\n    _getLabelTop(yPos){\n        const yTop = yPos - 12 - this.container.node().offsetHeight;\n\n        if (yTop >= 0) {\n            return yTop;\n        } else {\n            return yPos + 12;\n        }\n    }\n}\n\nexport default LinechartTooltip;\n","import style from \"./Linechart.css\";\nimport Component from './Component';\nimport {HIGHLIGHT_COLOR, MARGIN_BOTTOM} from './LinechartDefaults';\n\nclass LinechartAnnotation extends Component {\n    constructor() {\n        super('linechart-annotation');\n    }\n\n    _setData(container, data, lastData) {\n        if (Object.keys(data).length === 1 && typeof data.highlight !== 'undefined') {\n            return this._updateAppearance(data.highlight);\n        }\n\n        this.container.selectAll(\"*\").remove();\n        this._annotation = this._renderAnnotation(data);\n        return this._updateAppearance(data.highlight);\n    }\n\n    _updateAppearance(highlight) {\n        this._annotation.line.attr(\"stroke\", highlight ? HIGHLIGHT_COLOR : \"#8f959c\");\n        if (this._annotation.circle) {\n            this._annotation.circle.attr(\"fill\", highlight ? HIGHLIGHT_COLOR : \"#8f959c\");\n        }\n        if (this._annotation.text) {\n            this._annotation.text.classed(style['white-fill'], !highlight);\n        }\n    }\n\n    _renderAnnotation({xAxis, id, height, length}) {\n        const annotationGroup = {};\n        annotationGroup.line = this.container.append(\"line\")\n            .attr(\"x1\", xAxis(id))\n            .attr(\"x2\", xAxis(id))\n            .attr(\"y1\", 0)\n            .attr(\"y2\", height - MARGIN_BOTTOM)\n            .attr(\"stroke-width\", 1)\n            .attr(\"stroke-dasharray\",\"2 ,2\");\n\n        if (length > 1) {\n            annotationGroup.circle = this.container.append(\"circle\")\n                .attr(\"cx\", xAxis(id))\n                .attr(\"cy\", height - MARGIN_BOTTOM)\n                .attr(\"r\", 7.5)\n            annotationGroup.text = this.container.append(\"text\")\n                .attr(\"x\", xAxis(id))\n                .attr(\"y\", height - MARGIN_BOTTOM + 4)\n                .attr(\"text-anchor\", \"middle\")\n                .text(length);\n        }\n        return annotationGroup;\n    }\n\n}\n\nexport default LinechartAnnotation;\n","\nimport Doughnut from \"./doughnut/Doughnut\";\nimport Histogram from \"./histogram/Histogram\";\nimport Line from \"./line/Line\";\nimport Barchart from \"./barchart/components/Barchart\";\nimport Linechart from \"./linechart/Linechart\"\n\nexport default {\n\tBarchart:Barchart,\n\n    Doughnut:Doughnut,\n    Histogram:Histogram,\n    Line:Line,\n    Linechart:Linechart\n}","import style from \"./Linechart.css\";\nimport * as d3 from \"d3\";\nimport Component from './Component';\nimport {\n    AXIS_COLOR, HIGHLIGHT_COLOR,\n    LABEL_OFFSET,\n    LINE_COLOR,\n    MARGIN_TOP,\n    MARGIN_BOTTOM,\n    ZERO_LINE_COLOR\n} from './LinechartDefaults';\nimport LinechartMask from './LinechartMask';\nimport {WIDTH, HEIGHT, ENABLE_LINE_TOOLTIP} from './LinechartDefaults';\nimport LinechartLabel from './LinechartLabel';\nimport LinechartTooltip from './LinechartTooltip';\nimport LinechartLine from './LinechartLine';\nimport LinechartAnnotation from './LinechartAnnotation';\n\n/**\n * @class\n * Main Linechart class\n * @param {Object} options\n */\nclass Linechart extends Component {\n    constructor({\n        width = WIDTH,\n        height = HEIGHT,\n        enableLineTooltip = ENABLE_LINE_TOOLTIP\n    }) {\n        super('linechart');\n        this._width = width;\n        this._height = height;\n        this._enableLineTooltip = enableLineTooltip;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    get enableLineTooltip() {\n        return this._enableLineTooltip;\n    }\n\n    _renderContainer(selector, x = 0, y = 0){\n        this._renderTooltip(selector);\n        return d3.select(selector).append(\"svg\")\n            .attr(\"width\", this.width)\n            .attr(\"height\", this.height)\n            .attr(\"class\", style[this.className])\n            .attr(\"transform\", `translate(${x}, ${y})`)\n    }\n\n    _setData(container, data, lastData) {\n        container.selectAll(\"*\").remove();\n\n        const {xAxis, yAxis} = this._getAxes(data.series);\n\n        this._renderZeroLine(container, xAxis, yAxis);\n        this._renderXAxis(container, AXIS_COLOR, data.series);\n        this._renderAnnotations(container, xAxis, data.annotations);\n        this._renderDataLines(container, xAxis, yAxis, data.series);\n        this._renderLabel(container);\n        this._renderMask(container, data, xAxis, yAxis);\n    }\n\n    _getAxes(series) {\n        const verticalSpacing = this.height / 4;\n        const xAxis = d3.scalePoint().range([0, this.width]);\n        const yAxis = d3.scaleLinear().range([this.height-verticalSpacing, MARGIN_TOP]);\n        xAxis.domain(series[0].data.map(function (d) { return d.id; }));\n        const minMax = this._calculateMinMax(series);\n        yAxis.domain([minMax.min, minMax.max]);\n        return {xAxis, yAxis}\n    }\n\n    _clearData() {\n        this._width = null;\n        this._height = null;\n        this._tooltip.destroy();\n        this._tooltip = null;\n        this._label = null;\n        this._lines = null;\n    }\n\n\n\n    ////////////  RENDER FUNCTIONS\n\n    _renderTooltip(selector) {\n        this._tooltip = new LinechartTooltip();\n        this._tooltip.render(selector);\n        this._tooltip.setData({\n            html: \"\",\n            x: 0,\n            y: 0,\n            dark: false,\n            visible: false,\n            width: this.width\n        });\n    }\n\n    _renderZeroLine(container, xAxis, yAxis){\n        if (this._shouldRenderZeroLine(yAxis)) {\n            container.append(\"line\")\n                .attr(\"x1\", 0)\n                .attr(\"x2\", this.width)\n                .attr(\"y1\", Math.round(yAxis(0)))\n                .attr(\"y2\", Math.round(yAxis(0)))\n                .attr(\"stroke-dasharray\",\"2 ,2\")\n                .attr(\"stroke\", ZERO_LINE_COLOR)\n        }\n    }\n\n    _renderXAxis(container, axisColor, series) {\n        container.append(\"line\")\n            .attr(\"x1\", 0)\n            .attr(\"x2\", this.width)\n            .attr(\"y1\", this.height-MARGIN_BOTTOM)\n            .attr(\"y2\", this.height-MARGIN_BOTTOM)\n            .attr(\"stroke-width\", 1)\n            .attr(\"stroke\", axisColor);\n\n        // render to labels on start and end sides if multiple items are available\n        if (series[0].data.length>1){\n            container.append(\"text\")\n                .text(series[0].data[0].label)\n                .attr(\"x\", 0)\n                .attr(\"y\", this.height - MARGIN_BOTTOM + LABEL_OFFSET)\n\n            container.append(\"text\")\n                .text(series[0].data[series[0].data.length-1].label)\n                .attr(\"x\", this.width)\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"y\", this.height - MARGIN_BOTTOM + LABEL_OFFSET)\n\n            // render single label in the middle if only one item is available\n        } else if (series[0].data.length == 1){\n            container.append(\"text\")\n                .text(series[0].data[0].label)\n                .attr(\"x\", this.width/2)\n                .attr(\"text-anchor\", \"middle\")\n                .attr(\"y\", this.height - MARGIN_BOTTOM + LABEL_OFFSET)\n        }\n    }\n\n    _renderLabel(container) {\n        this._label = new LinechartLabel();\n        this._label.render(container.node());\n        this._label.setData({\n            x: 0,\n            y: this.height - MARGIN_BOTTOM,\n            width: 360,\n            label: \"\",\n            visible: false,\n            renderDot: true\n        });\n    }\n\n    _renderAnnotations(container, xAxis, annotations) {\n        const mergedAnnotations = this._mergeAnnotations(annotations);\n        this._annotationCircles = Object.keys(mergedAnnotations).filter(annotation => {\n            return mergedAnnotations[annotation].length > 1;\n        });\n\n        this._annotations = Object.keys(mergedAnnotations).map(id => {\n            if (typeof xAxis(id) === 'undefined') {\n                console.warn(`Annotation (in presentation component) ${JSON.stringify(mergedAnnotations[id])} has id '${id}' which is not present in linechart data`);\n                return;\n            }\n            const annotation = new LinechartAnnotation();\n            annotation.render(this.container.node());\n            annotation.setData({\n                xAxis,\n                id,\n                height: this.height,\n                length: mergedAnnotations[id].length,\n                highlight: false\n            });\n            return annotation;\n        });\n    }\n\n    _renderDataLines(container, xAxis, yAxis, series) {\n        this._lines = Array.from(series).reverse().map(lineData => {\n            const line = new LinechartLine();\n            line.render(this.container.node());\n            line.setData({\n                height: this.height,\n                xAxis,\n                yAxis,\n                lineData: lineData.data,\n                appearance: lineData.appearance,\n                renderAreas: true,\n                point: null\n            });\n            return line;\n        });\n        this._lines.reverse();\n    }\n\n    _renderMask(container, data, xAxis, yAxis) {\n        const mask = new LinechartMask(this.width, this.height, this.enableLineTooltip);\n        mask.render(container.node());\n        mask.on('lineEnter', (lineData, lineIndex) => {\n            this._onLineEnter(container, lineData, lineIndex);\n        }).on('lineLeave', (lineData, lineIndex) => {\n            this._onLineLeave(container, lineData, lineIndex);\n        }).on('tooltipEnter', (valueData, valueLabel) => {\n            this._onValueEnter(xAxis, yAxis, valueData, valueLabel);\n        }).on('tooltipLeave', (valueData, valueLabel) => {\n            this._onValueLeave(xAxis, yAxis, valueData, valueLabel);\n        }).on('annotationEnter', (annotationData, valueData, annotationId, annotationIndex) => {\n            this._onAnnotationEnter(container, xAxis, annotationData, valueData, annotationId, annotationIndex);\n        }).on('annotationLeave', (annotationData, valueData, annotationId, annotationIndex) => {\n            this._onAnnotationLeave(container, xAxis, annotationData, valueData, annotationId, annotationIndex);\n        }).on('leave', () => {\n            this._onLeave();\n        });\n        mask.setData(data);\n    }\n\n\n\n    ////////////  CALLBACK FUNCTIONS\n\n    _onAnnotationEnter(container, xAxis, annotationData, valueData, annotationId, annotationIndex) {\n        this._annotations[annotationIndex].setData({\n            highlight: true\n        });\n\n        this._label.setData({\n            x: xAxis(annotationId),\n            label: valueData[0].label,\n            visible: true,\n            renderDot: annotationData.length <= 1\n        });\n\n        const coord = d3.mouse(container.node());\n        this._tooltip.setData({\n            html: this._getAnnotationHTML(annotationData),\n            x: coord[0],\n            y: coord[1],\n            dark: true,\n            visible: true\n        });\n    }\n\n    _onAnnotationLeave(container, xAxis, annotationData, valueData, annotationId, annotationIndex) {\n        this._annotations[annotationIndex].setData({\n            highlight: false\n        });\n    }\n\n    _onValueEnter(xAxis, yAxis, valueData, valueId) {\n        this._lines.forEach(line => line.setData({\n            point: valueId\n        }));\n\n        this._label.setData({\n            x: xAxis(valueId),\n            label: valueData[0].label,\n            visible: true,\n            renderDot: true,\n            valueId,\n            annotationCircles: this._annotationCircles\n        });\n\n        let hasTooltips = false;\n        valueData.forEach(lineData => lineData.tooltip && (hasTooltips = true));\n        if (hasTooltips) {\n            this._tooltip.setData({\n                html: this._getValueTooltipHTML(valueData),\n                x: xAxis(valueId),\n                y: yAxis(Math.max.apply(Math, valueData.map(item => item.value))),\n                dark: false,\n                visible: true\n            });\n        } else {\n            this._tooltip.setData({\n                visible: false\n            });\n        }\n    }\n\n    _onValueLeave() {\n        this._lines.forEach(line => line.setData({\n            point: null\n        }));\n    }\n\n    _onLineEnter(container, lineData, lineIndex) {\n        const coord = d3.mouse(container.node());\n        this._tooltip.setData({\n            html: lineData.title,\n            x: coord[0],\n            y: coord[1],\n            dark: true,\n            visible: true\n        });\n\n        const highlightAppearance = Object.assign({}, lineData.appearance, {\n            lineColor: HIGHLIGHT_COLOR,\n            fillColor: HIGHLIGHT_COLOR\n        });\n        this._lines[lineIndex].setData({\n            appearance: highlightAppearance\n        });\n\n        this._label.setData({\n            visible: false\n        });\n    }\n\n    _onLineLeave(container, lineData, lineIndex) {\n        this._lines[lineIndex].setData({\n            appearance: lineData.appearance\n        });\n    }\n\n    _onLeave() {\n        this._label.setData({\n            visible: false\n        });\n        this._tooltip.setData({\n            visible: false\n        });\n    }\n\n\n\n    ////////////  UTILS FUNCTIONS\n\n    _getValueTooltipHTML(data){\n        return data.filter(item => item.value != null).map(item => {\n            const value = item.tooltip || item.value;\n\n            if (data.length>1){\n                const color = item.appearance.lineColor || LINE_COLOR;\n                const icon = `\n\t\t\t\t    <span style=\"display:inline-block;position:relative;top:-1px;margin-right:5px;width:6px;height:6px;border-radius:50%;background-color:${color}\"></span>\n\t\t\t    `;\n                return icon + value;\n            } else {\n                return value;\n            }\n        }).join(\"<br />\");\n    }\n\n    _getAnnotationHTML(data){\n        return data.map(annotation => {\n            return `<span style=\"font-weight: bold\">${annotation.title}</span><br/><span>${annotation.subtitle}</span>`\n        }).join(\"<hr />\");\n    }\n\n    _mergeAnnotations(annotations) {\n        const merged = {};\n\n        annotations.forEach(annotation => {\n            merged[annotation.id] = merged[annotation.id] || [];\n            merged[annotation.id].push(annotation);\n        });\n        return merged;\n    }\n\n    _shouldRenderZeroLine(yAxis){\n        const zeroLinePosition = yAxis(0);\n        const axisPosition = this.height - MARGIN_BOTTOM;\n        const treshold = 10;\n        return zeroLinePosition < axisPosition - treshold && zeroLinePosition > 0;\n    }\n\n    _calculateMinMax(series) {\n        const data = [];\n        series.forEach((line) => {\n            line.data.forEach((item) => {\n                data.push(item);\n            });\n        });\n\n        var min = d3.min(data, function (d) { return d.value; });\n        var max = d3.max(data, function (d) { return d.value; });\n\n        if (data.length <= series.length) {\n            min = Math.min(min, 0);\n            max = Math.max(max, 0);\n        }\n\n        return {\n            min: min,\n            max: max\n        }\n    }\n\n\n}\n\nexport default Linechart;\n"],"names":["Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","DoughnutRenderer","options","_options","_containerEl","_groupEl","_svgEl","_rendered","_observable","selector","ct","d3","width","node","offsetWidth","height","offsetHeight","value","_value","angle","_angle","tau","innerRadius","_innerRadius","outerRadius","_outerRadius","arc","_arc","startAngle","append","attr","style","g","_inactiveArc","datum","endAngle","inactiveColor","_activeArc","activeColor","_backgroundArc","backgroundColor","_hoverEl","on","fire","eventName","off","opts","activeArcTransition","transition","duration","animationDuration","attrTween","_arcTween","_this2","interpolateOuterRadius","interpolateInnerRadius","d","interpolateAngle","t","_this3","removeChild","destroy","getOptionValue","optionValue","defaultOptionValue","Doughnut","renderTo","_doughnutRenderer","render","isRendered","update","MARGIN","DEFAULT_COLORS","HistogramData","data","_histogramData","_loadHistogramData","_minMax","_calculateMinMax","histogramData","max","min","position","minMax","getMinMax","getValueRatio","valueRatio","constrainedValue","Math","round","numOfBarsPerBucket","forEach","bucket","step","volume","Array","isArray","gradientIndex","HistogramHandle","groupEl","_handleEl","_handleLineEl","_handleCircleEl","_handleMaskEl","_handleMaskGradientEl","_handleLabelEl","_isOver","_index","_initialValue","Number","_position","valueToPosition","_initialPosition","_labelSizeCache","_elements","_renderHandle","element","remove","_createHandleElement","_createHandleLineElement","_createHandleCircleElement","_createDragMaskElement","_createMaskGradientElement","_createDragLabelElement","_handleHoverState","_handleDrag","parseInt","Defaults","_updateLabelPosition","getBBox","offset","text","setLabelOffset","setHoverState","unsetHoverState","classed","xpos","x","positionToValue","_getLabelText","format","call","_onDrag","bind","_onStartDrag","_onEndDrag","label","content","innerHTML","getComputedTextLength","maskPadding","fontSize","textLength","_getComputedLabelTextLength","maskWidth","xPosition","selectAll","color","enter","getHandlePositionOffsets","handle1","handle2","label1Box","getLabelBox","label2Box","conflictDiff","posDiff1","posDiff2","xMax","HistogramSelectionRenderer","_histogramSelection","_overSelectionIndex","_handles","_draggingHandle","_prevSelection","_animating","_destroyHandles","_selectionBarGroups","handle","handleIndex","handleValue","promptHandler","then","promptResult","startSelectionSnapshot","JSON","stringify","_this","getOutputSelection","parseFloat","points","getSelectionPoints","positions","sort","p1","p2","map","point","_updateSelectionPositions","_updateSelection","_renderHandles","selection","selectionIndex","disabled","enabled","target","allowsToggle","_toggleSelection","_onHandleClick","_onClick","histogramSelection","_animate","animate","getSelection","_prevHistogramData","_clear","_renderSelection","_handleClick","needRefresh","refresh","prevHistogramSelection","prev","curr","sel","from","to","handles","slice","h1","h2","getXPosition","labelOffsets","PositionUtils","nodes","_updateSelectionControlsHoverState","selectionbargroup","_onSelectionMouseOut","_onSelectionMouseOver","p","pos","reverse","_selectionBarsIcons","selectionbaricon","icon","src","_selectionBars","selectionbar","hidden","hide","_onHandleDrag","disable","enable","barX","s","isLast","colors","volumeIndex","selectionColor","inactiveBarColor","overSelectionColor","segmentDivider","barSelectionIndex","_getBarSelectionIndex","some","_getSelectionColor","isOver","isDisabled","overSelectionOpacity","inactiveBarOpacity","opacity","selection1","selection2","data1","data2","onTransition","onComplete","s1","s2","_this4","frames","transitions","abs","si","hi","bars","bar","fillBars","_this5","_getBarColor","_getBarOpacity","prevSelection","prevData","setHandleXPosition","setLabelPosition","_onSelectionTransition","align","y","selectionIconWidth","showLabel","_this6","hideLabel","HistogramRenderer","_historyData","_xAxis","range","_yAxis","_prevData","_selectionRenderer","_labelsVisible","margin","svg","left","right","top","bottom","histogram","inactive","active","domain","getData","_renderXAxis","_renderDataBars","showSelectionLabels","setSelection","hideSelectionLabels","v","floor","ceil","HistogramSelection","_selection","getSelectionWithPositions","Object","assign","SelectionTypes","MultipleHistogramSelection","MULTI","result","DefaultHistogramSelectionImpl","start","MultipleHistogramSelectionImpl","FilterHistogramSelectionImpl","FILTER","InvertedFilterHistogramSelectionImpl","_getInvertedSelection","invertedSelection","INVERTED_FILTER","HistogramSelectionFactory","selectionType","Histogram","enableSelectionToggle","_histogramRenderer","_selectionFactory","getHistogramSelection","String","selectionCopy","parse","LINE_COLORS","FILL_COLORS","LineData","series","_series","concat","dataMap","getAllData","item","values","tooltips","tooltip","numParts","toString","split","TooltipRenderer","_lineData","_onMouseOut","xPos","bottomLabelWidth","filter","lineColors","lineColor","join","_tooltipGroup","_tooltipBottomLabel","textAnchor","_getTextAnchor","bottomMaskWidth","bottomMaskPadding","_tooltipBottomLabelMask","tooltipHtml","_getTooltipHTML","_tooltipTopLabel","labelLeft","_getLabelLeft","_tooltipLineCircle","circle","labelWidth","parentNode","contains","relatedTarget","_hideTooltip","hoverWidth","getMergedData","getSeries","_hoverAreas","_onHoverAreaOver","lineWidth","lineOpacity","_tooltipAxisCircle","insert","_tooltipRendered","gradientID","lineData","_renderTooltip","LineRenderer","_tooltipRenderer","line","verticalSpacing","allData","_renderZeroLine","seriesIndex","_renderDataLines","axisColor","_showZeroLine","zeroLineColor","minHeight","areaZero","fillColor","fillColors","area","y0","y1","_getGroupedData","fillOpacity","dotSize","path","group","Line","_lineRenderer","setData","getPrecision","TOOLTIP_SYMBOL","ACTIVE_COLORS","STRIPE_BACKGROUND_COLOR","ONLY_TOOL_TEXT","BarchartData","_","detailsData","barsData","_detailsData","_barsData","barData","calculateMinMax","containsNegativeVal","containsPositiveVal","sum","precision","barchartData","details","DetailsData","_label","_disabled","_color","_tooltips","tooltipData","TooltipData","symbol","_symbol","_text","isNumber","str","includes","isNaN","isFinite","BarData","stripesData","highlighted","_highlighted","_stripesData","stripeData","stripes","stripe","absMax","StripeData","leftValue","leftColor","rightValue","rightColor","_right","_left","dual","leftData","rightData","JsonDataConverter","barchartJsonData","tooltipsData","tooltipJsonData","barJsonData","stripeJsonData","MASK_INDEX","Component","className","alignRight","alignBottom","_width","_height","_container","_maskIndex","_className","_alignRight","_alignBottom","_data","_renderContainer","clickableArea","_render","clearData","constructor","name","convert","_setData","_clearData","select","calculateTextWidth","canvas","context","getContext","window","getComputedStyle","fontStyle","getPropertyValue","fontVariant","fontWeight","fontStrech","fontFamily","font","measureText","Tooltip","space","_fontSize","_activeColor","_format","_space","_canvas","container","empty","spec","tooltipWidth","CleverChartsUtils","_renderTwoColoredFill","color1","color2","twoColoredFill","OnlyTool","onlyToolText","_onlyToolText","_onlyToolTextSvg","Details","labelFontSize","tooltipFontSize","tooltipSymbol","activeColors","horizontalPadding","showOnlyTool","enableToggle","showLabelCircle","_labelFontSize","_tooltipFontSize","_tooltipSymbol","_activeColors","_horizontalPadding","_showOnlyTool","_enableToggle","_showLabelCircle","_tooltipsBackground","_labelCircle","_tipWrapper","_tip","add","labelPadding","gradient","_createTooltips","_renderAndSetTooltipsData","_createOnlyTool","_renderOnlyTool","_rightSideStart","_handleLongLabel","_onlyTool","stopPropagation","undefined","previousTooltipX","reversedIndex","tooltipReversed","maxWidth","gradientWidth","document","documentElement","getBoundingClientRect","_getOffset","el","rect","scrollX","scrollY","COLOR_PATTERN_INDEX","Stripe","dualValue","topCornerRounded","bottomCornerRounded","condensed","_backgroundColor","_dualValue","_topCornerRounded","_bottomCornerRounded","_condensed","clipPath","_renderProgress","_renderStripe","x1","x2","axis","xBase","_renderXBase","Bar","detailsHidden","detailsHeight","enableHover","stripeHeight","stripeBackgroundColor","_detailsHidden","_detailsHeight","_enableHover","_stripeHeight","_stripeBackgroundColor","_details","_stripes","_createDetails","_renderDetails","_doEnableToggle","_setDetailsData","_createStripes","_renderStripes","_setStripesData","detailsDataDefault","copyAs","Barchart","detailsVisible","detailsBottomSpace","barHeight","enableBarHover","enableBarToggle","_detailsVisible","_detailsBottomSpace","_barHeight","_enableBarHover","_enableBarToggle","_bars","updateFunction","setDetailsData","setBarData","barDataDefault","_setDefaultBarDetails","addTooltip","_svgWrapper","_doSelectOnly","onlyIndex","_setDisabledValue","_adjustDetails","_adjustHeight","_createBars","_renderBars","barsContainer","topDetailsWidth","_lastData","lastData","LINE_COLOR","HIGHLIGHT_COLOR","LinechartLine","keys","appearance","_updateAppearance","pointData","_updatePoint","newData","_parts","_renderLine","_point","_renderPoint","xAxis","yAxis","id","strokeWidth","part","renderAreas","_getPartedData","partData","lastEmpty","LinechartMask","enableLineTooltip","_enableLineTooltip","observable","mergedData","_mergeSeriesData","_renderTooltipAreas","_renderTooltipLines","_renderAnnotations","annotations","mergedAnnotations","_mergeAnnotations","annotationGroup","warn","merged","annotation","valueId","valueIndex","lineValue","lineIndex","title","_renderTooltipLine","maskAppearance","LinechartLabel","visible","annotationCircles","_renderLabel","renderDot","_renderCircle","labelMask","gradientEdge","colorWhite","colorTransparent","LinechartTooltip","html","_getLabelTop","dark","yPos","yTop","LinechartAnnotation","highlight","_annotation","_renderAnnotation","_getAxes","_renderMask","_tooltip","_lines","_shouldRenderZeroLine","_annotationCircles","_annotations","mask","_onLineEnter","_onLineLeave","valueData","valueLabel","_onValueEnter","_onValueLeave","annotationData","annotationId","annotationIndex","_onAnnotationEnter","_onAnnotationLeave","_onLeave","coord","_getAnnotationHTML","hasTooltips","_getValueTooltipHTML","highlightAppearance","subtitle","zeroLinePosition"],"mappings":"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"}