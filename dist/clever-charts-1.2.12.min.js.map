{"version":3,"file":"clever-charts-1.2.12.min.js","sources":["../src/utils/Observable.js","../src/doughnut/DoughnutRenderer.js","../src/doughnut/Doughnut.js","../src/doughnut/DoughnutDefaults.js","../src/histogram/HistogramDefaults.js","../src/histogram/HistogramData.js","../src/histogram/selection/HistogramHandle.js","../src/histogram/utils/PositionUtils.js","../src/histogram/selection/HistogramSelectionRenderer.js","../src/histogram/HistogramRenderer.js","../src/histogram/selection/HistogramSelection.js","../src/histogram/selection/MultipleHistogramSelectionImpl.js","../src/histogram/selection/DefaultHistogramSelectionImpl.js","../src/histogram/selection/FilterHistogramSelectionImpl.js","../src/histogram/selection/InvertedFilterHistogramSelectionImpl.js","../src/histogram/selection/HistogramSelectionFactory.js","../src/histogram/Histogram.js","../src/line/LineDefaults.js","../src/line/LineData.js","../src/line/TooltipRenderer.js","../src/line/LineRenderer.js","../src/line/Line.js","../src/barchart/defaults/BarchartDefaults.js","../src/barchart/data/BarchartData.js","../src/barchart/data/DetailsData.js","../src/barchart/data/TooltipData.js","../src/barchart/data/BarData.js","../src/barchart/data/StripeData.js","../src/barchart/JsonDataConverter.js","../src/barchart/components/Component.js","../src/utils/CleverChartsUtils.js","../src/barchart/components/Tooltip.js","../src/barchart/components/OnlyTool.js","../src/barchart/components/Details.js","../src/barchart/components/Stripe.js","../src/barchart/components/Bar.js","../src/barchart/components/Barchart.js","../src/linechart/Component.js","../src/linechart/LinechartDefaults.js","../src/linechart/LinechartLine.js","../src/linechart/LinechartMask.js","../src/linechart/LinechartLabel.js","../src/linechart/LinechartTooltip.js","../src/linechart/LinechartAnnotation.js","../src/linechart/Linechart.js","../src/CleverCharts.js"],"sourcesContent":["/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nexport default class Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tthis._handlers[event].push(handler);\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unbind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler, optional\r\n\t */\r\n    off(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tif (!handler) {\r\n\t\t\tthis._handlers[event] = [];\r\n\t\t} else {\r\n\t\t\tvar handlers = this._handlers[event];\r\n\t\t\tvar index = handlers.indexOf(handler);\r\n\t\t\tif (index != -1){\r\n\t\t\t\thandlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Add new event to be handled\r\n\t * @param {String} event\r\n\t */\r\n\tadd(event) {\r\n\t\tif (!(event in this._handlers)) {\r\n\t\t\tthis._handlers[event] = [];\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Fire widget event\r\n\t * @param {String} event event name\r\n\t * @param {*} ...args event arguments\r\n\t */\r\n\tfire(event, ...args) {\r\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tvar handlers = this._handlers[event];\r\n\t\tfor (var i = 0; i < handlers.length; i++) {\r\n\t\t\thandlers[i].apply(this, args);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys this observable, removes events and so on \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._handlers = null;\r\n\t\treturn this;\r\n    }\r\n\t\r\n}","import style from \"./Doughnut.css\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\r\n\r\n/**\r\n * @class\r\n * Doughnut renderer class\r\n * @param {Object} options\r\n */\r\nexport default class DoughnutRenderer {\r\n\tconstructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Doughnut options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Doughnut has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over\r\n\t\t\t */\r\n\t\t\t\"mouseOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is out\r\n\t\t\t */\r\n\t\t\t\"mouseOut\"\r\n\t\t]);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Doughnut has been rendered or not\r\n\t * @returns {boolean} true if Doughnut has been rendered\r\n\t */\r\n\tisRendered() {\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Doughnut} returns this widget instance\r\n\t */\r\n\trender(selector) {\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._containerEl.node().offsetWidth;\r\n\t\tvar height = this._containerEl.node().offsetHeight;\r\n\t\tvar value = this._value = this._options.value;\r\n\t\tvar angle = this._angle = value / 100 * tau;\r\n\t\tvar innerRadius = this._innerRadius = this._options.innerRadius;\r\n\t\tvar outerRadius = this._outerRadius = this._options.outerRadius;\r\n\r\n\t\t// arc settings\r\n\t\tvar arc = this._arc = d3.arc()\r\n\t\t\t.innerRadius(innerRadius)\r\n\t\t\t.outerRadius(outerRadius)\r\n\t\t\t.startAngle(0);\r\n\r\n\t\t// render SVG\r\n\t\tthis._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height)\r\n\t\t\t.attr(\"class\", style[\"svg\"]);\r\n\r\n\t\t// render group\r\n\t\tvar g = this._groupEl = this._svgEl\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"class\", style[\"doughnut\"])\r\n\t\t\t.attr(\"transform\", \"translate(\" + width / 2 + \", \" + height / 2 + \")\");\r\n\r\n\t\t// render inactive doughtnut\t\r\n\t\tthis._inactiveArc = g.append(\"path\")\r\n\t\t\t.datum({ endAngle: tau })\r\n\t\t\t.attr(\"fill\", this._options.inactiveColor)\r\n\t\t\t.attr(\"d\", arc);\r\n\r\n\t\t// render active doughtnut\t\r\n\t\tthis._activeArc = g.append(\"path\")\r\n\t\t\t.datum({ endAngle: angle })\r\n\t\t\t.attr(\"fill\", this._options.activeColor)\r\n\t\t\t.attr(\"d\", arc);\r\n\r\n\t\t// render background\t\r\n\t\tthis._backgroundArc = g.append(\"circle\")\r\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\r\n\t\t\t.attr(\"r\", innerRadius)\r\n\t\t\t.attr(\"cx\", 0)\r\n\t\t\t.attr(\"cy\", 0)\r\n\r\n\t\t// render background\t\r\n\t\tthis._backgroundArc = g.append(\"circle\")\r\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\r\n\t\t\t.attr(\"r\", innerRadius)\r\n\t\t\t.attr(\"cx\", 0)\r\n\t\t\t.attr(\"cy\", 0)\r\n\r\n\t\t// hover element, this needs to be rendered in order to have stable and animation\r\n\t\t// independent hover \r\n\t\tthis._hoverEl = g.append(\"rect\")\r\n\t\t\t.attr(\"fill\", \"transparent\")\r\n\t\t\t.attr(\"x\", -width/2)\r\n\t\t\t.attr(\"y\", -height/2)\r\n\t\t\t.attr(\"width\",width)\r\n\t\t\t.attr(\"height\",height)\r\n\r\n\t\tg.on(\"mouseover\", ()=>{\r\n\t\t\tthis._observable.fire(\"mouseOver\");\r\n\t\t})\r\n\r\n\t\tg.on(\"mouseout\", ()=>{\r\n\t\t\tthis._observable.fire(\"mouseOut\");\r\n\t\t})\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t\t * Bind widget event\r\n\t\t * @param {String} event event name\r\n\t\t * @param {Function} handler event handler\r\n\t\t * @returns {Doughnut} returns this widget instance\r\n\t\t */\r\n\t\ton(eventName, handler) {\r\n\t\t\tthis._observable.on(eventName, handler);\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Unbind widget event\r\n\t\t * @param {String} event event name\r\n\t\t * @param {Function} [handler] event handler\r\n\t\t * @returns {Doughnut} returns this widget instance\r\n\t\t */\r\n\t\toff(eventName, handler) {\r\n\t\t\tthis._observable.off(eventName, handler);\r\n\t\t\treturn this;\r\n\t\t}\t\r\n\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * @param {opts} new options\r\n\t * Updates doughnut with new options\r\n\t */\r\n\tupdate(opts) {\r\n\t\tvar options = opts || {};\r\n\r\n\t\tif (typeof options.value == \"undefined\"){\r\n\t\t\toptions.value = this._value;\r\n\t\t} else {\r\n\t\t\tthis._value = options.value;\r\n\t\t}\r\n\r\n\t\t// first tween foreground, note that this is also changing this._arc radiuses \r\n\t\tvar activeArcTransition = this._activeArc.transition()\r\n\t\t\t.duration(this._options.animationDuration)\r\n\t\t\t.attrTween(\"d\", this._arcTween(options, true))\r\n\r\n\t\t// se we only get new path on background as it uses radiuses saved in the previous call\r\n\t\tthis._inactiveArc.transition()\r\n\t\t\t.duration(this._options.animationDuration)\r\n\t\t\t.attrTween(\"d\", () => {\r\n\t\t\t\treturn () => {\r\n\t\t\t\t\treturn this._arc({ endAngle: tau });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\tthis._backgroundArc.transition()\r\n\t\t\t.duration(this._options.animationDuration)\r\n\t\t\t.attrTween(\"r\", () => {\r\n\t\t\t\treturn () => {\r\n\t\t\t\t\treturn this._innerRadius;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\tif (options.activeColor && options.activeColor !== this._options.activeColor){\r\n\t\t\tthis._options.activeColor = options.activeColor;\r\n\t\t\tactiveArcTransition.attr(\"fill\", options.activeColor)\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {options} new options\r\n\t * returns tween function for arc \r\n\t */\r\n\t_arcTween(options) {\r\n\t\tvar angle = options.value / 100 * tau;\r\n\t\t// change angle if new value is provided \r\n\t\tif (typeof options.value != \"undefined\") {\r\n\t\t\tangle = options.value / 100 * tau;\r\n\t\t}\r\n\r\n\t\t// handle new radiuses\r\n\t\tvar innerRadius = this._innerRadius;\r\n\t\tvar outerRadius = this._outerRadius;\r\n\r\n\t\tif (typeof options.innerRadius != \"undefined\") {\r\n\t\t\tinnerRadius = options.innerRadius;\r\n\t\t}\r\n\r\n\t\tif (typeof options.outerRadius != \"undefined\") {\r\n\t\t\touterRadius = options.outerRadius;\r\n\t\t}\r\n\r\n\t\t// get interpolation fns between new radiuses and old ones\r\n\t\t// for simlicity, do this even if value doesn't change as we\r\n\t\t// likely generate new path anyway\r\n\t\tvar interpolateOuterRadius = d3.interpolate(this._outerRadius, outerRadius);\r\n\t\tvar interpolateInnerRadius = d3.interpolate(this._innerRadius, innerRadius);\r\n\r\n\t\treturn (d) => {\r\n\t\t\t// get angle interpolation fn \r\n\t\t\tvar interpolateAngle = d3.interpolate(d.endAngle, angle);\r\n\r\n\t\t\treturn (t) => {\r\n\t\t\t\t// on each cycle, set new radiuses and endAngle\r\n\t\t\t\tthis._arc.outerRadius(this._outerRadius = interpolateOuterRadius(t));\r\n\t\t\t\tthis._arc.innerRadius(this._innerRadius = interpolateInnerRadius(t));\r\n\r\n\t\t\t\td.endAngle = this._angle = interpolateAngle(t);\r\n\t\t\t\treturn this._arc(d);\r\n\t\t\t};\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Doughnut UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered) {\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}","import Observable from \"../utils/Observable\";\r\nimport * as Defaults from \"./DoughnutDefaults\";\r\nimport DoughnutRenderer from \"./DoughnutRenderer\";\r\n\r\n/**\r\n * @private \r\n * @param {*} optionValue option value \r\n * @param {*} defaultOptionValue default option value \r\n * @returns option or default option value \r\n */\r\nfunction getOptionValue(optionValue, defaultOptionValue) {\r\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\r\n}\r\n\r\n/**\r\n * @class\r\n * Main doughnut class\r\n * @param {Object} options\r\n */\r\nclass Doughnut {\r\n\tconstructor(options) {\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Options property exposing widget's options\r\n\t\t */\r\n\t\tthis._options = {};\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Width of the widget\r\n\t\t */\r\n\t\tthis._options.outerRadius = getOptionValue(options.outerRadius, Defaults.OUTER_RADIUS);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Width of the widget\r\n\t\t */\r\n\t\tthis._options.innerRadius = getOptionValue(options.innerRadius, Defaults.INNER_RADIUS);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Active color\r\n\t\t */\r\n\t\tthis._options.activeColor = getOptionValue(options.activeColor, Defaults.ACTIVE_COLOR);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Inactive color\r\n\t\t */\r\n\t\tthis._options.inactiveColor = getOptionValue(options.inactiveColor, Defaults.INACTIVE_COLOR);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Inactive color\r\n\t\t */\r\n\t\tthis._options.backgroundColor = getOptionValue(options.backgroundColor, Defaults.BACKGROUND_COLOR);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Value\r\n\t\t */\r\n\t\tthis._options.value = getOptionValue(options.value, Defaults.VALUE);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Animation duration\r\n\t\t */\r\n\t\tthis._options.animationDuration = getOptionValue(options.animationDuration, Defaults.ANIMATION_DURATION);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Render to container\r\n\t\t */\r\n\t\tthis._options.renderTo = getOptionValue(options.renderTo, null);\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over\r\n\t\t\t */\r\n\t\t\t\"mouseOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is out\r\n\t\t\t */\r\n\t\t\t\"mouseOut\"\r\n\t\t]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * DoughnutRenderer\r\n\t\t */\r\n\t\tthis._doughnutRenderer = new DoughnutRenderer(this._options);\r\n\r\n\t\tthis._doughnutRenderer.on(\"mouseOver\", ()=>{\r\n\t\t\tthis._observable.fire(\"mouseOver\")\r\n\t\t});\r\n\r\n\t\tthis._doughnutRenderer.on(\"mouseOut\", ()=>{\r\n\t\t\tthis._observable.fire(\"mouseOut\")\r\n\t\t});\r\n\r\n\t\tif (options.renderTo){\r\n\t\t\tthis.render(options.renderTo);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Bind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {Doughnut} returns this widget instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Unbind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler\r\n\t * @returns {Doughnut} returns this widget instance\r\n\t */\r\n\toff(eventName, handler) {\r\n\t\tthis._observable.off(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Destroys widget\r\n\t * @returns {Doughnut} returns this widget instance\r\n\t */\r\n\tdestroy() {\r\n\t\tthis._observable.destroy();\r\n\t\tthis._doughnutRenderer.destroy();\r\n\t\tthis._options = null;\r\n\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Doughnut} returns this widget instance\r\n\t */\r\n\trender(selector) {\r\n\t\tthis._doughnutRenderer.render(selector);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets widget data\r\n\t * @param {Object} options\r\n\t * @returns {Doughnut} returns this widget instance \r\n\t */\r\n\tupdate(options) {\r\n\t\tif (!this._doughnutRenderer.isRendered()) {\r\n\t\t\tthrow \"Can't call update() when widget is not rendered, please call .render() first.\"\r\n\t\t}\r\n\r\n\t\tthis._doughnutRenderer.update(options);\r\n\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nexport default Doughnut;\r\n","/**\r\n * @public\r\n * Default outer radius\r\n */\r\nexport const OUTER_RADIUS = 10;\r\n\r\n/**\r\n * @public\r\n * Default inner radius\r\n */\r\nexport const INNER_RADIUS = 10;\r\n\r\n/**\r\n * @public\r\n * Default value\r\n */\r\nexport const VALUE = 0;\r\n\r\n/**\r\n * @public\r\n * Default active color\r\n */\r\nexport const ACTIVE_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Default inactive color\r\n */\r\nexport const INACTIVE_COLOR = \"#F0F0F0\";\r\n\r\n/**\r\n * @public\r\n * Default background color\r\n */\r\nexport const BACKGROUND_COLOR = \"transparent\";\r\n\r\n/**\r\n * @public\r\n * Default animation duration\r\n */\r\nexport const ANIMATION_DURATION = 250;","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default widget height\r\n */\r\nexport const HEIGHT = 150;\r\n\r\n/**\r\n * @public\r\n * Default widget margin\r\n */\r\nexport const MARGIN = {\r\n    top:0,\r\n    left:5,\r\n    right:5,\r\n    bottom:15\r\n};\r\n\r\n/**\r\n * Default label margin from x axis\r\n */\r\nexport const LABEL_MARGIN = 7;\r\n\r\n/**\r\n * @public\r\n * Default inactive bar color\r\n */\r\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\r\n\r\n/**\r\n * @public\r\n * Default inactive bar opacity\r\n */\r\nexport const INACTIVE_BAR_OPACITY = 1;\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const OVER_SELECTION_COLOR = \"#ffea00\";\r\n\r\n/**\r\n * @public\r\n * Default over selection opacity\r\n */\r\nexport const OVER_SELECTION_OPACITY = 1;\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const SELECTION_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Enable selection toggle\r\n */\r\nexport const ENABLE_SELECTION_TOGGLE = true;\r\n\r\n/**\r\n * @public\r\n * Default font size\r\n */\r\nexport const FONT_SIZE = 11;\r\n\r\n/**\r\n * @public\r\n * Default colors \r\n */\r\nexport const DEFAULT_COLORS = [\"#e6f3fb\", \"#cbe7f6\", \"#b1dbf2\", \"#98cfee\", \"#7ec4ea\"];\r\n\r\n/**\r\n * @public\r\n * Default width of active handle area\r\n */\r\nexport const ACTIVE_HANDLE_AREA_WIDTH = 4;","import * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * HistogramData representing data for the histogram view\r\n */\r\nexport default class HistogramData {\r\n\t/**\r\n\t * @param {data} data\r\n\t * @param {Object} options\r\n\t */\r\n\tconstructor(data, options) {\r\n\t\tthis._histogramData = this._loadHistogramData(data, options.width);\r\n\t\tthis._minMax = this._calculateMinMax(this._histogramData);\r\n\t\tthis._options = options;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns min max of history data\r\n\t * @returns {Object} minMax\r\n\t * @returns {Number} minMax.min\r\n\t * @returns {Number} minMax.max\r\n\t */\r\n\tgetMinMax() {\r\n\t\treturn this._minMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns histogram data\r\n\t * @returns {Array} histogram data\r\n\t */\r\n\tgetData() {\r\n\t\treturn this._histogramData;\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Returns min max values for given histogramData\r\n\t* @param {Array} histogramData\r\n\t* @returns {Object} minMax.min\r\n\t* @returns {Object} minMax.max\r\n\t*/\r\n\t_calculateMinMax(histogramData) {\r\n\t\tvar min = d3.min(histogramData, function (d) { return d.value; });\r\n\t\tvar max = d3.max(histogramData, function (d) { return d.value; });\r\n\r\n\t\treturn {\r\n\t\t\tmin: min,\r\n\t\t\tmax: max\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t* Returns value ratio between bars and data\r\n\t* @return {Number} value ratio \r\n\t*/\r\n\tgetValueRatio() {\r\n\t\tvar range = this._minMax.max - this._minMax.min;\r\n\t\treturn range / this._options.width;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns data value from given position \r\n\t * @param {Number} position\r\n\t */\r\n\tpositionToValue(position) {\r\n\t\tvar minMax = this.getMinMax();\r\n\t\t// return min if position is 0\r\n\t\tif (position === 0){\r\n\t\t\treturn minMax.min;\r\n\t\t}\r\n\r\n\t\t// return max if position is at the end\r\n\t\tif (position === this._options.width){\r\n\t\t\treturn minMax.max;\r\n\t\t}\r\n\r\n\t\t// else calculate based on value ratio and min/max\r\n\t\tvar valueRatio = this.getValueRatio();\r\n\t\treturn position * valueRatio + minMax.min;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns position from given data value \r\n\t * @param {Number} value\r\n\t */\r\n\tvalueToPosition(value) {\r\n\t\tvar valueRatio = this.getValueRatio();\r\n\t\tvar minMax = this.getMinMax();\r\n\t\tvar constrainedValue = Math.min(Math.max(value, minMax.min), minMax.max);\r\n\t\t\r\n\t\treturn Math.round(constrainedValue / valueRatio - minMax.min / valueRatio);\r\n\t}\r\n\r\n\t/** \r\n\t* @private\r\n\t* @param {Array} buckets\r\n\t* @param {int} numOfBarsPerBucket - number of bars per column\\\r\n\t* @returns {Array} data from given buckets \r\n\t*/\r\n\t_loadHistogramData(data, width) {\r\n\t\tvar histogramData = [];\r\n\t\t// calculate number of bars per bucket excluding last pixel for max value\r\n\t\tvar numOfBarsPerBucket = (width-1) / data.length;\r\n\r\n\t\tdata.forEach((bucket, i) => {\r\n\t\t\tvar step = (bucket.max - bucket.min) / numOfBarsPerBucket;\r\n\t\t\t// support array as well as single values\r\n\t\t\tconst volume = Array.isArray(bucket.volume)?bucket.volume:[bucket.volume];\r\n\r\n\t\t\td3.range(bucket.min, bucket.max, step).forEach((value) => {\r\n\t\t\t\thistogramData.push({\r\n\t\t\t\t\tvalue: value,\r\n\t\t\t\t\tvolume: volume\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\t// adding max value pixel as each non-last bucket ends one pixel before next bucket starts\r\n\t\t\tif (i == data.length-1){\r\n\t\t\t\thistogramData.push({\r\n\t\t\t\t\tvalue: bucket.max,\r\n\t\t\t\t\tvolume: volume\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn histogramData;\r\n\t}\r\n}","import * as d3 from \"d3\";\r\nimport style from \"../Histogram.css\";\r\nimport * as Defaults from \"../HistogramDefaults\";\r\nimport Observable from \"../../utils/Observable\";\r\n\r\n/**\r\n * Gradient index shared for all instances\r\n */\r\nvar gradientIndex = 0;\r\n\r\n/**\r\n * @class\r\n * HistogramHandle representing control handle for histogram\r\n */\r\nexport default class HistogramHandle {\r\n\t/**\r\n\t * @param {D3Selection} groupEl\r\n\t * @param {Number} value\r\n\t * @param {Number} index\r\n\t * @param {HistoryData} histogramData\r\n\t * @param {Object} options\r\n\t */\r\n\tconstructor(groupEl, value, index, histogramData, options) {\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a selection\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"drag\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when drag on handle starts\r\n\t\t\t * @param {HistogramHandle} handle\r\n\t\t\t */\r\n\t\t\t\"startDrag\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when drag on handle ends\r\n\t\t\t * @param {HistogramHandle} handle\r\n\t\t\t */\r\n\t\t\t\"endDrag\"\r\n\t\t]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle element\r\n\t\t */\r\n\t\tthis._handleEl = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle line element\r\n\t\t */\r\n\t\tthis._handleLineEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle circle element\r\n\t\t */\r\n\t\tthis._handleCircleEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle mask element\r\n\t\t */\r\n\t\tthis._handleMaskEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle mask gradient element\r\n\t\t */\r\n\t\tthis._handleMaskGradientEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle label element\r\n\t\t */\r\n\t\tthis._handleLabelEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * True if handle is over\r\n\t\t */\r\n\t\tthis._isOver = false;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element\r\n\t\t */\t\t\r\n\t\tthis._groupEl = groupEl;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle index\r\n\t\t */\t\t\r\n\t\tthis._index = index;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle value\r\n\t\t */\t\t\r\n\t\tthis._value = value;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * initial handle value\r\n\t\t */\t\t\r\n\t\tthis._initialValue = new Number(value);\t\t\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle position\r\n\t\t */\t\t\r\n\t\tthis._position = histogramData.valueToPosition(value);\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * initial handle position\r\n\t\t */\t\t\r\n\t\tthis._initialPosition = new Number(this._position);\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * bar options\r\n\t\t */\t\t\r\n\t\tthis._options = options;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * histogram data\r\n\t\t */\t\t\r\n\t\tthis._histogramData = histogramData;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Cache for storing label size, enhances performance when animating\r\n\t\t */\t\t\r\n\t\tthis._labelSizeCache = {};\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * elements\r\n\t\t */\t\t\r\n\t\tthis._elements = [];\t\t\r\n\t\t\r\n\t\tthis._renderHandle();\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destroys this handle\r\n\t */\r\n\tdestroy(){\r\n\t\tthis._elements.forEach(element=>element.remove());\r\n\t\tthis._elements = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t   * Renders drag handle\r\n\t   */\r\n\t_renderHandle() {\r\n\t\tthis._elements = [\r\n\t\t\tthis._createHandleElement(),\r\n\t\t\tthis._createHandleLineElement(),\r\n\t\t\tthis._createHandleCircleElement(),\r\n\t\t\tthis._createDragMaskElement(),\r\n\t\t\tthis._createMaskGradientElement(),\r\n\t\t\tthis._createDragLabelElement()\r\n\t\t];\r\n\r\n\t\tthis._handleHoverState();\r\n\t\tthis._handleDrag();\r\n\t}\t\r\n\r\n\thide(){\r\n\t\tthis._elements.forEach(element=>element.attr(\"visibility\", \"hidden\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns X position of this handle\r\n\t * @returns {Number} X position handle\r\n\t */\r\n\tgetXPosition() {\r\n\t\treturn parseInt(this._handleEl.attr(\"x\"))+Defaults.ACTIVE_HANDLE_AREA_WIDTH/2;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Sets hover state\r\n\t */\r\n\tsetHoverState(){\r\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\r\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 3);\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public \r\n\t * @returns {SVGRect} \r\n\t * Returns drag label box for this handle\r\n\t */\r\n\tgetLabelBox(){\r\n\t\treturn this._handleLabelEl.node().getBBox();\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * Shifts handle label by given offset so it can handle label position conflicts\r\n\t */\r\n\tsetLabelOffset(offset){\r\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\r\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * Sets handle position\r\n\t */\r\n\tsetHandleXPosition(position){\r\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\"+position+\", \"+this._options.height+\")\")\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsetLabelText(text){\r\n\t\tthis._handleLabelEl.text(text);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tshowLabel(){\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\r\n\t\treturn this;\r\n\t}\r\n\r\n\thideLabel(){\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\tsetLabelPosition(position){\r\n\t\tthis.setLabelOffset(0);\r\n\t\tthis._updateLabelPosition(position);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unsets hover state\r\n\t */\r\n\tunsetHoverState(){\r\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\r\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 1);\r\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(0, 0)\")\r\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(0, 0)\")\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Enables this handle \r\n\t */\r\n\tenable(){\r\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"all\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Disables this handle \r\n\t */\r\n\tdisable(){\r\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"none\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handle hover state\r\n\t */\r\n\t_handleHoverState(){\r\n\t\t// line hover effect\r\n\t\tthis._handleEl.on(\"mouseover\", () => {\r\n\t\t\tthis._isOver = true;\r\n\t\t\tthis.setHoverState();\r\n\t\t})\r\n\t\tthis._handleEl.on(\"mouseout\", () => {\r\n\t\t\tthis._isOver = false;\r\n\t\t\tthis.unsetHoverState();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens when drag starts\r\n\t */\r\n\t_onStartDrag(){\r\n\t\tthis._groupEl.classed(style[\"dragging\"], true);\r\n\t\tthis._observable.fire(\"startDrag\", this);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens on drag\r\n\t */\r\n\t_onDrag(){\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar xpos = Math.round(Math.max(Math.min(d3.event.x, width), 0));\r\n\r\n\t\tthis._handleEl.attr(\"x\", xpos - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\r\n\t\tthis._handleLineEl.attr(\"x\", xpos - 2);\r\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\" + xpos + \",\" + height + \")\");\r\n\t\tthis._handleEl.attr(\"data-handle-value\", this._histogramData.positionToValue(xpos))\r\n\r\n\t\tthis.setHoverState();\r\n\r\n\t\tthis._position = xpos;\r\n\r\n\t\t// prevent recalculating value for the same position\r\n\t\tif (parseInt(this._position) !== parseInt(this._initialPosition)){\r\n\t\t\tthis._value = this._histogramData.positionToValue(xpos);\r\n\t\t} else {\r\n\t\t\tthis._value = this._initialValue;\r\n\t\t}\r\n\r\n\t\tthis._handleLabelEl.text(this._getLabelText())\r\n\r\n\t\tthis._updateLabelPosition(xpos);\r\n\t\tthis._observable.fire(\"drag\");\t\t\r\n\t}\r\n\r\n\t_getLabelText() {\r\n\t\treturn this._options.format(this._value);\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * handles what happens when drag ends\r\n\t */\r\n\t_onEndDrag(){\r\n\t\tthis._groupEl.classed(style[\"dragging\"], false);\r\n\t\tif (!this._isOver) {\r\n\t\t\tthis.unsetHoverState();\r\n\t\t}\r\n\r\n\t\tthis._observable.fire(\"endDrag\", this);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles handle drag \r\n\t */\r\n\t_handleDrag(){\r\n\t\tthis._handleEl.call(d3.drag()\r\n\t\t\t.on(\"drag\", this._onDrag.bind(this))\r\n\t\t\t.on(\"start\", this._onStartDrag.bind(this))\r\n\t\t\t.on(\"end\", this._onEndDrag.bind(this)));\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * Return computed or stored label length\r\n\t * @param {SVGElement}\r\n\t * @param {Number} length \r\n\t */\r\n\t_getComputedLabelTextLength(label){\r\n\t\tvar content = label.innerHTML;\r\n\t\tthis._labelSizeCache[content] = this._labelSizeCache[content] || label.getComputedTextLength();\r\n\t\treturn this._labelSizeCache[content];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Updates label position\r\n\t * @param {Number} position \r\n\t */\r\n\t_updateLabelPosition(position) {\r\n\t\tvar label = this._handleLabelEl.node();\r\n\t\tvar maskPadding = this._options.fontSize;\t\t\r\n\r\n\t\t// we need to calculate text length so we can create mask and center text\r\n\t\tvar textLength = this._getComputedLabelTextLength(label);\r\n\t\tvar maskWidth = textLength + maskPadding * 2;\r\n\t\tvar xPosition = position - textLength / 2;\r\n\r\n\t\t// handle when dragging towards left side\r\n\t\tif (xPosition < 0) {\r\n\t\t\txPosition = 0;\r\n\t\t}\r\n\r\n\t\t// handle when dragging towards right side\r\n\t\tif (xPosition + textLength > this._options.width) {\r\n\t\t\txPosition = this._options.width  - textLength;\r\n\t\t\tthis._handleLabelEl.attr(\"x\", this._options.width);\r\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"end\");\r\n\t\t} else {\r\n\t\t\tthis._handleLabelEl.attr(\"x\", xPosition);\r\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"start\");\r\n\t\t}\r\n\r\n\t\t// position mask\r\n\t\tthis._handleMaskEl.attr(\"x\", () => {\r\n\t\t\treturn parseInt(xPosition) - maskPadding;\r\n\t\t});\r\n\r\n\t\tthis._handleMaskGradientEl.attr(\"x1\", xPosition - maskPadding);\r\n\t\tthis._handleMaskGradientEl.attr(\"x2\", xPosition + maskWidth - maskPadding);\r\n\r\n\t\tthis._handleMaskEl.attr(\"width\", maskWidth);\r\n\t\tthis._handleMaskEl.attr(\"height\", this._options.fontSize);\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * Creates mask gradient element\r\n\t * @param {Number} handleIndex \r\n\t */\r\n\t_createMaskGradientElement(){\r\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\r\n\t\t\t.attr(\"id\", \"brush-mask-gradient-\" + gradientIndex++)\r\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\r\n\t\t\t.attr(\"y1\", 0).attr(\"x1\", 50)\r\n\t\t\t.attr(\"y2\", 0).attr(\"x2\", 0);\r\n\r\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\r\n\t\t\t.data([\r\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\r\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\r\n\t\t\t])\r\n\t\t\t.enter().append(\"stop\")\r\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\r\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\r\n\r\n\t\treturn this._handleMaskGradientEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders main handle element \r\n\t * @returns {SVGElement}\r\n\t */\r\n\t_createHandleElement(){\r\n\t\tthis._handleEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle\"])\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"data-handle-index\", this._index)\r\n\t\t\t.attr(\"data-handle-value\", this._value)\r\n\t\t\t.attr(\"cursor\", \"ew-resize\")\r\n\t\t\t.attr(\"width\", Defaults.ACTIVE_HANDLE_AREA_WIDTH)\r\n\t\t\t.attr(\"height\", this._options.height + 5)\r\n\t\t\t.attr(\"x\", this._position - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\r\n\r\n\t\treturn this._handleEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders handle line element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createHandleLineElement(){\r\n\t\tthis._handleLineEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle-line\"])\r\n\t\t\t.attr(\"width\", 4)\r\n\t\t\t.attr(\"height\", this._options.height)\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"x\", this._position - 2);\r\n\r\n\t\treturn this._handleLineEl;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders handle circle element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createHandleCircleElement(){\r\n\t\tthis._handleCircleEl = this._groupEl.append(\"circle\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle-circle\"])\r\n\t\t\t.attr(\"transform\", \"translate(\" + this._position + \",\" + this._options.height + \")\")\r\n\t\t\t.attr(\"fill\", \"#ffffff\")\r\n\t\t\t.attr(\"fill-opacity\", 1)\r\n\t\t\t.attr(\"stroke\", \"#000\")\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"cursor\", \"ew-resize\")\r\n\t\t\t.attr(\"r\", 3.5);\r\n\r\n\t\treturn this._handleCircleEl;\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders drag mask element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createDragMaskElement(){\r\n\t\tthis._handleMaskEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"drag-label-mask\"])\r\n\t\t\t.attr(\"fill\", \"url(#brush-mask-gradient-\" + gradientIndex+\")\")\r\n\t\t\t.attr(\"y\", this._options.height + Defaults.LABEL_MARGIN)\r\n\t\t\t.attr(\"display\", \"none\");\t\t\t\r\n\r\n\t\treturn this._handleMaskEl;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @private \r\n\t * Renders handle label element \r\n\t * @returns {SVGElement}  \r\n\t */\r\n\t_createDragLabelElement(){\r\n\t\tvar format = this._options.format;\r\n\t\tvar height = this._options.height;\r\n\t\tthis._handleLabelEl = this._groupEl.append(\"text\")\r\n\t\t\t.attr(\"class\", style[\"drag-label\"])\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"font-size\", this._options.fontSize)\r\n\t\t\t.text(() => {\r\n\t\t\t\tvar formattedValue = format(this._initialValue);\r\n\t\t\t\treturn formattedValue;\r\n\t\t\t})\r\n\t\t\t.attr(\"y\", height + this._options.fontSize + Defaults.LABEL_MARGIN);\r\n\r\n\t\t\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t\treturn this._handleLabelEl;\r\n\t}\r\n}","/**\r\n * @public\r\n * Returns handle positions offsets so that labels don't conflict visually\r\n * @param {HistogramData} histogramData \r\n * @returns {Array} label offsets\r\n */\r\nexport function getHandlePositionOffsets(handle1, handle2, maskPadding, width){\r\n    var label1Box = handle1.getLabelBox();\r\n    var label2Box = handle2.getLabelBox();\r\n\r\n    // calculate conflict number\r\n    var conflictDiff = label2Box.x - (label1Box.x + label1Box.width)-maskPadding;\r\n    // and handle if there is not enough space\r\n    if (conflictDiff<0){\r\n        // pos1 diff to the left\r\n        var posDiff1 = conflictDiff/2;\r\n        // pos2 diff to to right\r\n        var posDiff2 = conflictDiff/2;\r\n\r\n        // position left to 0 if position would be lower than 0\r\n        var xMin = label1Box.x+posDiff1;\r\n        if (xMin < 0){\r\n            posDiff1 = label1Box.x; \r\n            // also shift right label so we keep it visible\r\n            posDiff2 = posDiff2*2\r\n        }\r\n\r\n        // same with max value\r\n        var xMax = label2Box.x+label2Box.width-posDiff2;\r\n        if (xMax > width){\r\n            posDiff2 += xMax-width; \r\n            posDiff1 = posDiff1*2\r\n        }\r\n        return [posDiff1, -posDiff2];                  \r\n    }\r\n\r\n    return [0,0];\r\n}","import style from \"../Histogram.css\";\r\nimport HistogramHandle from \"./HistogramHandle\";\r\nimport Observable from \"../../utils/Observable\";\r\nimport * as PositionUtils from \"../utils/PositionUtils\"\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Histogram renderer class\r\n * @param {Object} options\r\n */\r\nexport default class HistogramSelectionRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Histogram options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._histogramData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * history selection\r\n\t\t */\r\n\t\tthis._histogramSelection = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * index of over selection  \r\n\t\t */\r\n\t\tthis._overSelectionIndex = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * selection handles\r\n\t\t */\r\n\t\tthis._handles = [];\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if handle is dragged\r\n\t\t */\r\n\t\tthis._draggingHandle = false;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous selection for animation\r\n\t\t */\r\n\t\tthis._prevSelection = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if animation is run\r\n\t\t */\r\n\t\tthis._animating = false;\r\n\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a category\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is changed\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\t\t\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether histogram has been rendered or not\r\n\t * @returns {boolean} true if histogram has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @param {DOMElement}  \r\n\t * @returns {HistogramSelectionRenderer} returns this widget instance\r\n\t */\r\n\trender(groupEl){\r\n\t\tthis._rendered = true;\r\n\t\tthis._groupEl = groupEl\r\n\r\n\t\treturn this;\r\n\t} \t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._destroyHandles();\r\n\t\tif (this._selectionBarGroups){\r\n\t\t\tthis._selectionBarGroups.remove();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Destroys selection controls \r\n\t */\r\n\t_destroyHandles(){\r\n\t\tthis._handles.forEach(handle=>handle.destroy());\r\n\t\tthis._handles = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles click on handle\r\n\t * @param {Number} handleIndex\r\n\t * @param {Number} handleValue \r\n\t */\r\n\t_onHandleClick(handleIndex, handleValue){\r\n\t\t// call prompt handler if available\r\n\t\tif (this._options.promptHandler){\r\n\t\t\tthis._options.promptHandler(handleValue).then((promptResult)=>{\r\n\t\t\t\tvar startSelectionSnapshot = JSON.stringify(this._histogramSelection.getOutputSelection());\r\n\t\t\t\tpromptResult = parseFloat(promptResult);\r\n\t\t\t\t// must be within min max range\r\n\t\t\t\tvar minMax = this._histogramData.getMinMax();\r\n\t\t\t\tpromptResult = Math.min(minMax.max, promptResult);\r\n\t\t\t\tpromptResult = Math.max(minMax.min, promptResult);\r\n\r\n\t\t\t\tvar points = this._histogramSelection.getSelectionPoints();\r\n\t\t\t\tpoints[handleIndex] = {\r\n\t\t\t\t\tvalue:promptResult\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar positions = points\r\n\t\t\t\t\t.sort((p1,p2)=>p1.value-p2.value)\r\n\t\t\t\t\t.map(point=>this._histogramData.valueToPosition(point.value));\r\n\t\t\t\t\r\n\t\t\t\tthis._updateSelectionPositions(positions, points);\r\n\t\t\t\tthis._updateSelection();\r\n\r\n\t\t\t\t// TODO: update handles without destroying them\r\n\t\t\t\tthis._destroyHandles();\r\n\t\t\t\tthis._renderHandles();\r\n\r\n\t\t\t\t// fire selection change if selection is changed\r\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\r\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Toggles selection\r\n\t * @param {Number} selectionIndex \r\n\t */\r\n\t_toggleSelection(selectionIndex){\r\n\t\tvar selection = this._options.selection[selectionIndex];\r\n\t\tselection.disabled = !selection.disabled;\r\n\t\tvar enabled = !selection.disabled;\r\n\t\tthis._updateSelection();\r\n\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles click on chart\r\n\t */\r\n\t_onClick(){\r\n\t\tvar target = d3.select(d3.event.target);\r\n\t\tvar selectionIndex = target.attr(\"data-selection-index\");\r\n\t\tvar handleIndex = target.attr(\"data-handle-index\");\r\n\r\n\t\tif (selectionIndex != null && this._histogramSelection.allowsToggle()){\r\n\t\t\tthis._toggleSelection(selectionIndex)\r\n\t\t} else if (handleIndex != null){\r\n\t\t\tthis._onHandleClick(handleIndex, target.attr(\"data-handle-value\"));\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * Handles handle click \r\n\t */\r\n\t_handleClick(){\r\n\t\tthis._groupEl.on(\"click\", this._onClick.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Refreshes histogram data \r\n\t * @param {HistogramData}\r\n\t * @param {HistogramSelection}\r\n\t * @param {Object} options\r\n\t */\r\n\trefresh(histogramData, histogramSelection, options){\r\n\t\tthis._animate = options && options.animate;\r\n\t\tif (this._animate && this._histogramSelection && this._histogramSelection.getSelection().length == histogramSelection.getSelection().length){\r\n\t\t\tthis._prevSelection = this._histogramSelection.getSelection();\r\n\t\t\tthis._prevHistogramData = this._histogramSelection.getSelection();\r\n\t\t}\r\n\r\n\t\tif (this._animate && this._histogramData){\r\n\t\t\tthis._prevHistogramData = this._histogramData;\r\n\t\t}\r\n\r\n\t\tthis._histogramData = histogramData;\r\n\t\tthis._histogramSelection = histogramSelection;\r\n\t\t\r\n\t\tthis._clear();\r\n\t\tthis._renderSelection();\r\n\t\tthis._updateSelection();\r\n\r\n\t\tthis._handleHoverState();\r\n\t\tthis._handleClick();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsetSelection(histogramSelection, options){\r\n\t\tif (this.needRefresh(this._histogramSelection, histogramSelection)) {\r\n\t\t\treturn this.refresh(this._histogramData, histogramSelection, options);\r\n\t\t}\r\n\t\tthis._histogramSelection = histogramSelection;\r\n\t\tthis._updateSelection();\r\n\t\treturn this;\r\n\t}\r\n\r\n\tneedRefresh(prevHistogramSelection, histogramSelection) {\r\n\t\tif (!prevHistogramSelection || !histogramSelection) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tconst prev = prevHistogramSelection.getSelection();\r\n\t\tconst curr = histogramSelection.getSelection();\r\n\t\treturn (\r\n\t\t\t!prev || !curr ||\r\n\t\t\tprev.length !== curr.length ||\r\n\t\t\tcurr.reduce((acc, sel, i) => sel.from === prev[i].from && sel.to === prev[i].to ? acc : true, false)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Updates selection controls on hover\r\n\t * @param {Number} selectionIndex \r\n\t */\r\n\t_updateSelectionControlsHoverState(selectionIndex){\r\n\t\t// get all handles sorted by X position\r\n\t\tvar handles = this._handles.slice().sort((h1,h2)=>{\r\n\t\t\treturn h1.getXPosition() - h2.getXPosition();\r\n\t\t});\r\n\r\n\t\t// unset hover state on all handles\r\n\t\thandles.forEach(handle=>handle.unsetHoverState());\r\n\r\n\t\t// selection is active, active both handles for active selection\r\n\t\tif (selectionIndex != null){\r\n\t\t\tvar handle1 = handles[selectionIndex];\r\n\t\t\tvar handle2 = handles[selectionIndex+1];\r\n\r\n\t\t\thandle1.setHoverState();\r\n\t\t\thandle2.setHoverState();\r\n\r\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\r\n\r\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\r\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * \r\n\t * @private \r\n\t * Handles what happens when mouse is over selection\r\n\t * @param {String} type \r\n\t * @param {Number} i \r\n\t * @param {HTMLElement[]} array \r\n\t */\r\n\t_onSelectionMouseOver(d, i, nodes){\r\n\t\t// prevent selection when dragging handles\r\n\t\tif (this._draggingHandle){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\tvar selectionIndex = parseInt(d3.select(d3.event.target).attr(\"data-selection-index\"));\r\n\t\tif (this._overSelectionIndex != selectionIndex){\r\n\t\t\tthis._overSelectionIndex = selectionIndex;\r\n\t\t\tthis._updateSelection();\r\n\t\t\tthis._updateSelectionControlsHoverState(selectionIndex);\r\n\t\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @private \r\n\t * Handles what happens when mouse is out of selection\r\n\t * @param {String} type \r\n\t * @param {Number} i \r\n\t * @param {HTMLElement[]} array \r\n\t */\r\n\t_onSelectionMouseOut(d, i, nodes){\r\n\t\t// prevent selection when dragging handles\r\n\t\tif (this._draggingHandle){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0)\")\r\n\r\n\t\tthis._overSelectionIndex = null;\r\n\t\tthis._updateSelectionControlsHoverState(null);\r\n\t\tthis._updateSelection();\r\n\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Handles hover state\r\n\t */\r\n\t_handleHoverState(){\r\n\t\tvar g = this._groupEl;\r\n        g.selectAll(\".\"+style.selectionbargroup).on(\"mouseout\", this._onSelectionMouseOut.bind(this));\r\n        g.selectAll(\".\"+style.selectionbargroup).on(\"mouseover\", this._onSelectionMouseOver.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Handles when handle is dragged\r\n\t */\r\n\t_onHandleDrag(){\r\n\t\tvar positions = this._handles.map(handle=>handle.getXPosition()).sort((p1, p2)=>{\r\n\t\t\treturn p1-p2;\r\n\t\t});\r\n\r\n\t\tthis._updateSelectionPositions(positions);\r\n\t\tthis._updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Updates selection with new positions\r\n\t* @param {Array} positions\r\n\t* @param {Array} points\r\n\t*/\r\n\t_updateSelectionPositions(positions, points){\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\t\tpositions.forEach((p, index)=>{\r\n\t\t\tif (index>selection.length-1){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar position = {\r\n\t\t\t\tfrom:p,\r\n\t\t\t\tto:positions[index+1]\r\n\t\t\t};\r\n\r\n\t\t\tvar value = {\r\n\t\t\t\tfrom:points?points[index].value:this._histogramData.positionToValue(position.from),\r\n\t\t\t\tto:points?points[index+1].value:this._histogramData.positionToValue(position.to),\r\n\t\t\t};\r\n\r\n\t\t\t[\"from\", \"to\"].forEach(pos=>{\r\n\t\t\t\tconst selectionChanged = points?\r\n\t\t\t\t\t// if new points are given, we need to compare selection values\r\n\t\t\t\t\tselection[index][pos] !== value[pos]:\r\n\t\t\t\t\t// otherwise, we need to compare selection position\r\n\t\t\t\t\tselection[index][\"position\"][pos] !== position[pos];\r\n\r\n\t\t\t\t// update selection on change\r\n\t\t\t\tif (selectionChanged){\r\n\t\t\t\t\tselection[index][pos] = value[pos];\t\r\n\t\t\t\t\tselection[index][\"position\"][pos] = position[pos];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\t\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders selection bars\r\n\t*/\r\n\t_renderSelection() {\r\n\t\tvar height = this._options.height;\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\r\n\t\t// hover selection bars\r\n\t\tthis._selectionBarGroups = this._groupEl.selectAll(\".\"+style.selectionbargroup)\r\n\t\t\t.data([...selection].reverse()) // reverse because left icons needs to be in foreground\r\n\t\t\t.enter().append(\"g\")\r\n\t\t\t.attr(\"class\", style.selectionbargroup)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"height\", height);\r\n\r\n\t\tthis._selectionBarsIcons = this._selectionBarGroups.append(\"image\")\r\n\t\t\t.attr(\"class\", style.selectionbaricon)\r\n\t\t\t.attr(\"xlink:href\", function(d) {\r\n\t\t\t\treturn d.icon ? d.icon.src : null;\r\n\t\t\t});\r\n\r\n\t\tthis._selectionBars = this._selectionBarGroups.append(\"rect\")\r\n\t\t\t.attr(\"class\", style.selectionbar)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\t\t.attr(\"height\", height);\r\n\t\tthis._renderHandles();\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders selection controls\r\n\t*/\r\n\t_renderHandles(){\r\n\t\t// render selection controls\r\n\t\tthis._handles = this._histogramSelection.getSelectionPoints().map((point, index)=>{\r\n\t\t\tvar value = point.value;\r\n\r\n\t\t\tvar handle = new HistogramHandle(this._groupEl, value, index, this._histogramData, this._options);\r\n\r\n\t\t\tif(point.hidden){\r\n\t\t\t\thandle.hide();\r\n\t\t\t}\r\n\r\n\t\t\thandle.on(\"drag\", ()=>{\r\n\t\t\t\tthis._onHandleDrag();\r\n\t\t\t}, this);\r\n\r\n\t\t\tvar startSelectionSnapshot;\r\n\r\n\t\t\t// disable other handles when draggin starts\r\n\t\t\thandle.on(\"startDrag\", ()=>{\r\n\t\t\t\tstartSelectionSnapshot = JSON.stringify(this._options.selection);\r\n\t\t\t\t\r\n\t\t\t\tthis._draggingHandle = true;\r\n\t\t\t\tthis._handles.forEach(handle=>handle.disable());\r\n\t\t\t\thandle.enable();\r\n\t\t\t}, this);\r\n\r\n\t\t\t// enable all handles when draggin starts\r\n\t\t\thandle.on(\"endDrag\", ()=>{\r\n\t\t\t\tthis._draggingHandle = false;\r\n\t\t\t\tthis._handles.forEach(handle=>handle.enable());\r\n\r\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\r\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\r\n\t\t\r\n\t\t\treturn handle;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Returns bar color based on X position\r\n\r\n\t* @param {Number} barX\r\n\t* @param {Array} selection\r\n\t* @returns {Number} bar category index\r\n\t* @param {HistogramData} histogram data \r\n\t*/\r\n\t_getBarSelectionIndex(barX, selection, data){\r\n\t\tfor (var i=0;i<selection.length;i++){\r\n\t\t\tvar s = selection[i];\r\n\t\t\tvar isLast = i == selection.length-1;\r\n\t\t\tvar within = barX >= data.valueToPosition(s.from) && (barX < data.valueToPosition(s.to) || (isLast && barX <= data.valueToPosition(s.to)));\r\n\t\t\tif (within) return i;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns selection color\r\n\t * @param {Object} selection\r\n\t * @param {Object} d datum\r\n\t */\r\n\t_getSelectionColor(selection, d){\r\n\t\tif (selection.colors){\r\n\t\t\treturn selection.colors[d.volumeIndex];\r\n\t\t}\r\n\r\n\t\tif (selection.color){\r\n\t\t\treturn selection.color\r\n\t\t}\r\n\r\n\t\treturn this._options.selectionColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns bar color for given bar position with given selection\r\n\t * @param {Number} barX \r\n\t * @param {Array} selection \r\n\t * @param {HistogramData} histogram data \r\n\t */\r\n\t_getBarColor (barX, selection, data, d){\r\n\t\tvar inactiveBarColor = this._options.inactiveBarColor;\r\n\t\tvar overSelectionColor = this._options.overSelectionColor;\r\n        var segmentDivider = this._options.segmentDivider;\r\n\r\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\r\n\t\tif (barSelectionIndex == null){\r\n\t\t\treturn inactiveBarColor;\r\n\t\t} else if (segmentDivider && selection.some(sel => (barX === sel.position.to || barX === sel.position.from) && !sel.disabled)) {\r\n\t\t\treturn segmentDivider;\r\n\t\t} else if (selection[barSelectionIndex].disabled){\r\n\t\t\treturn inactiveBarColor;\r\n\t\t} else if (this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex){\r\n\t\t\treturn overSelectionColor;\r\n\t\t} else {\r\n\t\t\treturn this._getSelectionColor(selection[barSelectionIndex], d);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns bar color for given bar position with given selection\r\n\t * @param {Number} barX \r\n\t * @param {Array} selection \r\n\t * @param {HistogramData} histogram data \r\n\t */\r\n\t_getBarOpacity (barX, selection, data){\r\n\t\tvar defaultOpacity = 1;\r\n\r\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\r\n\t\tvar isOver = this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex;\r\n\t\tvar isDisabled = barSelectionIndex != null && selection[barSelectionIndex].disabled;\r\n\r\n\t\tif (isOver){\r\n\t\t\treturn this._options.overSelectionOpacity;\r\n\t\t}\r\n\r\n\t\tif (isDisabled){\r\n\t\t\treturn this._options.inactiveBarOpacity;\r\n\t\t}\r\n\t\t\r\n\t\t// otherwise use set opacity if \r\n\t\tif (barSelectionIndex != null && selection[barSelectionIndex].opacity != null){\r\n\t\t\treturn selection[barSelectionIndex].opacity;\r\n\t\t} \r\n\r\n\t\treturn defaultOpacity;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Runs onTransition as a transition between two selections\r\n\t * @param {Array} selection1 \r\n\t * @param {Array} selection2 \r\n\t * @param {Function} onTransition handler\r\n\t */\r\n\t_onSelectionTransition(selection1, selection2, data1, data2, onTransition, onComplete){\r\n\t\tselection1.forEach((s1,selectionIndex)=>{\r\n\t\t\tvar s2 = selection2[selectionIndex];\r\n\t\t\tvar width = this._options.width;\r\n\t\t\tif (selection1[selectionIndex]){\r\n\t\t\t\tvar transitions = [];\r\n\t\t\t\tvar frames = [];\r\n\r\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.from)), Math.round(data2.valueToPosition(s2.from))]);\r\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.to)), Math.round(data2.valueToPosition(s2.to))]);\r\n\r\n\t\t\t\t// make sure duration is calculated based on transition length\r\n\t\t\t\tframes = [Math.abs((transitions[0][0] - transitions[0][1])/width), Math.abs((transitions[1][0] - transitions[1][1])/width)];\r\n\r\n\t\t\t\ttransitions.forEach((t, handleIndex)=>{\r\n\t\t\t\t\tvar duration = 0;\r\n\r\n\t\t\t\t\twhile(t[0] !== t[1]){\r\n\t\t\t\t\t\tsetTimeout(onTransition.bind(this, t[0], selectionIndex, handleIndex), duration);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tduration = duration+0.5/frames[handleIndex];\r\n\t\t\t\t\t\tt[0] = t[0]>t[1]?t[0]-1:t[0]+1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// call final complete fn only if duration is > 0, this prevents premature animation end\r\n\t\t\t\t\t// when one of the sides is in the same position\r\n\t\t\t\t\tif (duration>0){\r\n\t\t\t\t\t\tsetTimeout(function(p, si, hi){\r\n\t\t\t\t\t\t\tonTransition(p, si, hi)\r\n\t\t\t\t\t\t\tonComplete(p, si, hi);\r\n\t\t\t\t\t\t}.bind(this, t[1], selectionIndex, handleIndex), ++duration);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Updates selection\r\n\t*/\r\n\t_updateSelection(){\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\t\tvar bars = this._groupEl.selectAll(\".\"+style.bar);\r\n\r\n\t\t// fills bars with given selection\r\n\t\tvar fillBars = (s, data) => {\r\n\t\t\t// handle bar colors\r\n\t\t\tbars.attr(\"fill\", (d)=> {\r\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\r\n\t\t\t\treturn this._getBarColor(barX, s, data, d);\r\n\t\t\t})\r\n\r\n\t\t\t// handle bar opacity\r\n\t\t\tbars.attr(\"fill-opacity\", (d)=> {\r\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\r\n\t\t\t\treturn this._getBarOpacity(barX, s, data, d);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// handle animation if previous selection is set\r\n\t\tif (this._animate && this._prevSelection){\r\n\t\t\tvar prevSelection = this._prevSelection;\r\n\t\t\tvar prevData = this._prevHistogramData;\r\n\t\t\t\r\n\t\t\t// set prev selection\r\n\t\t\tfillBars(prevSelection, this._prevHistogramData);\r\n\r\n\t\t\t// set handle positions to prev selection\r\n\t\t\tprevSelection.forEach((s, i)=>{\r\n\t\t\t\tvar p1 = this._prevHistogramData.valueToPosition(s.from);\r\n\t\t\t\tvar p2 = this._prevHistogramData.valueToPosition(s.to);\r\n\r\n\t\t\t\tthis._handles[i].setHandleXPosition(p1).setLabelPosition(p1);\r\n\t\t\t\tthis._handles[i+1].setHandleXPosition(p2).setLabelPosition(p2)\r\n\t\t\t});\r\n\r\n\t\t\tthis._animating = true;\r\n\t\t\t//fill bars on selection transition and move handles\r\n\t\t\tthis._onSelectionTransition(prevSelection, selection, prevData, this._histogramData, \r\n\t\t\t\t// on transition callback\r\n\t\t\t\t(p, selectionIndex, handleIndex)=>{\r\n\t\t\t\t\tvar bar = d3.select(bars.nodes()[p]);\r\n\t\t\t\t\tbar.attr(\"fill\", d=>{\r\n\t\t\t\t\t\treturn this._getBarColor(p, selection, this._histogramData, d);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t//var handleText = this._options.format(this._histogramData.positionToValue(p));\r\n\t\t\t\t\t// move handles\r\n\t\t\t\t\t[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].setHandleXPosition(p).setLabelPosition(p)\r\n\r\n\t\t\t\t// on complete callback\t\t\r\n\t\t\t},()=>{\r\n\t\t\t\t\t// hide handles\r\n\t\t\t\t\t//[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].hideLabel();\r\n\t\t\t\t\tfillBars(selection, this._histogramData)\r\n\t\t\t\t\tthis._animating = false;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tthis._prevSelection = null;\r\n\t\t\tthis._prevHistogramData = null;\r\n\t\t\r\n\t\t} else {\r\n\t\t\tfillBars(selection, this._histogramData)\r\n\t\t}\r\n\t\t\r\n\t\t// selection rects\r\n\t\tthis._selectionBarGroups\r\n            .data([...selection].reverse()) // reverse because left icons needs to be in foreground\r\n\t\t\t.attr(\"transform\", (d) => {\r\n\t\t\t\treturn `translate(${this._histogramData.valueToPosition(d.from)}, 0)`;\r\n\t\t\t})\r\n\t\t\t.attr(\"width\", (d) => {\r\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\r\n\t\t\t});\r\n\r\n        this._selectionBarsIcons\r\n            .data([...selection].reverse()) // reverse because left icons needs to be in foreground\r\n            .attr(\"data-selection-index\", function(d,i){\r\n                return selection.length - i - 1;\r\n            })\r\n            .attr(\"visibility\", (d) => d.disabled ? \"hidden\" : \"visible\")\r\n            .attr(\"x\", (d) => {\r\n                return (this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from))/2;\r\n            })\r\n            .attr(\"y\", (d) => {\r\n                return d.icon && d.icon.align === \"bottom\" ? 3*this._options.height/4 : this._options.height/2;\r\n            })\r\n            .attr(\"transform\", (d) => {\r\n                if (!d.icon) {\r\n                    return null;\r\n                }\r\n                const y = d.icon.align === \"bottom\" ? -d.icon.height : -d.icon.height/2;\r\n                return `translate(${-this.selectionIconWidth(d)/2},${y})`\r\n            })\r\n            .attr(\"width\", this.selectionIconWidth.bind(this))\r\n            .attr(\"height\", (d) => {\r\n                return d.icon ? d.icon.height : null;\r\n            });\r\n\r\n\t\tthis._selectionBars\r\n            .data([...selection].reverse()) // reverse because left icons needs to be in foreground\r\n\t\t\t.attr(\"data-selection-index\", function(d,i){\r\n\t\t\t\treturn selection.length - i - 1;\r\n\t\t\t})\r\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\t\t.attr(\"width\", (d) => {\r\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\r\n\t\t\t});\r\n\t}\r\n\r\n\tselectionIconWidth(selection){\r\n\t\tif (!selection.icon) {\r\n\t\t\treturn null;\r\n\t\t} else if (selection.icon.width === \"stretch\") {\r\n\t\t\treturn this._histogramData.valueToPosition(selection.to) - this._histogramData.valueToPosition(selection.from);\r\n\t\t} else {\r\n\t\t\treturn selection.icon.width\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Shows selection labels\r\n\t */\r\n\tshowSelectionLabels(){\r\n\t\t// show label without calculating offsets when animating\r\n\t\tif (this._animating) {\r\n\t\t\treturn this._handles.forEach(handle=>handle.showLabel());\r\n\t\t}\r\n\r\n\t\tthis._histogramSelection.getSelection().forEach((s,i)=>{\r\n\t\t\tvar handle1 = this._handles[i];\r\n\t\t\tvar handle2 = this._handles[i+1];\r\n\r\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\r\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\r\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\r\n\t\t});\r\n\t\t\r\n\t\tthis._handles.forEach(handle=>handle.showLabel());\r\n\t}\r\n\r\n\t/**\r\n\t * Hides selection labels\r\n\t */\r\n\thideSelectionLabels(){\r\n\t\tthis._handles.forEach(handle=>handle.hideLabel());\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys histogram UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._observable.destroy();\r\n\t\tthis._clear();\r\n\r\n\t\treturn this;\r\n    }\t\t\r\n}","import style from \"./Histogram.css\";\r\nimport HistogramSelectionRenderer from \"./selection/HistogramSelectionRenderer\";\r\nimport * as Defaults from \"./HistogramDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Histogram renderer class\r\n * @param {Object} options\r\n */\r\nexport default class HistogramRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Histogram options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._historyData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = d3.scaleBand().range([0, options.width]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = d3.scaleLinear().range([options.height, 0]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous data for animation\r\n\t\t */\r\n\t\tthis._prevData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * selection renderer\r\n\t\t */\r\n\t\tthis._selectionRenderer = new HistogramSelectionRenderer(options);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * True if labels are visible\r\n\t\t */\r\n\t\tthis._labelsVisible = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a category\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is changed\r\n\t\t\t * @param {Array} selection\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\t\t\r\n\r\n\t\t// relay selection events\r\n\t\tthis._selectionRenderer.on(\"selectionOver\", (selectionIndex)=>{\r\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\r\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"selectionChanged\", (selection)=>{\r\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\r\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t\t});\t\t\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether histogram has been rendered or not\r\n\t * @returns {boolean} true if histogram has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\trender(selector){\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar margin = Defaults.MARGIN;\r\n\r\n\t\t// render SVG\r\n\t\tvar svg = this._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width + margin.left + margin.right)\r\n\t\t\t.attr(\"height\", height + margin.top + this._options.fontSize + margin.bottom)\r\n\t\t\t.classed(style.histogram, true);\r\n\r\n\t\t// render group element\r\n\t\tvar g = this._groupEl = this._svgEl.append(\"g\")\r\n\t\t\t.classed(style.inactive, true)\r\n\t\t\t.attr(\"transform\",\r\n\t\t\t\"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\t\t// handle hover over svg element\r\n\t\tsvg.on(\"mouseover.hover\", ()=>{\r\n\t\t\tg.classed(style.active, true)\r\n\t\t\tg.classed(style.inactive, false)\r\n\t\t})\r\n\r\n\t\tsvg.on(\"mouseout.hover\", ()=>{\r\n\t\t\tg.classed(style.inactive, true)\r\n\t\t\tg.classed(style.active, false)\r\n\t\t})\r\n\r\n\t\tthis._selectionRenderer.render(g);\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t} \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._groupEl.node().innerHTML = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Refreshes histogram data \r\n\t * @param {HistogramData}\r\n\t * @param {HistogramSelection}\r\n\t * @param {Object} options\r\n\t */\r\n\trefresh(histogramData, histogramSelection, options){\r\n\t\tthis._animate = options && options.animate;\r\n\r\n\t\tthis._histogramData = histogramData;\t\t\r\n\t\tthis._clear();\r\n\r\n\t\tthis._xAxis.domain(histogramData.getData().map(function (d) {return d.value; }));\r\n\t\tthis._yAxis.domain([0, d3.max(histogramData.getData(), function (d) { return Math.max.apply(Math, d.volume); })]);\r\n\r\n\t\tthis._renderXAxis();\t\t\r\n\t\tthis._renderDataBars();\r\n\r\n\t\tthis._prevData = histogramData.getData();\t\t\t\r\n\r\n\t\tthis._selectionRenderer.refresh(histogramData, histogramSelection, options);\t\r\n\r\n\t\tif (this._labelsVisible){\r\n\t\t\tthis.showSelectionLabels()\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsetSelection(histogramSelection, options){\r\n\t\tthis._selectionRenderer.setSelection(histogramSelection, options);\r\n\t}\r\n\r\n\t/**\r\n\t * Shows selection labels\r\n\t */\r\n\tshowSelectionLabels(){\r\n\t\tthis._selectionRenderer.showSelectionLabels();\r\n\t\t// hide axis labels when selection labels are visible\r\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"none\");\r\n\t\tthis._labelsVisible = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides selection labels\r\n\t */\r\n\thideSelectionLabels(){\r\n\t\tthis._selectionRenderer.hideSelectionLabels();\r\n\t\t// show axis labels when selection labels are not visible\r\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"block\");\t\t\r\n\t\tthis._labelsVisible = false;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Renders data bars\r\n\t*/\r\n\t_renderDataBars() { \r\n\t\tvar data = this._histogramData.getData();\r\n\t\t// var prevData = this._prevData;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\tvar y = this._yAxis;\r\n\r\n\t\tdata.forEach(d=>{\r\n\t\t\td.volume.forEach((v, i)=>{\r\n\t\t\t\tthis._groupEl\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.datum({\r\n\t\t\t\t\t\tvalue:d.value,\r\n\t\t\t\t\t\tvolumeIndex:i\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.attr(\"class\", style.bar)\r\n\t\t\t\t\t.attr(\"x\", this._histogramData.valueToPosition(d.value))\r\n\t\t\t\t\t.attr(\"width\", \"1\")\r\n\t\t\t\t\t.attr(\"y\", Math.floor(y(d.volume[i])))\r\n\t\t\t\t\t.attr(\"height\", Math.ceil(height - y(d.volume[i])))\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders X axis \r\n\t*/        \r\n\t_renderXAxis(){\r\n\t\tvar minMax = this._histogramData.getMinMax();\r\n\t\tvar format = this._options.format;\r\n\t\tvar height = this._options.height + this._options.fontSize + Defaults.LABEL_MARGIN;\r\n\r\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"])\r\n\t\t\t.data([minMax.min, minMax.max])\r\n\t\t\t.enter()\r\n\t\t\t.append(\"text\")\r\n\t\t\t.text((d)=>format(d))\r\n\t\t\t.attr(\"font-size\", this._options.fontSize)\r\n\t\t\t.attr(\"transform\", (d, i)=>{\r\n\t\t\t\treturn [\r\n\t\t\t\t\t\"translate(\"+0+\",\" + height + \")\",\r\n\t\t\t\t\t\"translate(\"+this._options.width+\",\" + height + \")\"\r\n\t\t\t\t][i]\r\n\t\t\t})\r\n\t\t\t.attr(\"text-anchor\", function(d, i){\r\n\t\t\t\treturn [\"start\", \"end\"][i];\r\n\t\t\t})\r\n\t\t\t.classed(style[\"x-axis\"], true)\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys histogram UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\t\tthis._selectionRenderer.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","/**\r\n * @abstract\r\n * abstract HistogramSelection class\r\n */\r\nexport default class HistogramSelection {\r\n\tconstructor(histogramData, selection){\r\n\t\tthis._selection = this.getSelectionWithPositions(histogramData, selection);\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * @implements HistogramSelection.getSelection()\r\n\t * Returns histogram selection\r\n\t */\r\n\tgetSelection(){\r\n\t\treturn this._selection;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @abstract\r\n\t * @returns {Array} histogram selection\r\n\t * Returns histogram selection \r\n\t */\r\n\tgetOutputSelection(){\r\n\t\tthrow \"HistogramSelection.getOutputSelection() has to be implemented\";\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * @abstract\r\n\t * @returns {String}\r\n\t * Returns histogram selection type\r\n\t */\r\n\tgetSelectionType(){\r\n\t\tthrow \"HistogramSelection.getSelectionType() has to be implemented\";\r\n\t}\r\n\r\n\t/**\r\n\t * @abstract\r\n\t * @public \r\n\t * @returns {Boolean}\r\n\t * Returns true if toogle is allowed\r\n\t */\r\n\tallowsToggle(){\r\n\t\tthrow \"HistogramSelection.allowsToggle() has to be implemented\";\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * @abstract \r\n\t * @returns {Array}\r\n\t * Returns histogram selection points\r\n\t */\r\n\tgetSelectionPoints(){\r\n\t\tthrow \"HistogramSelection.getSelection() has to be implemented\";\r\n\t}  \t\r\n\r\n\t/**\r\n\t * @public\r\n\t * @param {Array} histogramData\r\n\t * @param {Array} selection\r\n\t * @returns {Array}\r\n\t * Returns modified selection with positions\r\n\t */\r\n\tgetSelectionWithPositions(histogramData, selection){\r\n\t\treturn selection.map(s=>{\r\n\t\t\treturn Object.assign(s, {\r\n\t\t\t\tposition:{\r\n\t\t\t\t\tfrom:histogramData.valueToPosition(s.from),\r\n\t\t\t\t\tto:histogramData.valueToPosition(s.to)\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n\r\nvar SelectionTypes = {\r\n\tMULTI:\"multi\",\r\n\tFILTER:\"filter\",\r\n\tINVERTED_FILTER:\"inverted-filter\"\r\n}\r\n\r\nexport {SelectionTypes} ","import HistogramSelection from \"./HistogramSelection\";\r\nimport {SelectionTypes} from \"./HistogramSelection\";\r\n\r\n/**\r\n * @class\r\n * MultipleHistogramSelection representing histogram selection that support multiple selections\r\n */\r\nexport default class MultipleHistogramSelection extends HistogramSelection{\r\n\t/**\r\n\t * @param {HistogramData} histogramData\r\n\t * @param {Array} selection\r\n\t */\r\n    constructor(histogramData, selection) {\r\n\t\tsuper(histogramData, selection);\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * @implements HistogramSelection.getSelectionType()\r\n\t * Returns histogram selection\r\n\t */\r\n\tgetSelectionType(){\r\n\t\treturn SelectionTypes.MULTI;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @returns {Array} histogram selection\r\n\t * @implements HistogramSelection.getOutputSelection()\r\n\t * Returns histogram selection \r\n\t */\r\n\tgetOutputSelection(){\r\n\t\treturn this._selection;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * @implements HistogramSelection.allowsToggle()\r\n\t * Returns true if selection allows toggle\r\n\t */\r\n\tallowsToggle(){\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * @implements HistogramSelection.getSelectionPoints()\r\n\t * Returns histogram selection points\r\n\t */\r\n\tgetSelectionPoints(){\r\n\t\tvar result = [];\r\n\t\tvar selection = this.getSelection();\r\n\t\tselection.forEach((s, index)=>{\r\n\t\t\tresult.push({\r\n\t\t\t\tvalue:s.from\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tif (index == selection.length-1){\r\n\t\t\t\tresult.push({\r\n\t\t\t\t\tvalue:s.to\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn result;\r\n\t}  \t \t\r\n}","import MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\r\nimport * as Defaults from \"../HistogramDefaults\";\r\n\r\n/**\r\n * @class\r\n * DefaultHistogramSelectionImpl representing histogram selection\r\n */\r\nexport default class DefaultHistogramSelectionImpl extends MultipleHistogramSelectionImpl {\r\n\t/**\r\n\t * @param {HistogramData} histogramData\r\n\t * @param {Array} selection\r\n\t */\r\n    constructor(histogramData) {\r\n\t\tvar minMax = histogramData.getMinMax();\r\n\t\tvar colors = Defaults.DEFAULT_COLORS;\r\n\t\tvar start = minMax.min;\r\n\t\tvar step = (minMax.max - minMax.min) / colors.length;\r\n\t\tvar selection = colors.map(color=>{\r\n\t\t\tvar from = start;\r\n\t\t\tvar to = start + step;\r\n\t\t\tstart += step;\r\n\r\n\t\t\treturn {\r\n\t\t\t\tfrom:from, \r\n\t\t\t\tto:to,\r\n\t\t\t\tcolor:color\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tsuper(histogramData, selection);\r\n    }\r\n}","import HistogramSelection from \"./HistogramSelection\";\r\nimport {SelectionTypes} from \"./HistogramSelection\";\r\n\r\n/**\r\n * @class\r\n * MultipleHistogramSelection representing histogram selection that support multiple selections\r\n */\r\nexport default class FilterHistogramSelectionImpl extends HistogramSelection{\r\n\t/**\r\n\t * @param {HistogramData} histogramData\r\n\t * @param {Array} selection\r\n\t */\r\n    constructor(histogramData, selection) {\r\n\t\tif (selection.length != 1){\r\n\t\t\tthrow \"Filter selection doesn't allow more than one selection\"\r\n\t\t}\r\n\t\tsuper(histogramData, selection);\r\n\t}\r\n\t/**\r\n\t * @public\r\n\t * @returns {Array} histogram selection\r\n\t * @implements HistogramSelection.getOutputSelection()\r\n\t * Returns histogram selection \r\n\t */\r\n\tgetOutputSelection(){\r\n\t\treturn this._selection;\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * @implements HistogramSelection.getSelectionType()\r\n\t * Returns histogram selection\r\n\t */\r\n\tgetSelectionType(){\r\n\t\treturn SelectionTypes.FILTER;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * @implements HistogramSelection.allowsToggle()\r\n\t * Returns true if selection allows toggle\r\n\t */\r\n\tallowsToggle(){\r\n\t\treturn false;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public \r\n\t * @implements HistogramSelection.getSelectionPoints()\r\n\t * Returns histogram selection points\r\n\t */\r\n\tgetSelectionPoints(){\r\n\t\tvar result = [];\r\n\t\tvar selection = this.getSelection();\r\n\t\tselection.forEach((s, index)=>{\r\n\t\t\tresult.push({\r\n\t\t\t\tvalue:s.from\r\n\t\t\t});\r\n\r\n\t\t\tif (index == selection.length-1){\r\n\t\t\t\tresult.push({\r\n\t\t\t\t\tvalue:s.to\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn result;\r\n\t}  \t\r\n}","import FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\r\nimport {SelectionTypes} from \"./HistogramSelection\";\r\n\r\n/**\r\n * @class\r\n * MultipleHistogramSelection representing histogram selection that support multiple selections\r\n */\r\nexport default class InvertedFilterHistogramSelectionImpl extends FilterHistogramSelectionImpl {\r\n\t/**\r\n\t * @param {HistogramData} histogramData\r\n\t * @param {Array} selection\r\n\t */\r\n    constructor(histogramData, selection) {\r\n\t\tsuper(histogramData, selection);\r\n\r\n\t\tthis._selection = this._getInvertedSelection(histogramData, selection);\r\n    }\r\n\r\n\r\n\t_getInvertedSelection(histogramData, selection){\r\n\t\tvar minMax = histogramData.getMinMax();\r\n\r\n\t\tvar invertedSelection = [\r\n\t\t\t{\r\n\t\t\t\tfrom:minMax.min,\r\n\t\t\t\tto:selection[0].from\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tfrom:selection[0].from,\r\n\t\t\t\tdisabled:true,\r\n\t\t\t\tto:selection[0].to\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tfrom:selection[0].to,\r\n\t\t\t\tto:minMax.max\r\n\t\t\t}\r\n\t\t];\r\n\r\n\t\treturn this.getSelectionWithPositions(histogramData, invertedSelection);\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @returns {Array} histogram selection\r\n\t * @implements HistogramSelection.getOutputSelection()\r\n\t * Returns histogram selection \r\n\t */\r\n\tgetOutputSelection(){\r\n\t\treturn [\r\n\t\t\t{\r\n\t\t\t\tfrom:this._selection[1].from,\r\n\t\t\t\tto:this._selection[1].to\r\n\t\t\t}\r\n\t\t];\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * @implements HistogramSelection.getSelectionType()\r\n\t * Returns histogram selection\r\n\t */\r\n\tgetSelectionType(){\r\n\t\treturn SelectionTypes.INVERTED_FILTER;\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * @implements HistogramSelection.getSelectionPoints()\r\n\t * Returns histogram selection points\r\n\t */\r\n\tgetSelectionPoints(){\r\n\t\tvar result = super.getSelectionPoints();\r\n\t\t\r\n\t\tresult[0].hidden = true;\r\n\t\tresult[result.length-1].hidden = true;\r\n\r\n\t\treturn result;\r\n\t}  \t\r\n}","import DefaultHistogramSelectionImpl from \"./DefaultHistogramSelectionImpl\";\r\nimport MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\r\nimport FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\r\nimport InvertedFilterHistogramSelectionImpl from \"./InvertedFilterHistogramSelectionImpl\";\r\nimport {SelectionTypes} from \"./HistogramSelection\";\r\n\r\n/**\r\n * @class\r\n * HistogramSelection factory returns appropriate selection implementation\r\n */\r\nexport default class HistogramSelectionFactory {\r\n\t/**\r\n\t * @param {Object} options\r\n\t */\r\n\tconstructor(options) {\r\n\t\tthis._options = options;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @param {HistogramData} histogramData\r\n\t * @returns {HistogramSelection} returns histogram selection\r\n\t * Returns histogram selection\r\n\t */\r\n\tgetHistogramSelection(selection, histogramData){\t\t\r\n\t\t// use default histogram selection if selection is not provided\r\n\t\tif (!selection){\r\n\t\t\treturn new DefaultHistogramSelectionImpl(histogramData, this._options.selection);\r\n\t\t} else if (this._options.selectionType == SelectionTypes.FILTER){\r\n\t\t\treturn new FilterHistogramSelectionImpl(histogramData, selection);\r\n\t\t} else if (this._options.selectionType == SelectionTypes.INVERTED_FILTER){\r\n\t\t\treturn new InvertedFilterHistogramSelectionImpl(histogramData, selection);\r\n\t\t} else {\r\n\t\t\treturn new MultipleHistogramSelectionImpl(histogramData, selection);\r\n\t\t}\r\n\t}  \t\r\n}","import * as d3 from \"d3\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as Defaults from \"./HistogramDefaults\";\r\nimport HistogramData from \"./HistogramData\";\r\nimport HistogramRenderer from \"./HistogramRenderer\";\r\nimport HistogramSelectionFactory from \"./selection/HistogramSelectionFactory\"\r\nimport {SelectionTypes} from \"./selection/HistogramSelection\";\r\n\r\n/**\r\n * @private \r\n * @param {*} optionValue option value \r\n * @param {*} defaultOptionValue default option value \r\n * @returns option or default option value \r\n */\r\nfunction getOptionValue(optionValue, defaultOptionValue) {\r\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\r\n}\r\n\r\n/**\r\n * @class\r\n * Main histogram class\r\n * @param {Object} options\r\n */\r\nclass Histogram {\r\n\tconstructor(options) {\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Options property exposing widget's options\r\n\t\t */\r\n\t\tthis._options = {};\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * prompt handler\r\n\t\t */\r\n\t\tthis._options.promptHandler = options.promptHandler || null;\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Width of the widget\r\n\t\t */\r\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Height of the widget\r\n\t\t */\r\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Format for widget labels \r\n\t\t */\r\n\t\tthis._options.format = getOptionValue(options.format, null);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Inactive bar color \r\n\t\t */\r\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Inactive bar opacity \r\n\t\t */\r\n\t\tthis._options.inactiveBarOpacity = getOptionValue(options.inactiveBarOpacity, Defaults.INACTIVE_BAR_OPACITY);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Over bar color \r\n\t\t */\r\n\t\tthis._options.overSelectionColor = getOptionValue(options.overSelectionColor, Defaults.OVER_SELECTION_COLOR);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Over selection opacity \r\n\t\t */\r\n\t\tthis._options.overSelectionOpacity = getOptionValue(options.overSelectionOpacity, Defaults.OVER_SELECTION_OPACITY);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Selection color \r\n\t\t */\r\n\t\tthis._options.selectionColor = getOptionValue(options.selectionColor, Defaults.SELECTION_COLOR);\r\n\t\t\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Enable selection toggle \r\n\t\t */\r\n\t\tthis._options.enableSelectionToggle = getOptionValue(options.enableSelectionToggle, Defaults.ENABLE_SELECTION_TOGGLE);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Font size\r\n\t\t */\r\n\t\tthis._options.fontSize = getOptionValue(options.fontSize, Defaults.FONT_SIZE);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * selection type\r\n\t\t */\r\n\t\tthis._options.selectionType = getOptionValue(options.selectionType, null);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Color selections should be divided by vertical line. If null no divider is rendered.\r\n\t\t */\r\n\t\tthis._options.segmentDivider = getOptionValue(options.segmentDivider, null);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a selection\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t * @param {MouseEvent} browser event\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * histogramRenderer\r\n\t\t */\r\n\t\tthis._histogramRenderer = new HistogramRenderer(this._options);\r\n\r\n\t\tthis._histogramRenderer.on(\"selectionOver\", selectionIndex=>{\r\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\r\n\t\t})\r\n\r\n\t\tthis._histogramRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\r\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled, d3.event);\r\n\t\t})\r\n\r\n\t\tthis._histogramRenderer.on(\"selectionChanged\", (selection)=>{\r\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\r\n\t\t})\r\n\r\n\t\tthis._histogramRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\r\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t\t});\r\n\t\t\r\n\t\tthis._selectionFactory = new HistogramSelectionFactory(this._options);\r\n\t}\r\n\r\n\t/**\r\n\t * Bind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Unbind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler\r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\toff(eventName, handler) {\r\n\t\tthis._observable.off(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Destroys widget\r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\tdestroy() {\r\n\t\tthis._observable.destroy();\r\n\t\tthis._histogramRenderer.destroy();\r\n\t\tthis._options = null;\r\n\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\trender(selector) {\r\n\t\tthis._histogramRenderer.render(selector);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets widget data\r\n\t * @param {Array} data\r\n\t * @param {Array} selection\r\n\t * @param {Object} set data options\r\n\t * @returns {Histogram} returns this widget instance \r\n\t */\r\n\tsetData(data, selection, options) {\r\n\t\tif (!this._histogramRenderer.isRendered()) {\r\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\r\n\t\t}\r\n\r\n\t\tvar histogramData = this._histogramData = new HistogramData(data, this._options);\r\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, histogramData);\r\n\r\n\t\tthis._options.selection = histogramSelection.getSelection();\r\n\t\tthis._selection = selection;\r\n\r\n\t\tif (!this._options.format) {\r\n\t\t\tthis._options.format = (value => String(value));\r\n\t\t} else if (typeof this._options.format == \"string\"){\r\n\t\t\tthis._options.format = d3.format(this._options.format);\r\n\t\t}\r\n\r\n\t\tthis._histogramRenderer.refresh(histogramData, histogramSelection, options);\r\n\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public\r\n\t * Sets selection type\r\n\t * @param {String} selectionType\r\n\t * @returns {Histogram} returns this widget instance \r\n\t */\r\n\tsetSelectionType(selectionType){\r\n\t\tthis._options.selectionType = selectionType;\r\n\t\tthis.setSelection(this._selection);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows selection labels\r\n\t */\r\n\tshowSelectionLabels(){\r\n\t\tthis._histogramRenderer.showSelectionLabels();\r\n\t}\r\n\r\n\t/**\r\n\t * Hides selection labels\r\n\t */\r\n\thideSelectionLabels(){\r\n\t\tthis._histogramRenderer.hideSelectionLabels();\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated use setSelection instead\r\n\t */\r\n\tupdateSelection(selection, options) {\r\n\t\treturn this.setSelection(selection, options);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public\r\n\t * Sets selection\r\n\t * @param {Array} selection\r\n\t * @param {Object} options\r\n\t * @returns {Histogram} returns this widget instance \r\n\t */\r\n\tsetSelection(selection, options) {\r\n\t\tif (!this._histogramRenderer.isRendered()) {\r\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\r\n\t\t}\r\n\r\n\t\tif (!this._histogramData) {\r\n\t\t\tthrow \"Can't call setSelection() when no data is available.\"\r\n\t\t}\r\n\t\t// Do not want to mutate given object\r\n\t\tconst selectionCopy = JSON.parse(JSON.stringify(selection));\r\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selectionCopy, this._histogramData);\r\n\t\tthis._options.selection = histogramSelection.getSelection();\r\n\t\tthis._selection = selectionCopy;\r\n\t\tthis._histogramRenderer.setSelection(this._histogramSelection, options);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\nHistogram.SelectionTypes = SelectionTypes;\r\nexport default Histogram;\r\n","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default widget height\r\n */\r\nexport const HEIGHT = 200;\r\n\r\n/**\r\n * @public\r\n * Default line color\r\n */\r\nexport const LINE_COLOR = \"#7ed321\";\r\n\r\n/**\r\n * @public\r\n * Default line colors\r\n */\r\nexport const LINE_COLORS = [];\r\n\r\n/**\r\n * @public\r\n * Default line opacity\r\n */\r\nexport const LINE_OPACITY = 1;\r\n\r\n/**\r\n * @public\r\n * Default fill color\r\n */\r\nexport const FILL_COLOR = \"#7ed321\";\r\n\r\n/**\r\n * @public\r\n * Default fill colors\r\n */\r\nexport const FILL_COLORS = [];\r\n\r\n/**\r\n * @public\r\n * Default fill opacity\r\n */\r\nexport const FILL_OPACITY = 0.1;\r\n\r\n/**\r\n * @public\r\n * Default line width\r\n */\r\nexport const LINE_WIDTH = 3;\r\n\r\n/**\r\n * @public\r\n * Default dot size\r\n */\r\nexport const DOT_SIZE = 6;\r\n\r\n/**\r\n * @public\r\n * Default margin \r\n */\r\nexport const MARGIN = {\r\n    bottom:28\r\n};\r\n\r\n/**\r\n * @public \r\n * Default axis color \r\n */\r\nexport const AXIS_COLOR = \"#f0f0f0\";\r\n\r\n\r\n/**\r\n * @public \r\n * Vertical label offset\r\n */\r\nexport const LABEL_OFFSET = 5;\r\n\r\n\r\n/**\r\n * @public \r\n * Zero line color\r\n */\r\nexport const ZERO_LINE_COLOR = \"#bababa\";","import * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * series representing data for the line\r\n */\r\nexport default class LineData {\r\n\t/**\r\n\t * @param {Array} series\r\n\t * @param {Object} options\r\n\t */\r\n\tconstructor(series) {\r\n\t\tthis._series = series.slice();\r\n\t\tthis._minMax = this._calculateMinMax(this._series);\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns min max of history data\r\n\t * @returns {Object} minMax\r\n\t * @returns {Number} minMax.min\r\n\t * @returns {Number} minMax.max\r\n\t */\r\n\tgetMinMax() {\r\n\t\treturn this._minMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns line series\r\n\t * @returns {Array} line series\r\n\t */\r\n\tgetSeries() {\r\n\t\treturn this._series;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns all data from all series merged into one array\r\n\t * @returns {Array}\r\n\t */\r\n\tgetAllData() {\r\n\t\treturn [].concat.apply([], this._series);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns merged data where each unique label has an array of values\r\n\t */\r\n\tgetMergedData() {\r\n\t\tvar dataMap = {};\r\n\t\tthis.getAllData().forEach((item=>{\r\n\t\t\tconst result = dataMap[item.label] || {\r\n\t\t\t\tlabel:item.label,\r\n\t\t\t\tvalues:[],\r\n\t\t\t\ttooltips:[]\r\n\t\t\t};\r\n\t\t\tresult.values.push(item.value);\r\n\t\t\tresult.tooltips.push(item.tooltip);\r\n\t\t\tdataMap[item.label] = result;\r\n\t\t}));\r\n\r\n\t\treturn Object.values(dataMap);\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Returns min max values for given series\r\n\t* @param {Array} series\r\n\t* @returns {Object} minMax.min\r\n\t* @returns {Object} minMax.max\r\n\t*/\r\n\t_calculateMinMax(series) {\r\n\t\tvar data = [].concat.apply([], series);\r\n\t\tvar min = d3.min(data, function (d) { return d.value; });\r\n\t\tvar max = d3.max(data, function (d) { return d.value; });\r\n\r\n\t\tif (data.length <= series.length) {\r\n\t\t\tmin = Math.min(min, 0);\r\n\t\t\tmax = Math.max(max, 0);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tmin: min,\r\n\t\t\tmax: max\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns precision (number of floating digits) for given number\r\n\t */\r\n\tgetPrecision() {\r\n\t\tvar num = this._minMax.max;\r\n\t\tvar numParts = num.toString().split(\".\");\r\n\t\tif (numParts.length > 1) {\r\n\t\t\treturn numParts[1].length;\r\n\t\t} else {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n}","import style from \"./Line.css\";\r\nimport * as Defaults from \"./LineDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\nvar gradientID = 0;\r\n\r\n/**\r\n * @class\r\n * Line renderer class\r\n * @param {Object} options\r\n */\r\nexport default class TooltipRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Line options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Line data \r\n\t\t */\r\n\t\tthis._lineData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Line has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a line point\r\n\t\t\t * @param {Array} [x,y] data\r\n\t\t\t */\r\n\t\t\t\"pointOver\"\r\n\t\t]);\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Line has been rendered or not\r\n\t * @returns {boolean} true if Line has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {LineHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Line} returns this widget instance\r\n\t */\r\n\trender(groupEl){\r\n\t\tthis._groupEl = groupEl;\r\n\t\tthis._rendered = true;\r\n\r\n\t\tthis._groupEl.on(\"mouseout\", this._onMouseOut.bind(this))\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t_getTextAnchor(xPos, bottomLabelWidth, width){\r\n\t\tvar xpos = xPos;\r\n\t\tif (xpos - bottomLabelWidth/2 < 0){\r\n\t\t\treturn \"start\"\r\n\t\t} else if (xpos + bottomLabelWidth/2 > width){\r\n\t\t\treturn \"end\"\r\n\t\t} else {\r\n\t\t\treturn \"middle\";\r\n\t\t}\r\n\t}\r\n\r\n\t_getTooltipHTML(d){\r\n\t\treturn d.tooltips.filter((tooltip, index)=>{\r\n\t\t\treturn d.values[index] != null;\r\n\t\t}).map((tooltip, index)=>{\r\n\t\t\tconst value = tooltip || this._options.format(d.values[index]);\r\n\t\t\tvar color = this._options.lineColors[index] || this._options.lineColor;\r\n\t\t\tconst icon = `\r\n\t\t\t\t<span style=\"display:inline-block;position:relative;top:-1px;margin-right:5px;width:6px;height:6px;border-radius:50%;background-color:${color}\"></span>\r\n\t\t\t`;\r\n\r\n\t\t\tif (d.tooltips.length>1){\r\n\t\t\t\treturn icon + value;\r\n\t\t\t} else {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}).join(\"<br />\");\r\n\t}\r\n\r\n\t_onHoverAreaOver(d){\r\n\t\tvar duration = this._tooltipGroup.attr(\"visibility\") == \"visible\"?0:0;\r\n\t\tvar x = this._xAxis;\r\n\t\tvar y = this._yAxis;\r\n\t\tvar width = this._options.width;\r\n\t\tvar xPos = x(d.label);\r\n\r\n\t\t// update tooltip position\r\n\t\tthis._tooltipGroup\r\n\t\t\t.transition()\r\n\t\t\t.duration(duration)\r\n\t\t\t.attr(\"visibility\", \"visible\")\r\n\t\t\t.attr(\"transform\", \"translate(\"+xPos+\", 0)\")\r\n\r\n\t\t// update tooltip bottom label\r\n\t\tvar bottomLabelWidth = this._tooltipBottomLabel.node().getBBox().width;\r\n\t\tvar bottomMaskPadding = 25;\r\n\t\tvar textAnchor = this._getTextAnchor(xPos, bottomLabelWidth, width);\r\n\r\n\t\tthis._tooltipBottomLabel\r\n\t\t\t.text(d.label)\r\n\t\t\t.attr(\"text-anchor\", textAnchor);\r\n\r\n\t\tthis._tooltipBottomLabel.attr(\"transform\", ()=>{\r\n\t\t\treturn {\r\n\t\t\t\t\"start\":\"translate(\"+-xPos+\", 0)\",\r\n\t\t\t\t\"middle\":\"translate(0, 0)\",\r\n\t\t\t\t\"end\":\"translate(\"+(width-xPos)+\", 0)\"\r\n\t\t\t}[textAnchor]\r\n\t\t});\r\n\t\t\r\n\t\tvar bottomMaskWidth = bottomMaskPadding*2 + bottomLabelWidth;\r\n\t\tthis._tooltipBottomLabelMask\r\n\t\t\t.attr(\"width\", bottomMaskWidth)\r\n\t\t\t.attr(\"x\", ()=>{\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\"start\":-xPos-bottomMaskPadding,\r\n\t\t\t\t\t\"middle\":-bottomMaskWidth/2,\r\n\t\t\t\t\t\"end\":width-xPos-bottomMaskWidth+bottomMaskPadding,\r\n\t\t\t\t}[textAnchor]\r\n\t\t\t})\r\n\r\n\t\tthis._handleMaskGradientEl.attr(\"x1\", -bottomMaskWidth/2);\r\n\t\tthis._handleMaskGradientEl.attr(\"x2\", bottomMaskWidth/2);\t\t\t\r\n\r\n\t\t// update tooltip top label \r\n\t\tvar tooltipHtml = this._getTooltipHTML(d);\r\n\t\tthis._tooltipTopLabel.node().innerHTML = tooltipHtml;\r\n\t\tvar labelLeft = this._getLabelLeft(xPos);\r\n\r\n\t\t// if value is not null or undefined\r\n\t\tif (d.values.some(d => d != null)){\r\n\t\t\tthis._tooltipTopLabel\r\n\t\t\t\t.style(\"left\", labelLeft+\"px\")\r\n\t\t\t\t.style(\"visibility\", \"visible\")\r\n\t\t\t\t.style(\"top\", y(Math.max.apply(Math,d.values))-50+\"px\")\r\n\r\n\t\t\t// update line circle\r\n\t\t\tthis._tooltipLineCircle\r\n\t\t\t\t.transition()\r\n\t\t\t\t.duration(duration)\r\n\t\t\t\t.style(\"visibility\", (circle, i)=>{\r\n\t\t\t\t\treturn d.values[i]?\"visible\":\"hidden\";\r\n\t\t\t\t})\r\n\t\t\t\t.attr(\"cy\", (circle, i)=>{\r\n\t\t\t\t\treturn d.values[i]?y(d.values[i]):0\r\n\t\t\t\t})\t\t\t\t\r\n\t\t} else {\r\n\t\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\");\r\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\t_getLabelLeft(xPos){\r\n\t\tvar labelWidth = this._tooltipTopLabel.node().offsetWidth;\r\n\t\tvar labelLeft = xPos-labelWidth/2;\r\n\t\t\r\n\t\tif (labelLeft<0){\r\n\t\t\tlabelLeft = 0;\r\n\t\t}\r\n\r\n\t\tif (labelLeft>this._options.width - labelWidth){\r\n\t\t\tlabelLeft = this._options.width - labelWidth;\r\n\t\t}\r\n\r\n\t\treturn labelLeft;\r\n\t}\r\n\r\n\t_onMouseOut(){\r\n\t\t// only hide when mouse is outside of widget\r\n\t\tif (!this._groupEl.node().parentNode.contains(d3.event.relatedTarget)){\r\n\t\t\tthis._hideTooltip();\r\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t_hideTooltip(){\r\n\t\tthis._tooltipGroup.attr(\"visibility\", \"hidden\")\r\n\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\")\r\n\t}\r\n\r\n\t_renderTooltip(){\r\n\t\tvar data = this._lineData.getMergedData();\r\n\t\t\r\n\t\tvar series = this._lineData.getSeries();\r\n\t\tvar hoverWidth;\r\n\t\tif (data.length>series.length){\r\n\t\t\thoverWidth = this._options.width / (data.length-1);\r\n\t\t} else {\r\n\t\t\thoverWidth = this._options.width;\r\n\t\t}\r\n\r\n\t\tthis._hoverAreas = this._groupEl\r\n\t\t\t.selectAll(\".\"+style[\"tooltip-hover-area\"])\r\n\t\t\t.data(data)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-hover-area\"])\r\n\t\t\t.attr(\"width\", hoverWidth)\r\n\t\t\t.attr(\"fill-opacity\", 0.00)\r\n\t\t\t.attr(\"x\", (d)=>{\r\n\t\t\t\treturn this._xAxis(d.label) - hoverWidth/2\r\n\t\t\t})\r\n\t\t\t.attr(\"height\", this._options.height)\r\n\t\t\t.on(\"mouseover\", this._onHoverAreaOver.bind(this))\r\n\r\n\t\tthis._tooltipGroup = this._groupEl\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"visibility\", \"hidden\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-group\"])\r\n\r\n\r\n\t\tthis._tooltipLineCircle = this._tooltipGroup\r\n\t\t\t.selectAll(\".\"+style[\"tooltip-line-circle\"])\r\n\t\t\t.data(series)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"circle\")\r\n\t\t\t.attr(\"visibility\", \"hidden\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-line-circle\"])\r\n\t\t\t.attr(\"stroke-width\", this._options.lineWidth)\r\n\t\t\t.attr(\"stroke\", (d, i)=>{\r\n\t\t\t\treturn this._options.lineColors[i] || this._options.lineColor;\r\n\t\t\t})\r\n\t\t\t.attr(\"stroke-opacity\", this._options.lineOpacity)\r\n\t\t\t.attr(\"r\", 2.5+this._options.lineWidth/2)\r\n\r\n\t\tthis._tooltipAxisCircle = this._tooltipGroup\r\n\t\t\t.append(\"circle\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-axis-circle\"])\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"cy\", this._options.height - Defaults.MARGIN.bottom)\r\n\t\t\t.attr(\"r\", 2.5 + 1/2)\r\n\r\n\t\tthis._tooltipBottomLabelMask = this._tooltipGroup\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"fill\", \"url(#\"+this._handleMaskGradientEl.attr(\"id\")+\")\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-label-mask\"])\r\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET-15)\r\n\t\t\t.attr(\"height\", 20)\r\n\r\n\t\tthis._tooltipBottomLabel = this._tooltipGroup\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-label\"])\r\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET)\r\n\t\t\t.attr(\"text-anchor\", \"start\")\r\n\t\t\t.text(data[0].label)\r\n\r\n\t\tthis._tooltipTopLabel = d3.select(this._groupEl.node().parentNode.parentNode)\r\n\t\t\t.insert(\"span\", \":first-child\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-top-label\"])\r\n\t\t\t.style(\"position\", \"absolute\")\r\n\t\t\t.style(\"visibility\", \"hidden\")\r\n\r\n\t\tthis._tooltipRendered = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates mask gradient element\r\n\t * @param {Number} handleIndex \r\n\t */\r\n\t_createMaskGradientElement(){\r\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\r\n\t\t\t.attr(\"id\", style[\"tooltip-label-mask\"]+\"-\"+(gradientID++)+\"-gradient\")\r\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\r\n\t\t\t.attr(\"y1\", \"0\").attr(\"x1\", \"0\")\r\n\t\t\t.attr(\"y2\", \"0\").attr(\"x2\", \"0\");\r\n\r\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\r\n\t\t\t.data([\r\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\r\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\r\n\t\t\t])\r\n\t\t\t.enter().append(\"stop\")\r\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\r\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\r\n\r\n\t\treturn this._handleMaskGradientEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tif (this._tooltipRendered){\r\n\t\t\tthis._hoverAreas.remove();\r\n\t\t\tthis._tooltipGroup.remove();\r\n\t\t\tthis._tooltipTopLabel.remove();\r\n\t\t\tthis._tooltipRendered = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Sets line data \r\n\t * @param {LineData}\r\n\t */\r\n\tupdate(lineData, x, y){\r\n\t\tthis._xAxis = x;\r\n\t\tthis._yAxis = y; \r\n\t\tthis._lineData = lineData;\r\n\r\n\t\tthis._createMaskGradientElement();\r\n\t\tthis._clear();\r\n\t\tthis._renderTooltip();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Line UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._clear();\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","import style from \"./Line.css\";\r\nimport * as Defaults from \"./LineDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport TooltipRenderer from \"./TooltipRenderer\";\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Line renderer class\r\n * @param {Object} options\r\n */\r\nexport default class LineRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Line options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Line data \r\n\t\t */\r\n\t\tthis._lineData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Line has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous data for animation\r\n\t\t */\r\n\t\tthis._prevData = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a line point\r\n\t\t\t * @param {Array} [x,y] data\r\n\t\t\t */\r\n\t\t\t\"pointOver\"\r\n\t\t]);\r\n\r\n\t\tthis._tooltipRenderer = new TooltipRenderer(options);\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Line has been rendered or not\r\n\t * @returns {boolean} true if Line has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {LineHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Line} returns this widget instance\r\n\t */\r\n\trender(selector){\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\t// force position relative so the toolip shows correctly\r\n\t\tct.style(\"position\", \"relative\");\r\n\r\n\t\t// render SVG\r\n\t\tthis._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height)\r\n\t\t\t.classed(style.svg, true)\r\n\t\t\t.classed(style.line, true);\r\n\r\n\t\t// render group element\r\n\t\tthis._groupEl = this._svgEl.append(\"g\");\r\n\r\n\t\tthis._tooltipRenderer.render(this._groupEl);\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t} \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._groupEl.node().innerHTML = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Sets line data \r\n\t * @param {LineData}\r\n\t */\r\n\tupdate(lineData){\r\n\t\tthis._lineData = lineData;\t\t\r\n\t\tthis._clear();\r\n\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar verticalSpacing = this._options.verticalSpacing;\r\n\r\n\t\tvar series = lineData.getSeries();\r\n\t\tvar allData = lineData.getAllData()\r\n\t\tvar minMax = lineData.getMinMax();\r\n\r\n\t\tvar x = this._xAxis = d3.scalePoint().range([0, width]);\t\r\n\t\tvar y = this._yAxis = d3.scaleLinear().range([height-verticalSpacing, verticalSpacing]);\r\n\r\n\t\tx.domain(allData.map(function (d) {return d.label; }));\r\n\t\ty.domain([minMax.min, minMax.max]);\r\n\r\n\t\tthis._renderZeroLine(allData);\r\n\t\tseries.forEach((data, seriesIndex)=>{\r\n\t\t\tthis._renderDataLines(data, seriesIndex);\r\n\t\t});\r\n\t\tthis._renderXAxis(allData);\r\n\t\tthis._tooltipRenderer.update(lineData, x, y);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * Renders x axis\r\n\t*/\r\n\t_renderXAxis(data){\r\n\t\tthis._groupEl.append(\"line\")\r\n\t\t\t.attr(\"x1\", 0)\r\n\t\t\t.attr(\"x2\", this._options.width)\r\n\t\t\t.attr(\"y1\", this._options.height-Defaults.MARGIN.bottom)\r\n\t\t\t.attr(\"y2\", this._options.height-Defaults.MARGIN.bottom)\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"stroke\", this._options.axisColor)\r\n\r\n\t\t// render to labels on start and end sides if multiple items are available\r\n\t\tif (data.length>1){\r\n\t\t\tthis._groupEl\r\n\t\t\t\t.append(\"text\")\r\n\t\t\t\t.text(data[0].label)\r\n\t\t\t\t.attr(\"x\", 0)\r\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\r\n\r\n\t\t\tthis._groupEl\r\n\t\t\t\t.append(\"text\")\r\n\t\t\t\t.text(data[data.length-1].label)\r\n\t\t\t\t.attr(\"x\", this._options.width)\r\n\t\t\t\t.attr(\"text-anchor\", \"end\")\r\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\r\n\r\n\t\t// render single label in the middle if only one item is available\t\t\t\t\r\n\t\t} else if (data.length == 1){\r\n\t\t\tthis._groupEl\r\n\t\t\t\t.append(\"text\")\r\n\t\t\t\t.text(data[0].label)\r\n\t\t\t\t.attr(\"x\", this._options.width/2)\r\n\t\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\r\n\t\t}\t\r\n\t}\r\n\t/**\r\n\t * Returns true if graph should render zero line\r\n\t * @param {Array} data \r\n\t */\r\n\t_showZeroLine(){\r\n\t\tvar zeroLinePosition = this._yAxis(0);\r\n\t\tvar axisPosition = this._options.height-Defaults.MARGIN.bottom;\r\n\t\tvar treshold = 10;\r\n\t\treturn zeroLinePosition<axisPosition-treshold;\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * Renders zero line\r\n\t*/\r\n\t_renderZeroLine(){\r\n\t\tif (this._showZeroLine()){\r\n\t\t\tthis._groupEl.append(\"line\")\r\n\t\t\t\t.attr(\"x1\", 0)\r\n\t\t\t\t.attr(\"x2\", this._options.width)\r\n\t\t\t\t.attr(\"y1\", Math.round(this._yAxis(0)))\r\n\t\t\t\t.attr(\"y2\", Math.round(this._yAxis(0)))\r\n\t\t\t\t.attr(\"stroke-dasharray\",\"2 ,2\")\r\n\t\t\t\t.attr(\"stroke\", this._options.zeroLineColor)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * @param {Number} seriesIndex\r\n\t * Renders data lines\r\n\t*/\r\n\t_renderDataLines(data, seriesIndex) { \r\n\t\tvar x = this._xAxis;\r\n\t\tvar y = this._yAxis;\r\n\t\t\r\n\t\tvar options = this._options;\r\n\t\tvar minHeight = this._options.height-Defaults.MARGIN.bottom;\r\n\t\tvar areaZero = this._showZeroLine()?Math.min(minHeight, y(0)):minHeight;\r\n\t\tvar lineColor = options.lineColors[seriesIndex] || options.lineColor;\r\n\t\tvar fillColor = options.fillColors[seriesIndex] || options.fillColor;\r\n\r\n\t\t// define the area\r\n\t\tvar area = d3.area()\r\n\t\t\t.x(function(d) {return x(d.label); })\r\n\t\t\t.y0(areaZero)\r\n\t\t\t.y1(function(d) { return y(d.value); });\r\n\r\n\t\t// define the line\r\n\t\tvar line = d3.line()\r\n\t\t\t.x(function(d) { return x(d.label); })\r\n\t\t\t.y(function(d) { return y(d.value); });\t\t\r\n\r\n\t\t// apply grouping if needed (null or other splits)\r\n\t\tconst groupedData = this._getGroupedData(data);\r\n\r\n\t\tgroupedData.forEach(lineData=>{\r\n\t\t\t// only add area if not rendering a dot\r\n\t\t\tif (lineData.length>1){\r\n\t\t\t\t// add the area path\r\n\t\t\t\tthis._groupEl.append(\"path\")\r\n\t\t\t\t.data([lineData])\r\n\t\t\t\t.attr(\"class\", style[\"area\"])\r\n\t\t\t\t.attr(\"fill\", fillColor)\r\n\t\t\t\t.attr(\"fill-opacity\", options.fillOpacity)\r\n\t\t\t\t.attr(\"d\", area);\r\n\t\t\t}\r\n\r\n\t\t\tif (lineData.length){\r\n\t\t\t\t// add the line path\r\n\t\t\t\tthis._groupEl.append(\"path\")\r\n\t\t\t\t\t.data([lineData])\r\n\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t.attr(\"stroke-linecap\", \"round\")\r\n\t\t\t\t\t.attr(\"stroke\", lineColor)\r\n\t\t\t\t\t.attr(\"stroke-opacity\", 1)\r\n\t\t\t\t\t// note that in case of a single item, dot is rendered with a different size\r\n\t\t\t\t\t.attr(\"stroke-width\", lineData.length>1?options.lineWidth:options.dotSize)\r\n\t\t\t\t\t.attr(\"class\", style[\"line\"])\r\n\t\t\t\t\t.attr(\"d\", (d)=>{\r\n\t\t\t\t\t\tvar path = line(d);\r\n\t\t\t\t\t\t// Fix issue in Chrome on Mac and Surface where\r\n\t\t\t\t\t\t// path points are not rendererd if it's a single point \r\n\t\t\t\t\t\tif (path && path.split(\",\").length == 2){\r\n\t\t\t\t\t\t\treturn path + \" \" + path;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn path;\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Splits given array into multiple in case there is null in value\r\n\t * @param {Array} data \r\n\t */\r\n\t_getGroupedData(data){\r\n\t\tlet group = [];\r\n\t\tconst result = [group];\r\n\t\t\r\n\t\tdata.forEach(item=>{\r\n\t\t\tif (item.value === null){\r\n\t\t\t\tgroup = [];\r\n\t\t\t\tresult.push(group);\r\n\t\t\t} else {\r\n\t\t\t\tgroup.push(item);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Line UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","import * as d3 from \"d3\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as Defaults from \"./LineDefaults\";\r\nimport LineData from \"./LineData\";\r\nimport LineRenderer from \"./LineRenderer\";\r\n\r\n/**\r\n * @private \r\n * @param {*} optionValue option value \r\n * @param {*} defaultOptionValue default option value \r\n * @returns option or default option value \r\n */\r\nfunction getOptionValue(optionValue, defaultOptionValue) {\r\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\r\n}\r\n\r\n/**\r\n * @class\r\n * Main Line class\r\n * @param {Object} options\r\n */\r\nclass Line {\r\n\tconstructor(options) {\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Options property exposing widget's options\r\n\t\t */\r\n\t\tthis._options = {};\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Width of the widget\r\n\t\t */\r\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Height of the widget\r\n\t\t */\r\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Line width\r\n\t\t */\r\n\t\tthis._options.lineWidth = getOptionValue(options.lineWidth, Defaults.LINE_WIDTH);\t\t\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Dot size\r\n\t\t */\r\n\t\tthis._options.dotSize = getOptionValue(options.dotSize, Defaults.DOT_SIZE);\t\t\t\t\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Format for widget labels \r\n\t\t */\r\n\t\tthis._options.format = getOptionValue(options.format, null);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Line color \r\n\t\t */\r\n\t\tthis._options.lineColor = getOptionValue(options.lineColor, Defaults.LINE_COLOR);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Line colors \r\n\t\t */\r\n\t\tthis._options.lineColors = getOptionValue(options.lineColors, Defaults.LINE_COLORS);\t\t\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Line opacity \r\n\t\t */\r\n\t\tthis._options.lineOpacity = getOptionValue(options.lineOpacity, Defaults.LINE_OPACITY);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Fill color \r\n\t\t */\r\n\t\tthis._options.fillColor = getOptionValue(options.fillColor, Defaults.FILL_COLOR);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Fill colors\r\n\t\t */\r\n\t\tthis._options.fillColors = getOptionValue(options.fillColors, Defaults.FILL_COLORS);\t\t\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Fill opacity\r\n\t\t */\r\n\t\tthis._options.fillOpacity = getOptionValue(options.fillOpacity, Defaults.FILL_OPACITY);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Axis color\r\n\t\t */\r\n\t\tthis._options.axisColor = getOptionValue(options.axisColor, Defaults.AXIS_COLOR);\t\t\r\n\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Axis color\r\n\t\t */\r\n\t\tthis._options.zeroLineColor = getOptionValue(options.zeroLineColor, Defaults.ZERO_LINE_COLOR);\t\t\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Vertical spacing\r\n\t\t */\r\n\t\tthis._options.verticalSpacing = getOptionValue(options.verticalSpacing, this._options.height / 4);\t\t\r\n\t\t\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a line point\r\n\t\t\t * @param {Array} [x,y] data\r\n\t\t\t */\r\n\t\t\t\"pointOver\"\r\n\t\t]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * LineRenderer\r\n\t\t */\r\n\t\tthis._lineRenderer = new LineRenderer(this._options);\r\n\r\n\t\tthis._lineRenderer.on(\"pointOver\", data=>{\r\n\t\t\tthis._observable.fire(\"pointOver\", data);\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * Bind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {Line} returns this widget instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Unbind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler\r\n\t * @returns {Line} returns this widget instance\r\n\t */\r\n\toff(eventName, handler) {\r\n\t\tthis._observable.off(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Destroys widget\r\n\t * @returns {Line} returns this widget instance\r\n\t */\r\n\tdestroy() {\r\n\t\tthis._observable.destroy();\r\n\t\tthis._lineRenderer.destroy();\r\n\t\tthis._options = null;\r\n\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Line} returns this widget instance\r\n\t */\r\n\trender(selector) {\r\n\t\tthis._lineRenderer.render(selector);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets multiple series of data\r\n\t * @param {Array[]} series\r\n\t * @returns {Line} returns this widget instance \r\n\t */\r\n\tsetSeries(series) {\r\n\t\treturn this.setData.apply(this, series);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets line data\r\n\t * @param {...Array} series\r\n\t * @returns {Line} returns this widget instance \r\n\t */\r\n\tsetData(...series) {\r\n\t\tif (!this._lineRenderer.isRendered()) {\r\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\r\n\t\t}\r\n\r\n\t\tvar lineData = this._lineData = new LineData(series, this._options);\r\n\r\n\t\tif (!this._options.format) {\r\n\t\t\tthis._options.format = d3.format(\",.\" + this._lineData.getPrecision() + \"f\")\r\n\t\t} else if (typeof this._options.format == \"string\"){\r\n\t\t\tthis._options.format = d3.format(this._options.format);\r\n\t\t}\r\n\r\n\t\tthis._lineRenderer.update(lineData);\r\n\r\n\t\treturn this;\r\n\t}\r\n}\r\n\r\nexport default Line;\r\n","\r\nexport const WIDTH = 360;\r\nexport const HEIGHT = 129;\r\nexport const LABEL_FONT_SIZE = 13;\r\nexport const TOOLTIP_FONT_SIZE = 11;\r\nexport const TOOLTIP_SYMBOL = '_circle';\r\nexport const ACTIVE_COLORS = [\"#49ace2\", \"#ca62dc\"];\r\nexport const DETAILS_HIDDEN = false;\r\nexport const MINMAX = \"sum\";\r\nexport const DUAL_VALUE = false;\r\nexport const ENABLE_BAR_HOVER = false;\r\nexport const ENABLE_BAR_TOGGLE = false;\r\nexport const FORMAT = \",f\";\r\nexport const BAR_HEIGHT = 43;\r\nexport const BAR_DISABLED = false;\r\nexport const HORIZONTAL_PADDING = 10;\r\nexport const STRIPE_HEIGHT = 5;\r\nexport const STRIPE_BACKGROUND_COLOR = \"#f0f0f0\";\r\nexport const TOOLTIP_SPACE = 7;\r\nexport const CORNER_ROUNDED = true;\r\nexport const SHOW_ONLY_TOOL = true;\r\nexport const ONLY_TOOL_TEXT = 'Only';","export default class BarchartData {\r\n\r\n\tconstructor(\r\n\t\t_,\r\n\t\tdetailsData,\r\n\t\tbarsData\r\n\t) {\r\n\t\tif (typeof barsData === 'undefined') throw \"barsData is required parameter\";\r\n\r\n\t\tthis._detailsData = detailsData;\r\n\t\tthis._barsData = barsData;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {BarchartData} barchartData\r\n\t */\r\n\tstatic copyAs(barchartData) {\r\n\t\treturn new BarchartData(\r\n\t\t\t{},\r\n\t\t\tbarchartData.details,\r\n\t\t\tbarchartData.bars\r\n\t\t);\r\n\t}\r\n\r\n\tget details() {\r\n\t\treturn this._detailsData;\r\n\t}\r\n\tset details(detailsData) {\r\n\t\tthis._detailsData = detailsData;\r\n\t}\r\n\r\n\tget bars() {\r\n\t\treturn this._barsData;\r\n\t}\r\n\tgetBar(index) {\r\n\t\treturn this._barsData[index];\r\n\t}\r\n\tsetBar(index, barData) {\r\n\t\tthis._barsData[index] = barData;\r\n\t}\r\n\r\n\tcalculateMinMax(minMax = \"sum\") {\r\n\r\n\t\tif (minMax === \"sum\") {\r\n\r\n\t\t\tlet containsNegativeVal = false;\r\n\t\t\tlet containsPositiveVal = false;\r\n\t\t\tconst sum = this.bars.reduce((sum, bar) => {\r\n\t\t\t\tconst min = bar.calculateMinMax(minMax).min;\r\n\t\t\t\tconst max = bar.calculateMinMax(minMax).max;\r\n\t\t\t\tif (min < 0) containsNegativeVal = true;\r\n\t\t\t\tif (max > 0) containsPositiveVal = true;\r\n\t\t\t\treturn sum + Math.max(Math.abs(min), Math.abs(max));\r\n\t\t\t}, 0);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tmin: containsNegativeVal ? -sum : 0,\r\n\t\t\t\tmax: containsPositiveVal ? sum : 0\r\n\t\t\t}\r\n\r\n\t\t} else if (minMax === \"auto\") {\r\n\r\n\t\t\treturn {\r\n\t\t\t\tmin: this.bars.reduce((min, bar) => Math.min(min, bar.calculateMinMax(minMax).min), 0),\r\n\t\t\t\tmax: this.bars.reduce((max, bar) => Math.max(max, bar.calculateMinMax(minMax).max), 0)\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\treturn minMax;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetPrecision(precision = \"max\") {\r\n\t\tif (precision === \"max\") {\r\n\t\t\treturn this.bars.reduce((max, bar) => Math.max(max, bar.getPrecision(precision)), 0)\r\n\t\t} else {\r\n\t\t\treturn precision;\r\n\t\t}\r\n\t}\r\n\r\n}","export default class DetailsData {\r\n\r\n\tconstructor(\r\n\t\t{\r\n\t\t\tlabel,\r\n\t\t\tdisabled\r\n\t\t},\r\n\t\ttooltips\r\n\t) {\r\n\t\tif (typeof label === 'undefined') throw \"label is required parameter\";\r\n\r\n\t\tthis._label = label;\r\n\t\tthis._disabled = disabled;\r\n\t\tthis._tooltips = tooltips;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {DetailsData} detailsData\r\n\t */\r\n\tstatic copyAs(detailsData) {\r\n\t\treturn new DetailsData(\r\n\t\t\t{\r\n\t\t\t\tlabel: detailsData.label,\r\n\t\t\t\tdisabled: detailsData.disabled\r\n\t\t\t},\r\n\t\t\tdetailsData.tooltips,\r\n\t\t);\r\n\t}\r\n\r\n\tget label() {\r\n\t\treturn this._label;\r\n\t}\r\n\tset label(label) {\r\n\t\tthis._label = label;\r\n\t}\r\n\r\n\tget tooltips() {\r\n\t\treturn this._tooltips;\r\n\t}\r\n\tgetTooltip(index) {\r\n\t\treturn this._tooltips[index];\r\n\t}\r\n\taddTooltip(tooltipData) {\r\n\t\tif (typeof this._tooltips === 'undefined') {\r\n\t\t\tthis._tooltips = [];\r\n\t\t}\r\n\t\tthis._tooltips.push(tooltipData);\r\n\t}\r\n\tsetTooltip(index, tooltipData) {\r\n\t\tthis._tooltips[index] = tooltipData;\r\n\t}\r\n\r\n\tget disabled() {\r\n\t\treturn this._disabled;\r\n\t}\r\n\tset disabled(disabled) {\r\n\t\tthis._disabled = disabled;\r\n\t}\r\n\r\n\tgetPrecision(precision = \"max\") {\r\n\t\tif (precision === \"max\") {\r\n\t\t\tif (!this.tooltips) {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\treturn this.tooltips.reduce((max, tooltip) => Math.max(max, tooltip.getPrecision()), 0);\r\n\t\t} else {\r\n\t\t\treturn precision;\r\n\t\t}\r\n\t}\r\n\r\n}","\r\nexport default class TooltipData {\r\n\r\n\tconstructor(\r\n\t\t{\r\n\t\t\ttext,\r\n\t\t\tsymbol,\r\n\t\t\tcolor\r\n\t\t}\r\n\t) {\r\n\t\tif (typeof text === 'undefined') throw \"text is required parameter\";\r\n\t\tthis._symbol = symbol;\r\n\t\tthis._color = color;\r\n\t\tthis._text = text;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {TooltipData} tooltipData\r\n\t */\r\n\tstatic copyAs(tooltipData) {\r\n\t\treturn new TooltipData({\r\n\t\t\ttext: tooltipData.text,\r\n\t\t\tsymbol: tooltipData.symbol,\r\n\t\t\tcolor: tooltipData.color\r\n\t\t});\r\n\t}\r\n\r\n\tget symbol() {\r\n\t\treturn this._symbol;\r\n\t}\r\n\tset symbol(symbol) {\r\n\t\tthis._symbol = symbol;\r\n\t}\r\n\r\n\tget color() {\r\n\t\treturn this._color;\r\n\t}\r\n\tset color(color) {\r\n\t\tthis._color = color;\r\n\t}\r\n\r\n\tget text() {\r\n\t\treturn this._text;\r\n\t}\r\n\tset text(text) {\r\n\t\tthis._text = text;\r\n\t}\r\n\r\n\tgetPrecision(precision = \"max\") {\r\n\t\tif (precision === \"max\") {\r\n\t\t\tif (this.isNumber()) {\r\n\t\t\t\tconst str = this.text.toString();\r\n\t\t\t\tif (str.includes('.')) {\r\n\t\t\t\t\treturn str.split(\".\")[1].length;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\treturn precision;\r\n\t\t}\r\n\t}\r\n\r\n\tisNumber() {\r\n\t\treturn !isNaN(parseFloat(this.text)) && isFinite(this.text);\r\n\t}\r\n\r\n}","\r\nexport default class BarData {\r\n\r\n\tconstructor(\r\n\t\t{\r\n\t\t\tdisabled,\r\n\t\t\thighlighted\r\n\t\t},\r\n\t\tdetailsData,\r\n\t\tstripesData\r\n\t) {\r\n\t\tif (typeof stripesData === 'undefined') throw \"stripesData is required parameter\";\r\n\r\n\t\tthis._disabled = disabled;\r\n\t\tthis._highlighted = highlighted;\r\n\t\tthis._detailsData = detailsData;\r\n\t\tthis._stripesData = stripesData;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {BarData} barData\r\n\t */\r\n\tstatic copyAs(barData) {\r\n\t\treturn new BarData(\r\n\t\t\t{\r\n\t\t\t\tdisabled: barData.disabled,\r\n\t\t\t\thighlighted: barData.highlighted\r\n\t\t\t},\r\n\t\t\tbarData.details,\r\n\t\t\tbarData.stripes\r\n\t\t);\r\n\t}\r\n\r\n\tget disabled() {\r\n\t\treturn this._disabled;\r\n\t}\r\n\tset disabled(disabled) {\r\n\t\tthis._disabled = disabled;\r\n\t}\r\n\r\n\tget highlighted() {\r\n\t\treturn this._highlighted;\r\n\t}\r\n\tset highlighted(highlighted) {\r\n\t\tthis._highlighted = highlighted;\r\n\t}\r\n\r\n\tget details() {\r\n\t\treturn this._detailsData;\r\n\t}\r\n\tset details(detailsData) {\r\n\t\tthis._detailsData = detailsData;\r\n\t}\r\n\r\n\tget stripes() {\r\n\t\treturn this._stripesData;\r\n\t}\r\n\tgetStripe(index) {\r\n\t\treturn this._stripesData[index];\r\n\t}\r\n\tsetStripe(index, stripeData) {\r\n\t\tthis._stripesData[index] = stripeData;\r\n\t}\r\n\r\n\tcalculateMinMax(minMax = \"sum\") {\r\n\r\n\t\tif (minMax === \"sum\") {\r\n\r\n\t\t\tlet containsNegativeVal = false;\r\n\t\t\tlet containsPositiveVal = false;\r\n\t\t\tconst absMax = this.stripes.reduce((sum, stripe) => {\r\n\t\t\t\tconst min = stripe.calculateMinMax(minMax).min;\r\n\t\t\t\tconst max = stripe.calculateMinMax(minMax).max;\r\n\t\t\t\tif (min < 0) containsNegativeVal = true;\r\n\t\t\t\tif (max > 0) containsPositiveVal = true;\r\n\t\t\t\treturn sum + Math.max(Math.abs(min), Math.abs(max))\r\n\t\t\t}, 0);\r\n\r\n\t\t\treturn {\r\n\t\t\t\tmin: containsNegativeVal ? -absMax : 0,\r\n\t\t\t\tmax: containsPositiveVal ? absMax : 0\r\n\t\t\t}\r\n\r\n\t\t} else if (minMax === \"auto\") {\r\n\r\n\t\t\treturn {\r\n\t\t\t\tmin: this.stripes.reduce((min, stripe) => Math.min(min, stripe.calculateMinMax(minMax).min), 0),\r\n\t\t\t\tmax: this.stripes.reduce((max, stripe) => Math.max(max, stripe.calculateMinMax(minMax).max), 0)\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\treturn minMax;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetPrecision(precision = \"max\") {\r\n\t\tif (typeof this.details === 'undefined') {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tif (this.details === null) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\treturn this.details.getPrecision(precision);\r\n\t}\r\n\r\n}","\r\nexport default class StripeData {\r\n\r\n\tconstructor(\r\n\t\t{\r\n\t\t\tvalue,\r\n\t\t\tcolor,\r\n\t\t\tright: {\r\n\t\t\t\tvalue: leftValue,\r\n\t\t\t\tcolor: leftColor\r\n\t\t\t} = {},\r\n\t\t\tleft: {\r\n\t\t\t\tvalue: rightValue,\r\n\t\t\t\tcolor: rightColor\r\n\t\t\t} = {}\r\n\t\t}\r\n\t) {\r\n\t\tif (typeof value === 'undefined') {\r\n\t\t\tif (typeof leftValue === 'undefined') throw \"value or leftValue is required parameter\";\r\n\t\t\tif (typeof rightValue === 'undefined') throw \"value or rightValue is required parameter\";\r\n\r\n\t\t\tthis._right = {\r\n\t\t\t\tvalue: leftValue,\r\n\t\t\t\tcolor: leftColor\r\n\t\t\t};\r\n\t\t\tthis._left = {\r\n\t\t\t\tvalue: rightValue,\r\n\t\t\t\tcolor: rightColor\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._value = value;\r\n\t\t\tthis._color = color;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {StripeData} stripeData\r\n\t */\r\n\tstatic copyAs(stripeData) {\r\n\t\tif (stripeData.dual) {\r\n\t\t\treturn new StripeData({\r\n\t\t\t\tright: stripeData.right,\r\n\t\t\t\tleft: stripeData.left\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\treturn new StripeData({\r\n\t\t\t\tvalue: stripeData.value,\r\n\t\t\t\tcolor: stripeData.color,\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tget dual() {\r\n\t\treturn (typeof this._value === 'undefined');\r\n\t}\r\n\r\n\tget value() {\r\n\t\treturn this._value;\r\n\t}\r\n\tset value(value) {\r\n\t\tthis._value = value;\r\n\t}\r\n\r\n\tget color() {\r\n\t\treturn this._color;\r\n\t}\r\n\tset color(color) {\r\n\t\tthis._color = color;\r\n\t}\r\n\r\n\tget left() {\r\n\t\treturn this._left;\r\n\t}\r\n\tset left(leftData) {\r\n\t\tthis._left = leftData;\r\n\t}\r\n\r\n\tget right() {\r\n\t\treturn this._right;\r\n\t}\r\n\tset right(rightData) {\r\n\t\tthis._right = rightData;\r\n\t}\r\n\r\n\tcalculateMinMax(minMax = \"sum\") {\r\n\r\n\t\tif (this.dual) {\r\n\t\t\tif (minMax === \"sum\") {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmin: Math.min(0, this.left.value, this.right.value),\r\n\t\t\t\t\tmax: Math.max(0, this.left.value + this.right.value)\r\n\t\t\t\t}\r\n\t\t\t} else if (minMax === \"auto\") {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmin: Math.min(0, this.left.value, this.right.value),\r\n\t\t\t\t\tmax: Math.max(0, this.left.value, this.right.value)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn minMax;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\tif (minMax === \"sum\" || minMax === \"auto\") {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmin: Math.min(0, this.value),\r\n\t\t\t\t\tmax: Math.max(0, this.value)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\treturn minMax;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n}","import BarchartData from \"./data/BarchartData\";\r\nimport DetailsData from \"./data/DetailsData\";\r\nimport TooltipData from \"./data/TooltipData\";\r\nimport BarData from \"./data/BarData\";\r\nimport StripeData from \"./data/StripeData\";\r\n\r\nclass JsonDataConverter {\r\n\r\n\tconvert(barchartJsonData) {\r\n\r\n\t\tlet detailsData;\r\n\t\tif (typeof barchartJsonData.details !== 'undefined') {\r\n\t\t\tlet tooltipsData;\r\n\t\t\tif (typeof barchartJsonData.details.tooltips !== 'undefined') {\r\n\t\t\t\ttooltipsData = barchartJsonData.details.tooltips.map(\r\n\t\t\t\t\ttooltipJsonData => new TooltipData(tooltipJsonData)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tdetailsData = new DetailsData(barchartJsonData.details, tooltipsData);\r\n\t\t}\r\n\r\n\t\tconst barsData = barchartJsonData.bars.map(barJsonData => {\r\n\r\n\t\t\tlet detailsData;\r\n\t\t\tif (typeof barJsonData.details !== 'undefined') {\r\n\t\t\t\tlet tooltipsData;\r\n\t\t\t\tif (typeof barJsonData.details.tooltips !== 'undefined') {\r\n\t\t\t\t\ttooltipsData = barJsonData.details.tooltips.map(\r\n\t\t\t\t\t\ttooltipJsonData => new TooltipData(tooltipJsonData)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tdetailsData = new DetailsData(barJsonData.details, tooltipsData);\r\n\t\t\t}\r\n\r\n\t\t\tconst stripesData = barJsonData.stripes.map(stripeJsonData => new StripeData(stripeJsonData));\r\n\r\n\t\t\treturn new BarData(barJsonData, detailsData, stripesData);\r\n\t\t});\r\n\r\n\t\tconst barchartData = new BarchartData(barchartJsonData, detailsData, barsData);\r\n\r\n\t\treturn barchartData;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default JsonDataConverter;\r\n","import style from \"../Barchart.css\";\r\nimport * as d3 from \"d3\";\r\nimport Observable from \"../../utils/Observable\";\r\nimport JsonDataConverter from \"../JsonDataConverter\";\r\n\r\nlet MASK_INDEX = 0;\r\n\r\nclass Component {\r\n\r\n\tconstructor(\r\n\t\twidth,\r\n\t\theight,\r\n\t\tclassName = \"component\",\r\n\t\talignRight = false,\r\n\t\talignBottom = false\r\n\t) {\r\n\t\tthis._width = width;\r\n\t\tthis._height = height;\r\n\t\tthis._container = null;\r\n\t\tthis._maskIndex = MASK_INDEX++;\r\n\t\tthis._className = className;\r\n\t\tthis._observable = new Observable([\r\n\t\t\t\"enter\",\r\n\t\t\t\"leave\",\r\n\t\t\t\"click\"\r\n\t\t]);\r\n\t\tthis._alignRight = alignRight;\r\n\t\tthis._alignBottom = alignBottom;\r\n\r\n\t\tthis._data = null;\r\n\t}\r\n\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\toff(eventName, handler) {\r\n\t\tthis._observable.off(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tget width() {\r\n\t\treturn this._width;\r\n\t}\r\n\r\n\tget height() {\r\n\t\treturn this._height;\r\n\t}\r\n\r\n\tget className() {\r\n\t\treturn this._className;\r\n\t}\r\n\r\n\tget container() {\r\n\t\treturn this._container;\r\n\t}\r\n\r\n\tget alignRight() {\r\n\t\treturn this._alignRight;\r\n\t}\r\n\r\n\tget alignBottom() {\r\n\t\treturn this._alignBottom;\r\n\t}\r\n\r\n\tget data() {\r\n\t\treturn this._data;\r\n\t}\r\n\r\n\tset width(value) {\r\n\t\tthis._width = value;\r\n\t\tif (this.isRendered()) {\r\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"width\", value);\r\n\t\t}\r\n\t\tif (this.alignRight) {\r\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"x\", -value);\r\n\t\t}\r\n\t}\r\n\r\n\tset height(value) {\r\n\t\tthis._height = value;\r\n\t\tif (this.isRendered()) {\r\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"height\", value);\r\n\t\t}\r\n\t\tif (this.alignBottom) {\r\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"y\", -value);\r\n\t\t}\r\n\t}\r\n\r\n\t_renderContainer(selector, x = 0, y = 0){\r\n\r\n\t\treturn d3.select(selector).append(\"g\")\r\n\t\t\t.attr(\"class\", style[this.className])\r\n\t\t\t.attr(\"transform\", `translate(${x}, ${y})`)\r\n\r\n\t}\r\n\r\n\trender(selector, x = 0, y = 0, index = 0){\r\n\t\tthis.destroy();\r\n\r\n\t\tthis._container = this._renderContainer(selector, x, y);\r\n\r\n\t\tthis._container.datum(index);\r\n\r\n\t\tthis._container\r\n\t\t\t.on(\"click\", (index) => {\r\n\t\t\t\tthis._observable.fire(\"click\", index)\r\n\t\t\t})\r\n\t\t\t.on(\"mouseenter\", (index) => {\r\n\t\t\t\tthis._observable.fire(\"enter\", index)\r\n\t\t\t})\r\n\t\t\t.on(\"mouseleave\", (index) => {\r\n\t\t\t\tthis._observable.fire(\"leave\", index)\r\n\t\t\t});\r\n\r\n\t\tif (!this._container) {\r\n\t\t\tthrow `Component ${this._className} was not rendered. Check your selector: ${selector}`;\r\n\t\t}\r\n\r\n\t\t// clickable area\r\n\t\tconst clickableArea = this._container.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"clickable-area\"])\r\n\t\t\t.attr(\"fill\", \"transparent\")\r\n\t\t\t.attr(\"width\", this.width)\r\n\t\t\t.attr(\"height\", this.height);\r\n\r\n\t\tif (this.alignBottom) {\r\n\t\t\tclickableArea.attr(\"y\", -this.height);\r\n\t\t}\r\n\t\tif (this.alignRight) {\r\n\t\t\tclickableArea.attr(\"x\", -this.width);\r\n\t\t}\r\n\r\n\t\tthis._render(index);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t_render(index){\r\n\t\t// prepared to be implemented by subclasses\r\n\t}\r\n\r\n\tdestroy(){\r\n\t\tif (this.isRendered()) {\r\n\t\t\tthis.clearData();\r\n\t\t\tthis._container.datum(null);\r\n\t\t\tthis._container.remove();\r\n\t\t\tthis._container = null;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tisRendered(){\r\n\t\treturn this._container !== null;\r\n\t}\r\n\r\n\tsetData(data) {\r\n\t\tif (!this.isRendered()) {\r\n\t\t\tthrow \"Can't call setData() when component is not rendered, please call .render() first.\"\r\n\t\t}\r\n\r\n\t\t// Is plain object = not class => convert\r\n\t\tif (data.constructor.name === \"Object\") {\r\n\t\t\tdata = new JsonDataConverter().convert(data);\r\n\t\t}\r\n\r\n\t\tthis.clearData();\r\n\t\tthis._data = data;\r\n\t\tthis._setData(data);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tclearData() {\r\n\t\tif (!this.isRendered()) {\r\n\t\t\tthrow \"Can't call clearData() when widget is not rendered, please call .render() first.\"\r\n\t\t}\r\n\t\tthis._clearData();\r\n\t\tthis._data = null;\r\n\t\treturn this;\r\n\t}\r\n\r\n\t_setData(data) {\r\n\t\t// prepared to be implemented by subclasses\r\n\t}\r\n\r\n\t_clearData() {\r\n\t\t// prepared to be implemented by subclasses\r\n\t}\r\n}\r\n\r\nexport default Component;\r\n","/**\r\n * @public\r\n * Returns element text width\r\n * @param {element} element\r\n * @param {canvas} canvas\r\n * @returns {number} text width in pixels\r\n */\r\nexport function calculateTextWidth(element, canvas) {\r\n\r\n    const context = canvas.node().getContext(\"2d\");\r\n\r\n    const style = window.getComputedStyle(element.node());\r\n    const fontStyle = style.getPropertyValue(\"font-style\");\r\n    const fontVariant = style.getPropertyValue(\"font-variant\");\r\n    const fontWeight = style.getPropertyValue(\"font-weight\");\r\n    const fontStrech = style.getPropertyValue(\"font-strech\");\r\n    const fontSize = style.getPropertyValue(\"font-size\");\r\n    const fontFamily = style.getPropertyValue(\"font-family\");\r\n    context.font = `${fontStyle} ${fontVariant} ${fontWeight} ${fontStrech} ${fontSize} ${fontFamily}`;\r\n\r\n    var metrics = context.measureText(element.text());\r\n\r\n    return metrics.width;\r\n}","import * as Defaults from \"../defaults/BarchartDefaults\";\r\nimport Component from \"./Component\";\r\nimport style from \"../Barchart.css\";\r\nimport * as d3 from \"d3\";\r\nimport * as CleverChartsUtils from \"../../utils/CleverChartsUtils\";\r\n\r\nclass Tooltip extends Component {\r\n\r\n\tconstructor(\r\n\t\t{\r\n\t\t\tfontSize = Defaults.TOOLTIP_FONT_SIZE,\r\n\t\t\twidth = fontSize,\r\n\t\t\theight = fontSize,\r\n\t\t\tsymbol,\r\n\t\t\tactiveColor = Defaults.ACTIVE_COLORS[0],\r\n\t\t\tformat = Defaults.FORMAT,\r\n\t\t\tspace = Defaults.TOOLTIP_SPACE\r\n\t\t}\r\n\t) {\r\n\t\tsuper(width, height, \"tooltip\", true, true);\r\n\t\tthis._fontSize = fontSize;\r\n\t\tthis._symbol = symbol;\r\n\t\tthis._activeColor = activeColor;\r\n\t\tthis._format = format;\r\n\t\tthis._space = space;\r\n\r\n\t\tthis._canvas;\r\n\t}\r\n\r\n\t_render() {\r\n\r\n\t\tthis.container.append(\"text\")\r\n\t\t\t.text(\"-\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-text\"])\r\n\t\t\t.attr(\"text-anchor\",\"end\")\r\n\t\t\t.attr(\"font-size\", this.fontSize);\r\n\r\n\t\tif (d3.select(\".text-width-helper\").empty()) {\r\n\t\t\tthis._canvas = d3.select(\"body\")\r\n\t\t\t\t.append('canvas')\r\n\t\t\t\t.attr(\"class\", \"text-width-helper\")\r\n\t\t\t\t.style(\"display\",\"none\")\r\n\t\t\t\t.text(\"Helper element for computing text width\");\r\n\t\t} else {\r\n\t\t\tthis._canvas = d3.select(\".text-width-helper\");\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @param {TooltipData} data\r\n\t */\r\n\t_setData(data) {\r\n\r\n\t\tlet format = this.format;\r\n\t\tif (!this.format.includes('.')) {\r\n\t\t\tconst spec = d3.formatSpecifier(this.format);\r\n\t\t\tspec.precision = data.getPrecision(\"max\");\r\n\t\t\tformat = spec.toString();\r\n\t\t}\r\n\r\n\t\tlet text = data.text;\r\n\t\tif (data.isNumber()) {\r\n\t\t\ttext = d3.format(format)(data.text);\r\n\t\t}\r\n\r\n\t\tconst tooltipText = this.container.select(`.${style[\"tooltip-text\"]}`)\r\n\t\t\t.text(text);\r\n\r\n\t\tlet tooltipWidth = CleverChartsUtils.calculateTextWidth(tooltipText, this._canvas);\r\n\r\n\t\tif (data.symbol || this.symbol) {\r\n\r\n\t\t\tlet color;\r\n\t\t\tif (data.color instanceof Array) {\r\n\t\t\t\tthis._renderTwoColoredFill(data.color[0], data.color[1]);\r\n\t\t\t\tcolor = \"url(#two-colored-symbol-\"+this._maskIndex+\")\";\r\n\t\t\t} else if (this.activeColor instanceof Array) {\r\n\t\t\t\tthis._renderTwoColoredFill(this.activeColor[0], this.activeColor[1]);\r\n\t\t\t\tcolor = \"url(#two-colored-symbol-\"+this._maskIndex+\")\";\r\n\t\t\t} else {\r\n\t\t\t\tcolor = data.color ? data.color : this.activeColor;\r\n\t\t\t}\r\n\r\n\t\t\tconst symbol = data.symbol ? data.symbol : this.symbol;\r\n\r\n\t\t\tif (symbol === \"_circle\") {\r\n\r\n\t\t\t\tthis.container.append(\"circle\")\r\n\t\t\t\t\t.attr(\"r\", 3)\r\n\t\t\t\t\t.attr(\"fill\", color)\r\n\t\t\t\t\t.attr(\"cx\", -tooltipWidth - this.space)\r\n\t\t\t\t\t.attr(\"cy\", -this.fontSize/3);\r\n\r\n\t\t\t\ttooltipWidth += 6 + this.space;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst tooltipSymbol = this.container.append(\"text\")\r\n\t\t\t\t\t.text(data.symbol ? data.symbol : this.symbol)\r\n\t\t\t\t\t.attr(\"class\", style[\"symbol\"])\r\n\t\t\t\t\t.attr(\"text-anchor\",\"end\")\r\n\t\t\t\t\t.attr(\"font-size\", this.fontSize)\r\n\t\t\t\t\t.attr(\"fill\", color)\r\n\t\t\t\t\t.attr(\"x\", -tooltipWidth - this.space);\r\n\r\n\t\t\t\ttooltipWidth += CleverChartsUtils.calculateTextWidth(tooltipSymbol, this._canvas) + this.space;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tthis.width = tooltipWidth;\r\n\t}\r\n\r\n\t_renderTwoColoredFill(color1, color2) {\r\n\r\n\t\tconst twoColoredFill = this.container.append(\"pattern\")\r\n\t\t\t.attr(\"id\", \"two-colored-symbol-\"+this._maskIndex)\r\n\t\t\t.attr(\"width\", \"1\")\r\n\t\t\t.attr(\"height\", \"1\")\r\n\t\t\t.attr(\"patternContentUnits\", \"objectBoundingBox\");\r\n\r\n\t\ttwoColoredFill.append('rect')\r\n\t\t\t.attr('fill', color1)\r\n\t\t\t.attr(\"width\", \"1\")\r\n\t\t\t.attr(\"height\", \"1\");\r\n\r\n\t\ttwoColoredFill.append('path')\r\n\t\t\t.attr('fill', color2)\r\n\t\t\t.attr('d', 'M0,0 L1,0 L1,1 Z');\r\n\t}\r\n\r\n\t_clearData() {\r\n\t\tthis.container.select(`.${style[\"tooltip-text\"]}`)\r\n\t\t\t.text(\"-\");\r\n\r\n\t\tthis.container.select(`.${style[\"symbol\"]}`).remove()\r\n\t}\r\n\r\n\tget fontSize() {\r\n\t\treturn this._fontSize;\r\n\t}\r\n\r\n\tget symbol() {\r\n\t\treturn this._symbol;\r\n\t}\r\n\r\n\tget activeColor() {\r\n\t\treturn this._activeColor;\r\n\t}\r\n\r\n\tget format() {\r\n\t\treturn this._format;\r\n\t}\r\n\r\n\tget space() {\r\n\t\treturn this._space;\r\n\t}\r\n}\r\n\r\nexport default Tooltip;\r\n","import * as Defaults from \"../defaults/BarchartDefaults\";\r\nimport Component from \"./Component\";\r\nimport style from \"../Barchart.css\";\r\nimport * as d3 from \"d3\";\r\nimport * as CleverChartsUtils from \"../../utils/CleverChartsUtils\";\r\n\r\nclass OnlyTool extends Component {\r\n\r\n\tconstructor(\r\n\t\t{\r\n\t\t\tfontSize = Defaults.TOOLTIP_FONT_SIZE,\r\n\t\t\tonlyToolText = Defaults.ONLY_TOOL_TEXT,\r\n\t\t\twidth = fontSize,\r\n\t\t\theight = fontSize,\r\n\t\t}\r\n\t) {\r\n\t\tsuper(width, height, \"onlyTool\", true, true);\r\n\t\tthis._fontSize = fontSize;\r\n\t\tthis._onlyToolText = onlyToolText;\r\n\r\n\t\tthis._canvas;\r\n\t}\r\n\r\n\t_render() {\r\n\r\n\t\tthis._onlyToolTextSvg = this.container.append(\"text\")\r\n\t\t\t.text(this.onlyToolText)\r\n\t\t\t.attr(\"class\", style[\"onlyTool\"])\r\n\t\t\t.attr(\"x\", \"-7\")\r\n\t\t\t.attr(\"text-anchor\",\"end\")\r\n\t\t\t.attr(\"font-size\", this.fontSize);\r\n\r\n\t\tif (d3.select(\".text-width-helper\").empty()) {\r\n\t\t\tthis._canvas = d3.select(\"body\")\r\n\t\t\t\t.append('canvas')\r\n\t\t\t\t.attr(\"class\", \"text-width-helper\")\r\n\t\t\t\t.style(\"display\",\"none\")\r\n\t\t\t\t.text(\"Helper element for computing text width\");\r\n\t\t} else {\r\n\t\t\tthis._canvas = d3.select(\".text-width-helper\");\r\n\t\t}\r\n\r\n\t\tthis.width = CleverChartsUtils.calculateTextWidth(this._onlyToolTextSvg, this._canvas) + 14;\r\n\t}\r\n\r\n\tget onlyToolText() {\r\n\t\treturn this._onlyToolText;\r\n\t}\r\n\r\n\tget fontSize() {\r\n\t\treturn this._fontSize;\r\n\t}\r\n}\r\n\r\nexport default OnlyTool;\r\n","import * as Defaults from \"../defaults/BarchartDefaults\";\r\nimport Component from \"./Component\";\r\nimport style from \"../Barchart.css\";\r\nimport * as d3 from \"d3\";\r\nimport Tooltip from \"./Tooltip\";\r\nimport OnlyTool from \"./OnlyTool\";\r\nimport * as CleverChartsUtils from \"../../utils/CleverChartsUtils\";\r\n\r\nclass Details extends Component {\r\n\r\n\tconstructor(\r\n\t\t{\r\n\t\t\twidth = Defaults.WIDTH,\r\n\t\t\theight = labelFontSize + 10,\r\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\r\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\r\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\r\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\r\n\t\t\tformat = Defaults.FORMAT,\r\n\t\t\tshowOnlyTool = Defaults.SHOW_ONLY_TOOL,\r\n\t\t\tonlyToolText = Defaults.ONLY_TOOL_TEXT,\r\n\t\t\tenableToggle = Defaults.ENABLE_BAR_TOGGLE\r\n\t\t}\r\n\t) {\r\n\t\tsuper(width, height, \"details\");\r\n\t\tthis._labelFontSize = labelFontSize;\r\n\t\tthis._tooltipFontSize = tooltipFontSize;\r\n\t\tthis._tooltipSymbol = tooltipSymbol;\r\n\t\tthis._activeColors = activeColors;\r\n\t\tthis._format = format;\r\n\t\tthis._showOnlyTool = showOnlyTool;\r\n\t\tthis._onlyToolText = onlyToolText;\r\n\t\tthis._enableToggle = enableToggle;\r\n\r\n\t\tthis._tooltips;\r\n\t\tthis._tooltipsBackground;\r\n\t\tthis._label;\r\n\r\n\t\tthis._tipWrapper;\r\n\t\tthis._tip;\r\n\t\tthis._canvas;\r\n\r\n\t\tthis._observable\r\n\t\t\t.add(\"selectOnly\");\r\n\t}\r\n\r\n\t_render() {\r\n\r\n\t\tthis._label = this.container.append(\"text\")\r\n\t\t\t.text(\"\")\r\n\t\t\t.attr(\"class\", style[\"label\"])\r\n\t\t\t.attr(\"x\", Defaults.HORIZONTAL_PADDING)\r\n\t\t\t.attr(\"y\", this.labelFontSize)\r\n\t\t\t.attr(\"font-size\", this.labelFontSize);\r\n\r\n\t\tconst gradient = this.container.append(\"linearGradient\")\r\n\t\t\t.attr(\"id\", \"tooltips-background\");\r\n\r\n\t\tgradient.append(\"stop\")\r\n\t\t\t.attr(\"offset\", \"0%\")\r\n\t\t\t.attr(\"stop-color\", \"white\")\r\n\t\t\t.attr(\"stop-opacity\", \"0\");\r\n\t\tgradient.append(\"stop\")\r\n\t\t\t.attr(\"offset\", \"100%\")\r\n\t\t\t.attr(\"stop-color\", \"white\")\r\n\t\t\t.attr(\"stop-opacity\", \"1\");\r\n\r\n\t\tif (d3.select(\".text-width-helper\").empty()) {\r\n\t\t\tthis._canvas = d3.select(\"body\")\r\n\t\t\t\t.append('canvas')\r\n\t\t\t\t.attr(\"class\", \"text-width-helper\")\r\n\t\t\t\t.style(\"display\",\"none\")\r\n\t\t\t\t.text(\"Helper element for computing text width\");\r\n\t\t} else {\r\n\t\t\tthis._canvas = d3.select(\".text-width-helper\");\r\n\t\t}\r\n\r\n\t\tif (d3.select('.' + style[\"tip\"]).empty()) {\r\n\t\t\tthis._tipWrapper = d3.select(\"body\").append('span')\r\n\t\t\t\t.attr(\"class\", style['tip-wrapper']);\r\n\t\t\tthis._tip = this._tipWrapper.append('span')\r\n\t\t\t\t.attr(\"class\", style['tip']);\r\n\t\t} else {\r\n\t\t\tthis._tipWrapper = d3.select('.' + style[\"tip-wrapper\"]);\r\n\t\t\tthis._tip = d3.select('.' + style[\"tip\"]);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {DetailsData} data\r\n\t */\r\n\t_setData(data) {\r\n\t\tthis._clearData();\r\n\r\n\t\tthis._label.text(data.label);\r\n\t\tthis.container.classed(style['details-disabled'], data.disabled);\r\n\r\n\t\tif (data.tooltips) {\r\n\t\t\tthis._createTooltips(data);\r\n\t\t\tthis._renderAndSetTooltipsData(data.tooltips);\r\n\t\t}\r\n\r\n\t\tif (this.showOnlyTool && this.enableToggle) {\r\n\t\t\tthis._createOnlyTool();\r\n\t\t\tthis._renderOnlyTool();\r\n\t\t}\r\n\r\n\t\tif (CleverChartsUtils.calculateTextWidth(this._label, this._canvas) > this._rightSideStart) {\r\n\t\t\tthis._handleLongLabel(this._rightSideStart);\r\n\t\t}\r\n\t}\r\n\r\n\t_createOnlyTool() {\r\n\t\tthis._onlyTool = new OnlyTool({\r\n\t\t\tfontSize: this.tooltipFontSize - 1,\r\n\t\t\tonlyToolText: this.onlyToolText\r\n\t\t});\r\n\t}\r\n\r\n\t_renderOnlyTool() {\r\n\t\tconst index = this.container.datum();\r\n\t\tthis._onlyTool.render(this.container.node(), this._rightSideStart, this.labelFontSize - 1, index)\r\n\t\t\t.on(\"click\", (index) => {\r\n\t\t\t\td3.event.stopPropagation();\r\n\t\t\t\tthis._observable.fire(\"selectOnly\", index);\r\n\t\t\t});\r\n\t\tthis._rightSideStart -= this._onlyTool.width + 24;\r\n\t}\r\n\r\n\t/**\r\n\t * @param {DetailsData} detailsData\r\n\t */\r\n\t_createTooltips(detailsData) {\r\n\t\tconst tooltipsData = detailsData.tooltips;\r\n\t\tconst tooltipsReversed = tooltipsData.slice();\r\n\t\ttooltipsReversed.reverse();\r\n\r\n\t\tlet format = this.format;\r\n\t\tif (!this.format.includes('.')) {\r\n\t\t\tconst spec = d3.formatSpecifier(this.format);\r\n\t\t\tspec.precision = detailsData.getPrecision(\"max\");\r\n\t\t\tformat = spec.toString();\r\n\t\t}\r\n\r\n\t\tthis._tooltips = tooltipsData.map((_, index) => new Tooltip({\r\n\t\t\tfontSize: this.tooltipFontSize,\r\n\t\t\tsymbol: tooltipsData.length>1 ? this.tooltipSymbol : undefined,\r\n\t\t\tactiveColor: this.activeColors[index % this.activeColors.length],\r\n\t\t\tformat: format\r\n\t\t}));\r\n\t}\r\n\r\n\t/**\r\n\t * @param {TooltipData[]} tooltipsData\r\n\t */\r\n\t_renderAndSetTooltipsData(tooltipsData) {\r\n\t\tlet previousTooltipX = this.width - Defaults.HORIZONTAL_PADDING;\r\n\t\tthis._tooltips.forEach((_, index) => {\r\n\t\t\tconst reversedIndex = this._tooltips.length - 1 - index;\r\n\t\t\tconst tooltipReversed = this._tooltips[reversedIndex];\r\n\t\t\tconst tooltipData = tooltipsData[reversedIndex];\r\n\r\n\t\t\ttooltipReversed.render(this.container.node(), previousTooltipX, this.labelFontSize, reversedIndex);\r\n\t\t\ttooltipReversed.setData(tooltipData);\r\n\r\n\t\t\tpreviousTooltipX -= tooltipReversed.width + 24;\r\n\t\t});\r\n\r\n\t\tthis._rightSideStart = previousTooltipX + 12;\r\n\t}\r\n\r\n\t_handleLongLabel(maxWidth) {\r\n\t\t// render white background under values\r\n\t\tthis._tooltipsBackground = this.container\r\n\t\t\t.insert(\"g\", \"g.\" + style[\"tooltip\"]);\r\n\r\n\t\tconst gradientWidth = 40;\r\n\t\tconst xOffset = -10;\r\n\t\tthis._tooltipsBackground\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"x\", maxWidth - xOffset)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"width\", this.width - maxWidth + xOffset)\r\n\t\t\t.attr(\"height\", this.height)\r\n\t\t\t.attr(\"fill\", \"white\");\r\n\t\tthis._tooltipsBackground\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"x\", maxWidth - xOffset - gradientWidth)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"width\", gradientWidth + 1) // 1 px extra looks better\r\n\t\t\t.attr(\"height\", this.height)\r\n\t\t\t.attr(\"fill\", \"url(#tooltips-background)\");\r\n\r\n\t\t// handle label tooltips\r\n\t\tthis._label.on(\"mouseenter\", () => {\r\n\t\t\tconst right = document.documentElement.getBoundingClientRect().width\r\n\t\t\t\t- this._getOffset(this._label.node()).left;\r\n\t\t\tthis._tipWrapper\r\n\t\t\t\t.style(\"right\", right + \"px\")\r\n\t\t\t\t.style(\"top\", this._getOffset(this._label.node()).top + \"px\");\r\n\t\t\tthis._tip\r\n\t\t\t\t.text(this._label.text())\r\n\t\t\t\t.style(\"transition-delay\", \".5s\")\r\n\t\t\t\t.style(\"transform\", \"scale(1)\")\r\n\t\t});\r\n\t\tthis._label.on(\"mouseleave\", () => {\r\n\t\t\tthis._tip\r\n\t\t\t\t.style(\"transition-delay\", \"0s\")\r\n\t\t\t\t.style(\"transform\", \"scale(0)\");\r\n\t\t});\r\n\t}\r\n\r\n\t_getOffset(el) {\r\n\t\tconst rect = el.getBoundingClientRect();\r\n\t\treturn {\r\n\t\t\tleft: rect.left + window.scrollX,\r\n\t\t\ttop: rect.top + window.scrollY\r\n\t\t};\r\n\t}\r\n\r\n\t_clearData() {\r\n\t\tthis.container.select(`.${style[\"label\"]}`).text(\"-\");\r\n\t\tthis.container.selectAll(`.${style[\"tooltip\"]}`).remove();\r\n\t}\r\n\r\n\tget labelFontSize() {\r\n\t\treturn this._labelFontSize;\r\n\t}\r\n\r\n\tget tooltipFontSize() {\r\n\t\treturn this._tooltipFontSize;\r\n\t}\r\n\r\n\tget tooltipSymbol() {\r\n\t\treturn this._tooltipSymbol;\r\n\t}\r\n\r\n\tget activeColors() {\r\n\t\treturn this._activeColors;\r\n\t}\r\n\tset activeColors(activeColors) {\r\n\t\tthis._activeColors = activeColors;\r\n\t}\r\n\r\n\tget format() {\r\n\t\treturn this._format;\r\n\t}\r\n\tset format(format) {\r\n\t\tthis._format = format;\r\n\t}\r\n\r\n\tget tooltips() {\r\n\t\treturn this._tooltips;\r\n\t}\r\n\r\n\tget showOnlyTool() {\r\n\t\treturn this._showOnlyTool;\r\n\t}\r\n\r\n\tget onlyToolText() {\r\n\t\treturn this._onlyToolText;\r\n\t}\r\n\r\n\tget enableToggle() {\r\n\t\treturn this._enableToggle;\r\n\t}\r\n}\r\n\r\nexport default Details;\r\n","import * as Defaults from \"../defaults/BarchartDefaults\";\r\nimport Component from \"./Component\";\r\nimport * as d3 from \"d3\";\r\nimport style from \"../Barchart.css\";\r\n\r\nlet COLOR_PATTERN_INDEX = 0;\r\n\r\nclass Stripe extends Component {\r\n\r\n\tconstructor(\r\n\t\t{\r\n\t\t\twidth = Defaults.WIDTH,\r\n\t\t\theight = Defaults.STRIPE_HEIGHT,\r\n\t\t\tbackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR,\r\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\r\n\t\t\tdualValue = Defaults.DUAL_VALUE,\r\n\t\t\tminMax = Defaults.MINMAX,\r\n\t\t\ttopCornerRounded = Defaults.CORNER_ROUNDED,\r\n\t\t\tbottomCornerRounded = Defaults.CORNER_ROUNDED,\r\n\t\t\tcondensed = Defaults.DETAILS_HIDDEN\r\n\t\t}) {\r\n\t\tsuper(width, height, \"stripe\");\r\n\t\tthis._backgroundColor = backgroundColor;\r\n\t\tthis._activeColors = activeColors;\r\n\t\tthis._dualValue = dualValue;\r\n\t\tthis._minMax = minMax;\r\n\t\tthis._topCornerRounded = topCornerRounded;\r\n\t\tthis._bottomCornerRounded = bottomCornerRounded;\r\n\t\tthis._condensed = condensed;\r\n\t}\r\n\r\n\tget dualValue() {\r\n\t\treturn this._dualValue;\r\n\t}\r\n\r\n\tget backgroundColor() {\r\n\t\treturn this._backgroundColor;\r\n\t}\r\n\r\n\tget activeColors() {\r\n\t\treturn this._activeColors;\r\n\t}\r\n\r\n\tget minMax() {\r\n\t\treturn this._minMax;\r\n\t}\r\n\r\n\tget topCornerRounded() {\r\n\t\treturn this._topCornerRounded;\r\n\t}\r\n\r\n\tget bottomCornerRounded() {\r\n\t\treturn this._bottomCornerRounded;\r\n\t}\r\n\r\n\tget condensed() {\r\n\t\treturn this._condensed;\r\n\t}\r\n\r\n\t_render() {\r\n\r\n\t\tconst clipPath = this.container.append(\"clipPath\")\r\n\t\t\t.attr(\"id\", \"rounded-corners-\"+this._maskIndex);\r\n\r\n        if (this.topCornerRounded && this.bottomCornerRounded) {\r\n            clipPath\r\n                .append(\"rect\")\r\n                .attr(\"width\", this.width)\r\n                .attr(\"height\", this.height)\r\n                .attr(\"rx\", Math.min(this.width, this.height)/2)\r\n                .attr(\"ry\", Math.min(this.width, this.height)/2);\r\n        } else if (!this.topCornerRounded && !this.bottomCornerRounded) {\r\n            clipPath\r\n                .append(\"rect\")\r\n                .attr(\"width\", this.width)\r\n                .attr(\"height\", this.height);\r\n        } else {\r\n            clipPath\r\n                .append(\"rect\")\r\n                .attr(\"width\", this.width - 2*this.height)\r\n                .attr(\"height\", this.height)\r\n                .attr(\"x\", this.height);\r\n            if (this.topCornerRounded) {\r\n                clipPath\r\n                    .append(\"circle\")\r\n                    .attr(\"cx\", this.height)\r\n                    .attr(\"cy\", this.height)\r\n                    .attr(\"r\", this.height);\r\n                clipPath\r\n                    .append(\"circle\")\r\n                    .attr(\"cx\", this.width - this.height)\r\n                    .attr(\"cy\", this.height)\r\n                    .attr(\"r\", this.height);\r\n            }\r\n            if (this.bottomCornerRounded) {\r\n                clipPath\r\n                    .append(\"circle\")\r\n                    .attr(\"cx\", this.height)\r\n                    .attr(\"cy\", 0)\r\n                    .attr(\"r\", this.height);\r\n                clipPath\r\n                    .append(\"circle\")\r\n                    .attr(\"cx\", this.width - this.height)\r\n                    .attr(\"cy\", 0)\r\n                    .attr(\"r\", this.height);\r\n            }\r\n        }\r\n\r\n\t\tthis._renderProgress(0, this.width, this.backgroundColor, \"stripe-background\");\r\n\t}\r\n\r\n\t/**\r\n\t * @param {StripeData} data\r\n\t */\r\n\t_setData(data) {\r\n\r\n\t\tif (this.dualValue) {\r\n\r\n\t\t\tthis._renderStripe(0, this.width/2-0.5,\r\n\t\t\t\tdata.left.value,\r\n\t\t\t\tdata.left.color ? data.left.color : this.activeColors[1] ? this.activeColors[1] : this.activeColors[0],\r\n\t\t\t\ttrue\r\n\t\t\t);\r\n\t\t\tthis._renderStripe(this.width/2+0.5, this.width,\r\n\t\t\t\tdata.right.value,\r\n\t\t\t\tdata.right.color ? data.right.color : this.activeColors[0],\r\n\t\t\t\tfalse\r\n\t\t\t);\r\n\r\n\t\t} else {\r\n\t\t\tthis._renderStripe(0, this.width, data.value, data.color ? data.color : this.activeColors[0]);\r\n\t\t}\r\n\t}\r\n\r\n\t_clearData() {\r\n\t\tthis.container.selectAll(style[\"progress\"]).remove();\r\n\t}\r\n\r\n\r\n\t_renderXBase(x) {\r\n\r\n\t\tthis.container.append(\"line\")\r\n\t\t\t.attr(\"x1\", x)\r\n\t\t\t.attr(\"x2\", x)\r\n\t\t\t.attr(\"y1\", 0)\r\n\t\t\t.attr(\"y2\", this.condensed ? -4 : -7)\r\n\t\t\t.attr(\"stroke\", \"#C9C9C9\")\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"stroke-dasharray\", [1,2]);\r\n\r\n\t\tthis.container.append(\"line\")\r\n\t\t\t.attr(\"x1\", x)\r\n\t\t\t.attr(\"x2\", x)\r\n\t\t\t.attr(\"y1\", this.height)\r\n\t\t\t.attr(\"y2\", this.height + (this.condensed ? 4 : 7))\r\n\t\t\t.attr(\"stroke\", \"#C9C9C9\")\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"stroke-dasharray\", [1,2]);\r\n\t}\r\n\r\n\t_renderStripe(x1, x2, value, color, alignRight = false) {\r\n\r\n\t\tconst axis = d3.scaleLinear()\r\n\t\t\t.range([x1, x2]);\r\n\r\n\t\tif (alignRight) {\r\n\t\t\taxis.domain([this.minMax.max, this.minMax.min]);\r\n\t\t} else {\r\n\t\t\taxis.domain([this.minMax.min, this.minMax.max]);\r\n\t\t}\r\n\r\n\t\tconst xBase = axis(0);\r\n\r\n\t\tif (this.minMax.min < 0 && this.minMax.max > 0) {\r\n\t\t\tthis._renderXBase(xBase);\r\n\t\t}\r\n\r\n\t\tif (alignRight === value < 0) {\r\n\r\n\t\t\tthis._renderProgress(xBase, axis(value), color);\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._renderProgress(axis(value), xBase, color);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_renderProgress(x1, x2, color, className = \"progress\") {\r\n\r\n\t\tif (color instanceof Array) {\r\n\t\t\tthis._renderTwoColoredFill(color[0], color[1]);\r\n\t\t}\r\n\r\n\t\tthis.container.append(\"rect\")\r\n\t\t\t.attr(\"fill\", color instanceof Array ? \"url(#two-colored-\"+this._maskIndex+\"-\"+COLOR_PATTERN_INDEX+\")\" : color)\r\n\t\t\t.attr(\"class\", style[className])\r\n\t\t\t.attr(\"x\", x1)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"width\", x2-x1)\r\n\t\t\t.attr(\"height\", this.height)\r\n\t\t\t.attr(\"transform\", \"translate(\" + 0 + \", \" + 0 + \")\")\r\n\t\t\t.attr(\"clip-path\", \"url(#rounded-corners-\"+this._maskIndex+\")\");\r\n\r\n\t}\r\n\r\n\t_renderTwoColoredFill(color1, color2) {\r\n\r\n\t\tCOLOR_PATTERN_INDEX++;\r\n\r\n\t\tconst twoColoredFill = this.container.append(\"pattern\")\r\n\t\t\t.attr(\"id\", \"two-colored-\"+this._maskIndex+\"-\"+COLOR_PATTERN_INDEX)\r\n\t\t\t.attr(\"width\", \"20\")\r\n\t\t\t.attr(\"height\", \"20\")\r\n\t\t\t.attr(\"patternUnits\", \"userSpaceOnUse\");\r\n\r\n\t\ttwoColoredFill.append('rect')\r\n\t\t\t.attr('fill', color1)\r\n\t\t\t.attr(\"width\", \"20\")\r\n\t\t\t.attr(\"height\", \"20\");\r\n\r\n\t\ttwoColoredFill.append('path')\r\n\t\t\t.attr('fill', color2)\r\n\t\t\t.attr('d', 'M20,0 L10,0 L20,10 Z');\r\n\t\ttwoColoredFill.append('path')\r\n\t\t\t.attr('fill', color2)\r\n\t\t\t.attr('d', 'M0,0 L20,20 L10,20 L0,10 Z');\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default Stripe;\r\n","import * as Defaults from \"../defaults/BarchartDefaults\";\r\nimport Component from \"./Component\";\r\nimport Details from \"./Details\";\r\nimport Stripe from \"./Stripe\";\r\nimport style from \"../Barchart.css\";\r\nimport DetailsData from \"../data/DetailsData\";\r\n\r\nclass Bar extends Component {\r\n\r\n\tconstructor(\r\n\t\t{\r\n\t\t\twidth = Defaults.WIDTH,\r\n\t\t\theight = Defaults.BAR_HEIGHT,\r\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\r\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\r\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\r\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\r\n\t\t\tminMax = Defaults.MINMAX,\r\n\t\t\tdetailsHidden = Defaults.DETAILS_HIDDEN,\r\n\t\t\tdetailsHeight = labelFontSize + 10,\r\n\t\t\tenableHover = Defaults.ENABLE_BAR_HOVER,\r\n\t\t\tenableToggle = Defaults.ENABLE_BAR_TOGGLE,\r\n\t\t\tdualValue = Defaults.DUAL_VALUE,\r\n\t\t\tdisabled = Defaults.BAR_DISABLED,\r\n\t\t\tformat = Defaults.FORMAT,\r\n\t\t\tstripeBackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR,\r\n\t\t\tshowOnlyTool = Defaults.SHOW_ONLY_TOOL,\r\n\t\t\tonlyToolText = Defaults.ONLY_TOOL_TEXT\r\n\t\t}\r\n\t) {\r\n\t\tsuper(width, height, \"bar\");\r\n\t\tthis._labelFontSize = labelFontSize;\r\n\t\tthis._tooltipFontSize = tooltipFontSize;\r\n\t\tthis._tooltipSymbol = tooltipSymbol;\r\n\t\tthis._activeColors = activeColors;\r\n\t\tthis._minMax = minMax;\r\n\t\tthis._detailsHidden = detailsHidden;\r\n\t\tthis._detailsHeight = detailsHeight;\r\n\t\tthis._enableHover = enableHover;\r\n\t\tthis._enableToggle = enableToggle;\r\n\t\tthis._dualValue = dualValue;\r\n\t\tthis._disabled = disabled;\r\n\t\tthis._format = format;\r\n\t\tthis._stripeBackgroundColor = stripeBackgroundColor;\r\n\t\tthis._showOnlyTool = showOnlyTool;\r\n\t\tthis._onlyToolText = onlyToolText;\r\n\r\n\t\tthis._details;\r\n\t\tthis._stripes;\r\n\r\n\t\tthis._observable\r\n\t\t\t.add(\"disabled\")\r\n\t\t\t.add(\"selectOnly\");\r\n\t}\r\n\r\n\t_render() {\r\n\t\tif (!this.detailsHidden) {\r\n\t\t\tthis._createDetails();\r\n\t\t\tthis._renderDetails();\r\n\t\t}\r\n\r\n\t\tthis.container.classed(style['hover-enabled'], this.enableHover);\r\n\r\n\t\tif (this.enableToggle) {\r\n\t\t\tthis._doEnableToggle();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param {BarData} data\r\n\t */\r\n\t_setData(data) {\r\n\t\tthis._disabled = data.disabled;\r\n\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\r\n\t\tthis.container.classed(style[\"bar-highlighted\"], data.highlighted);\r\n\r\n\t\tthis._setDetailsData(data.details);\r\n\r\n\t\tthis._createStripes(data);\r\n\t\tthis._renderStripes();\r\n\t\tthis._setStripesData(data);\r\n\t}\r\n\r\n\t_clearData() {\r\n\t\tif (!this.detailsHidden) {\r\n\t\t\tthis._details.clearData();\r\n\t\t}\r\n\t}\r\n\r\n\t_setDisabledValue(data) {\r\n\t\tthis._disabled = data.disabled;\r\n\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\r\n\t}\r\n\r\n\t_createDetails() {\r\n\t\tthis._details = new Details({\r\n\t\t\twidth: this.width,\r\n\t\t\theight: this.detailsHeight,\r\n\t\t\tlabelFontSize: this.labelFontSize,\r\n\t\t\ttooltipFontSize: this.tooltipFontSize,\r\n\t\t\ttooltipSymbol: this.tooltipSymbol,\r\n\t\t\tactiveColors: this.activeColors,\r\n\t\t\tformat: this.format,\r\n\t\t\tshowOnlyTool: this.showOnlyTool,\r\n\t\t\tonlyToolText: this.onlyToolText,\r\n\t\t\tenableToggle: this.enableToggle\r\n\t\t});\r\n\t}\r\n\r\n\t_renderDetails() {\r\n\t\tconst index = this.container.datum();\r\n\t\tthis._details.render(this.container.node(), 0, 0, index)\r\n\t\t\t.on(\"selectOnly\", (index) => {\r\n\t\t\t\tthis._observable.fire(\"selectOnly\", index);\r\n\t\t\t});\r\n\t}\r\n\r\n\t_setDetailsData(detailsData) {\r\n\t\tif (this.details) {\r\n\t\t\tconst detailsDataDefault = DetailsData.copyAs(detailsData);\r\n\t\t\tthis.details.setData(detailsDataDefault);\r\n\t\t}\r\n\t}\r\n\r\n\t_createStripes(data) {\r\n\t\tconst minMax = data.calculateMinMax(this.minMax);\r\n\t\tthis._stripes = data.stripes.map((stripe, index) => {\r\n\t\t\tlet colors;\r\n\t\t\tif (data.stripes.length > 1) {\r\n\t\t\t\tcolors = [this.activeColors[index % this.activeColors.length]]\r\n\t\t\t} else {\r\n\t\t\t\tcolors = this.activeColors.slice();\r\n\t\t\t}\r\n\r\n\t\t\treturn new Stripe({\r\n\t\t\t\twidth: this.width,\r\n\t\t\t\tactiveColors: colors,\r\n\t\t\t\tdualValue: this.dualValue,\r\n\t\t\t\tminMax: minMax,\r\n\t\t\t\tbackgroundColor: this.stripeBackgroundColor,\r\n\t\t\t\ttopCornerRounded: index === 0,\r\n\t\t\t\tbottomCornerRounded: index === data.stripes.length-1,\r\n\t\t\t\tcondensed: this.detailsHidden\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t_renderStripes() {\r\n\t\tconst detailsHeight = this.detailsHidden ? 0 : this.detailsHeight;\r\n\t\tthis.stripes.forEach((stripe, index) => {\r\n\t\t\tstripe.render(this.container.node(), 0, detailsHeight + 5 * index, index);\r\n\t\t});\r\n\t}\r\n\r\n\t_setStripesData(data) {\r\n\t\tdata.stripes.forEach((stripeData, index) => this.stripes[index].setData(stripeData));\r\n\t}\r\n\r\n\t_doEnableToggle() {\r\n\t\tthis.container.attr(\"cursor\", \"pointer\");\r\n\t\tthis.on(\"click\", (index) => {\r\n\t\t\tthis._disabled = !this._disabled;\r\n\t\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\r\n\t\t\tthis._observable.fire(\"disabled\", index, this._disabled);\r\n\t\t});\r\n\t}\r\n\r\n\tget labelFontSize() {\r\n\t\treturn this._labelFontSize;\r\n\t}\r\n\r\n\tget tooltipFontSize() {\r\n\t\treturn this._tooltipFontSize;\r\n\t}\r\n\r\n\tget tooltipSymbol() {\r\n\t\treturn this._tooltipSymbol;\r\n\t}\r\n\r\n\tget activeColors() {\r\n\t\treturn this._activeColors;\r\n\t}\r\n\r\n\tget minMax() {\r\n\t\treturn this._minMax;\r\n\t}\r\n\r\n\tget detailsHidden() {\r\n\t\treturn this._detailsHidden;\r\n\t}\r\n\r\n\tget detailsHeight() {\r\n\t\treturn this._detailsHeight;\r\n\t}\r\n\r\n\tget enableToggle() {\r\n\t\treturn this._enableToggle;\r\n\t}\r\n\r\n\tget enableHover() {\r\n\t\treturn this._enableHover;\r\n\t}\r\n\r\n\tget dualValue() {\r\n\t\treturn this._dualValue;\r\n\t}\r\n\r\n\tget disabled() {\r\n\t\treturn this._disabled;\r\n\t}\r\n\r\n\tget format() {\r\n\t\treturn this._format;\r\n\t}\r\n\r\n\tget stripeBackgroundColor() {\r\n\t\treturn this._stripeBackgroundColor;\r\n\t}\r\n\r\n\r\n\tget stripes() {\r\n\t\treturn this._stripes;\r\n\t}\r\n\r\n\tget details() {\r\n\t\treturn this._details;\r\n\t}\r\n\r\n\tget showOnlyTool() {\r\n\t\treturn this._showOnlyTool;\r\n\t}\r\n\r\n\tget onlyToolText() {\r\n\t\treturn this._onlyToolText;\r\n\t}\r\n\r\n}\r\n\r\nexport default Bar;\r\n","import * as Defaults from \"../defaults/BarchartDefaults\";\r\nimport Component from \"./Component\";\r\nimport Bar from \"./Bar\";\r\nimport Details from \"./Details\";\r\nimport style from \"../Barchart.css\";\r\nimport * as d3 from \"d3\";\r\nimport BarData from \"../data/BarData\";\r\nimport TooltipData from \"../data/TooltipData\";\r\nimport DetailsData from \"../data/DetailsData\";\r\nimport BarchartData from \"../data/BarchartData\";\r\n\r\nclass Barchart extends Component {\r\n\r\n\tconstructor(\r\n\t\t{\r\n\t\t\twidth = Defaults.WIDTH,\r\n\t\t\theight = Defaults.HEIGHT,\r\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\r\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\r\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\r\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\r\n\t\t\tminMax = Defaults.MINMAX,\r\n\t\t\tdetailsVisible = Defaults.DETAILS_HIDDEN,\r\n\t\t\tdetailsHeight = labelFontSize + 10,\r\n\t\t\tdualValue = Defaults.DUAL_VALUE,\r\n\t\t\tbarHeight = Defaults.BAR_HEIGHT,\r\n\t\t\tenableBarHover = Defaults.ENABLE_BAR_HOVER,\r\n\t\t\tenableBarToggle = Defaults.ENABLE_BAR_TOGGLE,\r\n\t\t\tformat = Defaults.FORMAT,\r\n\t\t\tstripeBackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR,\r\n\t\t\tshowOnlyTool = Defaults.SHOW_ONLY_TOOL,\r\n\t\t\tonlyToolText = Defaults.ONLY_TOOL_TEXT\r\n\t\t}\r\n\t) {\r\n\t\tsuper(width, height, \"barchart\");\r\n\t\tthis._labelFontSize = labelFontSize;\r\n\t\tthis._tooltipFontSize = tooltipFontSize;\r\n\t\tthis._tooltipSymbol = tooltipSymbol;\r\n\t\tthis._activeColors = activeColors;\r\n\t\tthis._minMax = minMax;\r\n\t\tthis._detailsVisible = detailsVisible;\r\n\t\tthis._detailsHeight = detailsHeight;\r\n\t\tthis._dualValue = dualValue;\r\n\t\tthis._barHeight = barHeight;\r\n\t\tthis._enableBarHover = enableBarHover;\r\n\t\tthis._enableBarToggle = enableBarToggle;\r\n\t\tthis._format = format;\r\n\t\tthis._stripeBackgroundColor = stripeBackgroundColor;\r\n\t\tthis._showOnlyTool = showOnlyTool;\r\n\t\tthis._onlyToolText = onlyToolText;\r\n\r\n\t\tthis._details;\r\n\t\tthis._bars;\r\n\r\n\t\tthis._observable\r\n\t\t\t.add(\"barEnter\")\r\n\t\t\t.add(\"barLeave\")\r\n\t\t\t.add(\"barClick\")\r\n\t\t\t.add(\"barDisabled\")\r\n\t\t\t.add(\"barsEnter\")\r\n\t\t\t.add(\"barsLeave\")\r\n\t\t\t.add(\"selectOnly\");\r\n\r\n\t}\r\n\r\n\tisBarDisabled(index) {\r\n\t\treturn this.bars[index].disabled;\r\n\t}\r\n\r\n\tupdateData(updateFunction) {\r\n\t\tthis.setData(updateFunction(this.data));\r\n\t}\r\n\r\n\tupdateDetailsData(updateFunction) {\r\n\t\tthis.setDetailsData(updateFunction(this.details.data));\r\n\t}\r\n\r\n\tupdateBarData(index, updateFunction) {\r\n\t\tthis.setBarData(index, updateFunction(this.bars[index].data));\r\n\t}\r\n\r\n\tsetDetailsData(detailsData) {\r\n\t\tconst detailsDataDefault = DetailsData.copyAs(detailsData);\r\n\t\tthis.details.setData(detailsDataDefault);\r\n\t}\r\n\r\n\tsetBarData(index, barData) {\r\n\t\tconst barDataDefault = BarData.copyAs(barData);\r\n\r\n\t\tthis._setDefaultBarDetails(barData);\r\n\r\n\t\tthis.bars[index].setData(barDataDefault);\r\n\t}\r\n\r\n\t_setDefaultBarDetails(barData) {\r\n\r\n\t\tif (!barData.details) {\r\n\t\t\tbarData.details = new DetailsData({\r\n\t\t\t\tlabel: this.data.details.label\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (typeof barData.details.tooltips === 'undefined') {\r\n\r\n\t\t\tbarData.stripes.forEach((stripeData, index) => {\r\n\r\n\t\t\t\tlet colors;\r\n\t\t\t\tif (barData.stripes.length > 1) {\r\n\t\t\t\t\tcolors = [this.activeColors[index % this.activeColors.length]]\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcolors = this.activeColors.slice();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.dualValue) {\r\n\r\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\r\n\t\t\t\t\t\ttext: stripeData.left.value,\r\n\t\t\t\t\t\tsymbol: this.tooltipSymbol,\r\n\t\t\t\t\t\tcolor: stripeData.left.color ? stripeData.left.color : (colors[1] ? colors[1] : colors[0])\r\n\t\t\t\t\t}));\r\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\r\n\t\t\t\t\t\ttext: stripeData.right.value,\r\n\t\t\t\t\t\tsymbol: this.tooltipSymbol,\r\n\t\t\t\t\t\tcolor: stripeData.right.color ? stripeData.right.color : colors[0]\r\n\t\t\t\t\t}));\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\r\n\t\t\t\t\t\ttext: stripeData.value,\r\n\t\t\t\t\t\tsymbol: barData.stripes.length > 1 ? this.tooltipSymbol : undefined,\r\n\t\t\t\t\t\tcolor: stripeData.color ? stripeData.color : colors[0]\r\n\t\t\t\t\t}));\r\n\t\t\t\t}\r\n\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_renderContainer(selector, x = 0, y = 0){\r\n\r\n\t\tthis._svgWrapper = d3.select(selector).append(\"svg\")\r\n\t\t\t.attr(\"class\", style[this.className])\r\n\t\t\t.attr(\"width\", this.width)\r\n\t\t\t.attr(\"height\", this.height);\r\n\r\n\t\tthis._svgWrapper.style({\r\n\t\t\t'position': 'relative',\r\n\t\t\t'left': x,\r\n\t\t\t'top': y\r\n\t\t});\r\n\r\n\t\treturn this._svgWrapper.append(\"g\")\r\n\t}\r\n\r\n\t_render() {\r\n\t\tif (this.detailsVisible) {\r\n\t\t\tthis._createDetails();\r\n\t\t\tthis._renderDetails();\r\n\t\t}\r\n\r\n\t\tthis._doSelectOnly();\r\n\t}\r\n\r\n\t_doSelectOnly() {\r\n\t\tthis.on(\"selectOnly\", (onlyIndex) => {\r\n\t\t\tthis.bars.forEach((bar, index) => {\r\n\t\t\t\tconst barData = bar.data;\r\n\t\t\t\tbarData.disabled = onlyIndex !== index;\r\n\t\t\t\tbar._setDisabledValue(barData);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @param {BarchartData} data\r\n\t */\r\n\t_setData(data) {\r\n\r\n\t\tdata.bars.forEach((barData) => this._setDefaultBarDetails(barData));\r\n\r\n\t\tif (this.detailsVisible) {\r\n\t\t\tthis._adjustDetails(data);\r\n\t\t\tthis.setDetailsData(data.details);\r\n\t\t}\r\n\r\n\t\tthis._adjustHeight(data);\r\n\r\n\t\tthis._createBars(data);\r\n\r\n\t\tthis._renderBars();\r\n\r\n\t\tdata.bars.forEach((barData, index) => this.setBarData(index, barData));\r\n\t}\r\n\r\n\t_clearData() {\r\n\t\tif (this.detailsVisible) {\r\n\t\t\tthis._details.clearData();\r\n\t\t}\r\n\t\tthis._container.selectAll(`.${style[\"bar\"]}`).remove();\r\n\t}\r\n\r\n\t_adjustDetails(data) {\r\n\t\tif (!this.details.format.includes('.')) {\r\n\t\t\tconst spec = d3.formatSpecifier(this.format);\r\n\t\t\tspec.precision = data.getPrecision(\"max\");\r\n\t\t\tthis.details.format = spec.toString();\r\n\t\t}\r\n\r\n\t\tif (this.dualValue && data.details.tooltips && data.bars[0].stripes.length === 1) {\r\n\t\t\tthis.details.activeColors = this.details.activeColors.slice().reverse();\r\n\t\t}\r\n\t}\r\n\r\n\t_createDetails() {\r\n\r\n\t\tthis._details = new Details({\r\n\t\t\twidth: this.width,\r\n\t\t\theight: this.detailsHeight,\r\n\t\t\tlabelFontSize: this.labelFontSize,\r\n\t\t\ttooltipFontSize: this.tooltipFontSize,\r\n\t\t\ttooltipSymbol: this.tooltipSymbol,\r\n\t\t\tactiveColors: this.activeColors,\r\n\t\t\tformat: this.format,\r\n\t\t\tshowOnlyTool: false\r\n\t\t});\r\n\t}\r\n\r\n\t_renderDetails() {\r\n\t\tthis._details.render(this._container.node(), 0, 0);\r\n\t}\r\n\r\n\t_createBars(data) {\r\n\r\n\t\tlet format = this.format;\r\n\t\tif (!this.format.includes('.')) {\r\n\t\t\tconst spec = d3.formatSpecifier(this.format);\r\n\t\t\tspec.precision = data.getPrecision(\"max\");\r\n\t\t\tformat = spec.toString();\r\n\t\t}\r\n\r\n\t\tconst minMax = data.calculateMinMax(this.minMax);\r\n\r\n\t\tthis._bars = data.bars.map(() => new Bar({\r\n\t\t\twidth: this.width,\r\n\t\t\theight: this.barHeight,\r\n\t\t\tlabelFontSize: this.labelFontSize,\r\n\t\t\ttooltipFontSize: this.tooltipFontSize,\r\n\t\t\ttooltipSymbol: this.tooltipSymbol,\r\n\t\t\tactiveColors: this.activeColors,\r\n\t\t\tdetailsHidden: this.detailsVisible,\r\n\t\t\tdetailsHeight: this.detailsHeight,\r\n\t\t\tdualValue: this.dualValue,\r\n\t\t\tenableToggle: this.enableBarToggle,\r\n\t\t\tenableHover: this.enableBarHover,\r\n\t\t\tminMax: minMax,\r\n\t\t\tformat: format,\r\n\t\t\tstripeBackgroundColor: this.stripeBackgroundColor,\r\n\t\t\tshowOnlyTool: this.showOnlyTool,\r\n\t\t\tonlyToolText: this.onlyToolText\r\n\t\t}));\r\n\t}\r\n\r\n\t_renderBars() {\r\n\r\n\t\tconst barsContainer = this._container.append(\"g\")\r\n\t\t\t.on(\"mouseenter\", () => {\r\n\t\t\t\tthis._observable.fire(\"barsEnter\");\r\n\t\t\t})\r\n\t\t\t.on(\"mouseleave\", () => {\r\n\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\r\n\t\t\t\t\tthis.details.setData(this.data.details);\r\n\t\t\t\t}\r\n\t\t\t\tthis._observable.fire(\"barsLeave\");\r\n\t\t\t});\r\n\r\n\t\tthis.bars.forEach((bar, index) => {\r\n\r\n\t\t\tconst topDetailsWidth = (this.detailsVisible ? this.detailsHeight : 0);\r\n\r\n\t\t\tbar.render(barsContainer.node(), 0, topDetailsWidth + this.barHeight*index, index)\r\n\t\t\t\t.on(\"click\", (index) => {\r\n\t\t\t\t\tthis._observable.fire(\"barClick\", index);\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"enter\", (index) => {\r\n\t\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\r\n\t\t\t\t\t\tthis.details.setData(this.bars[index].data.details);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._observable.fire(\"barEnter\", index);\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"leave\", (index) => {\r\n\t\t\t\t\tthis._observable.fire(\"barLeave\", index);\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"disabled\", (index, disabled) => {\r\n\t\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\r\n\t\t\t\t\t\tconst detailsData = this.details.data;\r\n\t\t\t\t\t\tdetailsData.disabled = disabled;\r\n\t\t\t\t\t\tthis.details.setData(detailsData);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._observable.fire(\"barDisabled\", index, disabled);\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"selectOnly\", (index) => {\r\n\t\t\t\t\tthis._observable.fire(\"selectOnly\", index);\r\n\t\t\t\t});\r\n\t\t});\r\n\r\n\t}\r\n\r\n\t_adjustHeight(data) {\r\n\t\tlet height = data.bars.length * this.barHeight;\r\n\t\tif (this.detailsVisible) {\r\n\t\t\theight += this.detailsHeight;\r\n\t\t}\r\n\t\tthis.height = height;\r\n\t\tthis._svgWrapper.attr(\"height\", height);\r\n\t}\r\n\r\n\tget labelFontSize() {\r\n\t\treturn this._labelFontSize;\r\n\t}\r\n\r\n\tget tooltipFontSize() {\r\n\t\treturn this._tooltipFontSize;\r\n\t}\r\n\r\n\tget tooltipSymbol() {\r\n\t\treturn this._tooltipSymbol;\r\n\t}\r\n\r\n\tget activeColors() {\r\n\t\treturn this._activeColors;\r\n\t}\r\n\r\n\tget minMax() {\r\n\t\treturn this._minMax;\r\n\t}\r\n\r\n\tget detailsVisible() {\r\n\t\treturn this._detailsVisible;\r\n\t}\r\n\r\n\tget detailsHeight() {\r\n\t\treturn this._detailsHeight;\r\n\t}\r\n\r\n\tget dualValue() {\r\n\t\treturn this._dualValue;\r\n\t}\r\n\r\n\tget barHeight() {\r\n\t\treturn this._barHeight;\r\n\t}\r\n\r\n\tget enableBarHover() {\r\n\t\treturn this._enableBarHover;\r\n\t}\r\n\r\n\tget enableBarToggle() {\r\n\t\treturn this._enableBarToggle;\r\n\t}\r\n\r\n\tget format() {\r\n\t\treturn this._format;\r\n\t}\r\n\r\n\tget stripeBackgroundColor() {\r\n\t\treturn this._stripeBackgroundColor;\r\n\t}\r\n\r\n\r\n\tget details() {\r\n\t\treturn this._details;\r\n\t}\r\n\r\n\tget bars() {\r\n\t\treturn this._bars;\r\n\t}\r\n\r\n\tget showOnlyTool() {\r\n\t\treturn this._showOnlyTool;\r\n\t}\r\n\r\n\tget onlyToolText() {\r\n\t\treturn this._onlyToolText;\r\n\t}\r\n}\r\n\r\nexport default Barchart;\r\n","import style from \"./Linechart.css\";\r\nimport * as d3 from \"d3\";\r\nimport Observable from \"../utils/Observable\";\r\n\r\nclass Component {\r\n\r\n\tconstructor(\r\n\t\tclassName = \"component\"\r\n\t) {\r\n\t\tthis._container = null;\r\n\t\tthis._className = className;\r\n\t\tthis._observable = new Observable([\r\n\t\t\t\"enter\",\r\n\t\t\t\"leave\",\r\n\t\t\t\"click\"\r\n\t\t]);\r\n\r\n\t\tthis._lastData = null;\r\n\t}\r\n\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\toff(eventName, handler) {\r\n\t\tthis._observable.off(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tget className() {\r\n\t\treturn this._className;\r\n\t}\r\n\r\n\tget container() {\r\n\t\treturn this._container;\r\n\t}\r\n\r\n    get observable() {\r\n        return this._observable;\r\n    }\r\n\r\n\t_renderContainer(selector, x = 0, y = 0){\r\n\r\n\t\treturn d3.select(selector).append(\"g\")\r\n\t\t\t.attr(\"class\", style[this.className])\r\n\t\t\t.attr(\"transform\", `translate(${x}, ${y})`)\r\n\r\n\t}\r\n\r\n\trender(selector, x = 0, y = 0, index = 0){\r\n\t\tthis.destroy();\r\n\r\n\t\tthis._container = this._renderContainer(selector, x, y);\r\n\r\n        if (!this._container) {\r\n            throw `Component ${this._className} was not rendered. Check your selector: ${selector}`;\r\n        }\r\n\r\n\t\tthis._container.datum(index);\r\n\r\n\t\tthis._container\r\n\t\t\t.on(\"click\", (index) => {\r\n\t\t\t\tthis._observable.fire(\"click\", index)\r\n\t\t\t})\r\n\t\t\t.on(\"mouseenter\", (index) => {\r\n\t\t\t\tthis._observable.fire(\"enter\", index)\r\n\t\t\t})\r\n\t\t\t.on(\"mouseleave\", (index) => {\r\n\t\t\t\tthis._observable.fire(\"leave\", index)\r\n\t\t\t});\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tdestroy(){\r\n\t\tif (this.isRendered()) {\r\n            this._lastData = null;\r\n\t\t\tthis._clearData();\r\n\t\t\tthis._container.datum(null);\r\n\t\t\tthis._container.remove();\r\n\t\t\tthis._container = null;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tisRendered(){\r\n\t\treturn this._container !== null;\r\n\t}\r\n\r\n\tsetData(data) {\r\n\t\tif (!this.isRendered()) {\r\n\t\t\tthrow \"Can't call setData() when component is not rendered, please call .render() first.\"\r\n\t\t}\r\n\t\tthis._setData(this._container, data, this._lastData);\r\n\t\tthis._lastData = Object.assign({}, this._lastData, data);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t_setData(container, data, lastData) {\r\n\t\t// prepared to be implemented by subclasses\r\n\t}\r\n\r\n    _clearData(container) {\r\n        // prepared to be implemented by subclasses\r\n    }\r\n}\r\n\r\nexport default Component;\r\n","\r\nexport const WIDTH = 360;\r\nexport const HEIGHT = 200;\r\n\r\nexport const LINE_COLOR = \"#0081ff\";\r\nexport const LINE_OPACITY = 1;\r\nexport const FILL_COLOR = \"#0081ff\";\r\nexport const FILL_OPACITY = 0.1;\r\nexport const LINE_WIDTH = 3;\r\nexport const DOT_SIZE = 6;\r\n\r\nexport const HIGHLIGHT_COLOR = \"#f8e71c\";\r\n\r\nexport const LABEL_OFFSET = 23;\r\nexport const MARGIN_TOP = 13;\r\nexport const MARGIN_BOTTOM = 28;\r\n\r\nexport const AXIS_COLOR = \"#f0f0f0\";\r\nexport const ZERO_LINE_COLOR = \"#bababa\";\r\n\r\n\r\n\r\n","import style from \"./Linechart.css\";\r\nimport Component from './Component';\r\nimport {\r\n    DOT_SIZE,\r\n    FILL_COLOR,\r\n    FILL_OPACITY,\r\n    LINE_COLOR,\r\n    LINE_OPACITY,\r\n    LINE_WIDTH,\r\n    MARGIN_BOTTOM\r\n} from './LinechartDefaults';\r\nimport * as d3 from 'd3';\r\n\r\nclass LinechartLine extends Component {\r\n    constructor() {\r\n        super('linechart-line');\r\n    }\r\n\r\n    _setData(container, data, lastData) {\r\n        if (Object.keys(data).length === 1 && data.appearance) {\r\n            return this._updateAppearance(data.appearance);\r\n        }\r\n        if (Object.keys(data).length === 1 && (data.point || data.point === null)) {\r\n            const pointData = Object.assign({}, lastData, data);\r\n            return this._updatePoint(pointData);\r\n        }\r\n\r\n        this.container.selectAll(\"*\").remove();\r\n        const newData = Object.assign({}, lastData, data);\r\n        this._parts = this._renderLine(newData);\r\n        this._point = this._renderPoint();\r\n        this._updateAppearance(newData.appearance);\r\n        this._updatePoint(newData);\r\n    }\r\n\r\n    _renderPoint() {\r\n        return this.container.append(\"circle\")\r\n            .attr(\"visibility\", \"hidden\")\r\n            .attr(\"class\", style[\"tooltip-line-circle\"]);\r\n    }\r\n\r\n    _updatePoint({point, appearance, lineData, xAxis, yAxis}) {\r\n        if (!point) {\r\n            this._point.attr(\"visibility\", \"hidden\");\r\n            return;\r\n        }\r\n        lineData.forEach(item => {\r\n            if (point && item.value !== null && String(point) === String(item.id)) {\r\n                this._point\r\n                    .attr(\"visibility\", \"visible\")\r\n                    .attr(\"stroke-width\", appearance.lineWidth || LINE_WIDTH)\r\n                    .attr(\"stroke\", appearance.lineColor || LINE_COLOR)\r\n                    .attr(\"stroke-opacity\", appearance.lineOpacity || LINE_OPACITY)\r\n                    .attr(\"r\", 2.5 + (appearance.lineWidth || LINE_WIDTH)/2)\r\n                    .attr(\"transform\", \"translate(\"+xAxis(point)+\", \"+yAxis(item.value)+\")\")\r\n            }\r\n        });\r\n    }\r\n\r\n    _updateAppearance({lineColor, lineOpacity, fillColor, fillOpacity, lineWidth, dotSize}) {\r\n        this._parts.forEach(part => {\r\n            const strokeWidth = part.path.data()[0].length > 1 ? (lineWidth || LINE_WIDTH): (dotSize || DOT_SIZE);\r\n\r\n            part.path\r\n                .attr(\"stroke\", lineColor || LINE_COLOR)\r\n                .attr(\"stroke-opacity\", isNaN(lineOpacity) ? LINE_OPACITY : lineOpacity)\r\n                // note that in case of a single item, dot is rendered with a different size\r\n                .attr(\"stroke-width\", strokeWidth);\r\n\r\n            if (part.area) {\r\n                part.area\r\n                    .attr(\"fill\", fillColor || FILL_COLOR)\r\n                    .attr(\"fill-opacity\", isNaN(fillOpacity) ? FILL_OPACITY : fillOpacity);\r\n            }\r\n        });\r\n    }\r\n\r\n    _renderLine({height, xAxis, yAxis, lineData, renderAreas}) {\r\n        let minHeight = height - MARGIN_BOTTOM;\r\n        let areaZero = Math.max(Math.min(minHeight, yAxis(0)), 0);\r\n\r\n        // define the area\r\n        let area = d3.area()\r\n            .x(function(d) { return xAxis(d.id); })\r\n            .y0(areaZero)\r\n            .y1(function(d) { return yAxis(d.value); });\r\n\r\n        // define the line\r\n        let path = d3.line()\r\n            .x(function(d) { return xAxis(d.id); })\r\n            .y(function(d) { return yAxis(d.value); });\r\n\r\n        // apply grouping if needed (null or other splits)\r\n        const groupedData = this._getPartedData(lineData);\r\n\r\n        return groupedData.map(partData => {\r\n            const part = {};\r\n\r\n            // only add area if not rendering a dot\r\n            if (renderAreas && partData.length>1){\r\n                // add the area path\r\n                part.area = this.container.append(\"path\")\r\n                    .data([partData])\r\n                    .attr(\"class\", style[\"area\"])\r\n                    .attr(\"d\", area);\r\n            }\r\n\r\n            if (partData.length){\r\n\r\n                // add the line path\r\n                part.path = this.container.append(\"path\")\r\n                    .data([partData])\r\n                    .attr(\"fill\", \"none\")\r\n                    .attr(\"stroke-linecap\", \"round\")\r\n                    .attr(\"class\", style[\"line\"])\r\n                    .attr(\"d\", d => {\r\n                        const p = path(d);\r\n                        // Fix issue in Chrome on Mac and Surface where\r\n                        // path points are not rendered if it's a single point\r\n                        if (p && p.split(\",\").length == 2){\r\n                            return p + \" \" + p;\r\n                        }\r\n                        return p;\r\n                    });\r\n            }\r\n\r\n            return part;\r\n        });\r\n    }\r\n\r\n    _getPartedData(data){\r\n        let group;\r\n        let lastEmpty = true;\r\n        const result = [];\r\n\r\n        data.forEach(item => {\r\n            if (item.value === null) {\r\n                lastEmpty = true;\r\n            } else {\r\n                if (lastEmpty) {\r\n                    group = [];\r\n                    result.push(group);\r\n                }\r\n                group.push(item);\r\n                lastEmpty = false;\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    _shouldRenderZeroLine(yAxis, height){\r\n        const zeroLinePosition = yAxis(0);\r\n        const axisPosition = height - MARGIN_BOTTOM;\r\n        const treshold = 10;\r\n        return zeroLinePosition < axisPosition - treshold;\r\n    }\r\n}\r\n\r\nexport default LinechartLine;\r\n","import style from \"./Linechart.css\";\r\nimport * as d3 from \"d3\";\r\nimport Component from './Component';\r\nimport {DOT_SIZE, LINE_WIDTH, MARGIN_TOP, MARGIN_BOTTOM} from './LinechartDefaults';\r\nimport LinechartLine from './LinechartLine';\r\n\r\nclass LinechartMask extends Component {\r\n\r\n    constructor(width, height) {\r\n        super('linechart-mask');\r\n        this._width = width;\r\n        this._height = height;\r\n        this.observable.add('lineEnter');\r\n        this.observable.add('lineLeave');\r\n        this.observable.add('tooltipEnter');\r\n        this.observable.add('tooltipLeave');\r\n        this.observable.add('annotationEnter');\r\n        this.observable.add('annotationLeave');\r\n    }\r\n\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    get height() {\r\n        return this._height;\r\n    }\r\n\r\n    _setData(container, data, lastData) {\r\n        const verticalSpacing = this.height / 4;\r\n        const xAxis = d3.scalePoint().range([0, this.width]);\r\n        const yAxis = d3.scaleLinear().range([this.height-verticalSpacing, MARGIN_TOP]);\r\n        xAxis.domain(data.series[0].data.map(function (d) { return d.id; }));\r\n        const minMax = this._calculateMinMax(data.series);\r\n        yAxis.domain([minMax.min, minMax.max]);\r\n        const mergedData = this._mergeSeriesData(data.series);\r\n        this._renderTooltipAreas(container, xAxis, yAxis, mergedData);\r\n        this._renderTooltipLines(container, xAxis, yAxis, data.series);\r\n        this._renderAnnotations(container, xAxis, data.annotations, mergedData);\r\n    }\r\n\r\n    _renderAnnotations(container, xAxis, annotations, mergedData) {\r\n        const mergedAnnotations = this._mergeAnnotations(annotations);\r\n\r\n        Object.keys(mergedAnnotations).forEach((id, index) => {\r\n            if (typeof xAxis(id) === 'undefined') {\r\n                console.warn(`Annotation (in mask component) ${JSON.stringify(mergedAnnotations[id])} has id '${id}' which is not present in linechart data`);\r\n                return;\r\n            }\r\n            const annotationGroup = container.append(\"g\")\r\n                .on(\"mouseenter\", () => this.observable.fire(\"annotationEnter\", mergedAnnotations[id], mergedData[id], id, index))\r\n                .on(\"mouseleave\", () => this.observable.fire(\"annotationLeave\", mergedAnnotations[id], mergedData[id], id, index));\r\n            annotationGroup.append(\"line\")\r\n                .attr(\"x1\", xAxis(id))\r\n                .attr(\"x2\", xAxis(id))\r\n                .attr(\"y1\", 0)\r\n                .attr(\"y2\", this.height - MARGIN_BOTTOM)\r\n                .attr(\"stroke-width\", 3)\r\n                .attr(\"stroke\", 'transparent');\r\n            if (mergedAnnotations[id].length > 1) {\r\n                annotationGroup.append(\"circle\")\r\n                    .attr(\"fill\", \"transparent\")\r\n                    .attr(\"cx\", xAxis(id))\r\n                    .attr(\"cy\", this.height - MARGIN_BOTTOM)\r\n                    .attr(\"r\", 7.5);\r\n            }\r\n        });\r\n    }\r\n\r\n    _mergeAnnotations(annotations) {\r\n        const merged = {};\r\n        annotations.forEach(annotation => {\r\n            merged[annotation.id] = merged[annotation.id] || [];\r\n            merged[annotation.id].push(annotation);\r\n        });\r\n        return merged;\r\n    }\r\n\r\n    _renderTooltipAreas(container, xAxis, yAxis, mergedData) {\r\n        let hoverWidth = this.width;\r\n        if (Object.keys(mergedData).length > 1) {\r\n            hoverWidth = this.width / (Object.keys(mergedData).length-1);\r\n        }\r\n\r\n        Object.keys(mergedData).forEach((valueId, valueIndex) => {\r\n            container.append(\"rect\")\r\n                .attr(\"class\", style[\"tooltip-hover-area\"])\r\n                .attr(\"width\", hoverWidth)\r\n                .attr(\"fill-opacity\", 0)\r\n                .attr(\"x\", () => {\r\n                    return xAxis(valueId) - hoverWidth/2\r\n                })\r\n                .attr(\"height\", this.height)\r\n                .on(\"mouseover\", () => this.observable.fire('tooltipEnter', mergedData[valueId], valueId, valueIndex))\r\n                .on(\"mouseleave\", () => this.observable.fire('tooltipLeave', mergedData[valueId], valueId, valueIndex))\r\n        });\r\n    }\r\n\r\n    _mergeSeriesData(series) {\r\n        const data = {};\r\n        series.forEach(line => {\r\n            line.data.forEach(lineValue => {\r\n                data[lineValue.id] = data[lineValue.id] || [];\r\n                data[lineValue.id].push({\r\n                    id: lineValue.id,\r\n                    label: lineValue.label,\r\n                    value: lineValue.value,\r\n                    tooltip: lineValue.tooltip,\r\n                    appearance: line.appearance\r\n                });\r\n            });\r\n        });\r\n        return data;\r\n    }\r\n\r\n    _renderTooltipLines(container, xAxis, yAxis, series) {\r\n        Array.from(series).reverse().forEach((lineData, lineIndex) => {\r\n            if (lineData.title) {\r\n                this._renderTooltipLine(container, xAxis, yAxis, lineData, series.length-1 - lineIndex);\r\n            }\r\n        });\r\n    }\r\n\r\n    _renderTooltipLine(container, xAxis, yAxis, lineData, lineIndex) {\r\n\r\n        const maskAppearance = Object.assign({}, lineData.appearance, {\r\n            lineOpacity: 0,\r\n            lineWidth: (lineData.appearance.lineWidth || LINE_WIDTH)*2,\r\n            dotSize: (lineData.appearance.dotSize || DOT_SIZE)*2\r\n        });\r\n\r\n        const line = new LinechartLine();\r\n        line.render(container.node());\r\n        line.setData({\r\n            height: this.height,\r\n            xAxis,\r\n            yAxis,\r\n            lineData: lineData.data,\r\n            appearance: maskAppearance,\r\n            renderAreas: false\r\n        });\r\n        line.on(\"enter\", () => this.observable.fire('lineEnter', lineData, lineIndex))\r\n            .on(\"leave\", () => this.observable.fire('lineLeave', lineData, lineIndex));\r\n    }\r\n\r\n    _calculateMinMax(series) {\r\n        const data = [];\r\n        series.forEach((line) => {\r\n            line.data.forEach((item) => {\r\n                data.push(item);\r\n            });\r\n        });\r\n\r\n        var min = d3.min(data, function (d) { return d.value; });\r\n        var max = d3.max(data, function (d) { return d.value; });\r\n\r\n        if (data.length <= series.length) {\r\n            min = Math.min(min, 0);\r\n            max = Math.max(max, 0);\r\n        }\r\n\r\n        return {\r\n            min: min,\r\n            max: max\r\n        }\r\n    }\r\n\r\n    _getGroupedData(data){\r\n        let group = [];\r\n        const result = [group];\r\n\r\n        data.forEach(item=>{\r\n            if (item.value === null){\r\n                group = [];\r\n                result.push(group);\r\n            } else {\r\n                group.push(item);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\nexport default LinechartMask;\r\n","import style from \"./Linechart.css\";\r\nimport Component from './Component';\r\nimport {LABEL_OFFSET} from './LinechartDefaults';\r\n\r\nlet gradientID = 0;\r\n\r\nclass LinechartLabel extends Component {\r\n    constructor() {\r\n        super('linechart-label');\r\n    }\r\n\r\n    _setData(container, data, lastData) {\r\n        if (Object.keys(data).length === 1 && typeof data.visible !== 'undefined') {\r\n            return this.container.attr(\"visibility\", data.visible ? \"visible\" : \"hidden\");\r\n        }\r\n\r\n        this.container.selectAll(\"*\").remove();\r\n        const newData = Object.assign({}, lastData, data);\r\n        this._renderLabel(newData);\r\n        if (newData.renderDot) {\r\n            this._renderCircle(newData);\r\n        }\r\n        this.container.attr(\"visibility\", data.visible ? \"visible\" : \"hidden\");\r\n    }\r\n\r\n    _renderCircle(data) {\r\n        this.container.append(\"circle\")\r\n            .attr(\"class\", style[\"label-axis-circle\"])\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"cx\", data.x)\r\n            .attr(\"cy\", data.y)\r\n            .attr(\"r\", 2.5 + 1/2);\r\n    }\r\n\r\n    _renderLabel(data) {\r\n        const labelMask = this.container.append(\"rect\")\r\n            .attr(\"class\", style[\"tooltip-label-mask\"])\r\n            .attr(\"y\", data.y + LABEL_OFFSET - 15)\r\n            .attr(\"height\", 20);\r\n\r\n        const label = this.container.append(\"text\")\r\n            .attr(\"class\", style[\"tooltip-label\"])\r\n            .attr(\"y\", data.y + LABEL_OFFSET)\r\n            .text(data.label);\r\n\r\n        const bottomLabelWidth = label.node().getComputedTextLength();\r\n        const bottomMaskPadding = 25;\r\n        const textAnchor = this._getTextAnchor(data.x, bottomLabelWidth, data.width);\r\n        const bottomMaskWidth = bottomMaskPadding*2 + bottomLabelWidth;\r\n\r\n        this._createMaskGradientElement(this.container, bottomMaskWidth);\r\n\r\n        labelMask\r\n            .attr(\"width\", bottomMaskWidth)\r\n            .attr(\"fill\", \"url(#\"+this.container.select('linearGradient').attr(\"id\")+\")\")\r\n            .attr(\"x\", -bottomMaskWidth/2)\r\n            .attr(\"transform\", () => {\r\n                return {\r\n                    \"start\":\"translate(\"+bottomLabelWidth/2+\", 0)\",\r\n                    \"middle\":\"translate(\"+data.x+\", 0)\",\r\n                    \"end\":\"translate(\"+(data.width-bottomLabelWidth/2)+\", 0)\"\r\n                }[textAnchor]\r\n            });\r\n\r\n        label\r\n            .attr(\"text-anchor\", textAnchor)\r\n            .attr(\"transform\", () => {\r\n                return {\r\n                    \"start\":\"translate(0, 0)\",\r\n                    \"middle\":\"translate(\"+data.x+\", 0)\",\r\n                    \"end\":\"translate(\"+data.width+\", 0)\"\r\n                }[textAnchor]\r\n            });\r\n    }\r\n\r\n    _createMaskGradientElement(container, bottomMaskWidth){\r\n        const gradientEdge = 15/bottomMaskWidth;\r\n        const colorWhite = 'rgba(255,255,255,1)';\r\n        const colorTransparent = 'rgba(255,255,255,0)';\r\n\r\n        const handleMaskGradientEl = container.append(\"linearGradient\")\r\n            .attr(\"id\", style[\"tooltip-label-mask\"]+\"-\"+(gradientID++)+\"-gradient\")\r\n            .attr(\"gradientUnits\", \"userSpaceOnUse\")\r\n            .attr(\"y1\", \"0\").attr(\"x1\", -bottomMaskWidth/2)\r\n            .attr(\"y2\", \"0\").attr(\"x2\", bottomMaskWidth/2);\r\n\r\n        handleMaskGradientEl.selectAll(\"stop\")\r\n            .data([\r\n                { offset: \"0\", color: colorTransparent},\r\n                { offset: gradientEdge, color: colorWhite},\r\n                { offset: 1 - gradientEdge, color: colorWhite},\r\n                { offset: \"1\", color: colorTransparent}\r\n            ])\r\n            .enter().append(\"stop\")\r\n            .attr(\"offset\", function (d) { return d.offset; })\r\n            .attr(\"stop-color\", function (d) { return d.color; });\r\n    }\r\n\r\n    _getTextAnchor(xPos, bottomLabelWidth, width){\r\n        var xpos = xPos;\r\n        if (xpos - bottomLabelWidth/2 < 0){\r\n            return \"start\"\r\n        } else if (xpos + bottomLabelWidth/2 > width){\r\n            return \"end\"\r\n        } else {\r\n            return \"middle\";\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default LinechartLabel;\r\n","import style from \"./Linechart.css\";\r\nimport Component from './Component';\r\nimport * as d3 from 'd3';\r\n\r\nclass LinechartTooltip extends Component {\r\n    constructor() {\r\n        super('linechart-tooltip');\r\n    }\r\n\r\n    _renderContainer(selector, x = 0, y = 0){\r\n        // force position relative so the toolip shows correctly\r\n        d3.select(selector).style(\"position\", \"relative\");\r\n\r\n        return d3.select(selector).insert(\"span\", \":first-child\")\r\n            .attr(\"class\", style[\"tooltip-top-label\"])\r\n            .style(\"position\", \"absolute\")\r\n            .style(\"visibility\", \"hidden\");\r\n    }\r\n\r\n    _setData(container, data, lastData) {\r\n        const newData = Object.assign({}, lastData, data);\r\n        this._renderTooltip(newData);\r\n    }\r\n\r\n    _renderTooltip(data) {\r\n        this.container.node().innerHTML = data.html;\r\n        this.container\r\n            .style(\"left\", `${this._getLabelLeft(data.x, data.width)}px`)\r\n            .style(\"top\", `${this._getLabelTop(data.y)}px`)\r\n            .style(\"visibility\", data.visible ? \"visible\" : \"hidden\")\r\n            .classed(style[\"dark\"], data.dark);\r\n    }\r\n\r\n    _getLabelLeft(xPos, width){\r\n        const labelWidth = this.container.node().offsetWidth;\r\n        let labelLeft = xPos-labelWidth/2;\r\n\r\n        if (labelLeft<0){\r\n            labelLeft = 0;\r\n        }\r\n\r\n        if (labelLeft > width - labelWidth){\r\n            labelLeft = width - labelWidth;\r\n        }\r\n\r\n        return labelLeft;\r\n    }\r\n\r\n    _getLabelTop(yPos){\r\n        const yTop = yPos - 12 - this.container.node().offsetHeight;\r\n\r\n        if (yTop >= 0) {\r\n            return yTop;\r\n        } else {\r\n            return yPos + 12;\r\n        }\r\n    }\r\n}\r\n\r\nexport default LinechartTooltip;\r\n","import style from \"./Linechart.css\";\r\nimport Component from './Component';\r\nimport {HIGHLIGHT_COLOR, MARGIN_BOTTOM} from './LinechartDefaults';\r\n\r\nclass LinechartAnnotation extends Component {\r\n    constructor() {\r\n        super('linechart-annotation');\r\n    }\r\n\r\n    _setData(container, data, lastData) {\r\n        if (Object.keys(data).length === 1 && typeof data.highlight !== 'undefined') {\r\n            return this._updateAppearance(data.highlight);\r\n        }\r\n\r\n        this.container.selectAll(\"*\").remove();\r\n        this._annotation = this._renderAnnotation(data);\r\n        return this._updateAppearance(data.highlight);\r\n    }\r\n\r\n    _updateAppearance(highlight) {\r\n        this._annotation.line.attr(\"stroke\", highlight ? HIGHLIGHT_COLOR : \"#8f959c\");\r\n        if (this._annotation.circle) {\r\n            this._annotation.circle.attr(\"fill\", highlight ? HIGHLIGHT_COLOR : \"#8f959c\");\r\n        }\r\n        if (this._annotation.text) {\r\n            this._annotation.text.classed(style['white-fill'], !highlight);\r\n        }\r\n    }\r\n\r\n    _renderAnnotation({xAxis, id, height, length}) {\r\n        const annotationGroup = {};\r\n        annotationGroup.line = this.container.append(\"line\")\r\n            .attr(\"x1\", xAxis(id))\r\n            .attr(\"x2\", xAxis(id))\r\n            .attr(\"y1\", 0)\r\n            .attr(\"y2\", height - MARGIN_BOTTOM)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"stroke-dasharray\",\"2 ,2\");\r\n\r\n        if (length > 1) {\r\n            annotationGroup.circle = this.container.append(\"circle\")\r\n                .attr(\"cx\", xAxis(id))\r\n                .attr(\"cy\", height - MARGIN_BOTTOM)\r\n                .attr(\"r\", 7.5)\r\n            annotationGroup.text = this.container.append(\"text\")\r\n                .attr(\"x\", xAxis(id))\r\n                .attr(\"y\", height - MARGIN_BOTTOM + 4)\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .text(length);\r\n        }\r\n        return annotationGroup;\r\n    }\r\n\r\n}\r\n\r\nexport default LinechartAnnotation;\r\n","import style from \"./Linechart.css\";\r\nimport * as d3 from \"d3\";\r\nimport Component from './Component';\r\nimport {\r\n    AXIS_COLOR, HIGHLIGHT_COLOR,\r\n    LABEL_OFFSET,\r\n    LINE_COLOR,\r\n    MARGIN_TOP,\r\n    MARGIN_BOTTOM,\r\n    ZERO_LINE_COLOR\r\n} from './LinechartDefaults';\r\nimport LinechartMask from './LinechartMask';\r\nimport {WIDTH, HEIGHT} from './LinechartDefaults';\r\nimport LinechartLabel from './LinechartLabel';\r\nimport LinechartTooltip from './LinechartTooltip';\r\nimport LinechartLine from './LinechartLine';\r\nimport LinechartAnnotation from './LinechartAnnotation';\r\n\r\n/**\r\n * @class\r\n * Main Linechart class\r\n * @param {Object} options\r\n */\r\nclass Linechart extends Component {\r\n    constructor({width = WIDTH, height = HEIGHT}) {\r\n        super('linechart');\r\n        this._width = width;\r\n        this._height = height;\r\n    }\r\n\r\n    get width() {\r\n        return this._width;\r\n    }\r\n\r\n    get height() {\r\n        return this._height;\r\n    }\r\n\r\n    _renderContainer(selector, x = 0, y = 0){\r\n        this._renderTooltip(selector);\r\n        return d3.select(selector).append(\"svg\")\r\n            .attr(\"width\", this.width)\r\n            .attr(\"height\", this.height)\r\n            .attr(\"class\", style[this.className])\r\n            .attr(\"transform\", `translate(${x}, ${y})`)\r\n    }\r\n\r\n    _setData(container, data, lastData) {\r\n        container.selectAll(\"*\").remove();\r\n\r\n        const {xAxis, yAxis} = this._getAxes(data.series);\r\n\r\n        this._renderZeroLine(container, xAxis, yAxis);\r\n        this._renderXAxis(container, AXIS_COLOR, data.series);\r\n        this._renderLabel(container);\r\n        this._renderAnnotations(container, xAxis, data.annotations);\r\n        this._renderDataLines(container, xAxis, yAxis, data.series);\r\n        this._renderMask(container, data, xAxis, yAxis);\r\n    }\r\n\r\n    _getAxes(series) {\r\n        const verticalSpacing = this.height / 4;\r\n        const xAxis = d3.scalePoint().range([0, this.width]);\r\n        const yAxis = d3.scaleLinear().range([this.height-verticalSpacing, MARGIN_TOP]);\r\n        xAxis.domain(series[0].data.map(function (d) { return d.id; }));\r\n        const minMax = this._calculateMinMax(series);\r\n        yAxis.domain([minMax.min, minMax.max]);\r\n        return {xAxis, yAxis}\r\n    }\r\n\r\n    _clearData() {\r\n        this._width = null;\r\n        this._height = null;\r\n        this._tooltip.destroy();\r\n        this._tooltip = null;\r\n        this._label = null;\r\n        this._lines = null;\r\n    }\r\n\r\n\r\n\r\n    ////////////  RENDER FUNCTIONS\r\n\r\n    _renderTooltip(selector) {\r\n        this._tooltip = new LinechartTooltip();\r\n        this._tooltip.render(selector);\r\n        this._tooltip.setData({\r\n            html: \"\",\r\n            x: 0,\r\n            y: 0,\r\n            dark: false,\r\n            visible: false,\r\n            width: this.width\r\n        });\r\n    }\r\n\r\n    _renderZeroLine(container, xAxis, yAxis){\r\n        if (this._shouldRenderZeroLine(yAxis)) {\r\n            container.append(\"line\")\r\n                .attr(\"x1\", 0)\r\n                .attr(\"x2\", this.width)\r\n                .attr(\"y1\", Math.round(yAxis(0)))\r\n                .attr(\"y2\", Math.round(yAxis(0)))\r\n                .attr(\"stroke-dasharray\",\"2 ,2\")\r\n                .attr(\"stroke\", ZERO_LINE_COLOR)\r\n        }\r\n    }\r\n\r\n    _renderXAxis(container, axisColor, series) {\r\n        container.append(\"line\")\r\n            .attr(\"x1\", 0)\r\n            .attr(\"x2\", this.width)\r\n            .attr(\"y1\", this.height-MARGIN_BOTTOM)\r\n            .attr(\"y2\", this.height-MARGIN_BOTTOM)\r\n            .attr(\"stroke-width\", 1)\r\n            .attr(\"stroke\", axisColor);\r\n\r\n        // render to labels on start and end sides if multiple items are available\r\n        if (series[0].data.length>1){\r\n            container.append(\"text\")\r\n                .text(series[0].data[0].label)\r\n                .attr(\"x\", 0)\r\n                .attr(\"y\", this.height - MARGIN_BOTTOM + LABEL_OFFSET)\r\n\r\n            container.append(\"text\")\r\n                .text(series[0].data[series[0].data.length-1].label)\r\n                .attr(\"x\", this.width)\r\n                .attr(\"text-anchor\", \"end\")\r\n                .attr(\"y\", this.height - MARGIN_BOTTOM + LABEL_OFFSET)\r\n\r\n            // render single label in the middle if only one item is available\r\n        } else if (series[0].data.length == 1){\r\n            container.append(\"text\")\r\n                .text(series[0].data[0].label)\r\n                .attr(\"x\", this.width/2)\r\n                .attr(\"text-anchor\", \"middle\")\r\n                .attr(\"y\", this.height - MARGIN_BOTTOM + LABEL_OFFSET)\r\n        }\r\n    }\r\n\r\n    _renderLabel(container) {\r\n        this._label = new LinechartLabel();\r\n        this._label.render(container.node());\r\n        this._label.setData({\r\n            x: 0,\r\n            y: this.height - MARGIN_BOTTOM,\r\n            width: 360,\r\n            label: \"\",\r\n            visible: false,\r\n            renderDot: true\r\n        });\r\n    }\r\n\r\n    _renderAnnotations(container, xAxis, annotations) {\r\n        const mergedAnnotations = this._mergeAnnotations(annotations);\r\n\r\n        this._annotations = Object.keys(mergedAnnotations).map(id => {\r\n            if (typeof xAxis(id) === 'undefined') {\r\n                console.warn(`Annotation (in presentation component) ${JSON.stringify(mergedAnnotations[id])} has id '${id}' which is not present in linechart data`);\r\n                return;\r\n            }\r\n            const annotation = new LinechartAnnotation();\r\n            annotation.render(this.container.node());\r\n            annotation.setData({\r\n                xAxis,\r\n                id,\r\n                height: this.height,\r\n                length: mergedAnnotations[id].length,\r\n                highlight: false\r\n            });\r\n            return annotation;\r\n        });\r\n    }\r\n\r\n    _renderDataLines(container, xAxis, yAxis, series) {\r\n        this._lines = Array.from(series).reverse().map(lineData => {\r\n            const line = new LinechartLine();\r\n            line.render(this.container.node());\r\n            line.setData({\r\n                height: this.height,\r\n                xAxis,\r\n                yAxis,\r\n                lineData: lineData.data,\r\n                appearance: lineData.appearance,\r\n                renderAreas: true,\r\n                point: null\r\n            });\r\n            return line;\r\n        });\r\n        this._lines.reverse();\r\n    }\r\n\r\n    _renderMask(container, data, xAxis, yAxis) {\r\n        const mask = new LinechartMask(this.width, this.height);\r\n        mask.render(container.node());\r\n        mask.on('lineEnter', (lineData, lineIndex) => {\r\n            this._onLineEnter(container, lineData, lineIndex);\r\n        }).on('lineLeave', (lineData, lineIndex) => {\r\n            this._onLineLeave(container, lineData, lineIndex);\r\n        }).on('tooltipEnter', (valueData, valueLabel) => {\r\n            this._onValueEnter(xAxis, yAxis, valueData, valueLabel);\r\n        }).on('tooltipLeave', (valueData, valueLabel) => {\r\n            this._onValueLeave(xAxis, yAxis, valueData, valueLabel);\r\n        }).on('annotationEnter', (annotationData, valueData, annotationId, annotationIndex) => {\r\n            this._onAnnotationEnter(container, xAxis, annotationData, valueData, annotationId, annotationIndex);\r\n        }).on('annotationLeave', (annotationData, valueData, annotationId, annotationIndex) => {\r\n            this._onAnnotationLeave(container, xAxis, annotationData, valueData, annotationId, annotationIndex);\r\n        }).on('leave', () => {\r\n            this._onLeave();\r\n        });\r\n        mask.setData(data);\r\n    }\r\n\r\n\r\n\r\n    ////////////  CALLBACK FUNCTIONS\r\n\r\n    _onAnnotationEnter(container, xAxis, annotationData, valueData, annotationId, annotationIndex) {\r\n        this._annotations[annotationIndex].setData({\r\n            highlight: true\r\n        });\r\n\r\n        this._label.setData({\r\n            x: xAxis(annotationId),\r\n            label: valueData[0].label,\r\n            visible: true,\r\n            renderDot: annotationData.length <= 1\r\n        });\r\n\r\n        const coord = d3.mouse(container.node());\r\n        this._tooltip.setData({\r\n            html: this._getAnnotationHTML(annotationData),\r\n            x: coord[0],\r\n            y: coord[1],\r\n            dark: true,\r\n            visible: true\r\n        });\r\n    }\r\n\r\n    _onAnnotationLeave(container, xAxis, annotationData, valueData, annotationId, annotationIndex) {\r\n        this._annotations[annotationIndex].setData({\r\n            highlight: false\r\n        });\r\n    }\r\n\r\n    _onValueEnter(xAxis, yAxis, valueData, valueId) {\r\n        this._lines.forEach(line => line.setData({\r\n            point: valueId\r\n        }));\r\n\r\n        this._label.setData({\r\n            x: xAxis(valueId),\r\n            label: valueData[0].label,\r\n            visible: true,\r\n            renderDot: true\r\n        });\r\n\r\n        let hasTooltips = false;\r\n        valueData.forEach(lineData => lineData.tooltip && (hasTooltips = true));\r\n        if (hasTooltips) {\r\n            this._tooltip.setData({\r\n                html: this._getValueTooltipHTML(valueData),\r\n                x: xAxis(valueId),\r\n                y: yAxis(Math.max.apply(Math, valueData.map(item => item.value))),\r\n                dark: false,\r\n                visible: true\r\n            });\r\n        } else {\r\n            this._tooltip.setData({\r\n                visible: false\r\n            });\r\n        }\r\n    }\r\n\r\n    _onValueLeave() {\r\n        this._lines.forEach(line => line.setData({\r\n            point: null\r\n        }));\r\n    }\r\n\r\n    _onLineEnter(container, lineData, lineIndex) {\r\n        const coord = d3.mouse(container.node());\r\n        this._tooltip.setData({\r\n            html: lineData.title,\r\n            x: coord[0],\r\n            y: coord[1],\r\n            dark: true,\r\n            visible: true\r\n        });\r\n\r\n        const highlightAppearance = Object.assign({}, lineData.appearance, {\r\n            lineColor: HIGHLIGHT_COLOR,\r\n            fillColor: HIGHLIGHT_COLOR\r\n        });\r\n        this._lines[lineIndex].setData({\r\n            appearance: highlightAppearance\r\n        });\r\n\r\n        this._label.setData({\r\n            visible: false\r\n        });\r\n    }\r\n\r\n    _onLineLeave(container, lineData, lineIndex) {\r\n        this._lines[lineIndex].setData({\r\n            appearance: lineData.appearance\r\n        });\r\n    }\r\n\r\n    _onLeave() {\r\n        this._label.setData({\r\n            visible: false\r\n        });\r\n        this._tooltip.setData({\r\n            visible: false\r\n        });\r\n    }\r\n\r\n\r\n\r\n    ////////////  UTILS FUNCTIONS\r\n\r\n    _getValueTooltipHTML(data){\r\n        return data.filter(item => item.value != null).map(item => {\r\n            const value = item.tooltip || item.value;\r\n\r\n            if (data.length>1){\r\n                const color = item.appearance.lineColor || LINE_COLOR;\r\n                const icon = `\r\n\t\t\t\t    <span style=\"display:inline-block;position:relative;top:-1px;margin-right:5px;width:6px;height:6px;border-radius:50%;background-color:${color}\"></span>\r\n\t\t\t    `;\r\n                return icon + value;\r\n            } else {\r\n                return value;\r\n            }\r\n        }).join(\"<br />\");\r\n    }\r\n\r\n    _getAnnotationHTML(data){\r\n        return data.map(annotation => {\r\n            return `<span style=\"font-weight: bold\">${annotation.title}</span><br/><span>${annotation.subtitle}</span>`\r\n        }).join(\"<hr />\");\r\n    }\r\n\r\n    _mergeAnnotations(annotations) {\r\n        const merged = {};\r\n\r\n        annotations.forEach(annotation => {\r\n            merged[annotation.id] = merged[annotation.id] || [];\r\n            merged[annotation.id].push(annotation);\r\n        });\r\n        return merged;\r\n    }\r\n\r\n    _shouldRenderZeroLine(yAxis){\r\n        const zeroLinePosition = yAxis(0);\r\n        const axisPosition = this.height - MARGIN_BOTTOM;\r\n        const treshold = 10;\r\n        return zeroLinePosition < axisPosition - treshold && zeroLinePosition > 0;\r\n    }\r\n\r\n    _calculateMinMax(series) {\r\n        const data = [];\r\n        series.forEach((line) => {\r\n            line.data.forEach((item) => {\r\n                data.push(item);\r\n            });\r\n        });\r\n\r\n        var min = d3.min(data, function (d) { return d.value; });\r\n        var max = d3.max(data, function (d) { return d.value; });\r\n\r\n        if (data.length <= series.length) {\r\n            min = Math.min(min, 0);\r\n            max = Math.max(max, 0);\r\n        }\r\n\r\n        return {\r\n            min: min,\r\n            max: max\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Linechart;\r\n","\r\nimport Doughnut from \"./doughnut/Doughnut\";\r\nimport Histogram from \"./histogram/Histogram\";\r\nimport Line from \"./line/Line\";\r\nimport Barchart from \"./barchart/components/Barchart\";\r\nimport Linechart from \"./linechart/Linechart\"\r\n\r\nexport default {\r\n\tBarchart:Barchart,\r\n\r\n    Doughnut:Doughnut,\r\n    Histogram:Histogram,\r\n    Line:Line,\r\n    Linechart:Linechart\r\n}"],"names":["Observable","event","handler","this","_handlers","push","handlers","index","indexOf","splice","args","i","length","apply","events","reduce","acc","cur","DoughnutRenderer","_rendered","selector","ct","_containerEl","d3","width","node","offsetWidth","height","offsetHeight","value","_value","_options","angle","_angle","tau","innerRadius","_innerRadius","outerRadius","_outerRadius","arc","_arc","startAngle","_svgEl","append","attr","style","g","_groupEl","_inactiveArc","datum","endAngle","inactiveColor","_activeArc","activeColor","_backgroundArc","backgroundColor","_hoverEl","on","_observable","fire","eventName","off","opts","options","activeArcTransition","transition","duration","animationDuration","attrTween","_arcTween","_this2","interpolateOuterRadius","interpolateInnerRadius","d","interpolateAngle","t","_this3","removeChild","destroy","getOptionValue","optionValue","defaultOptionValue","Doughnut","_doughnutRenderer","render","isRendered","update","renderTo","MARGIN","DEFAULT_COLORS","HistogramData","_minMax","_histogramData","histogramData","max","min","position","minMax","getMinMax","getValueRatio","valueRatio","constrainedValue","Math","round","data","numOfBarsPerBucket","forEach","bucket","step","volume","Array","isArray","_loadHistogramData","_calculateMinMax","gradientIndex","HistogramHandle","_elements","element","remove","_createHandleElement","_createHandleLineElement","_createHandleCircleElement","_createDragMaskElement","_createMaskGradientElement","_createDragLabelElement","_handleHoverState","_handleDrag","parseInt","_handleEl","Defaults","_handleLineEl","_handleLabelEl","_handleMaskEl","_handleCircleEl","_updateLabelPosition","_position","getBBox","offset","text","setLabelOffset","_isOver","setHoverState","unsetHoverState","classed","xpos","x","positionToValue","_initialPosition","_initialValue","_getLabelText","format","call","_onDrag","bind","_onStartDrag","_onEndDrag","label","content","innerHTML","_labelSizeCache","getComputedTextLength","maskPadding","fontSize","textLength","_getComputedLabelTextLength","maskWidth","xPosition","_handleMaskGradientEl","selectAll","color","enter","_index","groupEl","Number","valueToPosition","_renderHandle","getHandlePositionOffsets","handle1","handle2","label1Box","getLabelBox","label2Box","conflictDiff","posDiff1","posDiff2","xMax","HistogramSelectionRenderer","_destroyHandles","_selectionBarGroups","_handles","handle","handleIndex","handleValue","promptHandler","then","promptResult","startSelectionSnapshot","JSON","stringify","_this","_histogramSelection","getOutputSelection","parseFloat","points","getSelectionPoints","positions","sort","p1","p2","map","point","_updateSelectionPositions","_updateSelection","_renderHandles","selection","selectionIndex","disabled","enabled","target","allowsToggle","_toggleSelection","_onHandleClick","_onClick","histogramSelection","_animate","animate","getSelection","_prevSelection","_prevHistogramData","_clear","_renderSelection","_handleClick","needRefresh","refresh","prevHistogramSelection","prev","curr","sel","from","to","handles","slice","h1","h2","getXPosition","labelOffsets","PositionUtils","nodes","_draggingHandle","_overSelectionIndex","_updateSelectionControlsHoverState","selectionbargroup","_onSelectionMouseOut","_onSelectionMouseOver","p","pos","reverse","_selectionBarsIcons","selectionbaricon","icon","src","_selectionBars","selectionbar","hidden","hide","_onHandleDrag","disable","enable","barX","s","isLast","colors","volumeIndex","selectionColor","inactiveBarColor","overSelectionColor","segmentDivider","barSelectionIndex","_getBarSelectionIndex","some","_getSelectionColor","isOver","isDisabled","overSelectionOpacity","inactiveBarOpacity","opacity","selection1","selection2","data1","data2","onTransition","onComplete","s1","s2","_this4","frames","transitions","abs","si","hi","fillBars","_this5","_getBarColor","_getBarOpacity","bars","bar","prevSelection","prevData","setHandleXPosition","setLabelPosition","_animating","_onSelectionTransition","align","y","selectionIconWidth","showLabel","_this6","hideLabel","HistogramRenderer","margin","svg","left","right","top","bottom","histogram","inactive","active","_selectionRenderer","_xAxis","domain","getData","_yAxis","_renderXAxis","_renderDataBars","_prevData","_labelsVisible","showSelectionLabels","setSelection","hideSelectionLabels","v","floor","ceil","_historyData","range","HistogramSelection","_selection","Object","assign","getSelectionWithPositions","SelectionTypes","MultipleHistogramSelection","MULTI","result","DefaultHistogramSelectionImpl","MultipleHistogramSelectionImpl","start","FilterHistogramSelectionImpl","FILTER","InvertedFilterHistogramSelectionImpl","invertedSelection","INVERTED_FILTER","_getInvertedSelection","HistogramSelectionFactory","selectionType","Histogram","_histogramRenderer","_selectionFactory","getHistogramSelection","String","selectionCopy","parse","enableSelectionToggle","LINE_COLORS","FILL_COLORS","LineData","_series","concat","dataMap","getAllData","item","values","tooltips","tooltip","series","numParts","toString","split","TooltipRenderer","_onMouseOut","xPos","bottomLabelWidth","filter","lineColors","lineColor","join","_tooltipGroup","_tooltipBottomLabel","textAnchor","_getTextAnchor","bottomMaskWidth","bottomMaskPadding","_tooltipBottomLabelMask","tooltipHtml","_getTooltipHTML","_tooltipTopLabel","labelLeft","_getLabelLeft","_tooltipLineCircle","circle","labelWidth","parentNode","contains","relatedTarget","_hideTooltip","hoverWidth","_lineData","getMergedData","getSeries","_hoverAreas","_onHoverAreaOver","lineWidth","lineOpacity","_tooltipAxisCircle","insert","_tooltipRendered","gradientID","lineData","_renderTooltip","LineRenderer","line","_tooltipRenderer","verticalSpacing","allData","_renderZeroLine","seriesIndex","_renderDataLines","axisColor","_showZeroLine","zeroLineColor","minHeight","areaZero","fillColor","fillColors","area","y0","y1","_getGroupedData","fillOpacity","dotSize","path","group","Line","_lineRenderer","setData","getPrecision","TOOLTIP_SYMBOL","ACTIVE_COLORS","STRIPE_BACKGROUND_COLOR","ONLY_TOOL_TEXT","BarchartData","_barsData","barData","calculateMinMax","containsNegativeVal","containsPositiveVal","sum","precision","_detailsData","detailsData","barchartData","details","_","barsData","DetailsData","_tooltips","tooltipData","_label","_disabled","TooltipData","isNumber","str","includes","isNaN","isFinite","_symbol","symbol","_color","_text","BarData","_stripesData","stripeData","stripes","stripe","absMax","_highlighted","highlighted","stripesData","StripeData","dual","_left","leftData","_right","rightData","leftValue","leftColor","rightValue","rightColor","JsonDataConverter","barchartJsonData","tooltipsData","tooltipJsonData","barJsonData","stripeJsonData","MASK_INDEX","Component","className","_container","_renderContainer","_className","clickableArea","alignBottom","alignRight","_render","clearData","constructor","name","convert","_data","_setData","_clearData","_width","select","_height","_alignRight","_alignBottom","_maskIndex","calculateTextWidth","canvas","context","getContext","window","getComputedStyle","fontStyle","getPropertyValue","fontVariant","fontWeight","fontStrech","fontFamily","font","measureText","Tooltip","container","empty","_canvas","spec","tooltipWidth","CleverChartsUtils","_renderTwoColoredFill","space","color1","color2","twoColoredFill","_fontSize","_activeColor","_format","_space","OnlyTool","_onlyToolTextSvg","onlyToolText","_onlyToolText","Details","labelFontSize","gradient","_tipWrapper","_tip","_createTooltips","_renderAndSetTooltipsData","showOnlyTool","enableToggle","_createOnlyTool","_renderOnlyTool","_rightSideStart","_handleLongLabel","_onlyTool","tooltipFontSize","stopPropagation","tooltipSymbol","undefined","activeColors","previousTooltipX","reversedIndex","tooltipReversed","maxWidth","_tooltipsBackground","gradientWidth","document","documentElement","getBoundingClientRect","_getOffset","el","rect","scrollX","scrollY","_labelFontSize","_tooltipFontSize","_tooltipSymbol","_activeColors","_showOnlyTool","_enableToggle","add","COLOR_PATTERN_INDEX","Stripe","clipPath","topCornerRounded","bottomCornerRounded","_renderProgress","dualValue","_renderStripe","condensed","x1","x2","axis","xBase","_renderXBase","_dualValue","_backgroundColor","_topCornerRounded","_bottomCornerRounded","_condensed","Bar","detailsHidden","_createDetails","_renderDetails","enableHover","_doEnableToggle","_setDetailsData","_createStripes","_renderStripes","_setStripesData","_details","detailsHeight","detailsDataDefault","copyAs","_stripes","stripeBackgroundColor","_detailsHidden","_detailsHeight","_enableHover","_stripeBackgroundColor","Barchart","updateFunction","setDetailsData","setBarData","barDataDefault","_setDefaultBarDetails","addTooltip","_svgWrapper","detailsVisible","_doSelectOnly","onlyIndex","_setDisabledValue","_adjustDetails","_adjustHeight","_createBars","_renderBars","_bars","barHeight","enableBarToggle","enableBarHover","barsContainer","topDetailsWidth","_detailsVisible","_barHeight","_enableBarHover","_enableBarToggle","_lastData","lastData","LINE_COLOR","HIGHLIGHT_COLOR","LinechartLine","keys","appearance","_updateAppearance","pointData","_updatePoint","newData","_parts","_renderLine","_point","_renderPoint","xAxis","yAxis","id","strokeWidth","part","renderAreas","_getPartedData","partData","lastEmpty","LinechartMask","mergedData","_mergeSeriesData","_renderTooltipAreas","_renderTooltipLines","_renderAnnotations","annotations","mergedAnnotations","_mergeAnnotations","annotationGroup","observable","warn","merged","annotation","valueId","valueIndex","lineValue","lineIndex","title","_renderTooltipLine","maskAppearance","LinechartLabel","visible","_renderLabel","renderDot","_renderCircle","labelMask","gradientEdge","colorWhite","colorTransparent","LinechartTooltip","html","_getLabelTop","dark","yPos","yTop","LinechartAnnotation","highlight","_annotation","_renderAnnotation","_getAxes","_renderMask","_tooltip","_lines","_shouldRenderZeroLine","_annotations","mask","_onLineEnter","_onLineLeave","valueData","valueLabel","_onValueEnter","_onValueLeave","annotationData","annotationId","annotationIndex","_onAnnotationEnter","_onAnnotationLeave","_onLeave","coord","_getAnnotationHTML","hasTooltips","_getValueTooltipHTML","highlightAppearance","subtitle","zeroLinePosition"],"mappings":"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"}