{"version":3,"file":"clever-charts-1.2.15.min.js","sources":["../src/utils/Observable.js","../src/doughnut/DoughnutDefaults.js","../src/doughnut/DoughnutRenderer.js","../src/doughnut/Doughnut.js","../src/histogram/HistogramDefaults.js","../src/histogram/HistogramData.js","../src/histogram/selection/HistogramHandle.js","../src/histogram/utils/PositionUtils.js","../src/histogram/selection/HistogramSelectionRenderer.js","../src/histogram/HistogramRenderer.js","../src/histogram/selection/HistogramSelection.js","../src/histogram/selection/MultipleHistogramSelectionImpl.js","../src/histogram/selection/DefaultHistogramSelectionImpl.js","../src/histogram/selection/FilterHistogramSelectionImpl.js","../src/histogram/selection/InvertedFilterHistogramSelectionImpl.js","../src/histogram/selection/HistogramSelectionFactory.js","../src/histogram/Histogram.js","../src/line/LineDefaults.js","../src/line/LineData.js","../src/line/TooltipRenderer.js","../src/line/LineRenderer.js","../src/line/Line.js","../src/barchart/defaults/BarchartDefaults.js","../src/barchart/data/BarchartData.js","../src/barchart/data/DetailsData.js","../src/barchart/data/TooltipData.js","../src/barchart/data/BarData.js","../src/barchart/data/StripeData.js","../src/barchart/JsonDataConverter.js","../src/barchart/components/Component.js","../src/utils/CleverChartsUtils.js","../src/barchart/components/Tooltip.js","../src/barchart/components/OnlyTool.js","../src/barchart/components/Details.js","../src/barchart/components/Stripe.js","../src/barchart/components/Bar.js","../src/barchart/components/Barchart.js","../src/linechart/Component.js","../src/linechart/LinechartDefaults.js","../src/linechart/LinechartLine.js","../src/linechart/LinechartMask.js","../src/linechart/LinechartLabel.js","../src/linechart/LinechartTooltip.js","../src/linechart/LinechartAnnotation.js","../src/CleverCharts.js","../src/linechart/Linechart.js"],"sourcesContent":["/**\n * @class\n * Observable class, handles binding and firing events\n * @param {Array} events list of events for this observable\n */\nexport default class Observable {\n    /**\n     * @param {Array} events\n     */\n    constructor(events = []) {\n        // create a map of handlers where each event has an array of bound handlers\n        this._handlers = events.reduce((acc, cur)=>{\n            acc[cur] = [];\n            return acc;\n        },{});\n    }\n\n\t/**\n\t * @public\n\t * Bind event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t */\n    on(event, handler) {\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tthis._handlers[event].push(handler);\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Unbind event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler, optional\n\t */\n    off(event, handler) {\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tif (!handler) {\n\t\t\tthis._handlers[event] = [];\n\t\t} else {\n\t\t\tvar handlers = this._handlers[event];\n\t\t\tvar index = handlers.indexOf(handler);\n\t\t\tif (index != -1){\n\t\t\t\thandlers.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Add new event to be handled\n\t * @param {String} event\n\t */\n\tadd(event) {\n\t\tif (!(event in this._handlers)) {\n\t\t\tthis._handlers[event] = [];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Fire widget event\n\t * @param {String} event event name\n\t * @param {*} ...args event arguments\n\t */\n\tfire(event, ...args) {\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tvar handlers = this._handlers[event];\n\t\tfor (var i = 0; i < handlers.length; i++) {\n\t\t\thandlers[i].apply(this, args);\n\t\t}\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Destorys this observable, removes events and so on \n\t */\n\tdestroy() {\n\t\tthis._handlers = null;\n\t\treturn this;\n    }\n\t\n}","/**\n * @public\n * Default outer radius\n */\nexport const OUTER_RADIUS = 10;\n\n/**\n * @public\n * Default inner radius\n */\nexport const INNER_RADIUS = 10;\n\n/**\n * @public\n * Default value\n */\nexport const VALUE = 0;\n\n/**\n * @public\n * Default active color\n */\nexport const ACTIVE_COLOR = \"#49ace2\";\n\n/**\n * @public\n * Default inactive color\n */\nexport const INACTIVE_COLOR = \"#F0F0F0\";\n\n/**\n * @public\n * Default background color\n */\nexport const BACKGROUND_COLOR = \"transparent\";\n\n/**\n * @public\n * Default animation duration\n */\nexport const ANIMATION_DURATION = 250;","import style from \"./Doughnut.css\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\nconst tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n\n/**\n * @class\n * Doughnut renderer class\n * @param {Object} options\n */\nexport default class DoughnutRenderer {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Doughnut options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Doughnut has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over\n\t\t\t */\n\t\t\t\"mouseOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out\n\t\t\t */\n\t\t\t\"mouseOut\"\n\t\t]);\t\t\n\t}\n\n\t/**\n\t * @public\n\t * Returns whether Doughnut has been rendered or not\n\t * @returns {boolean} true if Doughnut has been rendered\n\t */\n\tisRendered() {\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Doughnut} returns this widget instance\n\t */\n\trender(selector) {\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._containerEl.node().offsetWidth;\n\t\tvar height = this._containerEl.node().offsetHeight;\n\t\tvar value = this._value = this._options.value;\n\t\tvar angle = this._angle = value / 100 * tau;\n\t\tvar innerRadius = this._innerRadius = this._options.innerRadius;\n\t\tvar outerRadius = this._outerRadius = this._options.outerRadius;\n\n\t\t// arc settings\n\t\tvar arc = this._arc = d3.arc()\n\t\t\t.innerRadius(innerRadius)\n\t\t\t.outerRadius(outerRadius)\n\t\t\t.startAngle(0);\n\n\t\t// render SVG\n\t\tthis._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"class\", style[\"svg\"]);\n\n\t\t// render group\n\t\tvar g = this._groupEl = this._svgEl\n\t\t\t.append(\"g\")\n\t\t\t.attr(\"class\", style[\"doughnut\"])\n\t\t\t.attr(\"transform\", \"translate(\" + width / 2 + \", \" + height / 2 + \")\");\n\n\t\t// render inactive doughtnut\t\n\t\tthis._inactiveArc = g.append(\"path\")\n\t\t\t.datum({ endAngle: tau })\n\t\t\t.attr(\"fill\", this._options.inactiveColor)\n\t\t\t.attr(\"d\", arc);\n\n\t\t// render active doughtnut\t\n\t\tthis._activeArc = g.append(\"path\")\n\t\t\t.datum({ endAngle: angle })\n\t\t\t.attr(\"fill\", this._options.activeColor)\n\t\t\t.attr(\"d\", arc);\n\n\t\t// render background\t\n\t\tthis._backgroundArc = g.append(\"circle\")\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\n\t\t\t.attr(\"r\", innerRadius)\n\t\t\t.attr(\"cx\", 0)\n\t\t\t.attr(\"cy\", 0)\n\n\t\t// render background\t\n\t\tthis._backgroundArc = g.append(\"circle\")\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\n\t\t\t.attr(\"r\", innerRadius)\n\t\t\t.attr(\"cx\", 0)\n\t\t\t.attr(\"cy\", 0)\n\n\t\t// hover element, this needs to be rendered in order to have stable and animation\n\t\t// independent hover \n\t\tthis._hoverEl = g.append(\"rect\")\n\t\t\t.attr(\"fill\", \"transparent\")\n\t\t\t.attr(\"x\", -width/2)\n\t\t\t.attr(\"y\", -height/2)\n\t\t\t.attr(\"width\",width)\n\t\t\t.attr(\"height\",height)\n\n\t\tg.on(\"mouseover\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOver\");\n\t\t})\n\n\t\tg.on(\"mouseout\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOut\");\n\t\t})\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t\t * Bind widget event\n\t\t * @param {String} event event name\n\t\t * @param {Function} handler event handler\n\t\t * @returns {Doughnut} returns this widget instance\n\t\t */\n\t\ton(eventName, handler) {\n\t\t\tthis._observable.on(eventName, handler);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Unbind widget event\n\t\t * @param {String} event event name\n\t\t * @param {Function} [handler] event handler\n\t\t * @returns {Doughnut} returns this widget instance\n\t\t */\n\t\toff(eventName, handler) {\n\t\t\tthis._observable.off(eventName, handler);\n\t\t\treturn this;\n\t\t}\t\n\t\n\n\t/**\n\t * @public\n\t * @param {opts} new options\n\t * Updates doughnut with new options\n\t */\n\tupdate(opts) {\n\t\tvar options = opts || {};\n\n\t\tif (typeof options.value == \"undefined\"){\n\t\t\toptions.value = this._value;\n\t\t} else {\n\t\t\tthis._value = options.value;\n\t\t}\n\n\t\t// first tween foreground, note that this is also changing this._arc radiuses \n\t\tvar activeArcTransition = this._activeArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"d\", this._arcTween(options, true))\n\n\t\t// se we only get new path on background as it uses radiuses saved in the previous call\n\t\tthis._inactiveArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"d\", () => {\n\t\t\t\treturn () => {\n\t\t\t\t\treturn this._arc({ endAngle: tau });\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis._backgroundArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"r\", () => {\n\t\t\t\treturn () => {\n\t\t\t\t\treturn this._innerRadius;\n\t\t\t\t}\n\t\t\t});\n\n\t\tif (options.activeColor && options.activeColor !== this._options.activeColor){\n\t\t\tthis._options.activeColor = options.activeColor;\n\t\t\tactiveArcTransition.attr(\"fill\", options.activeColor)\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * @param {options} new options\n\t * returns tween function for arc \n\t */\n\t_arcTween(options) {\n\t\tvar angle = options.value / 100 * tau;\n\t\t// change angle if new value is provided \n\t\tif (typeof options.value != \"undefined\") {\n\t\t\tangle = options.value / 100 * tau;\n\t\t}\n\n\t\t// handle new radiuses\n\t\tvar innerRadius = this._innerRadius;\n\t\tvar outerRadius = this._outerRadius;\n\n\t\tif (typeof options.innerRadius != \"undefined\") {\n\t\t\tinnerRadius = options.innerRadius;\n\t\t}\n\n\t\tif (typeof options.outerRadius != \"undefined\") {\n\t\t\touterRadius = options.outerRadius;\n\t\t}\n\n\t\t// get interpolation fns between new radiuses and old ones\n\t\t// for simlicity, do this even if value doesn't change as we\n\t\t// likely generate new path anyway\n\t\tvar interpolateOuterRadius = d3.interpolate(this._outerRadius, outerRadius);\n\t\tvar interpolateInnerRadius = d3.interpolate(this._innerRadius, innerRadius);\n\n\t\treturn (d) => {\n\t\t\t// get angle interpolation fn \n\t\t\tvar interpolateAngle = d3.interpolate(d.endAngle, angle);\n\n\t\t\treturn (t) => {\n\t\t\t\t// on each cycle, set new radiuses and endAngle\n\t\t\t\tthis._arc.outerRadius(this._outerRadius = interpolateOuterRadius(t));\n\t\t\t\tthis._arc.innerRadius(this._innerRadius = interpolateInnerRadius(t));\n\n\t\t\t\td.endAngle = this._angle = interpolateAngle(t);\n\t\t\t\treturn this._arc(d);\n\t\t\t};\n\t\t};\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Doughnut UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered) {\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n\t}\n\n}","import Observable from \"../utils/Observable\";\nimport * as Defaults from \"./DoughnutDefaults\";\nimport DoughnutRenderer from \"./DoughnutRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main doughnut class\n * @param {Object} options\n */\nclass Doughnut {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.outerRadius = getOptionValue(options.outerRadius, Defaults.OUTER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.innerRadius = getOptionValue(options.innerRadius, Defaults.INNER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Active color\n\t\t */\n\t\tthis._options.activeColor = getOptionValue(options.activeColor, Defaults.ACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.inactiveColor = getOptionValue(options.inactiveColor, Defaults.INACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.backgroundColor = getOptionValue(options.backgroundColor, Defaults.BACKGROUND_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Value\n\t\t */\n\t\tthis._options.value = getOptionValue(options.value, Defaults.VALUE);\n\n\t\t/**\n\t\t * @public\n\t\t * Animation duration\n\t\t */\n\t\tthis._options.animationDuration = getOptionValue(options.animationDuration, Defaults.ANIMATION_DURATION);\n\n\t\t/**\n\t\t * @public\n\t\t * Render to container\n\t\t */\n\t\tthis._options.renderTo = getOptionValue(options.renderTo, null);\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over\n\t\t\t */\n\t\t\t\"mouseOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out\n\t\t\t */\n\t\t\t\"mouseOut\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * DoughnutRenderer\n\t\t */\n\t\tthis._doughnutRenderer = new DoughnutRenderer(this._options);\n\n\t\tthis._doughnutRenderer.on(\"mouseOver\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOver\")\n\t\t});\n\n\t\tthis._doughnutRenderer.on(\"mouseOut\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOut\")\n\t\t});\n\n\t\tif (options.renderTo){\n\t\t\tthis.render(options.renderTo);\n\t\t}\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._doughnutRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Doughnut} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._doughnutRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Object} options\n\t * @returns {Doughnut} returns this widget instance \n\t */\n\tupdate(options) {\n\t\tif (!this._doughnutRenderer.isRendered()) {\n\t\t\tthrow \"Can't call update() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tthis._doughnutRenderer.update(options);\n\n\t\treturn this;\n\t}\n}\n\nexport default Doughnut;\n","/**\n * @public\n * Default widget width\n */\nexport const WIDTH = 360;\n\n/**\n * @public\n * Default widget height\n */\nexport const HEIGHT = 150;\n\n/**\n * @public\n * Default widget margin\n */\nexport const MARGIN = {\n    top:0,\n    left:5,\n    right:5,\n    bottom:15\n};\n\n/**\n * Default label margin from x axis\n */\nexport const LABEL_MARGIN = 7;\n\n/**\n * @public\n * Default inactive bar color\n */\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\n\n/**\n * @public\n * Default inactive bar opacity\n */\nexport const INACTIVE_BAR_OPACITY = 1;\n\n/**\n * @public\n * Default over bar color\n */\nexport const OVER_SELECTION_COLOR = \"#fff300\";\n\n/**\n * @public\n * Default over selection opacity\n */\nexport const OVER_SELECTION_OPACITY = 1;\n\n/**\n * @public\n * Default over bar color\n */\nexport const SELECTION_COLOR = \"#49ace2\";\n\n/**\n * @public\n * Enable selection toggle\n */\nexport const ENABLE_SELECTION_TOGGLE = true;\n\n/**\n * @public\n * Default font size\n */\nexport const FONT_SIZE = 11;\n\n/**\n * @public\n * Default colors \n */\nexport const DEFAULT_COLORS = [\"#e6f3fb\", \"#cbe7f6\", \"#b1dbf2\", \"#98cfee\", \"#7ec4ea\"];\n\n/**\n * @public\n * Default width of active handle area\n */\nexport const ACTIVE_HANDLE_AREA_WIDTH = 4;","import * as d3 from \"d3\";\n\n/**\n * @class\n * HistogramData representing data for the histogram view\n */\nexport default class HistogramData {\n\t/**\n\t * @param {data} data\n\t * @param {Object} options\n\t */\n\tconstructor(data, options) {\n\t\tthis._histogramData = this._loadHistogramData(data, options.width);\n\t\tthis._minMax = this._calculateMinMax(this._histogramData);\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns histogram data\n\t * @returns {Array} histogram data\n\t */\n\tgetData() {\n\t\treturn this._histogramData;\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given histogramData\n\t* @param {Array} histogramData\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(histogramData) {\n\t\tvar min = d3.min(histogramData, function (d) { return d.value; });\n\t\tvar max = d3.max(histogramData, function (d) { return d.value; });\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t* Returns value ratio between bars and data\n\t* @return {Number} value ratio \n\t*/\n\tgetValueRatio() {\n\t\tvar range = this._minMax.max - this._minMax.min;\n\t\treturn range / this._options.width;\n\t}\n\n\t/**\n\t * @public\n\t * Returns data value from given position \n\t * @param {Number} position\n\t */\n\tpositionToValue(position) {\n\t\tvar minMax = this.getMinMax();\n\t\t// return min if position is 0\n\t\tif (position === 0){\n\t\t\treturn minMax.min;\n\t\t}\n\n\t\t// return max if position is at the end\n\t\tif (position === this._options.width){\n\t\t\treturn minMax.max;\n\t\t}\n\n\t\t// else calculate based on value ratio and min/max\n\t\tvar valueRatio = this.getValueRatio();\n\t\treturn position * valueRatio + minMax.min;\n\t}\n\n\t/**\n\t * @public\n\t * Returns position from given data value \n\t * @param {Number} value\n\t */\n\tvalueToPosition(value) {\n\t\tvar valueRatio = this.getValueRatio();\n\t\tvar minMax = this.getMinMax();\n\t\tvar constrainedValue = Math.min(Math.max(value, minMax.min), minMax.max);\n\t\t\n\t\treturn Math.round(constrainedValue / valueRatio - minMax.min / valueRatio);\n\t}\n\n\t/** \n\t* @private\n\t* @param {Array} buckets\n\t* @param {int} numOfBarsPerBucket - number of bars per column\\\n\t* @returns {Array} data from given buckets \n\t*/\n\t_loadHistogramData(data, width) {\n\t\tvar histogramData = [];\n\t\t// calculate number of bars per bucket excluding last pixel for max value\n\t\tvar numOfBarsPerBucket = (width-1) / data.length;\n\n\t\tdata.forEach((bucket, i) => {\n\t\t\tvar step = (bucket.max - bucket.min) / numOfBarsPerBucket;\n\t\t\t// support array as well as single values\n\t\t\tconst volume = Array.isArray(bucket.volume)?bucket.volume:[bucket.volume];\n\n\t\t\td3.range(bucket.min, bucket.max, step).forEach((value) => {\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tvolume: volume\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// adding max value pixel as each non-last bucket ends one pixel before next bucket starts\n\t\t\tif (i == data.length-1){\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: bucket.max,\n\t\t\t\t\tvolume: volume\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn histogramData;\n\t}\n}","import * as d3 from \"d3\";\nimport style from \"../Histogram.css\";\nimport * as Defaults from \"../HistogramDefaults\";\nimport Observable from \"../../utils/Observable\";\n\n/**\n * Gradient index shared for all instances\n */\nvar gradientIndex = 0;\n\n/**\n * @class\n * HistogramHandle representing control handle for histogram\n */\nexport default class HistogramHandle {\n\t/**\n\t * @param {D3Selection} groupEl\n\t * @param {Number} value\n\t * @param {Number} index\n\t * @param {HistoryData} histogramData\n\t * @param {Object} options\n\t */\n\tconstructor(groupEl, value, index, histogramData, options) {\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"drag\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when drag on handle starts\n\t\t\t * @param {HistogramHandle} handle\n\t\t\t */\n\t\t\t\"startDrag\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when drag on handle ends\n\t\t\t * @param {HistogramHandle} handle\n\t\t\t */\n\t\t\t\"endDrag\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * handle element\n\t\t */\n\t\tthis._handleEl = null;\n\t\t\n\t\t/**\n\t\t * @private\n\t\t * handle line element\n\t\t */\n\t\tthis._handleLineEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle circle element\n\t\t */\n\t\tthis._handleCircleEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle mask element\n\t\t */\n\t\tthis._handleMaskEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle mask gradient element\n\t\t */\n\t\tthis._handleMaskGradientEl = null;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * handle label element\n\t\t */\n\t\tthis._handleLabelEl = null;\t\t\n\n\t\t/**\n\t\t * @private \n\t\t * True if handle is over\n\t\t */\n\t\tthis._isOver = false;\n\t\t\n\t\t/**\n\t\t * @private \n\t\t * Main group element\n\t\t */\t\t\n\t\tthis._groupEl = groupEl;\n\t\t/**\n\t\t * @private \n\t\t * handle index\n\t\t */\t\t\n\t\tthis._index = index;\n\t\t/**\n\t\t * @private \n\t\t * handle value\n\t\t */\t\t\n\t\tthis._value = value;\n\t\t/**\n\t\t * @private \n\t\t * initial handle value\n\t\t */\t\t\n\t\tthis._initialValue = new Number(value);\t\t\n\t\t/**\n\t\t * @private \n\t\t * handle position\n\t\t */\t\t\n\t\tthis._position = histogramData.valueToPosition(value);\n\t\t/**\n\t\t * @private \n\t\t * initial handle position\n\t\t */\t\t\n\t\tthis._initialPosition = new Number(this._position);\n\t\t/**\n\t\t * @private \n\t\t * bar options\n\t\t */\t\t\n\t\tthis._options = options;\n\t\t/**\n\t\t * @private \n\t\t * histogram data\n\t\t */\t\t\n\t\tthis._histogramData = histogramData;\n\t\t/**\n\t\t * @private \n\t\t * Cache for storing label size, enhances performance when animating\n\t\t */\t\t\n\t\tthis._labelSizeCache = {};\n\n\t\t/**\n\t\t * @private \n\t\t * elements\n\t\t */\t\t\n\t\tthis._elements = [];\t\t\n\t\t\n\t\tthis._renderHandle();\n\t}\n\n\t/**\n\t * @public\n\t * Destroys this handle\n\t */\n\tdestroy(){\n\t\tthis._elements.forEach(element=>element.remove());\n\t\tthis._elements = [];\n\t}\n\n\t/**\n\t * @private\n\t   * Renders drag handle\n\t   */\n\t_renderHandle() {\n\t\tthis._elements = [\n\t\t\tthis._createHandleElement(),\n\t\t\tthis._createHandleLineElement(),\n\t\t\tthis._createHandleCircleElement(),\n\t\t\tthis._createDragMaskElement(),\n\t\t\tthis._createMaskGradientElement(),\n\t\t\tthis._createDragLabelElement()\n\t\t];\n\n\t\tthis._handleHoverState();\n\t\tthis._handleDrag();\n\t}\t\n\n\thide(){\n\t\tthis._elements.forEach(element=>element.attr(\"visibility\", \"hidden\"));\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Returns X position of this handle\n\t * @returns {Number} X position handle\n\t */\n\tgetXPosition() {\n\t\treturn parseInt(this._handleEl.attr(\"x\"))+Defaults.ACTIVE_HANDLE_AREA_WIDTH/2;\n\t}\n\n\t/**\n\t * @public\n\t * Sets hover state\n\t */\n\tsetHoverState(){\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 3);\n\t\tthis._updateLabelPosition(this._position);\n\t}\n\t\n\t/**\n\t * @public \n\t * @returns {SVGRect} \n\t * Returns drag label box for this handle\n\t */\n\tgetLabelBox(){\n\t\treturn this._handleLabelEl.node().getBBox();\n\t}\n\n\t/**\n\t * @public \n\t * Shifts handle label by given offset so it can handle label position conflicts\n\t */\n\tsetLabelOffset(offset){\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\n\t\tthis._updateLabelPosition(this._position);\n\t}\n\n\t/**\n\t * @public \n\t * Sets handle position\n\t */\n\tsetHandleXPosition(position){\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\"+position+\", \"+this._options.height+\")\")\n\t\treturn this;\n\t}\n\n\tsetLabelText(text){\n\t\tthis._handleLabelEl.text(text);\n\t\treturn this;\n\t}\n\n\tshowLabel(){\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\n\t\treturn this;\n\t}\n\n\thideLabel(){\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\n\t\treturn this;\n\t}\t\n\n\tsetLabelPosition(position){\n\t\tthis.setLabelOffset(0);\n\t\tthis._updateLabelPosition(position);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Unsets hover state\n\t */\n\tunsetHoverState(){\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 1);\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(0, 0)\")\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(0, 0)\")\n\t}\n\n\t/**\n\t * @public\n\t * Enables this handle \n\t */\n\tenable(){\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"all\"));\n\t}\n\n\t/**\n\t * @public\n\t * Disables this handle \n\t */\n\tdisable(){\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"none\"));\n\t}\n\n\t/**\n\t * @private\n\t * Handle hover state\n\t */\n\t_handleHoverState(){\n\t\t// line hover effect\n\t\tthis._handleEl.on(\"mouseover\", () => {\n\t\t\tthis._isOver = true;\n\t\t\tthis.setHoverState();\n\t\t})\n\t\tthis._handleEl.on(\"mouseout\", () => {\n\t\t\tthis._isOver = false;\n\t\t\tthis.unsetHoverState();\n\t\t})\n\t}\n\n\t/**\n\t * @private\n\t * handles what happens when drag starts\n\t */\n\t_onStartDrag(){\n\t\tthis._groupEl.classed(style[\"dragging\"], true);\n\t\tthis._observable.fire(\"startDrag\", this);\n\t}\n\n\t/**\n\t * @private\n\t * handles what happens on drag\n\t */\n\t_onDrag(){\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar xpos = Math.round(Math.max(Math.min(d3.event.x, width), 0));\n\n\t\tthis._handleEl.attr(\"x\", xpos - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\n\t\tthis._handleLineEl.attr(\"x\", xpos - 2);\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\" + xpos + \",\" + height + \")\");\n\t\tthis._handleEl.attr(\"data-handle-value\", this._histogramData.positionToValue(xpos))\n\n\t\tthis.setHoverState();\n\n\t\tthis._position = xpos;\n\n\t\t// prevent recalculating value for the same position\n\t\tif (parseInt(this._position) !== parseInt(this._initialPosition)){\n\t\t\tthis._value = this._histogramData.positionToValue(xpos);\n\t\t} else {\n\t\t\tthis._value = this._initialValue;\n\t\t}\n\n\t\tthis._handleLabelEl.text(this._getLabelText())\n\n\t\tthis._updateLabelPosition(xpos);\n\t\tthis._observable.fire(\"drag\");\t\t\n\t}\n\n\t_getLabelText() {\n\t\treturn this._options.format(this._value);\n\t}\n\t/**\n\t * @private\n\t * handles what happens when drag ends\n\t */\n\t_onEndDrag(){\n\t\tthis._groupEl.classed(style[\"dragging\"], false);\n\t\tif (!this._isOver) {\n\t\t\tthis.unsetHoverState();\n\t\t}\n\n\t\tthis._observable.fire(\"endDrag\", this);\t\t\n\t}\n\n\t/**\n\t * @private\n\t * Handles handle drag \n\t */\n\t_handleDrag(){\n\t\tthis._handleEl.call(d3.drag()\n\t\t\t.on(\"drag\", this._onDrag.bind(this))\n\t\t\t.on(\"start\", this._onStartDrag.bind(this))\n\t\t\t.on(\"end\", this._onEndDrag.bind(this)));\n\t}\n\t/**\n\t * @private\n\t * Return computed or stored label length\n\t * @param {SVGElement}\n\t * @param {Number} length \n\t */\n\t_getComputedLabelTextLength(label){\n\t\tvar content = label.innerHTML;\n\t\tthis._labelSizeCache[content] = this._labelSizeCache[content] || label.getComputedTextLength();\n\t\treturn this._labelSizeCache[content];\n\t}\n\n\t/**\n\t * @private\n\t * Updates label position\n\t * @param {Number} position \n\t */\n\t_updateLabelPosition(position) {\n\t\tvar label = this._handleLabelEl.node();\n\t\tvar maskPadding = this._options.fontSize;\t\t\n\n\t\t// we need to calculate text length so we can create mask and center text\n\t\tvar textLength = this._getComputedLabelTextLength(label);\n\t\tvar maskWidth = textLength + maskPadding * 2;\n\t\tvar xPosition = position - textLength / 2;\n\n\t\t// handle when dragging towards left side\n\t\tif (xPosition < 0) {\n\t\t\txPosition = 0;\n\t\t}\n\n\t\t// handle when dragging towards right side\n\t\tif (xPosition + textLength > this._options.width) {\n\t\t\txPosition = this._options.width  - textLength;\n\t\t\tthis._handleLabelEl.attr(\"x\", this._options.width);\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"end\");\n\t\t} else {\n\t\t\tthis._handleLabelEl.attr(\"x\", xPosition);\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"start\");\n\t\t}\n\n\t\t// position mask\n\t\tthis._handleMaskEl.attr(\"x\", () => {\n\t\t\treturn parseInt(xPosition) - maskPadding;\n\t\t});\n\n\t\tthis._handleMaskGradientEl.attr(\"x1\", xPosition - maskPadding);\n\t\tthis._handleMaskGradientEl.attr(\"x2\", xPosition + maskWidth - maskPadding);\n\n\t\tthis._handleMaskEl.attr(\"width\", maskWidth);\n\t\tthis._handleMaskEl.attr(\"height\", this._options.fontSize);\n\t}\n\t\t\n\t/**\n\t * Creates mask gradient element\n\t * @param {Number} handleIndex \n\t */\n\t_createMaskGradientElement(){\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\n\t\t\t.attr(\"id\", \"brush-mask-gradient-\" + gradientIndex++)\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\n\t\t\t.attr(\"y1\", 0).attr(\"x1\", 50)\n\t\t\t.attr(\"y2\", 0).attr(\"x2\", 0);\n\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\n\t\t\t.data([\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\n\t\t\t])\n\t\t\t.enter().append(\"stop\")\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\n\n\t\treturn this._handleMaskGradientEl;\n\t}\n\n\t/**\n\t * @private \n\t * Renders main handle element \n\t * @returns {SVGElement}\n\t */\n\t_createHandleElement(){\n\t\tthis._handleEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"custom-handle\"])\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"data-handle-index\", this._index)\n\t\t\t.attr(\"data-handle-value\", this._value)\n\t\t\t.attr(\"cursor\", \"ew-resize\")\n\t\t\t.attr(\"width\", Defaults.ACTIVE_HANDLE_AREA_WIDTH)\n\t\t\t.attr(\"height\", this._options.height + 5)\n\t\t\t.attr(\"x\", this._position - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\n\n\t\treturn this._handleEl;\n\t}\n\n\t/**\n\t * @private \n\t * Renders handle line element \n\t * @returns {SVGElement} \n\t */\n\t_createHandleLineElement(){\n\t\tthis._handleLineEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"custom-handle-line\"])\n\t\t\t.attr(\"width\", 4)\n\t\t\t.attr(\"height\", this._options.height)\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"x\", this._position - 2);\n\n\t\treturn this._handleLineEl;\n\t}\t\n\n\t/**\n\t * @private \n\t * Renders handle circle element \n\t * @returns {SVGElement} \n\t */\n\t_createHandleCircleElement(){\n\t\tthis._handleCircleEl = this._groupEl.append(\"circle\")\n\t\t\t.attr(\"class\", style[\"custom-handle-circle\"])\n\t\t\t.attr(\"transform\", \"translate(\" + this._position + \",\" + this._options.height + \")\")\n\t\t\t.attr(\"fill\", \"#ffffff\")\n\t\t\t.attr(\"fill-opacity\", 1)\n\t\t\t.attr(\"stroke\", \"#000\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"cursor\", \"ew-resize\")\n\t\t\t.attr(\"r\", 3.5);\n\n\t\treturn this._handleCircleEl;\n\t}\t\t\n\n\t/**\n\t * @private \n\t * Renders drag mask element \n\t * @returns {SVGElement} \n\t */\n\t_createDragMaskElement(){\n\t\tthis._handleMaskEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"drag-label-mask\"])\n\t\t\t.attr(\"fill\", \"url(#brush-mask-gradient-\" + gradientIndex+\")\")\n\t\t\t.attr(\"y\", this._options.height + Defaults.LABEL_MARGIN)\n\t\t\t.attr(\"display\", \"none\");\t\t\t\n\n\t\treturn this._handleMaskEl;\n\t}\n\t\n\t/**\n\t * @private \n\t * Renders handle label element \n\t * @returns {SVGElement}  \n\t */\n\t_createDragLabelElement(){\n\t\tvar format = this._options.format;\n\t\tvar height = this._options.height;\n\t\tthis._handleLabelEl = this._groupEl.append(\"text\")\n\t\t\t.attr(\"class\", style[\"drag-label\"])\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"font-size\", this._options.fontSize)\n\t\t\t.text(() => {\n\t\t\t\tvar formattedValue = format(this._initialValue);\n\t\t\t\treturn formattedValue;\n\t\t\t})\n\t\t\t.attr(\"y\", height + this._options.fontSize + Defaults.LABEL_MARGIN);\n\n\t\t\n\t\tthis._updateLabelPosition(this._position);\n\t\treturn this._handleLabelEl;\n\t}\n}","/**\n * @public\n * Returns handle positions offsets so that labels don't conflict visually\n * @param {HistogramData} histogramData \n * @returns {Array} label offsets\n */\nexport function getHandlePositionOffsets(handle1, handle2, maskPadding, width){\n    var label1Box = handle1.getLabelBox();\n    var label2Box = handle2.getLabelBox();\n\n    // calculate conflict number\n    var conflictDiff = label2Box.x - (label1Box.x + label1Box.width)-maskPadding;\n    // and handle if there is not enough space\n    if (conflictDiff<0){\n        // pos1 diff to the left\n        var posDiff1 = conflictDiff/2;\n        // pos2 diff to to right\n        var posDiff2 = conflictDiff/2;\n\n        // position left to 0 if position would be lower than 0\n        var xMin = label1Box.x+posDiff1;\n        if (xMin < 0){\n            posDiff1 = label1Box.x; \n            // also shift right label so we keep it visible\n            posDiff2 = posDiff2*2\n        }\n\n        // same with max value\n        var xMax = label2Box.x+label2Box.width-posDiff2;\n        if (xMax > width){\n            posDiff2 += xMax-width; \n            posDiff1 = posDiff1*2\n        }\n        return [posDiff1, -posDiff2];                  \n    }\n\n    return [0,0];\n}","import style from \"../Histogram.css\";\nimport HistogramHandle from \"./HistogramHandle\";\nimport Observable from \"../../utils/Observable\";\nimport * as PositionUtils from \"../utils/PositionUtils\"\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Histogram renderer class\n * @param {Object} options\n */\nexport default class HistogramSelectionRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Histogram options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Bar data \n\t\t */\n\t\tthis._histogramData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * history selection\n\t\t */\n\t\tthis._histogramSelection = null;\n\n\t\t/**\n\t\t * @private\n\t\t * index of over selection  \n\t\t */\n\t\tthis._overSelectionIndex = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * selection handles\n\t\t */\n\t\tthis._handles = [];\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * true if handle is dragged\n\t\t */\n\t\tthis._draggingHandle = false;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous selection for animation\n\t\t */\n\t\tthis._prevSelection = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * true if animation is run\n\t\t */\n\t\tthis._animating = false;\n\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a category\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is changed\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\t\t\n    }\n\n\t/**\n\t * @public\n\t * Returns whether histogram has been rendered or not\n\t * @returns {boolean} true if histogram has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * @param {DOMElement}  \n\t * @returns {HistogramSelectionRenderer} returns this widget instance\n\t */\n\trender(groupEl){\n\t\tthis._rendered = true;\n\t\tthis._groupEl = groupEl\n\n\t\treturn this;\n\t} \t\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._destroyHandles();\n\t\tif (this._selectionBarGroups){\n\t\t\tthis._selectionBarGroups.remove();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Destroys selection controls \n\t */\n\t_destroyHandles(){\n\t\tthis._handles.forEach(handle=>handle.destroy());\n\t\tthis._handles = [];\n\t}\n\n\t/**\n\t * @private\n\t * Handles click on handle\n\t * @param {Number} handleIndex\n\t * @param {Number} handleValue \n\t */\n\t_onHandleClick(handleIndex, handleValue){\n\t\t// call prompt handler if available\n\t\tif (this._options.promptHandler){\n\t\t\tthis._options.promptHandler(handleValue).then((promptResult)=>{\n\t\t\t\tvar startSelectionSnapshot = JSON.stringify(this._histogramSelection.getOutputSelection());\n\t\t\t\tpromptResult = parseFloat(promptResult);\n\t\t\t\t// must be within min max range\n\t\t\t\tvar minMax = this._histogramData.getMinMax();\n\t\t\t\tpromptResult = Math.min(minMax.max, promptResult);\n\t\t\t\tpromptResult = Math.max(minMax.min, promptResult);\n\n\t\t\t\tvar points = this._histogramSelection.getSelectionPoints();\n\t\t\t\tpoints[handleIndex] = {\n\t\t\t\t\tvalue:promptResult\n\t\t\t\t};\n\n\t\t\t\tvar positions = points\n\t\t\t\t\t.sort((p1,p2)=>p1.value-p2.value)\n\t\t\t\t\t.map(point=>this._histogramData.valueToPosition(point.value));\n\t\t\t\t\n\t\t\t\tthis._updateSelectionPositions(positions, points);\n\t\t\t\tthis._updateSelection();\n\n\t\t\t\t// TODO: update handles without destroying them\n\t\t\t\tthis._destroyHandles();\n\t\t\t\tthis._renderHandles();\n\n\t\t\t\t// fire selection change if selection is changed\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t}\n\n\t/**\n\t * @private\n\t * Toggles selection\n\t * @param {Number} selectionIndex \n\t */\n\t_toggleSelection(selectionIndex){\n\t\tvar selection = this._options.selection[selectionIndex];\n\t\tselection.disabled = !selection.disabled;\n\t\tvar enabled = !selection.disabled;\n\t\tthis._updateSelection();\n\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t}\t\n\n\t/**\n\t * @private\n\t * Handles click on chart\n\t */\n\t_onClick(){\n\t\tvar target = d3.select(d3.event.target);\n\t\tvar selectionIndex = target.attr(\"data-selection-index\");\n\t\tvar handleIndex = target.attr(\"data-handle-index\");\n\n\t\tif (selectionIndex != null && this._histogramSelection.allowsToggle()){\n\t\t\tthis._toggleSelection(selectionIndex)\n\t\t} else if (handleIndex != null){\n\t\t\tthis._onHandleClick(handleIndex, target.attr(\"data-handle-value\"));\n\t\t}\n\t}\n\t/**\n\t * @private\n\t * Handles handle click \n\t */\n\t_handleClick(){\n\t\tthis._groupEl.on(\"click\", this._onClick.bind(this));\n\t}\n\n\t/**\n\t * @private\n\t * Refreshes histogram data \n\t * @param {HistogramData}\n\t * @param {HistogramSelection}\n\t * @param {Object} options\n\t */\n\trefresh(histogramData, histogramSelection, options){\n\t\tthis._animate = options && options.animate;\n\t\tif (this._animate && this._histogramSelection && this._histogramSelection.getSelection().length == histogramSelection.getSelection().length){\n\t\t\tthis._prevSelection = this._histogramSelection.getSelection();\n\t\t\tthis._prevHistogramData = this._histogramSelection.getSelection();\n\t\t}\n\n\t\tif (this._animate && this._histogramData){\n\t\t\tthis._prevHistogramData = this._histogramData;\n\t\t}\n\n\t\tthis._histogramData = histogramData;\n\t\tthis._histogramSelection = histogramSelection;\n\t\t\n\t\tthis._clear();\n\t\tthis._renderSelection();\n\t\tthis._updateSelection();\n\n\t\tthis._handleHoverState();\n\t\tthis._handleClick();\n\n\t\treturn this;\n\t}\n\n\tsetSelection(histogramSelection, options){\n\t\tif (this.needRefresh(this._histogramSelection, histogramSelection)) {\n\t\t\treturn this.refresh(this._histogramData, histogramSelection, options);\n\t\t}\n\t\tthis._histogramSelection = histogramSelection;\n\t\tthis._updateSelection();\n\t\treturn this;\n\t}\n\n\tneedRefresh(prevHistogramSelection, histogramSelection) {\n\t\tif (!prevHistogramSelection || !histogramSelection) {\n\t\t\treturn true;\n\t\t}\n\t\tconst prev = prevHistogramSelection.getSelection();\n\t\tconst curr = histogramSelection.getSelection();\n\t\treturn (\n\t\t\t!prev || !curr ||\n\t\t\tprev.length !== curr.length ||\n\t\t\tcurr.reduce((acc, sel, i) => sel.from === prev[i].from && sel.to === prev[i].to ? acc : true, false)\n\t\t);\n\t}\n\n\t/**\n\t * @private\n\t * Updates selection controls on hover\n\t * @param {Number} selectionIndex \n\t */\n\t_updateSelectionControlsHoverState(selectionIndex){\n\t\t// get all handles sorted by X position\n\t\tvar handles = this._handles.slice().sort((h1,h2)=>{\n\t\t\treturn h1.getXPosition() - h2.getXPosition();\n\t\t});\n\n\t\t// unset hover state on all handles\n\t\thandles.forEach(handle=>handle.unsetHoverState());\n\n\t\t// selection is active, active both handles for active selection\n\t\tif (selectionIndex != null){\n\t\t\tvar handle1 = handles[selectionIndex];\n\t\t\tvar handle2 = handles[selectionIndex+1];\n\n\t\t\thandle1.setHoverState();\n\t\t\thandle2.setHoverState();\n\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\n\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\n\t\t}\n\t}\t\n\n\t/**\n\t * \n\t * @private \n\t * Handles what happens when mouse is over selection\n\t * @param {String} type \n\t * @param {Number} i \n\t * @param {HTMLElement[]} array \n\t */\n\t_onSelectionMouseOver(d, i, nodes){\n\t\t// prevent selection when dragging handles\n\t\tif (this._draggingHandle){\n\t\t\treturn;\n\t\t}\n\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0.00)\")\n\t\tvar selectionIndex = parseInt(d3.select(d3.event.target).attr(\"data-selection-index\"));\n\t\tif (this._overSelectionIndex != selectionIndex){\n\t\t\tthis._overSelectionIndex = selectionIndex;\n\t\t\tthis._updateSelection();\n\t\t\tthis._updateSelectionControlsHoverState(selectionIndex);\n\t\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @private \n\t * Handles what happens when mouse is out of selection\n\t * @param {String} type \n\t * @param {Number} i \n\t * @param {HTMLElement[]} array \n\t */\n\t_onSelectionMouseOut(d, i, nodes){\n\t\t// prevent selection when dragging handles\n\t\tif (this._draggingHandle){\n\t\t\treturn;\n\t\t}\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0)\")\n\n\t\tthis._overSelectionIndex = null;\n\t\tthis._updateSelectionControlsHoverState(null);\n\t\tthis._updateSelection();\n\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\n\t\t\n\t}\n\n\t/**\n\t * @private \n\t * Handles hover state\n\t */\n\t_handleHoverState(){\n\t\tvar g = this._groupEl;\n        g.selectAll(\".\"+style.selectionbargroup).on(\"mouseout\", this._onSelectionMouseOut.bind(this));\n        g.selectAll(\".\"+style.selectionbargroup).on(\"mouseover\", this._onSelectionMouseOver.bind(this));\n\t}\n\n\t/**\n\t * @private \n\t * Handles when handle is dragged\n\t */\n\t_onHandleDrag(){\n\t\tvar positions = this._handles.map(handle=>handle.getXPosition()).sort((p1, p2)=>{\n\t\t\treturn p1-p2;\n\t\t});\n\n\t\tthis._updateSelectionPositions(positions);\n\t\tthis._updateSelection();\n\t}\n\n\t/**\n\t* @private\n\t* Updates selection with new positions\n\t* @param {Array} positions\n\t* @param {Array} points\n\t*/\n\t_updateSelectionPositions(positions, points){\n\t\tvar selection = this._histogramSelection.getSelection();\n\t\tpositions.forEach((p, index)=>{\n\t\t\tif (index>selection.length-1){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar position = {\n\t\t\t\tfrom:p,\n\t\t\t\tto:positions[index+1]\n\t\t\t};\n\n\t\t\tvar value = {\n\t\t\t\tfrom:points?points[index].value:this._histogramData.positionToValue(position.from),\n\t\t\t\tto:points?points[index+1].value:this._histogramData.positionToValue(position.to),\n\t\t\t};\n\n\t\t\t[\"from\", \"to\"].forEach(pos=>{\n\t\t\t\tconst selectionChanged = points?\n\t\t\t\t\t// if new points are given, we need to compare selection values\n\t\t\t\t\tselection[index][pos] !== value[pos]:\n\t\t\t\t\t// otherwise, we need to compare selection position\n\t\t\t\t\tselection[index][\"position\"][pos] !== position[pos];\n\n\t\t\t\t// update selection on change\n\t\t\t\tif (selectionChanged){\n\t\t\t\t\tselection[index][pos] = value[pos];\t\n\t\t\t\t\tselection[index][\"position\"][pos] = position[pos];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\t\n\n\t/**\n\t* @private\n\t* Renders selection bars\n\t*/\n\t_renderSelection() {\n\t\tvar height = this._options.height;\n\t\tvar selection = this._histogramSelection.getSelection();\n\n\t\t// hover selection bars\n\t\tthis._selectionBarGroups = this._groupEl.selectAll(\".\"+style.selectionbargroup)\n\t\t\t.data([...selection].reverse()) // reverse because left icons needs to be in foreground\n\t\t\t.enter().append(\"g\")\n\t\t\t.attr(\"class\", style.selectionbargroup)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"height\", height);\n\n\t\tthis._selectionBarsIcons = this._selectionBarGroups.append(\"image\")\n\t\t\t.attr(\"class\", style.selectionbaricon)\n\t\t\t.attr(\"xlink:href\", function(d) {\n\t\t\t\treturn d.icon ? d.icon.src : null;\n\t\t\t});\n\n\t\tthis._selectionBars = this._selectionBarGroups.append(\"rect\")\n\t\t\t.attr(\"class\", style.selectionbar)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\n\t\t\t.attr(\"height\", height);\n\t\tthis._renderHandles();\n\t}\n\n\t/**\n\t* @private\n\t* Renders selection controls\n\t*/\n\t_renderHandles(){\n\t\t// render selection controls\n\t\tthis._handles = this._histogramSelection.getSelectionPoints().map((point, index)=>{\n\t\t\tvar value = point.value;\n\n\t\t\tvar handle = new HistogramHandle(this._groupEl, value, index, this._histogramData, this._options);\n\n\t\t\tif(point.hidden){\n\t\t\t\thandle.hide();\n\t\t\t}\n\n\t\t\thandle.on(\"drag\", ()=>{\n\t\t\t\tthis._onHandleDrag();\n\t\t\t}, this);\n\n\t\t\tvar startSelectionSnapshot;\n\n\t\t\t// disable other handles when draggin starts\n\t\t\thandle.on(\"startDrag\", ()=>{\n\t\t\t\tstartSelectionSnapshot = JSON.stringify(this._options.selection);\n\t\t\t\t\n\t\t\t\tthis._draggingHandle = true;\n\t\t\t\tthis._handles.forEach(handle=>handle.disable());\n\t\t\t\thandle.enable();\n\t\t\t}, this);\n\n\t\t\t// enable all handles when draggin starts\n\t\t\thandle.on(\"endDrag\", ()=>{\n\t\t\t\tthis._draggingHandle = false;\n\t\t\t\tthis._handles.forEach(handle=>handle.enable());\n\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\n\t\t\n\t\t\treturn handle;\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Returns bar color based on X position\n\n\t* @param {Number} barX\n\t* @param {Array} selection\n\t* @returns {Number} bar category index\n\t* @param {HistogramData} histogram data \n\t*/\n\t_getBarSelectionIndex(barX, selection, data){\n\t\tfor (var i=0;i<selection.length;i++){\n\t\t\tvar s = selection[i];\n\t\t\tvar isLast = i == selection.length-1;\n\t\t\tvar within = barX >= data.valueToPosition(s.from) && (barX < data.valueToPosition(s.to) || (isLast && barX <= data.valueToPosition(s.to)));\n\t\t\tif (within) return i;\n\t\t}\n\n\t\treturn null;\n\t}\t\n\n\t/**\n\t * @private\n\t * Returns selection color\n\t * @param {Object} selection\n\t * @param {Object} d datum\n\t */\n\t_getSelectionColor(selection, d){\n\t\tif (selection.colors){\n\t\t\treturn selection.colors[d.volumeIndex];\n\t\t}\n\n\t\tif (selection.color){\n\t\t\treturn selection.color\n\t\t}\n\n\t\treturn this._options.selectionColor;\n\t}\n\n\t/**\n\t * @private\n\t * Returns bar color for given bar position with given selection\n\t * @param {Number} barX \n\t * @param {Array} selection \n\t * @param {HistogramData} histogram data \n\t */\n\t_getBarColor (barX, selection, data, d){\n\t\tvar inactiveBarColor = this._options.inactiveBarColor;\n\t\tvar overSelectionColor = this._options.overSelectionColor;\n        var segmentDivider = this._options.segmentDivider;\n\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\n\t\tif (barSelectionIndex == null){\n\t\t\treturn inactiveBarColor;\n\t\t} else if (segmentDivider && selection.some(sel => (barX === sel.position.to || barX === sel.position.from) && !sel.disabled)) {\n\t\t\treturn segmentDivider;\n\t\t} else if (selection[barSelectionIndex].disabled){\n\t\t\treturn inactiveBarColor;\n\t\t} else if (this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex){\n\t\t\treturn overSelectionColor;\n\t\t} else {\n\t\t\treturn this._getSelectionColor(selection[barSelectionIndex], d);\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Returns bar color for given bar position with given selection\n\t * @param {Number} barX \n\t * @param {Array} selection \n\t * @param {HistogramData} histogram data \n\t */\n\t_getBarOpacity (barX, selection, data){\n\t\tvar defaultOpacity = 1;\n\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\n\t\tvar isOver = this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex;\n\t\tvar isDisabled = barSelectionIndex != null && selection[barSelectionIndex].disabled;\n\n\t\tif (isOver){\n\t\t\treturn this._options.overSelectionOpacity;\n\t\t}\n\n\t\tif (isDisabled){\n\t\t\treturn this._options.inactiveBarOpacity;\n\t\t}\n\t\t\n\t\t// otherwise use set opacity if \n\t\tif (barSelectionIndex != null && selection[barSelectionIndex].opacity != null){\n\t\t\treturn selection[barSelectionIndex].opacity;\n\t\t} \n\n\t\treturn defaultOpacity;\n\t}\t\n\n\t/**\n\t * Runs onTransition as a transition between two selections\n\t * @param {Array} selection1 \n\t * @param {Array} selection2 \n\t * @param {Function} onTransition handler\n\t */\n\t_onSelectionTransition(selection1, selection2, data1, data2, onTransition, onComplete){\n\t\tselection1.forEach((s1,selectionIndex)=>{\n\t\t\tvar s2 = selection2[selectionIndex];\n\t\t\tvar width = this._options.width;\n\t\t\tif (selection1[selectionIndex]){\n\t\t\t\tvar transitions = [];\n\t\t\t\tvar frames = [];\n\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.from)), Math.round(data2.valueToPosition(s2.from))]);\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.to)), Math.round(data2.valueToPosition(s2.to))]);\n\n\t\t\t\t// make sure duration is calculated based on transition length\n\t\t\t\tframes = [Math.abs((transitions[0][0] - transitions[0][1])/width), Math.abs((transitions[1][0] - transitions[1][1])/width)];\n\n\t\t\t\ttransitions.forEach((t, handleIndex)=>{\n\t\t\t\t\tvar duration = 0;\n\n\t\t\t\t\twhile(t[0] !== t[1]){\n\t\t\t\t\t\tsetTimeout(onTransition.bind(this, t[0], selectionIndex, handleIndex), duration);\n\t\t\t\t\t\t\n\t\t\t\t\t\tduration = duration+0.5/frames[handleIndex];\n\t\t\t\t\t\tt[0] = t[0]>t[1]?t[0]-1:t[0]+1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// call final complete fn only if duration is > 0, this prevents premature animation end\n\t\t\t\t\t// when one of the sides is in the same position\n\t\t\t\t\tif (duration>0){\n\t\t\t\t\t\tsetTimeout(function(p, si, hi){\n\t\t\t\t\t\t\tonTransition(p, si, hi)\n\t\t\t\t\t\t\tonComplete(p, si, hi);\n\t\t\t\t\t\t}.bind(this, t[1], selectionIndex, handleIndex), ++duration);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Updates selection\n\t*/\n\t_updateSelection(){\n\t\tvar selection = this._histogramSelection.getSelection();\n\t\tvar bars = this._groupEl.selectAll(\".\"+style.bar);\n\n\t\t// fills bars with given selection\n\t\tvar fillBars = (s, data) => {\n\t\t\t// handle bar colors\n\t\t\tbars.attr(\"fill\", (d)=> {\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\n\t\t\t\treturn this._getBarColor(barX, s, data, d);\n\t\t\t})\n\n\t\t\t// handle bar opacity\n\t\t\tbars.attr(\"fill-opacity\", (d)=> {\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\n\t\t\t\treturn this._getBarOpacity(barX, s, data, d);\n\t\t\t})\n\t\t}\n\n\t\t// handle animation if previous selection is set\n\t\tif (this._animate && this._prevSelection){\n\t\t\tvar prevSelection = this._prevSelection;\n\t\t\tvar prevData = this._prevHistogramData;\n\t\t\t\n\t\t\t// set prev selection\n\t\t\tfillBars(prevSelection, this._prevHistogramData);\n\n\t\t\t// set handle positions to prev selection\n\t\t\tprevSelection.forEach((s, i)=>{\n\t\t\t\tvar p1 = this._prevHistogramData.valueToPosition(s.from);\n\t\t\t\tvar p2 = this._prevHistogramData.valueToPosition(s.to);\n\n\t\t\t\tthis._handles[i].setHandleXPosition(p1).setLabelPosition(p1);\n\t\t\t\tthis._handles[i+1].setHandleXPosition(p2).setLabelPosition(p2)\n\t\t\t});\n\n\t\t\tthis._animating = true;\n\t\t\t//fill bars on selection transition and move handles\n\t\t\tthis._onSelectionTransition(prevSelection, selection, prevData, this._histogramData, \n\t\t\t\t// on transition callback\n\t\t\t\t(p, selectionIndex, handleIndex)=>{\n\t\t\t\t\tvar bar = d3.select(bars.nodes()[p]);\n\t\t\t\t\tbar.attr(\"fill\", d=>{\n\t\t\t\t\t\treturn this._getBarColor(p, selection, this._histogramData, d);\n\t\t\t\t\t});\n\n\t\t\t\t\t//var handleText = this._options.format(this._histogramData.positionToValue(p));\n\t\t\t\t\t// move handles\n\t\t\t\t\t[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].setHandleXPosition(p).setLabelPosition(p)\n\n\t\t\t\t// on complete callback\t\t\n\t\t\t},()=>{\n\t\t\t\t\t// hide handles\n\t\t\t\t\t//[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].hideLabel();\n\t\t\t\t\tfillBars(selection, this._histogramData)\n\t\t\t\t\tthis._animating = false;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tthis._prevSelection = null;\n\t\t\tthis._prevHistogramData = null;\n\t\t\n\t\t} else {\n\t\t\tfillBars(selection, this._histogramData)\n\t\t}\n\t\t\n\t\t// selection rects\n\t\tthis._selectionBarGroups\n            .data([...selection].reverse()) // reverse because left icons needs to be in foreground\n\t\t\t.attr(\"transform\", (d) => {\n\t\t\t\treturn `translate(${this._histogramData.valueToPosition(d.from)}, 0)`;\n\t\t\t})\n\t\t\t.attr(\"width\", (d) => {\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\n\t\t\t});\n\n        this._selectionBarsIcons\n            .data([...selection].reverse()) // reverse because left icons needs to be in foreground\n            .attr(\"data-selection-index\", function(d,i){\n                return selection.length - i - 1;\n            })\n            .attr(\"visibility\", (d) => d.disabled ? \"hidden\" : \"visible\")\n            .attr(\"x\", (d) => {\n                return (this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from))/2;\n            })\n            .attr(\"y\", (d) => {\n                return d.icon && d.icon.align === \"bottom\" ? 3*this._options.height/4 : this._options.height/2;\n            })\n            .attr(\"transform\", (d) => {\n                if (!d.icon) {\n                    return null;\n                }\n                const y = d.icon.align === \"bottom\" ? -d.icon.height : -d.icon.height/2;\n                return `translate(${-this.selectionIconWidth(d)/2},${y})`\n            })\n            .attr(\"width\", this.selectionIconWidth.bind(this))\n            .attr(\"height\", (d) => {\n                return d.icon ? d.icon.height : null;\n            });\n\n\t\tthis._selectionBars\n            .data([...selection].reverse()) // reverse because left icons needs to be in foreground\n\t\t\t.attr(\"data-selection-index\", function(d,i){\n\t\t\t\treturn selection.length - i - 1;\n\t\t\t})\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\n\t\t\t.attr(\"width\", (d) => {\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\n\t\t\t});\n\t}\n\n\tselectionIconWidth(selection){\n\t\tif (!selection.icon) {\n\t\t\treturn null;\n\t\t} else if (selection.icon.width === \"stretch\") {\n\t\t\treturn this._histogramData.valueToPosition(selection.to) - this._histogramData.valueToPosition(selection.from);\n\t\t} else {\n\t\t\treturn selection.icon.width\n\t\t}\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\t// show label without calculating offsets when animating\n\t\tif (this._animating) {\n\t\t\treturn this._handles.forEach(handle=>handle.showLabel());\n\t\t}\n\n\t\tthis._histogramSelection.getSelection().forEach((s,i)=>{\n\t\t\tvar handle1 = this._handles[i];\n\t\t\tvar handle2 = this._handles[i+1];\n\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\n\t\t});\n\t\t\n\t\tthis._handles.forEach(handle=>handle.showLabel());\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._handles.forEach(handle=>handle.hideLabel());\n\t}\t\t\n\n\t/**\n\t * @public\n\t * Destorys histogram UI  \n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._clear();\n\n\t\treturn this;\n    }\t\t\n}","import style from \"./Histogram.css\";\nimport HistogramSelectionRenderer from \"./selection/HistogramSelectionRenderer\";\nimport * as Defaults from \"./HistogramDefaults\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Histogram renderer class\n * @param {Object} options\n */\nexport default class HistogramRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Histogram options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Bar data \n\t\t */\n\t\tthis._historyData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = d3.scaleBand().range([0, options.width]);\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = d3.scaleLinear().range([options.maxBarHeight, 0]);\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous data for animation\n\t\t */\n\t\tthis._prevData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * selection renderer\n\t\t */\n\t\tthis._selectionRenderer = new HistogramSelectionRenderer(options);\n\n\t\t/**\n\t\t * @private\n\t\t * True if labels are visible\n\t\t */\n\t\tthis._labelsVisible = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a category\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is changed\n\t\t\t * @param {Array} selection\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\t\t\n\n\t\t// relay selection events\n\t\tthis._selectionRenderer.on(\"selectionOver\", (selectionIndex)=>{\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"selectionChanged\", (selection)=>{\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t\t});\t\t\n    }\n\n\t/**\n\t * @public\n\t * Returns whether histogram has been rendered or not\n\t * @returns {boolean} true if histogram has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector){\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar margin = Defaults.MARGIN;\n\n\t\t// render SVG\n\t\tvar svg = this._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width + margin.left + margin.right)\n\t\t\t.attr(\"height\", height + margin.top + this._options.fontSize + margin.bottom)\n\t\t\t.classed(style.histogram, true);\n\n\t\t// render group element\n\t\tvar g = this._groupEl = this._svgEl.append(\"g\")\n\t\t\t.classed(style.inactive, true)\n\t\t\t.attr(\"transform\",\n\t\t\t\"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\t\t// handle hover over svg element\n\t\tsvg.on(\"mouseover.hover\", ()=>{\n\t\t\tg.classed(style.active, true)\n\t\t\tg.classed(style.inactive, false)\n\t\t})\n\n\t\tsvg.on(\"mouseout.hover\", ()=>{\n\t\t\tg.classed(style.inactive, true)\n\t\t\tg.classed(style.active, false)\n\t\t})\n\n\t\tthis._selectionRenderer.render(g);\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t} \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._groupEl.node().innerHTML = \"\";\n\t}\n\n\t/**\n\t * @private\n\t * Refreshes histogram data \n\t * @param {HistogramData}\n\t * @param {HistogramSelection}\n\t * @param {Object} options\n\t */\n\trefresh(histogramData, histogramSelection, options){\n\t\tthis._animate = options && options.animate;\n\n\t\tthis._histogramData = histogramData;\t\t\n\t\tthis._clear();\n\n\t\tthis._xAxis.domain(histogramData.getData().map(function (d) {return d.value; }));\n\t\tthis._yAxis.domain([0, d3.max(histogramData.getData(), function (d) { return Math.max.apply(Math, d.volume); })]);\n\n\t\tthis._renderXAxis();\t\t\n\t\tthis._renderDataBars();\n\n\t\tthis._prevData = histogramData.getData();\t\t\t\n\n\t\tthis._selectionRenderer.refresh(histogramData, histogramSelection, options);\t\n\n\t\tif (this._labelsVisible){\n\t\t\tthis.showSelectionLabels()\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tsetSelection(histogramSelection, options){\n\t\tthis._selectionRenderer.setSelection(histogramSelection, options);\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\tthis._selectionRenderer.showSelectionLabels();\n\t\t// hide axis labels when selection labels are visible\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"none\");\n\t\tthis._labelsVisible = true;\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._selectionRenderer.hideSelectionLabels();\n\t\t// show axis labels when selection labels are not visible\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"block\");\t\t\n\t\tthis._labelsVisible = false;\n\t}\t\n\n\t/**\n\t * @private\n\t * Renders data bars\n\t*/\n\t_renderDataBars() { \n\t\tvar data = this._histogramData.getData();\n\t\t// var prevData = this._prevData;\n\t\tvar height = this._options.height;\n\t\tvar maxBarHeight = this._options.maxBarHeight;\n\t\tvar topMargin = height-maxBarHeight;\n\n\t\tvar y = this._yAxis;\n\n\t\tdata.forEach(d=>{\n\t\t\td.volume.forEach((v, i)=>{\n\t\t\t\tthis._groupEl\n\t\t\t\t\t.append(\"rect\")\n\t\t\t\t\t.datum({\n\t\t\t\t\t\tvalue:d.value,\n\t\t\t\t\t\tvolumeIndex:i\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"class\", style.bar)\n\t\t\t\t\t.attr(\"x\", this._histogramData.valueToPosition(d.value))\n\t\t\t\t\t.attr(\"width\", \"1\")\n\t\t\t\t\t.attr(\"y\", topMargin + Math.floor(y(d.volume[i])))\n\t\t\t\t\t.attr(\"height\", Math.ceil(maxBarHeight - y(d.volume[i])))\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Renders X axis \n\t*/        \n\t_renderXAxis(){\n\t\tvar minMax = this._histogramData.getMinMax();\n\t\tvar format = this._options.format;\n\t\tvar height = this._options.height + this._options.fontSize + Defaults.LABEL_MARGIN;\n\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"])\n\t\t\t.data([minMax.min, minMax.max])\n\t\t\t.enter()\n\t\t\t.append(\"text\")\n\t\t\t.text((d)=>format(d))\n\t\t\t.attr(\"font-size\", this._options.fontSize)\n\t\t\t.attr(\"transform\", (d, i)=>{\n\t\t\t\treturn [\n\t\t\t\t\t\"translate(\"+0+\",\" + height + \")\",\n\t\t\t\t\t\"translate(\"+this._options.width+\",\" + height + \")\"\n\t\t\t\t][i]\n\t\t\t})\n\t\t\t.attr(\"text-anchor\", function(d, i){\n\t\t\t\treturn [\"start\", \"end\"][i];\n\t\t\t})\n\t\t\t.classed(style[\"x-axis\"], true)\n\t}\n\n\t/**\n\t * @public\n\t * Destorys histogram UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\t\tthis._selectionRenderer.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","/**\n * @abstract\n * abstract HistogramSelection class\n */\nexport default class HistogramSelection {\n\tconstructor(histogramData, selection){\n\t\tthis._selection = this.getSelectionWithPositions(histogramData, selection);\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelection()\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\treturn this._selection;\n\t}\n\n\t/**\n\t * @public\n\t * @abstract\n\t * @returns {Array} histogram selection\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\tthrow \"HistogramSelection.getOutputSelection() has to be implemented\";\n\t}\n\n\t/**\n\t * @public \n\t * @abstract\n\t * @returns {String}\n\t * Returns histogram selection type\n\t */\n\tgetSelectionType(){\n\t\tthrow \"HistogramSelection.getSelectionType() has to be implemented\";\n\t}\n\n\t/**\n\t * @abstract\n\t * @public \n\t * @returns {Boolean}\n\t * Returns true if toogle is allowed\n\t */\n\tallowsToggle(){\n\t\tthrow \"HistogramSelection.allowsToggle() has to be implemented\";\n\t}\t\n\n\t/**\n\t * @public\n\t * @abstract \n\t * @returns {Array}\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tthrow \"HistogramSelection.getSelection() has to be implemented\";\n\t}  \t\n\n\t/**\n\t * @public\n\t * @param {Array} histogramData\n\t * @param {Array} selection\n\t * @returns {Array}\n\t * Returns modified selection with positions\n\t */\n\tgetSelectionWithPositions(histogramData, selection){\n\t\treturn selection.map(s=>{\n\t\t\treturn Object.assign(s, {\n\t\t\t\tposition:{\n\t\t\t\t\tfrom:histogramData.valueToPosition(s.from),\n\t\t\t\t\tto:histogramData.valueToPosition(s.to)\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nvar SelectionTypes = {\n\tMULTI:\"multi\",\n\tFILTER:\"filter\",\n\tINVERTED_FILTER:\"inverted-filter\"\n}\n\nexport {SelectionTypes} ","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class MultipleHistogramSelection extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.MULTI;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn true;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\t\t\t\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t \t\n}","import MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport * as Defaults from \"../HistogramDefaults\";\n\n/**\n * @class\n * DefaultHistogramSelectionImpl representing histogram selection\n */\nexport default class DefaultHistogramSelectionImpl extends MultipleHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData) {\n\t\tvar minMax = histogramData.getMinMax();\n\t\tvar colors = Defaults.DEFAULT_COLORS;\n\t\tvar start = minMax.min;\n\t\tvar step = (minMax.max - minMax.min) / colors.length;\n\t\tvar selection = colors.map(color=>{\n\t\t\tvar from = start;\n\t\t\tvar to = start + step;\n\t\t\tstart += step;\n\n\t\t\treturn {\n\t\t\t\tfrom:from, \n\t\t\t\tto:to,\n\t\t\t\tcolor:color\n\t\t\t}\n\t\t});\n\n\t\tsuper(histogramData, selection);\n    }\n}","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class FilterHistogramSelectionImpl extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tif (selection.length != 1){\n\t\t\tthrow \"Filter selection doesn't allow more than one selection\"\n\t\t}\n\t\tsuper(histogramData, selection);\n\t}\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.FILTER;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn false;\n\t}\t\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t\n}","import FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class InvertedFilterHistogramSelectionImpl extends FilterHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n\n\t\tthis._selection = this._getInvertedSelection(histogramData, selection);\n    }\n\n\n\t_getInvertedSelection(histogramData, selection){\n\t\tvar minMax = histogramData.getMinMax();\n\n\t\tvar invertedSelection = [\n\t\t\t{\n\t\t\t\tfrom:minMax.min,\n\t\t\t\tto:selection[0].from\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].from,\n\t\t\t\tdisabled:true,\n\t\t\t\tto:selection[0].to\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].to,\n\t\t\t\tto:minMax.max\n\t\t\t}\n\t\t];\n\n\t\treturn this.getSelectionWithPositions(histogramData, invertedSelection);\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:this._selection[1].from,\n\t\t\t\tto:this._selection[1].to\n\t\t\t}\n\t\t];\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.INVERTED_FILTER;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = super.getSelectionPoints();\n\t\t\n\t\tresult[0].hidden = true;\n\t\tresult[result.length-1].hidden = true;\n\n\t\treturn result;\n\t}  \t\n}","import DefaultHistogramSelectionImpl from \"./DefaultHistogramSelectionImpl\";\nimport MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport InvertedFilterHistogramSelectionImpl from \"./InvertedFilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * HistogramSelection factory returns appropriate selection implementation\n */\nexport default class HistogramSelectionFactory {\n\t/**\n\t * @param {Object} options\n\t */\n\tconstructor(options) {\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * @param {HistogramData} histogramData\n\t * @returns {HistogramSelection} returns histogram selection\n\t * Returns histogram selection\n\t */\n\tgetHistogramSelection(selection, histogramData){\t\t\n\t\t// use default histogram selection if selection is not provided\n\t\tif (!selection){\n\t\t\treturn new DefaultHistogramSelectionImpl(histogramData, this._options.selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.FILTER){\n\t\t\treturn new FilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.INVERTED_FILTER){\n\t\t\treturn new InvertedFilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else {\n\t\t\treturn new MultipleHistogramSelectionImpl(histogramData, selection);\n\t\t}\n\t}  \t\n}","import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./HistogramDefaults\";\nimport HistogramData from \"./HistogramData\";\nimport HistogramRenderer from \"./HistogramRenderer\";\nimport HistogramSelectionFactory from \"./selection/HistogramSelectionFactory\"\nimport {SelectionTypes} from \"./selection/HistogramSelection\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main histogram class\n * @param {Object} options\n */\nclass Histogram {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * prompt handler\n\t\t */\n\t\tthis._options.promptHandler = options.promptHandler || null;\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.maxBarHeight = getOptionValue(options.maxBarHeight, this._options.height);\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar color \n\t\t */\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar opacity \n\t\t */\n\t\tthis._options.inactiveBarOpacity = getOptionValue(options.inactiveBarOpacity, Defaults.INACTIVE_BAR_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Over bar color \n\t\t */\n\t\tthis._options.overSelectionColor = getOptionValue(options.overSelectionColor, Defaults.OVER_SELECTION_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Over selection opacity \n\t\t */\n\t\tthis._options.overSelectionOpacity = getOptionValue(options.overSelectionOpacity, Defaults.OVER_SELECTION_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.selectionColor = getOptionValue(options.selectionColor, Defaults.SELECTION_COLOR);\n\t\t\n\t\t/**\n\t\t * @public\n\t\t * Enable selection toggle \n\t\t */\n\t\tthis._options.enableSelectionToggle = getOptionValue(options.enableSelectionToggle, Defaults.ENABLE_SELECTION_TOGGLE);\n\n\t\t/**\n\t\t * @public\n\t\t * Font size\n\t\t */\n\t\tthis._options.fontSize = getOptionValue(options.fontSize, Defaults.FONT_SIZE);\n\n\t\t/**\n\t\t * @public\n\t\t * selection type\n\t\t */\n\t\tthis._options.selectionType = getOptionValue(options.selectionType, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Color selections should be divided by vertical line. If null no divider is rendered.\n\t\t */\n\t\tthis._options.segmentDivider = getOptionValue(options.segmentDivider, null);\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t * @param {MouseEvent} browser event\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * histogramRenderer\n\t\t */\n\t\tthis._histogramRenderer = new HistogramRenderer(this._options);\n\n\t\tthis._histogramRenderer.on(\"selectionOver\", selectionIndex=>{\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled, d3.event);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"selectionChanged\", (selection)=>{\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t\t});\n\t\t\n\t\tthis._selectionFactory = new HistogramSelectionFactory(this._options);\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Histogram} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._histogramRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._histogramRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Array} data\n\t * @param {Array} selection\n\t * @param {Object} set data options\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetData(data, selection, options) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar histogramData = this._histogramData = new HistogramData(data, this._options);\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, histogramData);\n\n\t\tthis._options.selection = histogramSelection.getSelection();\n\t\tthis._selection = selection;\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = (value => String(value));\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._histogramRenderer.refresh(histogramData, histogramSelection, options);\n\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * @public\n\t * Sets selection type\n\t * @param {String} selectionType\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetSelectionType(selectionType){\n\t\tthis._options.selectionType = selectionType;\n\t\tthis.setSelection(this._selection);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\tthis._histogramRenderer.showSelectionLabels();\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._histogramRenderer.hideSelectionLabels();\n\t}\n\n\t/**\n\t * @deprecated use setSelection instead\n\t */\n\tupdateSelection(selection, options) {\n\t\treturn this.setSelection(selection, options);\n\t}\n\t\n\t/**\n\t * @public\n\t * Sets selection\n\t * @param {Array} selection\n\t * @param {Object} options\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetSelection(selection, options) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tif (!this._histogramData) {\n\t\t\tthrow \"Can't call setSelection() when no data is available.\"\n\t\t}\n\t\t// Do not want to mutate given object\n\t\tconst selectionCopy = JSON.parse(JSON.stringify(selection));\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selectionCopy, this._histogramData);\n\t\tthis._options.selection = histogramSelection.getSelection();\n\t\tthis._selection = selectionCopy;\n\t\tthis._histogramRenderer.setSelection(this._histogramSelection, options);\n\n\t\treturn this;\n\t}\n\n}\n\nHistogram.SelectionTypes = SelectionTypes;\nexport default Histogram;\n","/**\n * @public\n * Default widget width\n */\nexport const WIDTH = 360;\n\n/**\n * @public\n * Default widget height\n */\nexport const HEIGHT = 200;\n\n/**\n * @public\n * Default line color\n */\nexport const LINE_COLOR = \"#7ed321\";\n\n/**\n * @public\n * Default line colors\n */\nexport const LINE_COLORS = [];\n\n/**\n * @public\n * Default line opacity\n */\nexport const LINE_OPACITY = 1;\n\n/**\n * @public\n * Default fill color\n */\nexport const FILL_COLOR = \"#7ed321\";\n\n/**\n * @public\n * Default fill colors\n */\nexport const FILL_COLORS = [];\n\n/**\n * @public\n * Default fill opacity\n */\nexport const FILL_OPACITY = 0.1;\n\n/**\n * @public\n * Default line width\n */\nexport const LINE_WIDTH = 3;\n\n/**\n * @public\n * Default dot size\n */\nexport const DOT_SIZE = 6;\n\n/**\n * @public\n * Default margin \n */\nexport const MARGIN = {\n    bottom:28\n};\n\n/**\n * @public \n * Default axis color \n */\nexport const AXIS_COLOR = \"#f0f0f0\";\n\n\n/**\n * @public \n * Vertical label offset\n */\nexport const LABEL_OFFSET = 5;\n\n\n/**\n * @public \n * Zero line color\n */\nexport const ZERO_LINE_COLOR = \"#bababa\";","import * as d3 from \"d3\";\n\n/**\n * @class\n * series representing data for the line\n */\nexport default class LineData {\n\t/**\n\t * @param {Array} series\n\t * @param {Object} options\n\t */\n\tconstructor(series) {\n\t\tthis._series = series.slice();\n\t\tthis._minMax = this._calculateMinMax(this._series);\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns line series\n\t * @returns {Array} line series\n\t */\n\tgetSeries() {\n\t\treturn this._series;\n\t}\n\n\t/**\n\t * @public\n\t * Returns all data from all series merged into one array\n\t * @returns {Array}\n\t */\n\tgetAllData() {\n\t\treturn [].concat.apply([], this._series);\n\t}\n\n\t/**\n\t * Returns merged data where each unique label has an array of values\n\t */\n\tgetMergedData() {\n\t\tvar dataMap = {};\n\t\tthis.getAllData().forEach((item=>{\n\t\t\tconst result = dataMap[item.label] || {\n\t\t\t\tlabel:item.label,\n\t\t\t\tvalues:[],\n\t\t\t\ttooltips:[]\n\t\t\t};\n\t\t\tresult.values.push(item.value);\n\t\t\tresult.tooltips.push(item.tooltip);\n\t\t\tdataMap[item.label] = result;\n\t\t}));\n\n\t\treturn Object.values(dataMap);\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given series\n\t* @param {Array} series\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(series) {\n\t\tvar data = [].concat.apply([], series);\n\t\tvar min = d3.min(data, function (d) { return d.value; });\n\t\tvar max = d3.max(data, function (d) { return d.value; });\n\n\t\tif (data.length <= series.length) {\n\t\t\tmin = Math.min(min, 0);\n\t\t\tmax = Math.max(max, 0);\n\t\t}\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.max;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}","import style from \"./Line.css\";\nimport * as Defaults from \"./LineDefaults\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\nvar gradientID = 0;\n\n/**\n * @class\n * Line renderer class\n * @param {Object} options\n */\nexport default class TooltipRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Line options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Line data \n\t\t */\n\t\tthis._lineData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Line has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n    }\n\n\t/**\n\t * @public\n\t * Returns whether Line has been rendered or not\n\t * @returns {boolean} true if Line has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {LineHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(groupEl){\n\t\tthis._groupEl = groupEl;\n\t\tthis._rendered = true;\n\n\t\tthis._groupEl.on(\"mouseout\", this._onMouseOut.bind(this))\n\n\t\treturn this;\n\t}\n\n\t_getTextAnchor(xPos, bottomLabelWidth, width){\n\t\tvar xpos = xPos;\n\t\tif (xpos - bottomLabelWidth/2 < 0){\n\t\t\treturn \"start\"\n\t\t} else if (xpos + bottomLabelWidth/2 > width){\n\t\t\treturn \"end\"\n\t\t} else {\n\t\t\treturn \"middle\";\n\t\t}\n\t}\n\n\t_getTooltipHTML(d){\n\t\treturn d.tooltips.filter((tooltip, index)=>{\n\t\t\treturn d.values[index] != null;\n\t\t}).map((tooltip, index)=>{\n\t\t\tconst value = tooltip || this._options.format(d.values[index]);\n\t\t\tvar color = this._options.lineColors[index] || this._options.lineColor;\n\t\t\tconst icon = `\n\t\t\t\t<span style=\"display:inline-block;position:relative;top:-1px;margin-right:5px;width:6px;height:6px;border-radius:50%;background-color:${color}\"></span>\n\t\t\t`;\n\n\t\t\tif (d.tooltips.length>1){\n\t\t\t\treturn icon + value;\n\t\t\t} else {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\t\n\t\t}).join(\"<br />\");\n\t}\n\n\t_onHoverAreaOver(d){\n\t\tvar duration = this._tooltipGroup.attr(\"visibility\") == \"visible\"?0:0;\n\t\tvar x = this._xAxis;\n\t\tvar y = this._yAxis;\n\t\tvar width = this._options.width;\n\t\tvar xPos = x(d.label);\n\n\t\t// update tooltip position\n\t\tthis._tooltipGroup\n\t\t\t.transition()\n\t\t\t.duration(duration)\n\t\t\t.attr(\"visibility\", \"visible\")\n\t\t\t.attr(\"transform\", \"translate(\"+xPos+\", 0)\")\n\n\t\t// update tooltip bottom label\n\t\tvar bottomLabelWidth = this._tooltipBottomLabel.node().getBBox().width;\n\t\tvar bottomMaskPadding = 25;\n\t\tvar textAnchor = this._getTextAnchor(xPos, bottomLabelWidth, width);\n\n\t\tthis._tooltipBottomLabel\n\t\t\t.text(d.label)\n\t\t\t.attr(\"text-anchor\", textAnchor);\n\n\t\tthis._tooltipBottomLabel.attr(\"transform\", ()=>{\n\t\t\treturn {\n\t\t\t\t\"start\":\"translate(\"+-xPos+\", 0)\",\n\t\t\t\t\"middle\":\"translate(0, 0)\",\n\t\t\t\t\"end\":\"translate(\"+(width-xPos)+\", 0)\"\n\t\t\t}[textAnchor]\n\t\t});\n\t\t\n\t\tvar bottomMaskWidth = bottomMaskPadding*2 + bottomLabelWidth;\n\t\tthis._tooltipBottomLabelMask\n\t\t\t.attr(\"width\", bottomMaskWidth)\n\t\t\t.attr(\"x\", ()=>{\n\t\t\t\treturn {\n\t\t\t\t\t\"start\":-xPos-bottomMaskPadding,\n\t\t\t\t\t\"middle\":-bottomMaskWidth/2,\n\t\t\t\t\t\"end\":width-xPos-bottomMaskWidth+bottomMaskPadding,\n\t\t\t\t}[textAnchor]\n\t\t\t})\n\n\t\tthis._handleMaskGradientEl.attr(\"x1\", -bottomMaskWidth/2);\n\t\tthis._handleMaskGradientEl.attr(\"x2\", bottomMaskWidth/2);\t\t\t\n\n\t\t// update tooltip top label \n\t\tvar tooltipHtml = this._getTooltipHTML(d);\n\t\tthis._tooltipTopLabel.node().innerHTML = tooltipHtml;\n\t\tvar labelLeft = this._getLabelLeft(xPos);\n\n\t\t// if value is not null or undefined\n\t\tif (d.values.some(d => d != null)){\n\t\t\tthis._tooltipTopLabel\n\t\t\t\t.style(\"left\", labelLeft+\"px\")\n\t\t\t\t.style(\"visibility\", \"visible\")\n\t\t\t\t.style(\"top\", y(Math.max.apply(Math,d.values))-50+\"px\")\n\n\t\t\t// update line circle\n\t\t\tthis._tooltipLineCircle\n\t\t\t\t.transition()\n\t\t\t\t.duration(duration)\n\t\t\t\t.style(\"visibility\", (circle, i)=>{\n\t\t\t\t\treturn d.values[i]?\"visible\":\"hidden\";\n\t\t\t\t})\n\t\t\t\t.attr(\"cy\", (circle, i)=>{\n\t\t\t\t\treturn d.values[i]?y(d.values[i]):0\n\t\t\t\t})\t\t\t\t\n\t\t} else {\n\t\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\");\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\n\t\t}\n\t\n\t}\n\n\t_getLabelLeft(xPos){\n\t\tvar labelWidth = this._tooltipTopLabel.node().offsetWidth;\n\t\tvar labelLeft = xPos-labelWidth/2;\n\t\t\n\t\tif (labelLeft<0){\n\t\t\tlabelLeft = 0;\n\t\t}\n\n\t\tif (labelLeft>this._options.width - labelWidth){\n\t\t\tlabelLeft = this._options.width - labelWidth;\n\t\t}\n\n\t\treturn labelLeft;\n\t}\n\n\t_onMouseOut(){\n\t\t// only hide when mouse is outside of widget\n\t\tif (!this._groupEl.node().parentNode.contains(d3.event.relatedTarget)){\n\t\t\tthis._hideTooltip();\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\n\t\t}\n\t\t\n\t}\n\n\t_hideTooltip(){\n\t\tthis._tooltipGroup.attr(\"visibility\", \"hidden\")\n\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\")\n\t}\n\n\t_renderTooltip(){\n\t\tvar data = this._lineData.getMergedData();\n\t\t\n\t\tvar series = this._lineData.getSeries();\n\t\tvar hoverWidth;\n\t\tif (data.length>series.length){\n\t\t\thoverWidth = this._options.width / (data.length-1);\n\t\t} else {\n\t\t\thoverWidth = this._options.width;\n\t\t}\n\n\t\tthis._hoverAreas = this._groupEl\n\t\t\t.selectAll(\".\"+style[\"tooltip-hover-area\"])\n\t\t\t.data(data)\n\t\t\t.enter()\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"tooltip-hover-area\"])\n\t\t\t.attr(\"width\", hoverWidth)\n\t\t\t.attr(\"fill-opacity\", 0.00)\n\t\t\t.attr(\"x\", (d)=>{\n\t\t\t\treturn this._xAxis(d.label) - hoverWidth/2\n\t\t\t})\n\t\t\t.attr(\"height\", this._options.height)\n\t\t\t.on(\"mouseover\", this._onHoverAreaOver.bind(this))\n\n\t\tthis._tooltipGroup = this._groupEl\n\t\t\t.append(\"g\")\n\t\t\t.attr(\"visibility\", \"hidden\")\n\t\t\t.attr(\"class\", style[\"tooltip-group\"])\n\n\n\t\tthis._tooltipLineCircle = this._tooltipGroup\n\t\t\t.selectAll(\".\"+style[\"tooltip-line-circle\"])\n\t\t\t.data(series)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"visibility\", \"hidden\")\n\t\t\t.attr(\"class\", style[\"tooltip-line-circle\"])\n\t\t\t.attr(\"stroke-width\", this._options.lineWidth)\n\t\t\t.attr(\"stroke\", (d, i)=>{\n\t\t\t\treturn this._options.lineColors[i] || this._options.lineColor;\n\t\t\t})\n\t\t\t.attr(\"stroke-opacity\", this._options.lineOpacity)\n\t\t\t.attr(\"r\", 2.5+this._options.lineWidth/2)\n\n\t\tthis._tooltipAxisCircle = this._tooltipGroup\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"class\", style[\"tooltip-axis-circle\"])\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"cy\", this._options.height - Defaults.MARGIN.bottom)\n\t\t\t.attr(\"r\", 2.5 + 1/2)\n\n\t\tthis._tooltipBottomLabelMask = this._tooltipGroup\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"fill\", \"url(#\"+this._handleMaskGradientEl.attr(\"id\")+\")\")\n\t\t\t.attr(\"class\", style[\"tooltip-label-mask\"])\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET-15)\n\t\t\t.attr(\"height\", 20)\n\n\t\tthis._tooltipBottomLabel = this._tooltipGroup\n\t\t\t.append(\"text\")\n\t\t\t.attr(\"class\", style[\"tooltip-label\"])\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET)\n\t\t\t.attr(\"text-anchor\", \"start\")\n\t\t\t.text(data[0].label)\n\n\t\tthis._tooltipTopLabel = d3.select(this._groupEl.node().parentNode.parentNode)\n\t\t\t.insert(\"span\", \":first-child\")\n\t\t\t.attr(\"class\", style[\"tooltip-top-label\"])\n\t\t\t.style(\"position\", \"absolute\")\n\t\t\t.style(\"visibility\", \"hidden\")\n\n\t\tthis._tooltipRendered = true;\n\t}\n\n\t/**\n\t * Creates mask gradient element\n\t * @param {Number} handleIndex \n\t */\n\t_createMaskGradientElement(){\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\n\t\t\t.attr(\"id\", style[\"tooltip-label-mask\"]+\"-\"+(gradientID++)+\"-gradient\")\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\n\t\t\t.attr(\"y1\", \"0\").attr(\"x1\", \"0\")\n\t\t\t.attr(\"y2\", \"0\").attr(\"x2\", \"0\");\n\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\n\t\t\t.data([\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\n\t\t\t])\n\t\t\t.enter().append(\"stop\")\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\n\n\t\treturn this._handleMaskGradientEl;\n\t}\n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tif (this._tooltipRendered){\n\t\t\tthis._hoverAreas.remove();\n\t\t\tthis._tooltipGroup.remove();\n\t\t\tthis._tooltipTopLabel.remove();\n\t\t\tthis._tooltipRendered = false;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Sets line data \n\t * @param {LineData}\n\t */\n\tupdate(lineData, x, y){\n\t\tthis._xAxis = x;\n\t\tthis._yAxis = y; \n\t\tthis._lineData = lineData;\n\n\t\tthis._createMaskGradientElement();\n\t\tthis._clear();\n\t\tthis._renderTooltip();\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Line UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._clear();\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","import style from \"./Line.css\";\nimport * as Defaults from \"./LineDefaults\";\nimport Observable from \"../utils/Observable\";\nimport TooltipRenderer from \"./TooltipRenderer\";\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Line renderer class\n * @param {Object} options\n */\nexport default class LineRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Line options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Line data \n\t\t */\n\t\tthis._lineData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Line has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous data for animation\n\t\t */\n\t\tthis._prevData = null;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n\n\t\tthis._tooltipRenderer = new TooltipRenderer(options);\n    }\n\n\t/**\n\t * @public\n\t * Returns whether Line has been rendered or not\n\t * @returns {boolean} true if Line has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {LineHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(selector){\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\n\t\t// force position relative so the toolip shows correctly\n\t\tct.style(\"position\", \"relative\");\n\n\t\t// render SVG\n\t\tthis._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.classed(style.svg, true)\n\t\t\t.classed(style.line, true);\n\n\t\t// render group element\n\t\tthis._groupEl = this._svgEl.append(\"g\");\n\n\t\tthis._tooltipRenderer.render(this._groupEl);\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t} \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._groupEl.node().innerHTML = \"\";\n\t}\n\n\t/**\n\t * @private\n\t * Sets line data \n\t * @param {LineData}\n\t */\n\tupdate(lineData){\n\t\tthis._lineData = lineData;\t\t\n\t\tthis._clear();\n\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar verticalSpacing = this._options.verticalSpacing;\n\n\t\tvar series = lineData.getSeries();\n\t\tvar allData = lineData.getAllData()\n\t\tvar minMax = lineData.getMinMax();\n\n\t\tvar x = this._xAxis = d3.scalePoint().range([0, width]);\t\n\t\tvar y = this._yAxis = d3.scaleLinear().range([height-verticalSpacing, verticalSpacing]);\n\n\t\tx.domain(allData.map(function (d) {return d.label; }));\n\t\ty.domain([minMax.min, minMax.max]);\n\n\t\tthis._renderZeroLine(allData);\n\t\tseries.forEach((data, seriesIndex)=>{\n\t\t\tthis._renderDataLines(data, seriesIndex);\n\t\t});\n\t\tthis._renderXAxis(allData);\n\t\tthis._tooltipRenderer.update(lineData, x, y);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * Renders x axis\n\t*/\n\t_renderXAxis(data){\n\t\tthis._groupEl.append(\"line\")\n\t\t\t.attr(\"x1\", 0)\n\t\t\t.attr(\"x2\", this._options.width)\n\t\t\t.attr(\"y1\", this._options.height-Defaults.MARGIN.bottom)\n\t\t\t.attr(\"y2\", this._options.height-Defaults.MARGIN.bottom)\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke\", this._options.axisColor)\n\n\t\t// render to labels on start and end sides if multiple items are available\n\t\tif (data.length>1){\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[0].label)\n\t\t\t\t.attr(\"x\", 0)\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\n\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[data.length-1].label)\n\t\t\t\t.attr(\"x\", this._options.width)\n\t\t\t\t.attr(\"text-anchor\", \"end\")\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\n\n\t\t// render single label in the middle if only one item is available\t\t\t\t\n\t\t} else if (data.length == 1){\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[0].label)\n\t\t\t\t.attr(\"x\", this._options.width/2)\n\t\t\t\t.attr(\"text-anchor\", \"middle\")\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\n\t\t}\t\n\t}\n\t/**\n\t * Returns true if graph should render zero line\n\t * @param {Array} data \n\t */\n\t_showZeroLine(){\n\t\tvar zeroLinePosition = this._yAxis(0);\n\t\tvar axisPosition = this._options.height-Defaults.MARGIN.bottom;\n\t\tvar treshold = 10;\n\t\treturn zeroLinePosition<axisPosition-treshold;\n\t}\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * Renders zero line\n\t*/\n\t_renderZeroLine(){\n\t\tif (this._showZeroLine()){\n\t\t\tthis._groupEl.append(\"line\")\n\t\t\t\t.attr(\"x1\", 0)\n\t\t\t\t.attr(\"x2\", this._options.width)\n\t\t\t\t.attr(\"y1\", Math.round(this._yAxis(0)))\n\t\t\t\t.attr(\"y2\", Math.round(this._yAxis(0)))\n\t\t\t\t.attr(\"stroke-dasharray\",\"2 ,2\")\n\t\t\t\t.attr(\"stroke\", this._options.zeroLineColor)\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * @param {Number} seriesIndex\n\t * Renders data lines\n\t*/\n\t_renderDataLines(data, seriesIndex) { \n\t\tvar x = this._xAxis;\n\t\tvar y = this._yAxis;\n\t\t\n\t\tvar options = this._options;\n\t\tvar minHeight = this._options.height-Defaults.MARGIN.bottom;\n\t\tvar areaZero = this._showZeroLine()?Math.min(minHeight, y(0)):minHeight;\n\t\tvar lineColor = options.lineColors[seriesIndex] || options.lineColor;\n\t\tvar fillColor = options.fillColors[seriesIndex] || options.fillColor;\n\n\t\t// define the area\n\t\tvar area = d3.area()\n\t\t\t.x(function(d) {return x(d.label); })\n\t\t\t.y0(areaZero)\n\t\t\t.y1(function(d) { return y(d.value); });\n\n\t\t// define the line\n\t\tvar line = d3.line()\n\t\t\t.x(function(d) { return x(d.label); })\n\t\t\t.y(function(d) { return y(d.value); });\t\t\n\n\t\t// apply grouping if needed (null or other splits)\n\t\tconst groupedData = this._getGroupedData(data);\n\n\t\tgroupedData.forEach(lineData=>{\n\t\t\t// only add area if not rendering a dot\n\t\t\tif (lineData.length>1){\n\t\t\t\t// add the area path\n\t\t\t\tthis._groupEl.append(\"path\")\n\t\t\t\t.data([lineData])\n\t\t\t\t.attr(\"class\", style[\"area\"])\n\t\t\t\t.attr(\"fill\", fillColor)\n\t\t\t\t.attr(\"fill-opacity\", options.fillOpacity)\n\t\t\t\t.attr(\"d\", area);\n\t\t\t}\n\n\t\t\tif (lineData.length){\n\t\t\t\t// add the line path\n\t\t\t\tthis._groupEl.append(\"path\")\n\t\t\t\t\t.data([lineData])\n\t\t\t\t\t.attr(\"fill\", \"none\")\n\t\t\t\t\t.attr(\"stroke-linecap\", \"round\")\n\t\t\t\t\t.attr(\"stroke\", lineColor)\n\t\t\t\t\t.attr(\"stroke-opacity\", 1)\n\t\t\t\t\t// note that in case of a single item, dot is rendered with a different size\n\t\t\t\t\t.attr(\"stroke-width\", lineData.length>1?options.lineWidth:options.dotSize)\n\t\t\t\t\t.attr(\"class\", style[\"line\"])\n\t\t\t\t\t.attr(\"d\", (d)=>{\n\t\t\t\t\t\tvar path = line(d);\n\t\t\t\t\t\t// Fix issue in Chrome on Mac and Surface where\n\t\t\t\t\t\t// path points are not rendererd if it's a single point \n\t\t\t\t\t\tif (path && path.split(\",\").length == 2){\n\t\t\t\t\t\t\treturn path + \" \" + path;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn path;\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\t\n\n\t}\n\n\t/**\n\t * @private\n\t * Splits given array into multiple in case there is null in value\n\t * @param {Array} data \n\t */\n\t_getGroupedData(data){\n\t\tlet group = [];\n\t\tconst result = [group];\n\t\t\n\t\tdata.forEach(item=>{\n\t\t\tif (item.value === null){\n\t\t\t\tgroup = [];\n\t\t\t\tresult.push(group);\n\t\t\t} else {\n\t\t\t\tgroup.push(item);\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Line UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./LineDefaults\";\nimport LineData from \"./LineData\";\nimport LineRenderer from \"./LineRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main Line class\n * @param {Object} options\n */\nclass Line {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Line width\n\t\t */\n\t\tthis._options.lineWidth = getOptionValue(options.lineWidth, Defaults.LINE_WIDTH);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Dot size\n\t\t */\n\t\tthis._options.dotSize = getOptionValue(options.dotSize, Defaults.DOT_SIZE);\t\t\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Line color \n\t\t */\n\t\tthis._options.lineColor = getOptionValue(options.lineColor, Defaults.LINE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Line colors \n\t\t */\n\t\tthis._options.lineColors = getOptionValue(options.lineColors, Defaults.LINE_COLORS);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Line opacity \n\t\t */\n\t\tthis._options.lineOpacity = getOptionValue(options.lineOpacity, Defaults.LINE_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill color \n\t\t */\n\t\tthis._options.fillColor = getOptionValue(options.fillColor, Defaults.FILL_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill colors\n\t\t */\n\t\tthis._options.fillColors = getOptionValue(options.fillColors, Defaults.FILL_COLORS);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Fill opacity\n\t\t */\n\t\tthis._options.fillOpacity = getOptionValue(options.fillOpacity, Defaults.FILL_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.axisColor = getOptionValue(options.axisColor, Defaults.AXIS_COLOR);\t\t\n\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.zeroLineColor = getOptionValue(options.zeroLineColor, Defaults.ZERO_LINE_COLOR);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Vertical spacing\n\t\t */\n\t\tthis._options.verticalSpacing = getOptionValue(options.verticalSpacing, this._options.height / 4);\t\t\n\t\t\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * LineRenderer\n\t\t */\n\t\tthis._lineRenderer = new LineRenderer(this._options);\n\n\t\tthis._lineRenderer.on(\"pointOver\", data=>{\n\t\t\tthis._observable.fire(\"pointOver\", data);\n\t\t})\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Line} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._lineRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._lineRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets multiple series of data\n\t * @param {Array[]} series\n\t * @returns {Line} returns this widget instance \n\t */\n\tsetSeries(series) {\n\t\treturn this.setData.apply(this, series);\n\t}\n\n\t/**\n\t * Sets line data\n\t * @param {...Array} series\n\t * @returns {Line} returns this widget instance \n\t */\n\tsetData(...series) {\n\t\tif (!this._lineRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar lineData = this._lineData = new LineData(series, this._options);\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + this._lineData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._lineRenderer.update(lineData);\n\n\t\treturn this;\n\t}\n}\n\nexport default Line;\n","\nexport const WIDTH = 360;\nexport const HEIGHT = 129;\nexport const LABEL_FONT_SIZE = 13;\nexport const TOOLTIP_FONT_SIZE = 11;\nexport const TOOLTIP_SYMBOL = '_circle';\nexport const ACTIVE_COLORS = [\"#49ace2\", \"#ca62dc\"];\nexport const DETAILS_HIDDEN = false;\nexport const DETAILS_BOTTOM_SPACE = 10;\nexport const MINMAX = \"sum\";\nexport const DUAL_VALUE = false;\nexport const ENABLE_BAR_HOVER = false;\nexport const ENABLE_BAR_TOGGLE = false;\nexport const FORMAT = \",f\";\nexport const BAR_HEIGHT = 43;\nexport const BAR_DISABLED = false;\nexport const HORIZONTAL_PADDING = 10;\nexport const STRIPE_HEIGHT = 5;\nexport const STRIPE_BACKGROUND_COLOR = \"#f0f0f0\";\nexport const TOOLTIP_SPACE = 7;\nexport const CORNER_ROUNDED = true;\nexport const SHOW_ONLY_TOOL = true;\nexport const ONLY_TOOL_TEXT = 'Only';\nexport const SHOW_LABEL_CIRCLE = false;\nexport const LABEL_CIRCLE_RADIUS = 3.5;\n","export default class BarchartData {\n\n\tconstructor(\n\t\t_,\n\t\tdetailsData,\n\t\tbarsData\n\t) {\n\t\tif (typeof barsData === 'undefined') throw \"barsData is required parameter\";\n\n\t\tthis._detailsData = detailsData;\n\t\tthis._barsData = barsData;\n\t}\n\n\t/**\n\t * @param {BarchartData} barchartData\n\t */\n\tstatic copyAs(barchartData) {\n\t\treturn new BarchartData(\n\t\t\t{},\n\t\t\tbarchartData.details,\n\t\t\tbarchartData.bars\n\t\t);\n\t}\n\n\tget details() {\n\t\treturn this._detailsData;\n\t}\n\tset details(detailsData) {\n\t\tthis._detailsData = detailsData;\n\t}\n\n\tget bars() {\n\t\treturn this._barsData;\n\t}\n\tgetBar(index) {\n\t\treturn this._barsData[index];\n\t}\n\tsetBar(index, barData) {\n\t\tthis._barsData[index] = barData;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (minMax === \"sum\") {\n\n\t\t\tlet containsNegativeVal = false;\n\t\t\tlet containsPositiveVal = false;\n\t\t\tconst sum = this.bars.reduce((sum, bar) => {\n\t\t\t\tconst min = bar.calculateMinMax(minMax).min;\n\t\t\t\tconst max = bar.calculateMinMax(minMax).max;\n\t\t\t\tif (min < 0) containsNegativeVal = true;\n\t\t\t\tif (max > 0) containsPositiveVal = true;\n\t\t\t\treturn sum + Math.max(Math.abs(min), Math.abs(max));\n\t\t\t}, 0);\n\n\t\t\treturn {\n\t\t\t\tmin: containsNegativeVal ? -sum : 0,\n\t\t\t\tmax: containsPositiveVal ? sum : 0\n\t\t\t}\n\n\t\t} else if (minMax === \"auto\") {\n\n\t\t\treturn {\n\t\t\t\tmin: this.bars.reduce((min, bar) => Math.min(min, bar.calculateMinMax(minMax).min), 0),\n\t\t\t\tmax: this.bars.reduce((max, bar) => Math.max(max, bar.calculateMinMax(minMax).max), 0)\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn minMax;\n\t\t}\n\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\treturn this.bars.reduce((max, bar) => Math.max(max, bar.getPrecision(precision)), 0)\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n}","export default class DetailsData {\n\n\tconstructor(\n\t\t{\n\t\t\tlabel,\n\t\t\tdisabled,\n\t\t\tcolor\n\t\t},\n\t\ttooltips\n\t) {\n\t\tif (typeof label === 'undefined') throw \"label is required parameter\";\n\n\t\tthis._label = label;\n\t\tthis._disabled = disabled;\n\t\tthis._color = color;\n\t\tthis._tooltips = tooltips;\n\t}\n\n\t/**\n\t * @param {DetailsData} detailsData\n\t */\n\tstatic copyAs(detailsData) {\n\t\treturn new DetailsData(\n\t\t\t{\n\t\t\t\tlabel: detailsData.label,\n\t\t\t\tdisabled: detailsData.disabled,\n\t\t\t\tcolor: detailsData.color\n\t\t\t},\n\t\t\tdetailsData.tooltips,\n\t\t);\n\t}\n\n\tget label() {\n\t\treturn this._label;\n\t}\n\tset label(label) {\n\t\tthis._label = label;\n\t}\n\n\tget tooltips() {\n\t\treturn this._tooltips;\n\t}\n\tgetTooltip(index) {\n\t\treturn this._tooltips[index];\n\t}\n\taddTooltip(tooltipData) {\n\t\tif (typeof this._tooltips === 'undefined') {\n\t\t\tthis._tooltips = [];\n\t\t}\n\t\tthis._tooltips.push(tooltipData);\n\t}\n\tsetTooltip(index, tooltipData) {\n\t\tthis._tooltips[index] = tooltipData;\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\tset disabled(disabled) {\n\t\tthis._disabled = disabled;\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\tif (!this.tooltips) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn this.tooltips.reduce((max, tooltip) => Math.max(max, tooltip.getPrecision()), 0);\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n}\n","\nexport default class TooltipData {\n\n\tconstructor(\n\t\t{\n\t\t\ttext,\n\t\t\tsymbol,\n\t\t\tcolor\n\t\t}\n\t) {\n\t\tif (typeof text === 'undefined') throw \"text is required parameter\";\n\t\tthis._symbol = symbol;\n\t\tthis._color = color;\n\t\tthis._text = text;\n\t}\n\n\t/**\n\t * @param {TooltipData} tooltipData\n\t */\n\tstatic copyAs(tooltipData) {\n\t\treturn new TooltipData({\n\t\t\ttext: tooltipData.text,\n\t\t\tsymbol: tooltipData.symbol,\n\t\t\tcolor: tooltipData.color\n\t\t});\n\t}\n\n\tget symbol() {\n\t\treturn this._symbol;\n\t}\n\tset symbol(symbol) {\n\t\tthis._symbol = symbol;\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tget text() {\n\t\treturn this._text;\n\t}\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\tif (this.isNumber()) {\n\t\t\t\tconst str = this.text.toString();\n\t\t\t\tif (str.includes('.')) {\n\t\t\t\t\treturn str.split(\".\")[1].length;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n\tisNumber() {\n\t\treturn !isNaN(parseFloat(this.text)) && isFinite(this.text);\n\t}\n\n}","\nexport default class BarData {\n\n\tconstructor(\n\t\t{\n\t\t\tdisabled,\n\t\t\thighlighted\n\t\t},\n\t\tdetailsData,\n\t\tstripesData\n\t) {\n\t\tif (typeof stripesData === 'undefined') throw \"stripesData is required parameter\";\n\n\t\tthis._disabled = disabled;\n\t\tthis._highlighted = highlighted;\n\t\tthis._detailsData = detailsData;\n\t\tthis._stripesData = stripesData;\n\t}\n\n\t/**\n\t * @param {BarData} barData\n\t */\n\tstatic copyAs(barData) {\n\t\treturn new BarData(\n\t\t\t{\n\t\t\t\tdisabled: barData.disabled,\n\t\t\t\thighlighted: barData.highlighted\n\t\t\t},\n\t\t\tbarData.details,\n\t\t\tbarData.stripes\n\t\t);\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\tset disabled(disabled) {\n\t\tthis._disabled = disabled;\n\t}\n\n\tget highlighted() {\n\t\treturn this._highlighted;\n\t}\n\tset highlighted(highlighted) {\n\t\tthis._highlighted = highlighted;\n\t}\n\n\tget details() {\n\t\treturn this._detailsData;\n\t}\n\tset details(detailsData) {\n\t\tthis._detailsData = detailsData;\n\t}\n\n\tget stripes() {\n\t\treturn this._stripesData;\n\t}\n\tgetStripe(index) {\n\t\treturn this._stripesData[index];\n\t}\n\tsetStripe(index, stripeData) {\n\t\tthis._stripesData[index] = stripeData;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (minMax === \"sum\") {\n\n\t\t\tlet containsNegativeVal = false;\n\t\t\tlet containsPositiveVal = false;\n\t\t\tconst absMax = this.stripes.reduce((sum, stripe) => {\n\t\t\t\tconst min = stripe.calculateMinMax(minMax).min;\n\t\t\t\tconst max = stripe.calculateMinMax(minMax).max;\n\t\t\t\tif (min < 0) containsNegativeVal = true;\n\t\t\t\tif (max > 0) containsPositiveVal = true;\n\t\t\t\treturn sum + Math.max(Math.abs(min), Math.abs(max))\n\t\t\t}, 0);\n\n\t\t\treturn {\n\t\t\t\tmin: containsNegativeVal ? -absMax : 0,\n\t\t\t\tmax: containsPositiveVal ? absMax : 0\n\t\t\t}\n\n\t\t} else if (minMax === \"auto\") {\n\n\t\t\treturn {\n\t\t\t\tmin: this.stripes.reduce((min, stripe) => Math.min(min, stripe.calculateMinMax(minMax).min), 0),\n\t\t\t\tmax: this.stripes.reduce((max, stripe) => Math.max(max, stripe.calculateMinMax(minMax).max), 0)\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn minMax;\n\t\t}\n\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (typeof this.details === 'undefined') {\n\t\t\treturn 0;\n\t\t}\n\t\tif (this.details === null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.details.getPrecision(precision);\n\t}\n\n}","\nexport default class StripeData {\n\n\tconstructor(\n\t\t{\n\t\t\tvalue,\n\t\t\tcolor,\n\t\t\tright: {\n\t\t\t\tvalue: leftValue,\n\t\t\t\tcolor: leftColor\n\t\t\t} = {},\n\t\t\tleft: {\n\t\t\t\tvalue: rightValue,\n\t\t\t\tcolor: rightColor\n\t\t\t} = {}\n\t\t}\n\t) {\n\t\tif (typeof value === 'undefined') {\n\t\t\tif (typeof leftValue === 'undefined') throw \"value or leftValue is required parameter\";\n\t\t\tif (typeof rightValue === 'undefined') throw \"value or rightValue is required parameter\";\n\n\t\t\tthis._right = {\n\t\t\t\tvalue: leftValue,\n\t\t\t\tcolor: leftColor\n\t\t\t};\n\t\t\tthis._left = {\n\t\t\t\tvalue: rightValue,\n\t\t\t\tcolor: rightColor\n\t\t\t}\n\t\t} else {\n\t\t\tthis._value = value;\n\t\t\tthis._color = color;\n\t\t}\n\t}\n\n\t/**\n\t * @param {StripeData} stripeData\n\t */\n\tstatic copyAs(stripeData) {\n\t\tif (stripeData.dual) {\n\t\t\treturn new StripeData({\n\t\t\t\tright: stripeData.right,\n\t\t\t\tleft: stripeData.left\n\t\t\t});\n\t\t} else {\n\t\t\treturn new StripeData({\n\t\t\t\tvalue: stripeData.value,\n\t\t\t\tcolor: stripeData.color,\n\t\t\t});\n\t\t}\n\t}\n\n\tget dual() {\n\t\treturn (typeof this._value === 'undefined');\n\t}\n\n\tget value() {\n\t\treturn this._value;\n\t}\n\tset value(value) {\n\t\tthis._value = value;\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tget left() {\n\t\treturn this._left;\n\t}\n\tset left(leftData) {\n\t\tthis._left = leftData;\n\t}\n\n\tget right() {\n\t\treturn this._right;\n\t}\n\tset right(rightData) {\n\t\tthis._right = rightData;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (this.dual) {\n\t\t\tif (minMax === \"sum\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.left.value, this.right.value),\n\t\t\t\t\tmax: Math.max(0, this.left.value + this.right.value)\n\t\t\t\t}\n\t\t\t} else if (minMax === \"auto\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.left.value, this.right.value),\n\t\t\t\t\tmax: Math.max(0, this.left.value, this.right.value)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn minMax;\n\t\t\t}\n\n\t\t} else {\n\t\t\tif (minMax === \"sum\" || minMax === \"auto\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.value),\n\t\t\t\t\tmax: Math.max(0, this.value)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn minMax;\n\t\t\t}\n\t\t}\n\t}\n\n}","import BarchartData from \"./data/BarchartData\";\nimport DetailsData from \"./data/DetailsData\";\nimport TooltipData from \"./data/TooltipData\";\nimport BarData from \"./data/BarData\";\nimport StripeData from \"./data/StripeData\";\n\nclass JsonDataConverter {\n\n\tconvert(barchartJsonData) {\n\n\t\tlet detailsData;\n\t\tif (typeof barchartJsonData.details !== 'undefined') {\n\t\t\tlet tooltipsData;\n\t\t\tif (typeof barchartJsonData.details.tooltips !== 'undefined') {\n\t\t\t\ttooltipsData = barchartJsonData.details.tooltips.map(\n\t\t\t\t\ttooltipJsonData => new TooltipData(tooltipJsonData)\n\t\t\t\t);\n\t\t\t}\n\t\t\tdetailsData = new DetailsData(barchartJsonData.details, tooltipsData);\n\t\t}\n\n\t\tconst barsData = barchartJsonData.bars.map(barJsonData => {\n\n\t\t\tlet detailsData;\n\t\t\tif (typeof barJsonData.details !== 'undefined') {\n\t\t\t\tlet tooltipsData;\n\t\t\t\tif (typeof barJsonData.details.tooltips !== 'undefined') {\n\t\t\t\t\ttooltipsData = barJsonData.details.tooltips.map(\n\t\t\t\t\t\ttooltipJsonData => new TooltipData(tooltipJsonData)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tdetailsData = new DetailsData(barJsonData.details, tooltipsData);\n\t\t\t}\n\n\t\t\tconst stripesData = barJsonData.stripes.map(stripeJsonData => new StripeData(stripeJsonData));\n\n\t\t\treturn new BarData(barJsonData, detailsData, stripesData);\n\t\t});\n\n\t\tconst barchartData = new BarchartData(barchartJsonData, detailsData, barsData);\n\n\t\treturn barchartData;\n\n\t}\n\n}\n\nexport default JsonDataConverter;\n","import style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport Observable from \"../../utils/Observable\";\nimport JsonDataConverter from \"../JsonDataConverter\";\n\nlet MASK_INDEX = 0;\n\nclass Component {\n\n\tconstructor(\n\t\twidth,\n\t\theight,\n\t\tclassName = \"component\",\n\t\talignRight = false,\n\t\talignBottom = false\n\t) {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tthis._container = null;\n\t\tthis._maskIndex = MASK_INDEX++;\n\t\tthis._className = className;\n\t\tthis._observable = new Observable([\n\t\t\t\"enter\",\n\t\t\t\"leave\",\n\t\t\t\"click\"\n\t\t]);\n\t\tthis._alignRight = alignRight;\n\t\tthis._alignBottom = alignBottom;\n\n\t\tthis._data = null;\n\t}\n\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\n\n\tget width() {\n\t\treturn this._width;\n\t}\n\n\tget height() {\n\t\treturn this._height;\n\t}\n\n\tget className() {\n\t\treturn this._className;\n\t}\n\n\tget container() {\n\t\treturn this._container;\n\t}\n\n\tget alignRight() {\n\t\treturn this._alignRight;\n\t}\n\n\tget alignBottom() {\n\t\treturn this._alignBottom;\n\t}\n\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\tset width(value) {\n\t\tthis._width = value;\n\t\tif (this.isRendered()) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"width\", value);\n\t\t}\n\t\tif (this.alignRight) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"x\", -value);\n\t\t}\n\t}\n\n\tset height(value) {\n\t\tthis._height = value;\n\t\tif (this.isRendered()) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"height\", value);\n\t\t}\n\t\tif (this.alignBottom) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"y\", -value);\n\t\t}\n\t}\n\n\t_renderContainer(selector, x = 0, y = 0){\n\n\t\treturn d3.select(selector).append(\"g\")\n\t\t\t.attr(\"class\", style[this.className])\n\t\t\t.attr(\"transform\", `translate(${x}, ${y})`)\n\n\t}\n\n\trender(selector, x = 0, y = 0, index = 0){\n\t\tthis.destroy();\n\n\t\tthis._container = this._renderContainer(selector, x, y);\n\n\t\tthis._container.datum(index);\n\n\t\tthis._container\n\t\t\t.on(\"click\", (index) => {\n\t\t\t\tthis._observable.fire(\"click\", index)\n\t\t\t})\n\t\t\t.on(\"mouseenter\", (index) => {\n\t\t\t\tthis._observable.fire(\"enter\", index)\n\t\t\t})\n\t\t\t.on(\"mouseleave\", (index) => {\n\t\t\t\tthis._observable.fire(\"leave\", index)\n\t\t\t});\n\n\t\tif (!this._container) {\n\t\t\tthrow `Component ${this._className} was not rendered. Check your selector: ${selector}`;\n\t\t}\n\n\t\t// clickable area\n\t\tconst clickableArea = this._container.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"clickable-area\"])\n\t\t\t.attr(\"fill\", \"transparent\")\n\t\t\t.attr(\"width\", this.width)\n\t\t\t.attr(\"height\", this.height);\n\n\t\tif (this.alignBottom) {\n\t\t\tclickableArea.attr(\"y\", -this.height);\n\t\t}\n\t\tif (this.alignRight) {\n\t\t\tclickableArea.attr(\"x\", -this.width);\n\t\t}\n\n\t\tthis._render(index);\n\n\t\treturn this;\n\t}\n\n\t_render(index){\n\t\t// prepared to be implemented by subclasses\n\t}\n\n\tdestroy(){\n\t\tif (this.isRendered()) {\n\t\t\tthis.clearData();\n\t\t\tthis._container.datum(null);\n\t\t\tthis._container.remove();\n\t\t\tthis._container = null;\n\t\t}\n\t\treturn this;\n\t}\n\n\tisRendered(){\n\t\treturn this._container !== null;\n\t}\n\n\tsetData(data) {\n\t\tif (!this.isRendered()) {\n\t\t\tthrow \"Can't call setData() when component is not rendered, please call .render() first.\"\n\t\t}\n\n\t\t// Is plain object = not class => convert\n\t\tif (data.constructor.name === \"Object\") {\n\t\t\tdata = new JsonDataConverter().convert(data);\n\t\t}\n\n\t\tthis.clearData();\n\t\tthis._data = data;\n\t\tthis._setData(data);\n\t\treturn this;\n\t}\n\n\tclearData() {\n\t\tif (!this.isRendered()) {\n\t\t\tthrow \"Can't call clearData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\t\tthis._clearData();\n\t\tthis._data = null;\n\t\treturn this;\n\t}\n\n\t_setData(data) {\n\t\t// prepared to be implemented by subclasses\n\t}\n\n\t_clearData() {\n\t\t// prepared to be implemented by subclasses\n\t}\n}\n\nexport default Component;\n","/**\n * @public\n * Returns element text width\n * @param {element} element\n * @param {canvas} canvas\n * @returns {number} text width in pixels\n */\nexport function calculateTextWidth(element, canvas) {\n\n    const context = canvas.node().getContext(\"2d\");\n\n    const style = window.getComputedStyle(element.node());\n    const fontStyle = style.getPropertyValue(\"font-style\");\n    const fontVariant = style.getPropertyValue(\"font-variant\");\n    const fontWeight = style.getPropertyValue(\"font-weight\");\n    const fontStrech = style.getPropertyValue(\"font-strech\");\n    const fontSize = style.getPropertyValue(\"font-size\");\n    const fontFamily = style.getPropertyValue(\"font-family\");\n    context.font = `${fontStyle} ${fontVariant} ${fontWeight} ${fontStrech} ${fontSize} ${fontFamily}`;\n\n    var metrics = context.measureText(element.text());\n\n    return metrics.width;\n}","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport * as CleverChartsUtils from \"../../utils/CleverChartsUtils\";\n\nclass Tooltip extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\tfontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\twidth = fontSize,\n\t\t\theight = fontSize,\n\t\t\tsymbol,\n\t\t\tactiveColor = Defaults.ACTIVE_COLORS[0],\n\t\t\tformat = Defaults.FORMAT,\n\t\t\tspace = Defaults.TOOLTIP_SPACE\n\t\t}\n\t) {\n\t\tsuper(width, height, \"tooltip\", true, true);\n\t\tthis._fontSize = fontSize;\n\t\tthis._symbol = symbol;\n\t\tthis._activeColor = activeColor;\n\t\tthis._format = format;\n\t\tthis._space = space;\n\n\t\tthis._canvas;\n\t}\n\n\t_render() {\n\n\t\tthis.container.append(\"text\")\n\t\t\t.text(\"-\")\n\t\t\t.attr(\"class\", style[\"tooltip-text\"])\n\t\t\t.attr(\"text-anchor\",\"end\")\n\t\t\t.attr(\"font-size\", this.fontSize);\n\n\t\tif (d3.select(\".text-width-helper\").empty()) {\n\t\t\tthis._canvas = d3.select(\"body\")\n\t\t\t\t.append('canvas')\n\t\t\t\t.attr(\"class\", \"text-width-helper\")\n\t\t\t\t.style(\"display\",\"none\")\n\t\t\t\t.text(\"Helper element for computing text width\");\n\t\t} else {\n\t\t\tthis._canvas = d3.select(\".text-width-helper\");\n\t\t}\n\n\t}\n\n\t/**\n\t * @param {TooltipData} data\n\t */\n\t_setData(data) {\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = data.getPrecision(\"max\");\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tlet text = data.text;\n\t\tif (data.isNumber()) {\n\t\t\ttext = d3.format(format)(data.text);\n\t\t}\n\n\t\tconst tooltipText = this.container.select(`.${style[\"tooltip-text\"]}`)\n\t\t\t.text(text);\n\n\t\tlet tooltipWidth = CleverChartsUtils.calculateTextWidth(tooltipText, this._canvas);\n\n\t\tif (data.symbol || this.symbol) {\n\n\t\t\tlet color;\n\t\t\tif (data.color instanceof Array) {\n\t\t\t\tthis._renderTwoColoredFill(data.color[0], data.color[1]);\n\t\t\t\tcolor = \"url(#two-colored-symbol-\"+this._maskIndex+\")\";\n\t\t\t} else if (this.activeColor instanceof Array) {\n\t\t\t\tthis._renderTwoColoredFill(this.activeColor[0], this.activeColor[1]);\n\t\t\t\tcolor = \"url(#two-colored-symbol-\"+this._maskIndex+\")\";\n\t\t\t} else {\n\t\t\t\tcolor = data.color ? data.color : this.activeColor;\n\t\t\t}\n\n\t\t\tconst symbol = data.symbol ? data.symbol : this.symbol;\n\n\t\t\tif (symbol === \"_circle\") {\n\n\t\t\t\tthis.container.append(\"circle\")\n\t\t\t\t\t.attr(\"r\", 3)\n\t\t\t\t\t.attr(\"fill\", color)\n\t\t\t\t\t.attr(\"cx\", -tooltipWidth - this.space)\n\t\t\t\t\t.attr(\"cy\", -this.fontSize/3);\n\n\t\t\t\ttooltipWidth += 6 + this.space;\n\n\t\t\t} else {\n\n\t\t\t\tconst tooltipSymbol = this.container.append(\"text\")\n\t\t\t\t\t.text(data.symbol ? data.symbol : this.symbol)\n\t\t\t\t\t.attr(\"class\", style[\"symbol\"])\n\t\t\t\t\t.attr(\"text-anchor\",\"end\")\n\t\t\t\t\t.attr(\"font-size\", this.fontSize)\n\t\t\t\t\t.attr(\"fill\", color)\n\t\t\t\t\t.attr(\"x\", -tooltipWidth - this.space);\n\n\t\t\t\ttooltipWidth += CleverChartsUtils.calculateTextWidth(tooltipSymbol, this._canvas) + this.space;\n\t\t\t}\n\n\t\t}\n\t\tthis.width = tooltipWidth;\n\t}\n\n\t_renderTwoColoredFill(color1, color2) {\n\n\t\tconst twoColoredFill = this.container.append(\"pattern\")\n\t\t\t.attr(\"id\", \"two-colored-symbol-\"+this._maskIndex)\n\t\t\t.attr(\"width\", \"1\")\n\t\t\t.attr(\"height\", \"1\")\n\t\t\t.attr(\"patternContentUnits\", \"objectBoundingBox\");\n\n\t\ttwoColoredFill.append('rect')\n\t\t\t.attr('fill', color1)\n\t\t\t.attr(\"width\", \"1\")\n\t\t\t.attr(\"height\", \"1\");\n\n\t\ttwoColoredFill.append('path')\n\t\t\t.attr('fill', color2)\n\t\t\t.attr('d', 'M0,0 L1,0 L1,1 Z');\n\t}\n\n\t_clearData() {\n\t\tthis.container.select(`.${style[\"tooltip-text\"]}`)\n\t\t\t.text(\"-\");\n\n\t\tthis.container.select(`.${style[\"symbol\"]}`).remove()\n\t}\n\n\tget fontSize() {\n\t\treturn this._fontSize;\n\t}\n\n\tget symbol() {\n\t\treturn this._symbol;\n\t}\n\n\tget activeColor() {\n\t\treturn this._activeColor;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget space() {\n\t\treturn this._space;\n\t}\n}\n\nexport default Tooltip;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport * as CleverChartsUtils from \"../../utils/CleverChartsUtils\";\n\nclass OnlyTool extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\tfontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\tonlyToolText = Defaults.ONLY_TOOL_TEXT,\n\t\t\twidth = fontSize,\n\t\t\theight = fontSize,\n\t\t}\n\t) {\n\t\tsuper(width, height, \"onlyTool\", true, true);\n\t\tthis._fontSize = fontSize;\n\t\tthis._onlyToolText = onlyToolText;\n\n\t\tthis._canvas;\n\t}\n\n\t_render() {\n\n\t\tthis._onlyToolTextSvg = this.container.append(\"text\")\n\t\t\t.text(this.onlyToolText)\n\t\t\t.attr(\"class\", style[\"onlyTool\"])\n\t\t\t.attr(\"x\", \"-7\")\n\t\t\t.attr(\"text-anchor\",\"end\")\n\t\t\t.attr(\"font-size\", this.fontSize);\n\n\t\tif (d3.select(\".text-width-helper\").empty()) {\n\t\t\tthis._canvas = d3.select(\"body\")\n\t\t\t\t.append('canvas')\n\t\t\t\t.attr(\"class\", \"text-width-helper\")\n\t\t\t\t.style(\"display\",\"none\")\n\t\t\t\t.text(\"Helper element for computing text width\");\n\t\t} else {\n\t\t\tthis._canvas = d3.select(\".text-width-helper\");\n\t\t}\n\n\t\tthis.width = CleverChartsUtils.calculateTextWidth(this._onlyToolTextSvg, this._canvas) + 14;\n\t}\n\n\tget onlyToolText() {\n\t\treturn this._onlyToolText;\n\t}\n\n\tget fontSize() {\n\t\treturn this._fontSize;\n\t}\n}\n\nexport default OnlyTool;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport Tooltip from \"./Tooltip\";\nimport OnlyTool from \"./OnlyTool\";\nimport * as CleverChartsUtils from \"../../utils/CleverChartsUtils\";\n\nclass Details extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = labelFontSize + 10,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tformat = Defaults.FORMAT,\n\t\t\thorizontalPadding = Defaults.HORIZONTAL_PADDING,\n\t\t\tshowOnlyTool = Defaults.SHOW_ONLY_TOOL,\n\t\t\tonlyToolText = Defaults.ONLY_TOOL_TEXT,\n\t\t\tenableToggle = Defaults.ENABLE_BAR_TOGGLE,\n\t\t\tshowLabelCircle = Defaults.SHOW_LABEL_CIRCLE\n\t\t}\n\t) {\n\t\tsuper(width, height, \"details\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._format = format;\n\t\tthis._horizontalPadding = horizontalPadding;\n\t\tthis._showOnlyTool = showOnlyTool;\n\t\tthis._onlyToolText = onlyToolText;\n\t\tthis._enableToggle = enableToggle;\n\t\tthis._showLabelCircle = showLabelCircle;\n\n\t\tthis._tooltips;\n\t\tthis._tooltipsBackground;\n\t\tthis._label;\n\t\tthis._labelCircle;\n\n\t\tthis._tipWrapper;\n\t\tthis._tip;\n\t\tthis._canvas;\n\n\t\tthis._observable\n\t\t\t.add(\"selectOnly\");\n\t}\n\n\t_render() {\n\t\tlet labelPadding = this.horizontalPadding;\n\n\t\tif (this.showLabelCircle) {\n\t\t\tlabelPadding = this.horizontalPadding + 2 * Defaults.LABEL_CIRCLE_RADIUS + 10;\n\t\t\tthis._labelCircle = this.container.append(\"circle\")\n\t\t\t\t.attr(\"r\", Defaults.LABEL_CIRCLE_RADIUS)\n\t\t\t\t.attr(\"fill\", 'transparent')\n\t\t\t\t.attr(\"cx\", Defaults.LABEL_CIRCLE_RADIUS)\n\t\t\t\t.attr(\"cy\", 2 * this.labelFontSize/3);\n\t\t}\n\n\t\tthis._label = this.container.append(\"text\")\n\t\t\t.text(\"\")\n\t\t\t.attr(\"class\", style[\"label\"])\n\t\t\t.attr(\"x\", labelPadding)\n\t\t\t.attr(\"y\", this.labelFontSize)\n\t\t\t.attr(\"font-size\", this.labelFontSize);\n\n\t\tconst gradient = this.container.append(\"linearGradient\")\n\t\t\t.attr(\"id\", \"tooltips-background\");\n\n\t\tgradient.append(\"stop\")\n\t\t\t.attr(\"offset\", \"0%\")\n\t\t\t.attr(\"stop-color\", \"white\")\n\t\t\t.attr(\"stop-opacity\", \"0\");\n\t\tgradient.append(\"stop\")\n\t\t\t.attr(\"offset\", \"100%\")\n\t\t\t.attr(\"stop-color\", \"white\")\n\t\t\t.attr(\"stop-opacity\", \"1\");\n\n\t\tif (d3.select(\".text-width-helper\").empty()) {\n\t\t\tthis._canvas = d3.select(\"body\")\n\t\t\t\t.append('canvas')\n\t\t\t\t.attr(\"class\", \"text-width-helper\")\n\t\t\t\t.style(\"display\",\"none\")\n\t\t\t\t.text(\"Helper element for computing text width\");\n\t\t} else {\n\t\t\tthis._canvas = d3.select(\".text-width-helper\");\n\t\t}\n\n\t\tif (d3.select('.' + style[\"tip\"]).empty()) {\n\t\t\tthis._tipWrapper = d3.select(\"body\").append('span')\n\t\t\t\t.attr(\"class\", style['tip-wrapper']);\n\t\t\tthis._tip = this._tipWrapper.append('span')\n\t\t\t\t.attr(\"class\", style['tip']);\n\t\t} else {\n\t\t\tthis._tipWrapper = d3.select('.' + style[\"tip-wrapper\"]);\n\t\t\tthis._tip = d3.select('.' + style[\"tip\"]);\n\t\t}\n\t}\n\n\t/**\n\t * @param {DetailsData} data\n\t */\n\t_setData(data) {\n\t\tthis._clearData();\n\n\t\tif (this._labelCircle) {\n\t\t\tthis._labelCircle.attr('fill', data.color);\n\t\t}\n\n\t\tthis._label.text(data.label);\n\t\tthis.container.classed(style['details-disabled'], data.disabled);\n\n\t\tif (data.tooltips) {\n\t\t\tthis._createTooltips(data);\n\t\t\tthis._renderAndSetTooltipsData(data.tooltips);\n\t\t}\n\n\t\tif (this.showOnlyTool && this.enableToggle) {\n\t\t\tthis._createOnlyTool();\n\t\t\tthis._renderOnlyTool();\n\t\t}\n\n\t\tif (CleverChartsUtils.calculateTextWidth(this._label, this._canvas) > this._rightSideStart) {\n\t\t\tthis._handleLongLabel(this._rightSideStart);\n\t\t}\n\t}\n\n\t_createOnlyTool() {\n\t\tthis._onlyTool = new OnlyTool({\n\t\t\tfontSize: this.tooltipFontSize - 1,\n\t\t\tonlyToolText: this.onlyToolText\n\t\t});\n\t}\n\n\t_renderOnlyTool() {\n\t\tconst index = this.container.datum();\n\t\tthis._onlyTool.render(this.container.node(), this._rightSideStart, this.labelFontSize - 1, index)\n\t\t\t.on(\"click\", (index) => {\n\t\t\t\td3.event.stopPropagation();\n\t\t\t\tthis._observable.fire(\"selectOnly\", index);\n\t\t\t});\n\t\tthis._rightSideStart -= this._onlyTool.width + 24;\n\t}\n\n\t/**\n\t * @param {DetailsData} detailsData\n\t */\n\t_createTooltips(detailsData) {\n\t\tconst tooltipsData = detailsData.tooltips;\n\t\tconst tooltipsReversed = tooltipsData.slice();\n\t\ttooltipsReversed.reverse();\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = detailsData.getPrecision(\"max\");\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tthis._tooltips = tooltipsData.map((_, index) => new Tooltip({\n\t\t\tfontSize: this.tooltipFontSize,\n\t\t\tsymbol: tooltipsData.length>1 ? this.tooltipSymbol : undefined,\n\t\t\tactiveColor: this.activeColors[index % this.activeColors.length],\n\t\t\tformat: format\n\t\t}));\n\t}\n\n\t/**\n\t * @param {TooltipData[]} tooltipsData\n\t */\n\t_renderAndSetTooltipsData(tooltipsData) {\n\t\tlet previousTooltipX = this.width - this.horizontalPadding;\n\t\tthis._tooltips.forEach((_, index) => {\n\t\t\tconst reversedIndex = this._tooltips.length - 1 - index;\n\t\t\tconst tooltipReversed = this._tooltips[reversedIndex];\n\t\t\tconst tooltipData = tooltipsData[reversedIndex];\n\n\t\t\ttooltipReversed.render(this.container.node(), previousTooltipX, this.labelFontSize, reversedIndex);\n\t\t\ttooltipReversed.setData(tooltipData);\n\n\t\t\tpreviousTooltipX -= tooltipReversed.width + 24;\n\t\t});\n\n\t\tthis._rightSideStart = previousTooltipX + 12;\n\t}\n\n\t_handleLongLabel(maxWidth) {\n\t\t// render white background under values\n\t\tthis._tooltipsBackground = this.container\n\t\t\t.insert(\"g\", \"g.\" + style[\"tooltip\"]);\n\n\t\tconst gradientWidth = 40;\n\t\tconst xOffset = -10;\n\t\tthis._tooltipsBackground\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"x\", maxWidth - xOffset)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", this.width - maxWidth + xOffset)\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.attr(\"fill\", \"white\");\n\t\tthis._tooltipsBackground\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"x\", maxWidth - xOffset - gradientWidth)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", gradientWidth + 1) // 1 px extra looks better\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.attr(\"fill\", \"url(#tooltips-background)\");\n\n\t\t// handle label tooltips\n\t\tthis._label.on(\"mouseenter\", () => {\n\t\t\tconst right = document.documentElement.getBoundingClientRect().width\n\t\t\t\t- this._getOffset(this._label.node()).left;\n\t\t\tthis._tipWrapper\n\t\t\t\t.style(\"right\", right + \"px\")\n\t\t\t\t.style(\"top\", this._getOffset(this._label.node()).top + \"px\");\n\t\t\tthis._tip\n\t\t\t\t.text(this._label.text())\n\t\t\t\t.style(\"transition-delay\", \".5s\")\n\t\t\t\t.style(\"transform\", \"scale(1)\")\n\t\t});\n\t\tthis._label.on(\"mouseleave\", () => {\n\t\t\tthis._tip\n\t\t\t\t.style(\"transition-delay\", \"0s\")\n\t\t\t\t.style(\"transform\", \"scale(0)\");\n\t\t});\n\t}\n\n\t_getOffset(el) {\n\t\tconst rect = el.getBoundingClientRect();\n\t\treturn {\n\t\t\tleft: rect.left + window.scrollX,\n\t\t\ttop: rect.top + window.scrollY\n\t\t};\n\t}\n\n\t_clearData() {\n\t\tthis.container.select(`.${style[\"label\"]}`).text(\"-\");\n\t\tthis.container.selectAll(`.${style[\"tooltip\"]}`).remove();\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\tset activeColors(activeColors) {\n\t\tthis._activeColors = activeColors;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\tset format(format) {\n\t\tthis._format = format;\n\t}\n\n\tget horizontalPadding() {\n\t\treturn this._horizontalPadding;\n\t}\n\n\tget tooltips() {\n\t\treturn this._tooltips;\n\t}\n\n\tget showOnlyTool() {\n\t\treturn this._showOnlyTool;\n\t}\n\n\tget onlyToolText() {\n\t\treturn this._onlyToolText;\n\t}\n\n\tget enableToggle() {\n\t\treturn this._enableToggle;\n\t}\n\n\tget showLabelCircle() {\n\t\treturn this._showLabelCircle;\n\t}\n}\n\nexport default Details;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport * as d3 from \"d3\";\nimport style from \"../Barchart.css\";\n\nlet COLOR_PATTERN_INDEX = 0;\n\nclass Stripe extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.STRIPE_HEIGHT,\n\t\t\tbackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\ttopCornerRounded = Defaults.CORNER_ROUNDED,\n\t\t\tbottomCornerRounded = Defaults.CORNER_ROUNDED,\n\t\t\tcondensed = Defaults.DETAILS_HIDDEN\n\t\t}) {\n\t\tsuper(width, height, \"stripe\");\n\t\tthis._backgroundColor = backgroundColor;\n\t\tthis._activeColors = activeColors;\n\t\tthis._dualValue = dualValue;\n\t\tthis._minMax = minMax;\n\t\tthis._topCornerRounded = topCornerRounded;\n\t\tthis._bottomCornerRounded = bottomCornerRounded;\n\t\tthis._condensed = condensed;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget backgroundColor() {\n\t\treturn this._backgroundColor;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget topCornerRounded() {\n\t\treturn this._topCornerRounded;\n\t}\n\n\tget bottomCornerRounded() {\n\t\treturn this._bottomCornerRounded;\n\t}\n\n\tget condensed() {\n\t\treturn this._condensed;\n\t}\n\n\t_render() {\n\n\t\tconst clipPath = this.container.append(\"clipPath\")\n\t\t\t.attr(\"id\", \"rounded-corners-\"+this._maskIndex);\n\n        if (this.topCornerRounded && this.bottomCornerRounded) {\n            clipPath\n                .append(\"rect\")\n                .attr(\"width\", this.width)\n                .attr(\"height\", this.height)\n                .attr(\"rx\", Math.min(this.width, this.height)/2)\n                .attr(\"ry\", Math.min(this.width, this.height)/2);\n        } else if (!this.topCornerRounded && !this.bottomCornerRounded) {\n            clipPath\n                .append(\"rect\")\n                .attr(\"width\", this.width)\n                .attr(\"height\", this.height);\n        } else {\n            clipPath\n                .append(\"rect\")\n                .attr(\"width\", this.width - 2*this.height)\n                .attr(\"height\", this.height)\n                .attr(\"x\", this.height);\n            if (this.topCornerRounded) {\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.height)\n                    .attr(\"cy\", this.height)\n                    .attr(\"r\", this.height);\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.width - this.height)\n                    .attr(\"cy\", this.height)\n                    .attr(\"r\", this.height);\n            }\n            if (this.bottomCornerRounded) {\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.height)\n                    .attr(\"cy\", 0)\n                    .attr(\"r\", this.height);\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.width - this.height)\n                    .attr(\"cy\", 0)\n                    .attr(\"r\", this.height);\n            }\n        }\n\n\t\tthis._renderProgress(0, this.width, this.backgroundColor, \"stripe-background\");\n\t}\n\n\t/**\n\t * @param {StripeData} data\n\t */\n\t_setData(data) {\n\n\t\tif (this.dualValue) {\n\n\t\t\tthis._renderStripe(0, this.width/2-0.5,\n\t\t\t\tdata.left.value,\n\t\t\t\tdata.left.color ? data.left.color : this.activeColors[1] ? this.activeColors[1] : this.activeColors[0],\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tthis._renderStripe(this.width/2+0.5, this.width,\n\t\t\t\tdata.right.value,\n\t\t\t\tdata.right.color ? data.right.color : this.activeColors[0],\n\t\t\t\tfalse\n\t\t\t);\n\n\t\t} else {\n\t\t\tthis._renderStripe(0, this.width, data.value, data.color ? data.color : this.activeColors[0]);\n\t\t}\n\t}\n\n\t_clearData() {\n\t\tthis.container.selectAll(style[\"progress\"]).remove();\n\t}\n\n\n\t_renderXBase(x) {\n\n\t\tthis.container.append(\"line\")\n\t\t\t.attr(\"x1\", x)\n\t\t\t.attr(\"x2\", x)\n\t\t\t.attr(\"y1\", 0)\n\t\t\t.attr(\"y2\", this.condensed ? -4 : -7)\n\t\t\t.attr(\"stroke\", \"#C9C9C9\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke-dasharray\", [1,2]);\n\n\t\tthis.container.append(\"line\")\n\t\t\t.attr(\"x1\", x)\n\t\t\t.attr(\"x2\", x)\n\t\t\t.attr(\"y1\", this.height)\n\t\t\t.attr(\"y2\", this.height + (this.condensed ? 4 : 7))\n\t\t\t.attr(\"stroke\", \"#C9C9C9\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke-dasharray\", [1,2]);\n\t}\n\n\t_renderStripe(x1, x2, value, color, alignRight = false) {\n\n\t\tconst axis = d3.scaleLinear()\n\t\t\t.range([x1, x2]);\n\n\t\tif (alignRight) {\n\t\t\taxis.domain([this.minMax.max, this.minMax.min]);\n\t\t} else {\n\t\t\taxis.domain([this.minMax.min, this.minMax.max]);\n\t\t}\n\n\t\tconst xBase = axis(0);\n\n\t\tif (this.minMax.min < 0 && this.minMax.max > 0) {\n\t\t\tthis._renderXBase(xBase);\n\t\t}\n\n\t\tif (alignRight === value < 0) {\n\n\t\t\tthis._renderProgress(xBase, axis(value), color);\n\n\t\t} else {\n\n\t\t\tthis._renderProgress(axis(value), xBase, color);\n\n\t\t}\n\n\t}\n\n\t_renderProgress(x1, x2, color, className = \"progress\") {\n\n\t\tif (color instanceof Array) {\n\t\t\tthis._renderTwoColoredFill(color[0], color[1]);\n\t\t}\n\n\t\tthis.container.append(\"rect\")\n\t\t\t.attr(\"fill\", color instanceof Array ? \"url(#two-colored-\"+this._maskIndex+\"-\"+COLOR_PATTERN_INDEX+\")\" : color)\n\t\t\t.attr(\"class\", style[className])\n\t\t\t.attr(\"x\", x1)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", x2-x1)\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.attr(\"transform\", \"translate(\" + 0 + \", \" + 0 + \")\")\n\t\t\t.attr(\"clip-path\", \"url(#rounded-corners-\"+this._maskIndex+\")\");\n\n\t}\n\n\t_renderTwoColoredFill(color1, color2) {\n\n\t\tCOLOR_PATTERN_INDEX++;\n\n\t\tconst twoColoredFill = this.container.append(\"pattern\")\n\t\t\t.attr(\"id\", \"two-colored-\"+this._maskIndex+\"-\"+COLOR_PATTERN_INDEX)\n\t\t\t.attr(\"width\", \"20\")\n\t\t\t.attr(\"height\", \"20\")\n\t\t\t.attr(\"patternUnits\", \"userSpaceOnUse\");\n\n\t\ttwoColoredFill.append('rect')\n\t\t\t.attr('fill', color1)\n\t\t\t.attr(\"width\", \"20\")\n\t\t\t.attr(\"height\", \"20\");\n\n\t\ttwoColoredFill.append('path')\n\t\t\t.attr('fill', color2)\n\t\t\t.attr('d', 'M20,0 L10,0 L20,10 Z');\n\t\ttwoColoredFill.append('path')\n\t\t\t.attr('fill', color2)\n\t\t\t.attr('d', 'M0,0 L20,20 L10,20 L0,10 Z');\n\t}\n\n\n}\n\nexport default Stripe;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport Details from \"./Details\";\nimport Stripe from \"./Stripe\";\nimport style from \"../Barchart.css\";\nimport DetailsData from \"../data/DetailsData\";\n\nclass Bar extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.BAR_HEIGHT,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\tdetailsHidden = Defaults.DETAILS_HIDDEN,\n\t\t\tdetailsHeight = labelFontSize + Defaults.DETAILS_BOTTOM_SPACE,\n\t\t\tenableHover = Defaults.ENABLE_BAR_HOVER,\n\t\t\tenableToggle = Defaults.ENABLE_BAR_TOGGLE,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tdisabled = Defaults.BAR_DISABLED,\n\t\t\tformat = Defaults.FORMAT,\n\t\t\thorizontalPadding = Defaults.HORIZONTAL_PADDING,\n\t\t\tstripeHeight = Defaults.STRIPE_HEIGHT,\n\t\t\tstripeBackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR,\n\t\t\tshowOnlyTool = Defaults.SHOW_ONLY_TOOL,\n\t\t\tonlyToolText = Defaults.ONLY_TOOL_TEXT,\n\t\t\tshowLabelCircle = Defaults.SHOW_LABEL_CIRCLE\n\t\t}\n\t) {\n\t\tsuper(width, height, \"bar\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._minMax = minMax;\n\t\tthis._detailsHidden = detailsHidden;\n\t\tthis._detailsHeight = detailsHeight;\n\t\tthis._enableHover = enableHover;\n\t\tthis._enableToggle = enableToggle;\n\t\tthis._dualValue = dualValue;\n\t\tthis._disabled = disabled;\n\t\tthis._format = format;\n\t\tthis._horizontalPadding = horizontalPadding;\n\t\tthis._stripeHeight = stripeHeight;\n\t\tthis._stripeBackgroundColor = stripeBackgroundColor;\n\t\tthis._showOnlyTool = showOnlyTool;\n\t\tthis._onlyToolText = onlyToolText;\n\t\tthis._showLabelCircle = showLabelCircle;\n\n\t\tthis._details;\n\t\tthis._stripes;\n\n\t\tthis._observable\n\t\t\t.add(\"disabled\")\n\t\t\t.add(\"selectOnly\");\n\t}\n\n\t_render() {\n\t\tif (!this.detailsHidden) {\n\t\t\tthis._createDetails();\n\t\t\tthis._renderDetails();\n\t\t}\n\n\t\tthis.container.classed(style['hover-enabled'], this.enableHover);\n\n\t\tif (this.enableToggle) {\n\t\t\tthis._doEnableToggle();\n\t\t}\n\t}\n\n\t/**\n\t * @param {BarData} data\n\t */\n\t_setData(data) {\n\t\tthis._disabled = data.disabled;\n\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\n\t\tthis.container.classed(style[\"bar-highlighted\"], data.highlighted);\n\n\t\tthis._setDetailsData(data.details);\n\n\t\tthis._createStripes(data);\n\t\tthis._renderStripes();\n\t\tthis._setStripesData(data);\n\t}\n\n\t_clearData() {\n\t\tif (!this.detailsHidden) {\n\t\t\tthis._details.clearData();\n\t\t}\n\t}\n\n\t_setDisabledValue(data) {\n\t\tthis._disabled = data.disabled;\n\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\n\t}\n\n\t_createDetails() {\n\t\tthis._details = new Details({\n\t\t\twidth: this.width,\n\t\t\theight: this.detailsHeight,\n\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\tactiveColors: this.activeColors,\n\t\t\tformat: this.format,\n\t\t\thorizontalPadding: this.horizontalPadding,\n\t\t\tshowOnlyTool: this.showOnlyTool,\n\t\t\tonlyToolText: this.onlyToolText,\n\t\t\tenableToggle: this.enableToggle,\n\t\t\tshowLabelCircle: this.showLabelCircle\n\t\t});\n\t}\n\n\t_renderDetails() {\n\t\tconst index = this.container.datum();\n\t\tthis._details.render(this.container.node(), 0, 0, index)\n\t\t\t.on(\"selectOnly\", (index) => {\n\t\t\t\tthis._observable.fire(\"selectOnly\", index);\n\t\t\t});\n\t}\n\n\t_setDetailsData(detailsData) {\n\t\tif (this.details) {\n\t\t\tconst detailsDataDefault = DetailsData.copyAs(detailsData);\n\t\t\tthis.details.setData(detailsDataDefault);\n\t\t}\n\t}\n\n\t_createStripes(data) {\n\t\tconst minMax = data.calculateMinMax(this.minMax);\n\t\tthis._stripes = data.stripes.map((stripe, index) => {\n\t\t\tlet colors;\n\t\t\tif (data.stripes.length > 1) {\n\t\t\t\tcolors = [this.activeColors[index % this.activeColors.length]]\n\t\t\t} else {\n\t\t\t\tcolors = this.activeColors.slice();\n\t\t\t}\n\n\t\t\treturn new Stripe({\n\t\t\t\twidth: this.width,\n\t\t\t\tactiveColors: colors,\n\t\t\t\tdualValue: this.dualValue,\n\t\t\t\tminMax: minMax,\n\t\t\t\theight: this.stripeHeight,\n\t\t\t\tbackgroundColor: this.stripeBackgroundColor,\n\t\t\t\ttopCornerRounded: index === 0,\n\t\t\t\tbottomCornerRounded: index === data.stripes.length-1,\n\t\t\t\tcondensed: this.detailsHidden\n\t\t\t});\n\t\t});\n\t}\n\n\t_renderStripes() {\n\t\tconst detailsHeight = this.detailsHidden ? 0 : this.detailsHeight;\n\t\tthis.stripes.forEach((stripe, index) => {\n\t\t\tstripe.render(this.container.node(), 0, detailsHeight + 5 * index, index);\n\t\t});\n\t}\n\n\t_setStripesData(data) {\n\t\tdata.stripes.forEach((stripeData, index) => this.stripes[index].setData(stripeData));\n\t}\n\n\t_doEnableToggle() {\n\t\tthis.container.attr(\"cursor\", \"pointer\");\n\t\tthis.on(\"click\", (index) => {\n\t\t\tthis._disabled = !this._disabled;\n\t\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\n\t\t\tthis._observable.fire(\"disabled\", index, this._disabled);\n\t\t});\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget detailsHidden() {\n\t\treturn this._detailsHidden;\n\t}\n\n\tget detailsHeight() {\n\t\treturn this._detailsHeight;\n\t}\n\n\tget enableToggle() {\n\t\treturn this._enableToggle;\n\t}\n\n\tget enableHover() {\n\t\treturn this._enableHover;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget horizontalPadding() {\n\t\treturn this._horizontalPadding;\n\t}\n\n\tget stripeHeight() {\n\t\treturn this._stripeHeight;\n\t}\n\n\tget stripeBackgroundColor() {\n\t\treturn this._stripeBackgroundColor;\n\t}\n\n\tget stripes() {\n\t\treturn this._stripes;\n\t}\n\n\tget details() {\n\t\treturn this._details;\n\t}\n\n\tget showOnlyTool() {\n\t\treturn this._showOnlyTool;\n\t}\n\n\tget onlyToolText() {\n\t\treturn this._onlyToolText;\n\t}\n\n\tget showLabelCircle() {\n\t\treturn this._showLabelCircle;\n\t}\n}\n\nexport default Bar;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport Bar from \"./Bar\";\nimport Details from \"./Details\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport BarData from \"../data/BarData\";\nimport TooltipData from \"../data/TooltipData\";\nimport DetailsData from \"../data/DetailsData\";\nimport BarchartData from \"../data/BarchartData\";\n\nclass Barchart extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.HEIGHT,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\tdetailsVisible = Defaults.DETAILS_HIDDEN,\n\t\t\tdetailsBottomSpace = Defaults.DETAILS_BOTTOM_SPACE,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tbarHeight = Defaults.BAR_HEIGHT,\n\t\t\tenableBarHover = Defaults.ENABLE_BAR_HOVER,\n\t\t\tenableBarToggle = Defaults.ENABLE_BAR_TOGGLE,\n\t\t\tformat = Defaults.FORMAT,\n\t\t\thorizontalPadding = Defaults.HORIZONTAL_PADDING,\n\t\t\tstripeHeight = Defaults.STRIPE_HEIGHT,\n\t\t\tstripeBackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR,\n\t\t\tshowOnlyTool = Defaults.SHOW_ONLY_TOOL,\n\t\t\tonlyToolText = Defaults.ONLY_TOOL_TEXT,\n\t\t\tshowLabelCircle = Defaults.SHOW_LABEL_CIRCLE\n\t\t}\n\t) {\n\t\tsuper(width, height, \"barchart\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._minMax = minMax;\n\t\tthis._detailsVisible = detailsVisible;\n\t\tthis._detailsBottomSpace = detailsBottomSpace;\n\t\tthis._dualValue = dualValue;\n\t\tthis._barHeight = barHeight;\n\t\tthis._enableBarHover = enableBarHover;\n\t\tthis._enableBarToggle = enableBarToggle;\n\t\tthis._format = format;\n\t\tthis._horizontalPadding = horizontalPadding;\n\t\tthis._stripeHeight = stripeHeight;\n\t\tthis._stripeBackgroundColor = stripeBackgroundColor;\n\t\tthis._showOnlyTool = showOnlyTool;\n\t\tthis._onlyToolText = onlyToolText;\n\t\tthis._showLabelCircle = showLabelCircle;\n\n\t\tthis._details;\n\t\tthis._bars;\n\n\t\tthis._observable\n\t\t\t.add(\"barEnter\")\n\t\t\t.add(\"barLeave\")\n\t\t\t.add(\"barClick\")\n\t\t\t.add(\"barDisabled\")\n\t\t\t.add(\"barsEnter\")\n\t\t\t.add(\"barsLeave\")\n\t\t\t.add(\"selectOnly\");\n\n\t}\n\n\tisBarDisabled(index) {\n\t\treturn this.bars[index].disabled;\n\t}\n\n\tupdateData(updateFunction) {\n\t\tthis.setData(updateFunction(this.data));\n\t}\n\n\tupdateDetailsData(updateFunction) {\n\t\tthis.setDetailsData(updateFunction(this.details.data));\n\t}\n\n\tupdateBarData(index, updateFunction) {\n\t\tthis.setBarData(index, updateFunction(this.bars[index].data));\n\t}\n\n\tsetDetailsData(detailsData) {\n\t\tconst detailsDataDefault = DetailsData.copyAs(detailsData);\n\t\tthis.details.setData(detailsDataDefault);\n\t}\n\n\tsetBarData(index, barData) {\n\t\tconst barDataDefault = BarData.copyAs(barData);\n\n\t\tthis._setDefaultBarDetails(barData);\n\n\t\tthis.bars[index].setData(barDataDefault);\n\t}\n\n\t_setDefaultBarDetails(barData) {\n\n\t\tif (!barData.details) {\n\t\t\tbarData.details = new DetailsData({\n\t\t\t\tlabel: this.data.details.label\n\t\t\t});\n\t\t}\n\n\t\tif (typeof barData.details.tooltips === 'undefined') {\n\n\t\t\tbarData.stripes.forEach((stripeData, index) => {\n\n\t\t\t\tlet colors;\n\t\t\t\tif (barData.stripes.length > 1) {\n\t\t\t\t\tcolors = [this.activeColors[index % this.activeColors.length]]\n\t\t\t\t} else {\n\t\t\t\t\tcolors = this.activeColors.slice();\n\t\t\t\t}\n\n\t\t\t\tif (this.dualValue) {\n\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\n\t\t\t\t\t\ttext: stripeData.left.value,\n\t\t\t\t\t\tsymbol: this.tooltipSymbol,\n\t\t\t\t\t\tcolor: stripeData.left.color ? stripeData.left.color : (colors[1] ? colors[1] : colors[0])\n\t\t\t\t\t}));\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\n\t\t\t\t\t\ttext: stripeData.right.value,\n\t\t\t\t\t\tsymbol: this.tooltipSymbol,\n\t\t\t\t\t\tcolor: stripeData.right.color ? stripeData.right.color : colors[0]\n\t\t\t\t\t}));\n\t\t\t\t} else {\n\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\n\t\t\t\t\t\ttext: stripeData.value,\n\t\t\t\t\t\tsymbol: barData.stripes.length > 1 ? this.tooltipSymbol : undefined,\n\t\t\t\t\t\tcolor: stripeData.color ? stripeData.color : colors[0]\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t});\n\t\t}\n\n\t}\n\n\t_renderContainer(selector, x = 0, y = 0){\n\n\t\tthis._svgWrapper = d3.select(selector).append(\"svg\")\n\t\t\t.attr(\"class\", style[this.className])\n\t\t\t.attr(\"width\", this.width)\n\t\t\t.attr(\"height\", this.height);\n\n\t\tthis._svgWrapper.style({\n\t\t\t'position': 'relative',\n\t\t\t'left': x,\n\t\t\t'top': y\n\t\t});\n\n\t\treturn this._svgWrapper.append(\"g\")\n\t}\n\n\t_render() {\n\t\tif (this.detailsVisible) {\n\t\t\tthis._createDetails();\n\t\t\tthis._renderDetails();\n\t\t}\n\n\t\tthis._doSelectOnly();\n\t}\n\n\t_doSelectOnly() {\n\t\tthis.on(\"selectOnly\", (onlyIndex) => {\n\t\t\tthis.bars.forEach((bar, index) => {\n\t\t\t\tconst barData = bar.data;\n\t\t\t\tbarData.disabled = onlyIndex !== index;\n\t\t\t\tbar._setDisabledValue(barData);\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @param {BarchartData} data\n\t */\n\t_setData(data) {\n\n\t\tdata.bars.forEach((barData) => this._setDefaultBarDetails(barData));\n\n\t\tif (this.detailsVisible) {\n\t\t\tthis._adjustDetails(data);\n\t\t\tthis.setDetailsData(data.details);\n\t\t}\n\n\t\tthis._adjustHeight(data);\n\n\t\tthis._createBars(data);\n\n\t\tthis._renderBars();\n\n\t\tdata.bars.forEach((barData, index) => this.setBarData(index, barData));\n\t}\n\n\t_clearData() {\n\t\tif (this.detailsVisible) {\n\t\t\tthis._details.clearData();\n\t\t}\n\t\tthis._container.selectAll(`.${style[\"bar\"]}`).remove();\n\t}\n\n\t_adjustDetails(data) {\n\t\tif (!this.details.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = data.getPrecision(\"max\");\n\t\t\tthis.details.format = spec.toString();\n\t\t}\n\n\t\tif (this.dualValue && data.details.tooltips && data.bars[0].stripes.length === 1) {\n\t\t\tthis.details.activeColors = this.details.activeColors.slice().reverse();\n\t\t}\n\t}\n\n\t_createDetails() {\n\n\t\tthis._details = new Details({\n\t\t\twidth: this.width,\n\t\t\theight: this.detailsHeight,\n\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\tactiveColors: this.activeColors,\n\t\t\tformat: this.format,\n\t\t\tshowOnlyTool: false\n\t\t});\n\t}\n\n\t_renderDetails() {\n\t\tthis._details.render(this._container.node(), 0, 0);\n\t}\n\n\t_createBars(data) {\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = data.getPrecision(\"max\");\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tconst minMax = data.calculateMinMax(this.minMax);\n\n\t\tthis._bars = data.bars.map(() => new Bar({\n\t\t\twidth: this.width,\n\t\t\theight: this.barHeight,\n\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\tactiveColors: this.activeColors,\n\t\t\tdetailsHidden: this.detailsVisible,\n\t\t\tdetailsHeight: this.detailsHeight,\n\t\t\tdualValue: this.dualValue,\n\t\t\tenableToggle: this.enableBarToggle,\n\t\t\tenableHover: this.enableBarHover,\n\t\t\tminMax: minMax,\n\t\t\tformat: format,\n\t\t\thorizontalPadding: this.horizontalPadding,\n\t\t\tstripeHeight: this.stripeHeight,\n\t\t\tstripeBackgroundColor: this.stripeBackgroundColor,\n\t\t\tshowOnlyTool: this.showOnlyTool,\n\t\t\tonlyToolText: this.onlyToolText,\n\t\t\tshowLabelCircle: this.showLabelCircle\n\t\t}));\n\t}\n\n\t_renderBars() {\n\n\t\tconst barsContainer = this._container.append(\"g\")\n\t\t\t.on(\"mouseenter\", () => {\n\t\t\t\tthis._observable.fire(\"barsEnter\");\n\t\t\t})\n\t\t\t.on(\"mouseleave\", () => {\n\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\tthis.details.setData(this.data.details);\n\t\t\t\t}\n\t\t\t\tthis._observable.fire(\"barsLeave\");\n\t\t\t});\n\n\t\tthis.bars.forEach((bar, index) => {\n\n\t\t\tconst topDetailsWidth = (this.detailsVisible ? this.detailsHeight : 0);\n\n\t\t\tbar.render(barsContainer.node(), 0, topDetailsWidth + this.barHeight*index, index)\n\t\t\t\t.on(\"click\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barClick\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"enter\", (index) => {\n\t\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\t\tthis.details.setData(this.bars[index].data.details);\n\t\t\t\t\t}\n\t\t\t\t\tthis._observable.fire(\"barEnter\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"leave\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barLeave\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"disabled\", (index, disabled) => {\n\t\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\t\tconst detailsData = this.details.data;\n\t\t\t\t\t\tdetailsData.disabled = disabled;\n\t\t\t\t\t\tthis.details.setData(detailsData);\n\t\t\t\t\t}\n\t\t\t\t\tthis._observable.fire(\"barDisabled\", index, disabled);\n\t\t\t\t})\n\t\t\t\t.on(\"selectOnly\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"selectOnly\", index);\n\t\t\t\t});\n\t\t});\n\n\t}\n\n\t_adjustHeight(data) {\n\t\tlet height = data.bars.length * this.barHeight;\n\t\tif (this.detailsVisible) {\n\t\t\theight += this.detailsHeight;\n\t\t}\n\t\tthis.height = height;\n\t\tthis._svgWrapper.attr(\"height\", height);\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget detailsVisible() {\n\t\treturn this._detailsVisible;\n\t}\n\n\tget detailsBottomSpace() {\n\t\treturn this._detailsBottomSpace;\n\t}\n\n\tget detailsHeight() {\n\t\treturn this._detailsBottomSpace + this._labelFontSize;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget barHeight() {\n\t\treturn this._barHeight;\n\t}\n\n\tget enableBarHover() {\n\t\treturn this._enableBarHover;\n\t}\n\n\tget enableBarToggle() {\n\t\treturn this._enableBarToggle;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget horizontalPadding() {\n\t\treturn this._horizontalPadding;\n\t}\n\n\tget stripeHeight() {\n\t\treturn this._stripeHeight;\n\t}\n\n\tget stripeBackgroundColor() {\n\t\treturn this._stripeBackgroundColor;\n\t}\n\n\n\tget details() {\n\t\treturn this._details;\n\t}\n\n\tget bars() {\n\t\treturn this._bars;\n\t}\n\n\tget showOnlyTool() {\n\t\treturn this._showOnlyTool;\n\t}\n\n\tget onlyToolText() {\n\t\treturn this._onlyToolText;\n\t}\n\n\tget showLabelCircle() {\n\t\treturn this._showLabelCircle;\n\t}\n}\n\nexport default Barchart;\n","import style from \"./Linechart.css\";\nimport * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\n\nclass Component {\n\n\tconstructor(\n\t\tclassName = \"component\"\n\t) {\n\t\tthis._container = null;\n\t\tthis._className = className;\n\t\tthis._observable = new Observable([\n\t\t\t\"enter\",\n\t\t\t\"leave\",\n\t\t\t\"click\"\n\t\t]);\n\n\t\tthis._lastData = null;\n\t}\n\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\n\n\tget className() {\n\t\treturn this._className;\n\t}\n\n\tget container() {\n\t\treturn this._container;\n\t}\n\n    get observable() {\n        return this._observable;\n    }\n\n\t_renderContainer(selector, x = 0, y = 0){\n\n\t\treturn d3.select(selector).append(\"g\")\n\t\t\t.attr(\"class\", style[this.className])\n\t\t\t.attr(\"transform\", `translate(${x}, ${y})`)\n\n\t}\n\n\trender(selector, x = 0, y = 0, index = 0){\n\t\tthis.destroy();\n\n\t\tthis._container = this._renderContainer(selector, x, y);\n\n        if (!this._container) {\n            throw `Component ${this._className} was not rendered. Check your selector: ${selector}`;\n        }\n\n\t\tthis._container.datum(index);\n\n\t\tthis._container\n\t\t\t.on(\"click\", (index) => {\n\t\t\t\tthis._observable.fire(\"click\", index)\n\t\t\t})\n\t\t\t.on(\"mouseenter\", (index) => {\n\t\t\t\tthis._observable.fire(\"enter\", index)\n\t\t\t})\n\t\t\t.on(\"mouseleave\", (index) => {\n\t\t\t\tthis._observable.fire(\"leave\", index)\n\t\t\t});\n\n\t\treturn this;\n\t}\n\n\tdestroy(){\n\t\tif (this.isRendered()) {\n            this._lastData = null;\n\t\t\tthis._clearData();\n\t\t\tthis._container.datum(null);\n\t\t\tthis._container.remove();\n\t\t\tthis._container = null;\n\t\t}\n\t\treturn this;\n\t}\n\n\tisRendered(){\n\t\treturn this._container !== null;\n\t}\n\n\tsetData(data) {\n\t\tif (!this.isRendered()) {\n\t\t\tthrow \"Can't call setData() when component is not rendered, please call .render() first.\"\n\t\t}\n\t\tthis._setData(this._container, data, this._lastData);\n\t\tthis._lastData = Object.assign({}, this._lastData, data);\n\t\treturn this;\n\t}\n\n\t_setData(container, data, lastData) {\n\t\t// prepared to be implemented by subclasses\n\t}\n\n    _clearData(container) {\n        // prepared to be implemented by subclasses\n    }\n}\n\nexport default Component;\n","\nexport const WIDTH = 360;\nexport const HEIGHT = 200;\nexport const ENABLE_LINE_TOOLTIP = true;\n\nexport const LINE_COLOR = \"#0081ff\";\nexport const LINE_OPACITY = 1;\nexport const FILL_COLOR = \"#0081ff\";\nexport const FILL_OPACITY = 0.1;\nexport const LINE_WIDTH = 3;\nexport const DOT_SIZE = 6;\n\nexport const HIGHLIGHT_COLOR = \"#fff300\";\n\nexport const LABEL_OFFSET = 23;\nexport const MARGIN_TOP = 13;\nexport const MARGIN_BOTTOM = 28;\n\nexport const AXIS_COLOR = \"#f0f0f0\";\nexport const ZERO_LINE_COLOR = \"#bababa\";\n\n\n\n","import style from \"./Linechart.css\";\nimport Component from './Component';\nimport {\n    DOT_SIZE,\n    FILL_COLOR,\n    FILL_OPACITY,\n    LINE_COLOR,\n    LINE_OPACITY,\n    LINE_WIDTH,\n    MARGIN_BOTTOM\n} from './LinechartDefaults';\nimport * as d3 from 'd3';\n\nclass LinechartLine extends Component {\n    constructor() {\n        super('linechart-line');\n    }\n\n    _setData(container, data, lastData) {\n        if (Object.keys(data).length === 1 && data.appearance) {\n            return this._updateAppearance(data.appearance);\n        }\n        if (Object.keys(data).length === 1 && (data.point || data.point === null)) {\n            const pointData = Object.assign({}, lastData, data);\n            return this._updatePoint(pointData);\n        }\n\n        this.container.selectAll(\"*\").remove();\n        const newData = Object.assign({}, lastData, data);\n        this._parts = this._renderLine(newData);\n        this._point = this._renderPoint();\n        this._updateAppearance(newData.appearance);\n        this._updatePoint(newData);\n    }\n\n    _renderPoint() {\n        return this.container.append(\"circle\")\n            .attr(\"visibility\", \"hidden\")\n            .attr(\"class\", style[\"tooltip-line-circle\"]);\n    }\n\n    _updatePoint({point, appearance, lineData, xAxis, yAxis}) {\n        if (!point) {\n            this._point.attr(\"visibility\", \"hidden\");\n            return;\n        }\n        lineData.forEach(item => {\n            if (point && item.value !== null && String(point) === String(item.id)) {\n                this._point\n                    .attr(\"visibility\", \"visible\")\n                    .attr(\"stroke-width\", appearance.lineWidth || LINE_WIDTH)\n                    .attr(\"stroke\", appearance.lineColor || LINE_COLOR)\n                    .attr(\"stroke-opacity\", appearance.lineOpacity || LINE_OPACITY)\n                    .attr(\"r\", 2.5 + (appearance.lineWidth || LINE_WIDTH)/2)\n                    .attr(\"transform\", \"translate(\"+xAxis(point)+\", \"+yAxis(item.value)+\")\")\n            }\n        });\n    }\n\n    _updateAppearance({lineColor, lineOpacity, fillColor, fillOpacity, lineWidth, dotSize}) {\n        this._parts.forEach(part => {\n            const strokeWidth = part.path.data()[0].length > 1 ? (lineWidth || LINE_WIDTH): (dotSize || DOT_SIZE);\n\n            part.path\n                .attr(\"stroke\", lineColor || LINE_COLOR)\n                .attr(\"stroke-opacity\", isNaN(lineOpacity) ? LINE_OPACITY : lineOpacity)\n                // note that in case of a single item, dot is rendered with a different size\n                .attr(\"stroke-width\", strokeWidth);\n\n            if (part.area) {\n                part.area\n                    .attr(\"fill\", fillColor || FILL_COLOR)\n                    .attr(\"fill-opacity\", isNaN(fillOpacity) ? FILL_OPACITY : fillOpacity);\n            }\n        });\n    }\n\n    _renderLine({height, xAxis, yAxis, lineData, renderAreas}) {\n        let minHeight = height - MARGIN_BOTTOM;\n        let areaZero = Math.max(Math.min(minHeight, yAxis(0)), 0);\n\n        // define the area\n        let area = d3.area()\n            .x(function(d) { return xAxis(d.id); })\n            .y0(areaZero)\n            .y1(function(d) { return yAxis(d.value); });\n\n        // define the line\n        let path = d3.line()\n            .x(function(d) { return xAxis(d.id); })\n            .y(function(d) { return yAxis(d.value); });\n\n        // apply grouping if needed (null or other splits)\n        const groupedData = this._getPartedData(lineData);\n\n        return groupedData.map(partData => {\n            const part = {};\n\n            // only add area if not rendering a dot\n            if (renderAreas && partData.length>1){\n                // add the area path\n                part.area = this.container.append(\"path\")\n                    .data([partData])\n                    .attr(\"class\", style[\"area\"])\n                    .attr(\"d\", area);\n            }\n\n            if (partData.length){\n\n                // add the line path\n                part.path = this.container.append(\"path\")\n                    .data([partData])\n                    .attr(\"fill\", \"none\")\n                    .attr(\"stroke-linecap\", \"round\")\n                    .attr(\"class\", style[\"line\"])\n                    .attr(\"d\", d => {\n                        const p = path(d);\n                        // Fix issue in Chrome on Mac and Surface where\n                        // path points are not rendered if it's a single point\n                        if (p && p.split(\",\").length == 2){\n                            return p + \" \" + p;\n                        }\n                        return p;\n                    });\n            }\n\n            return part;\n        });\n    }\n\n    _getPartedData(data){\n        let group;\n        let lastEmpty = true;\n        const result = [];\n\n        data.forEach(item => {\n            if (item.value === null) {\n                lastEmpty = true;\n            } else {\n                if (lastEmpty) {\n                    group = [];\n                    result.push(group);\n                }\n                group.push(item);\n                lastEmpty = false;\n            }\n        });\n\n        return result;\n    }\n\n    _shouldRenderZeroLine(yAxis, height){\n        const zeroLinePosition = yAxis(0);\n        const axisPosition = height - MARGIN_BOTTOM;\n        const treshold = 10;\n        return zeroLinePosition < axisPosition - treshold;\n    }\n}\n\nexport default LinechartLine;\n","import style from \"./Linechart.css\";\nimport * as d3 from \"d3\";\nimport Component from './Component';\nimport {DOT_SIZE, LINE_WIDTH, MARGIN_TOP, MARGIN_BOTTOM} from './LinechartDefaults';\nimport LinechartLine from './LinechartLine';\n\nclass LinechartMask extends Component {\n\n    constructor(width, height, enableLineTooltip) {\n        super('linechart-mask');\n        this._width = width;\n        this._height = height;\n        this._enableLineTooltip = enableLineTooltip;\n        this.observable.add('lineEnter');\n        this.observable.add('lineLeave');\n        this.observable.add('tooltipEnter');\n        this.observable.add('tooltipLeave');\n        this.observable.add('annotationEnter');\n        this.observable.add('annotationLeave');\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    get enableLineTooltip() {\n        return this._enableLineTooltip;\n    }\n\n    _setData(container, data, lastData) {\n        const verticalSpacing = this.height / 4;\n        const xAxis = d3.scalePoint().range([0, this.width]);\n        const yAxis = d3.scaleLinear().range([this.height-verticalSpacing, MARGIN_TOP]);\n        xAxis.domain(data.series[0].data.map(function (d) { return d.id; }));\n        const minMax = this._calculateMinMax(data.series);\n        yAxis.domain([minMax.min, minMax.max]);\n        const mergedData = this._mergeSeriesData(data.series);\n        this._renderTooltipAreas(container, xAxis, yAxis, mergedData);\n        if (this.enableLineTooltip) {\n            this._renderTooltipLines(container, xAxis, yAxis, data.series);\n        }\n        this._renderAnnotations(container, xAxis, data.annotations, mergedData);\n    }\n\n    _renderAnnotations(container, xAxis, annotations, mergedData) {\n        const mergedAnnotations = this._mergeAnnotations(annotations);\n\n        Object.keys(mergedAnnotations).forEach((id, index) => {\n            if (typeof xAxis(id) === 'undefined') {\n                console.warn(`Annotation (in mask component) ${JSON.stringify(mergedAnnotations[id])} has id '${id}' which is not present in linechart data`);\n                return;\n            }\n            const annotationGroup = container.append(\"g\")\n                .on(\"mouseenter\", () => this.observable.fire(\"annotationEnter\", mergedAnnotations[id], mergedData[id], id, index))\n                .on(\"mouseleave\", () => this.observable.fire(\"annotationLeave\", mergedAnnotations[id], mergedData[id], id, index));\n            annotationGroup.append(\"line\")\n                .attr(\"x1\", xAxis(id))\n                .attr(\"x2\", xAxis(id))\n                .attr(\"y1\", 0)\n                .attr(\"y2\", this.height - MARGIN_BOTTOM)\n                .attr(\"stroke-width\", 3)\n                .attr(\"stroke\", 'transparent');\n            if (mergedAnnotations[id].length > 1) {\n                annotationGroup.append(\"circle\")\n                    .attr(\"fill\", \"transparent\")\n                    .attr(\"cx\", xAxis(id))\n                    .attr(\"cy\", this.height - MARGIN_BOTTOM)\n                    .attr(\"r\", 7.5);\n            }\n        });\n    }\n\n    _mergeAnnotations(annotations) {\n        const merged = {};\n        annotations.forEach(annotation => {\n            merged[annotation.id] = merged[annotation.id] || [];\n            merged[annotation.id].push(annotation);\n        });\n        return merged;\n    }\n\n    _renderTooltipAreas(container, xAxis, yAxis, mergedData) {\n        let hoverWidth = this.width;\n        if (Object.keys(mergedData).length > 1) {\n            hoverWidth = this.width / (Object.keys(mergedData).length-1);\n        }\n\n        Object.keys(mergedData).forEach((valueId, valueIndex) => {\n            container.append(\"rect\")\n                .attr(\"class\", style[\"tooltip-hover-area\"])\n                .attr(\"width\", hoverWidth)\n                .attr(\"fill-opacity\", 0)\n                .attr(\"x\", () => {\n                    return xAxis(valueId) - hoverWidth/2\n                })\n                .attr(\"height\", this.height)\n                .on(\"mouseover\", () => this.observable.fire('tooltipEnter', mergedData[valueId], valueId, valueIndex))\n                .on(\"mouseleave\", () => this.observable.fire('tooltipLeave', mergedData[valueId], valueId, valueIndex))\n        });\n    }\n\n    _mergeSeriesData(series) {\n        const data = {};\n        series.forEach(line => {\n            line.data.forEach(lineValue => {\n                data[lineValue.id] = data[lineValue.id] || [];\n                data[lineValue.id].push({\n                    id: lineValue.id,\n                    label: lineValue.label,\n                    value: lineValue.value,\n                    tooltip: lineValue.tooltip,\n                    appearance: line.appearance\n                });\n            });\n        });\n        return data;\n    }\n\n    _renderTooltipLines(container, xAxis, yAxis, series) {\n        Array.from(series).reverse().forEach((lineData, lineIndex) => {\n            if (lineData.title) {\n                this._renderTooltipLine(container, xAxis, yAxis, lineData, series.length-1 - lineIndex);\n            }\n        });\n    }\n\n    _renderTooltipLine(container, xAxis, yAxis, lineData, lineIndex) {\n\n        const maskAppearance = Object.assign({}, lineData.appearance, {\n            lineOpacity: 0,\n            lineWidth: (lineData.appearance.lineWidth || LINE_WIDTH)*2,\n            dotSize: (lineData.appearance.dotSize || DOT_SIZE)*2\n        });\n\n        const line = new LinechartLine();\n        line.render(container.node());\n        line.setData({\n            height: this.height,\n            xAxis,\n            yAxis,\n            lineData: lineData.data,\n            appearance: maskAppearance,\n            renderAreas: false\n        });\n        line.on(\"enter\", () => this.observable.fire('lineEnter', lineData, lineIndex))\n            .on(\"leave\", () => this.observable.fire('lineLeave', lineData, lineIndex));\n    }\n\n    _calculateMinMax(series) {\n        const data = [];\n        series.forEach((line) => {\n            line.data.forEach((item) => {\n                data.push(item);\n            });\n        });\n\n        var min = d3.min(data, function (d) { return d.value; });\n        var max = d3.max(data, function (d) { return d.value; });\n\n        if (data.length <= series.length) {\n            min = Math.min(min, 0);\n            max = Math.max(max, 0);\n        }\n\n        return {\n            min: min,\n            max: max\n        }\n    }\n\n    _getGroupedData(data){\n        let group = [];\n        const result = [group];\n\n        data.forEach(item=>{\n            if (item.value === null){\n                group = [];\n                result.push(group);\n            } else {\n                group.push(item);\n            }\n        });\n\n        return result;\n    }\n\n}\n\nexport default LinechartMask;\n","import style from \"./Linechart.css\";\nimport Component from './Component';\nimport {LABEL_OFFSET} from './LinechartDefaults';\n\nlet gradientID = 0;\n\nclass LinechartLabel extends Component {\n    constructor() {\n        super('linechart-label');\n    }\n\n    _setData(container, data, lastData) {\n        if (Object.keys(data).length === 1 && typeof data.visible !== 'undefined') {\n            return this.container.attr(\"visibility\", data.visible ? \"visible\" : \"hidden\");\n        }\n\n        this.container.selectAll(\"*\").remove();\n        const annotationCircles = data.annotationCircles || [];\n        const valueId = data.valueId;\n        const newData = Object.assign({}, lastData, data);\n        this._renderLabel(newData);\n        if (newData.renderDot && annotationCircles.indexOf(valueId) < 0) {\n            this._renderCircle(newData);\n        }\n        this.container.attr(\"visibility\", data.visible ? \"visible\" : \"hidden\");\n    }\n\n    _renderCircle(data) {\n        this.container.append(\"circle\")\n            .attr(\"class\", style[\"label-axis-circle\"])\n            .attr(\"stroke-width\", 1)\n            .attr(\"cx\", data.x)\n            .attr(\"cy\", data.y)\n            .attr(\"r\", 2.5 + 1/2);\n    }\n\n    _renderLabel(data) {\n        const labelMask = this.container.append(\"rect\")\n            .attr(\"class\", style[\"tooltip-label-mask\"])\n            .attr(\"y\", data.y + LABEL_OFFSET - 15)\n            .attr(\"height\", 20);\n\n        const label = this.container.append(\"text\")\n            .attr(\"class\", style[\"tooltip-label\"])\n            .attr(\"y\", data.y + LABEL_OFFSET)\n            .text(data.label);\n\n        const bottomLabelWidth = label.node().getComputedTextLength();\n        const bottomMaskPadding = 25;\n        const textAnchor = this._getTextAnchor(data.x, bottomLabelWidth, data.width);\n        const bottomMaskWidth = bottomMaskPadding*2 + bottomLabelWidth;\n\n        this._createMaskGradientElement(this.container, bottomMaskWidth);\n\n        labelMask\n            .attr(\"width\", bottomMaskWidth)\n            .attr(\"fill\", \"url(#\"+this.container.select('linearGradient').attr(\"id\")+\")\")\n            .attr(\"x\", -bottomMaskWidth/2)\n            .attr(\"transform\", () => {\n                return {\n                    \"start\":\"translate(\"+bottomLabelWidth/2+\", 0)\",\n                    \"middle\":\"translate(\"+data.x+\", 0)\",\n                    \"end\":\"translate(\"+(data.width-bottomLabelWidth/2)+\", 0)\"\n                }[textAnchor]\n            });\n\n        label\n            .attr(\"text-anchor\", textAnchor)\n            .attr(\"transform\", () => {\n                return {\n                    \"start\":\"translate(0, 0)\",\n                    \"middle\":\"translate(\"+data.x+\", 0)\",\n                    \"end\":\"translate(\"+data.width+\", 0)\"\n                }[textAnchor]\n            });\n    }\n\n    _createMaskGradientElement(container, bottomMaskWidth){\n        const gradientEdge = 15/bottomMaskWidth;\n        const colorWhite = 'rgba(255,255,255,1)';\n        const colorTransparent = 'rgba(255,255,255,0)';\n\n        const handleMaskGradientEl = container.append(\"linearGradient\")\n            .attr(\"id\", style[\"tooltip-label-mask\"]+\"-\"+(gradientID++)+\"-gradient\")\n            .attr(\"gradientUnits\", \"userSpaceOnUse\")\n            .attr(\"y1\", \"0\").attr(\"x1\", -bottomMaskWidth/2)\n            .attr(\"y2\", \"0\").attr(\"x2\", bottomMaskWidth/2);\n\n        handleMaskGradientEl.selectAll(\"stop\")\n            .data([\n                { offset: \"0\", color: colorTransparent},\n                { offset: gradientEdge, color: colorWhite},\n                { offset: 1 - gradientEdge, color: colorWhite},\n                { offset: \"1\", color: colorTransparent}\n            ])\n            .enter().append(\"stop\")\n            .attr(\"offset\", function (d) { return d.offset; })\n            .attr(\"stop-color\", function (d) { return d.color; });\n    }\n\n    _getTextAnchor(xPos, bottomLabelWidth, width){\n        var xpos = xPos;\n        if (xpos - bottomLabelWidth/2 < 0){\n            return \"start\"\n        } else if (xpos + bottomLabelWidth/2 > width){\n            return \"end\"\n        } else {\n            return \"middle\";\n        }\n    }\n\n}\n\nexport default LinechartLabel;\n","import style from \"./Linechart.css\";\nimport Component from './Component';\nimport * as d3 from 'd3';\n\nclass LinechartTooltip extends Component {\n    constructor() {\n        super('linechart-tooltip');\n    }\n\n    _renderContainer(selector, x = 0, y = 0){\n        // force position relative so the toolip shows correctly\n        d3.select(selector).style(\"position\", \"relative\");\n\n        return d3.select(selector).insert(\"span\", \":first-child\")\n            .attr(\"class\", style[\"tooltip-top-label\"])\n            .style(\"position\", \"absolute\")\n            .style(\"visibility\", \"hidden\");\n    }\n\n    _setData(container, data, lastData) {\n        const newData = Object.assign({}, lastData, data);\n        this._renderTooltip(newData);\n    }\n\n    _renderTooltip(data) {\n        this.container.node().innerHTML = data.html;\n        this.container\n            .style(\"left\", `${this._getLabelLeft(data.x, data.width)}px`)\n            .style(\"top\", `${this._getLabelTop(data.y)}px`)\n            .style(\"visibility\", data.visible ? \"visible\" : \"hidden\")\n            .classed(style[\"dark\"], data.dark);\n    }\n\n    _getLabelLeft(xPos, width){\n        const labelWidth = this.container.node().offsetWidth;\n        let labelLeft = xPos-labelWidth/2;\n\n        if (labelLeft<0){\n            labelLeft = 0;\n        }\n\n        if (labelLeft > width - labelWidth){\n            labelLeft = width - labelWidth;\n        }\n\n        return labelLeft;\n    }\n\n    _getLabelTop(yPos){\n        const yTop = yPos - 12 - this.container.node().offsetHeight;\n\n        if (yTop >= 0) {\n            return yTop;\n        } else {\n            return yPos + 12;\n        }\n    }\n}\n\nexport default LinechartTooltip;\n","import style from \"./Linechart.css\";\nimport Component from './Component';\nimport {HIGHLIGHT_COLOR, MARGIN_BOTTOM} from './LinechartDefaults';\n\nclass LinechartAnnotation extends Component {\n    constructor() {\n        super('linechart-annotation');\n    }\n\n    _setData(container, data, lastData) {\n        if (Object.keys(data).length === 1 && typeof data.highlight !== 'undefined') {\n            return this._updateAppearance(data.highlight);\n        }\n\n        this.container.selectAll(\"*\").remove();\n        this._annotation = this._renderAnnotation(data);\n        return this._updateAppearance(data.highlight);\n    }\n\n    _updateAppearance(highlight) {\n        this._annotation.line.attr(\"stroke\", highlight ? HIGHLIGHT_COLOR : \"#8f959c\");\n        if (this._annotation.circle) {\n            this._annotation.circle.attr(\"fill\", highlight ? HIGHLIGHT_COLOR : \"#8f959c\");\n        }\n        if (this._annotation.text) {\n            this._annotation.text.classed(style['white-fill'], !highlight);\n        }\n    }\n\n    _renderAnnotation({xAxis, id, height, length}) {\n        const annotationGroup = {};\n        annotationGroup.line = this.container.append(\"line\")\n            .attr(\"x1\", xAxis(id))\n            .attr(\"x2\", xAxis(id))\n            .attr(\"y1\", 0)\n            .attr(\"y2\", height - MARGIN_BOTTOM)\n            .attr(\"stroke-width\", 1)\n            .attr(\"stroke-dasharray\",\"2 ,2\");\n\n        if (length > 1) {\n            annotationGroup.circle = this.container.append(\"circle\")\n                .attr(\"cx\", xAxis(id))\n                .attr(\"cy\", height - MARGIN_BOTTOM)\n                .attr(\"r\", 7.5)\n            annotationGroup.text = this.container.append(\"text\")\n                .attr(\"x\", xAxis(id))\n                .attr(\"y\", height - MARGIN_BOTTOM + 4)\n                .attr(\"text-anchor\", \"middle\")\n                .text(length);\n        }\n        return annotationGroup;\n    }\n\n}\n\nexport default LinechartAnnotation;\n","\nimport Doughnut from \"./doughnut/Doughnut\";\nimport Histogram from \"./histogram/Histogram\";\nimport Line from \"./line/Line\";\nimport Barchart from \"./barchart/components/Barchart\";\nimport Linechart from \"./linechart/Linechart\"\n\nexport default {\n\tBarchart:Barchart,\n\n    Doughnut:Doughnut,\n    Histogram:Histogram,\n    Line:Line,\n    Linechart:Linechart\n}","import style from \"./Linechart.css\";\nimport * as d3 from \"d3\";\nimport Component from './Component';\nimport {\n    AXIS_COLOR, HIGHLIGHT_COLOR,\n    LABEL_OFFSET,\n    LINE_COLOR,\n    MARGIN_TOP,\n    MARGIN_BOTTOM,\n    ZERO_LINE_COLOR\n} from './LinechartDefaults';\nimport LinechartMask from './LinechartMask';\nimport {WIDTH, HEIGHT, ENABLE_LINE_TOOLTIP} from './LinechartDefaults';\nimport LinechartLabel from './LinechartLabel';\nimport LinechartTooltip from './LinechartTooltip';\nimport LinechartLine from './LinechartLine';\nimport LinechartAnnotation from './LinechartAnnotation';\n\n/**\n * @class\n * Main Linechart class\n * @param {Object} options\n */\nclass Linechart extends Component {\n    constructor({\n        width = WIDTH,\n        height = HEIGHT,\n        enableLineTooltip = ENABLE_LINE_TOOLTIP\n    }) {\n        super('linechart');\n        this._width = width;\n        this._height = height;\n        this._enableLineTooltip = enableLineTooltip;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    get enableLineTooltip() {\n        return this._enableLineTooltip;\n    }\n\n    _renderContainer(selector, x = 0, y = 0){\n        this._renderTooltip(selector);\n        return d3.select(selector).append(\"svg\")\n            .attr(\"width\", this.width)\n            .attr(\"height\", this.height)\n            .attr(\"class\", style[this.className])\n            .attr(\"transform\", `translate(${x}, ${y})`)\n    }\n\n    _setData(container, data, lastData) {\n        container.selectAll(\"*\").remove();\n\n        const {xAxis, yAxis} = this._getAxes(data.series);\n\n        this._renderZeroLine(container, xAxis, yAxis);\n        this._renderXAxis(container, AXIS_COLOR, data.series);\n        this._renderAnnotations(container, xAxis, data.annotations);\n        this._renderDataLines(container, xAxis, yAxis, data.series);\n        this._renderLabel(container);\n        this._renderMask(container, data, xAxis, yAxis);\n    }\n\n    _getAxes(series) {\n        const verticalSpacing = this.height / 4;\n        const xAxis = d3.scalePoint().range([0, this.width]);\n        const yAxis = d3.scaleLinear().range([this.height-verticalSpacing, MARGIN_TOP]);\n        xAxis.domain(series[0].data.map(function (d) { return d.id; }));\n        const minMax = this._calculateMinMax(series);\n        yAxis.domain([minMax.min, minMax.max]);\n        return {xAxis, yAxis}\n    }\n\n    _clearData() {\n        this._width = null;\n        this._height = null;\n        this._tooltip.destroy();\n        this._tooltip = null;\n        this._label = null;\n        this._lines = null;\n    }\n\n\n\n    ////////////  RENDER FUNCTIONS\n\n    _renderTooltip(selector) {\n        this._tooltip = new LinechartTooltip();\n        this._tooltip.render(selector);\n        this._tooltip.setData({\n            html: \"\",\n            x: 0,\n            y: 0,\n            dark: false,\n            visible: false,\n            width: this.width\n        });\n    }\n\n    _renderZeroLine(container, xAxis, yAxis){\n        if (this._shouldRenderZeroLine(yAxis)) {\n            container.append(\"line\")\n                .attr(\"x1\", 0)\n                .attr(\"x2\", this.width)\n                .attr(\"y1\", Math.round(yAxis(0)))\n                .attr(\"y2\", Math.round(yAxis(0)))\n                .attr(\"stroke-dasharray\",\"2 ,2\")\n                .attr(\"stroke\", ZERO_LINE_COLOR)\n        }\n    }\n\n    _renderXAxis(container, axisColor, series) {\n        container.append(\"line\")\n            .attr(\"x1\", 0)\n            .attr(\"x2\", this.width)\n            .attr(\"y1\", this.height-MARGIN_BOTTOM)\n            .attr(\"y2\", this.height-MARGIN_BOTTOM)\n            .attr(\"stroke-width\", 1)\n            .attr(\"stroke\", axisColor);\n\n        // render to labels on start and end sides if multiple items are available\n        if (series[0].data.length>1){\n            container.append(\"text\")\n                .text(series[0].data[0].label)\n                .attr(\"x\", 0)\n                .attr(\"y\", this.height - MARGIN_BOTTOM + LABEL_OFFSET)\n\n            container.append(\"text\")\n                .text(series[0].data[series[0].data.length-1].label)\n                .attr(\"x\", this.width)\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"y\", this.height - MARGIN_BOTTOM + LABEL_OFFSET)\n\n            // render single label in the middle if only one item is available\n        } else if (series[0].data.length == 1){\n            container.append(\"text\")\n                .text(series[0].data[0].label)\n                .attr(\"x\", this.width/2)\n                .attr(\"text-anchor\", \"middle\")\n                .attr(\"y\", this.height - MARGIN_BOTTOM + LABEL_OFFSET)\n        }\n    }\n\n    _renderLabel(container) {\n        this._label = new LinechartLabel();\n        this._label.render(container.node());\n        this._label.setData({\n            x: 0,\n            y: this.height - MARGIN_BOTTOM,\n            width: 360,\n            label: \"\",\n            visible: false,\n            renderDot: true\n        });\n    }\n\n    _renderAnnotations(container, xAxis, annotations) {\n        const mergedAnnotations = this._mergeAnnotations(annotations);\n        this._annotationCircles = Object.keys(mergedAnnotations).filter(annotation => {\n            return mergedAnnotations[annotation].length > 1;\n        });\n\n        this._annotations = Object.keys(mergedAnnotations).map(id => {\n            if (typeof xAxis(id) === 'undefined') {\n                console.warn(`Annotation (in presentation component) ${JSON.stringify(mergedAnnotations[id])} has id '${id}' which is not present in linechart data`);\n                return;\n            }\n            const annotation = new LinechartAnnotation();\n            annotation.render(this.container.node());\n            annotation.setData({\n                xAxis,\n                id,\n                height: this.height,\n                length: mergedAnnotations[id].length,\n                highlight: false\n            });\n            return annotation;\n        });\n    }\n\n    _renderDataLines(container, xAxis, yAxis, series) {\n        this._lines = Array.from(series).reverse().map(lineData => {\n            const line = new LinechartLine();\n            line.render(this.container.node());\n            line.setData({\n                height: this.height,\n                xAxis,\n                yAxis,\n                lineData: lineData.data,\n                appearance: lineData.appearance,\n                renderAreas: true,\n                point: null\n            });\n            return line;\n        });\n        this._lines.reverse();\n    }\n\n    _renderMask(container, data, xAxis, yAxis) {\n        const mask = new LinechartMask(this.width, this.height, this.enableLineTooltip);\n        mask.render(container.node());\n        mask.on('lineEnter', (lineData, lineIndex) => {\n            this._onLineEnter(container, lineData, lineIndex);\n        }).on('lineLeave', (lineData, lineIndex) => {\n            this._onLineLeave(container, lineData, lineIndex);\n        }).on('tooltipEnter', (valueData, valueLabel) => {\n            this._onValueEnter(xAxis, yAxis, valueData, valueLabel);\n        }).on('tooltipLeave', (valueData, valueLabel) => {\n            this._onValueLeave(xAxis, yAxis, valueData, valueLabel);\n        }).on('annotationEnter', (annotationData, valueData, annotationId, annotationIndex) => {\n            this._onAnnotationEnter(container, xAxis, annotationData, valueData, annotationId, annotationIndex);\n        }).on('annotationLeave', (annotationData, valueData, annotationId, annotationIndex) => {\n            this._onAnnotationLeave(container, xAxis, annotationData, valueData, annotationId, annotationIndex);\n        }).on('leave', () => {\n            this._onLeave();\n        });\n        mask.setData(data);\n    }\n\n\n\n    ////////////  CALLBACK FUNCTIONS\n\n    _onAnnotationEnter(container, xAxis, annotationData, valueData, annotationId, annotationIndex) {\n        this._annotations[annotationIndex].setData({\n            highlight: true\n        });\n\n        this._label.setData({\n            x: xAxis(annotationId),\n            label: valueData[0].label,\n            visible: true,\n            renderDot: annotationData.length <= 1\n        });\n\n        const coord = d3.mouse(container.node());\n        this._tooltip.setData({\n            html: this._getAnnotationHTML(annotationData),\n            x: coord[0],\n            y: coord[1],\n            dark: true,\n            visible: true\n        });\n    }\n\n    _onAnnotationLeave(container, xAxis, annotationData, valueData, annotationId, annotationIndex) {\n        this._annotations[annotationIndex].setData({\n            highlight: false\n        });\n    }\n\n    _onValueEnter(xAxis, yAxis, valueData, valueId) {\n        this._lines.forEach(line => line.setData({\n            point: valueId\n        }));\n\n        this._label.setData({\n            x: xAxis(valueId),\n            label: valueData[0].label,\n            visible: true,\n            renderDot: true,\n            valueId,\n            annotationCircles: this._annotationCircles\n        });\n\n        let hasTooltips = false;\n        valueData.forEach(lineData => lineData.tooltip && (hasTooltips = true));\n        if (hasTooltips) {\n            this._tooltip.setData({\n                html: this._getValueTooltipHTML(valueData),\n                x: xAxis(valueId),\n                y: yAxis(Math.max.apply(Math, valueData.map(item => item.value))),\n                dark: false,\n                visible: true\n            });\n        } else {\n            this._tooltip.setData({\n                visible: false\n            });\n        }\n    }\n\n    _onValueLeave() {\n        this._lines.forEach(line => line.setData({\n            point: null\n        }));\n    }\n\n    _onLineEnter(container, lineData, lineIndex) {\n        const coord = d3.mouse(container.node());\n        this._tooltip.setData({\n            html: lineData.title,\n            x: coord[0],\n            y: coord[1],\n            dark: true,\n            visible: true\n        });\n\n        const highlightAppearance = Object.assign({}, lineData.appearance, {\n            lineColor: HIGHLIGHT_COLOR,\n            fillColor: HIGHLIGHT_COLOR\n        });\n        this._lines[lineIndex].setData({\n            appearance: highlightAppearance\n        });\n\n        this._label.setData({\n            visible: false\n        });\n    }\n\n    _onLineLeave(container, lineData, lineIndex) {\n        this._lines[lineIndex].setData({\n            appearance: lineData.appearance\n        });\n    }\n\n    _onLeave() {\n        this._label.setData({\n            visible: false\n        });\n        this._tooltip.setData({\n            visible: false\n        });\n    }\n\n\n\n    ////////////  UTILS FUNCTIONS\n\n    _getValueTooltipHTML(data){\n        return data.filter(item => item.value != null).map(item => {\n            const value = item.tooltip || item.value;\n\n            if (data.length>1){\n                const color = item.appearance.lineColor || LINE_COLOR;\n                const icon = `\n\t\t\t\t    <span style=\"display:inline-block;position:relative;top:-1px;margin-right:5px;width:6px;height:6px;border-radius:50%;background-color:${color}\"></span>\n\t\t\t    `;\n                return icon + value;\n            } else {\n                return value;\n            }\n        }).join(\"<br />\");\n    }\n\n    _getAnnotationHTML(data){\n        return data.map(annotation => {\n            return `<span style=\"font-weight: bold\">${annotation.title}</span><br/><span>${annotation.subtitle}</span>`\n        }).join(\"<hr />\");\n    }\n\n    _mergeAnnotations(annotations) {\n        const merged = {};\n\n        annotations.forEach(annotation => {\n            merged[annotation.id] = merged[annotation.id] || [];\n            merged[annotation.id].push(annotation);\n        });\n        return merged;\n    }\n\n    _shouldRenderZeroLine(yAxis){\n        const zeroLinePosition = yAxis(0);\n        const axisPosition = this.height - MARGIN_BOTTOM;\n        const treshold = 10;\n        return zeroLinePosition < axisPosition - treshold && zeroLinePosition > 0;\n    }\n\n    _calculateMinMax(series) {\n        const data = [];\n        series.forEach((line) => {\n            line.data.forEach((item) => {\n                data.push(item);\n            });\n        });\n\n        var min = d3.min(data, function (d) { return d.value; });\n        var max = d3.max(data, function (d) { return d.value; });\n\n        if (data.length <= series.length) {\n            min = Math.min(min, 0);\n            max = Math.max(max, 0);\n        }\n\n        return {\n            min: min,\n            max: max\n        }\n    }\n\n\n}\n\nexport default Linechart;\n"],"names":["Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","OUTER_RADIUS","INNER_RADIUS","VALUE","ACTIVE_COLOR","INACTIVE_COLOR","BACKGROUND_COLOR","ANIMATION_DURATION","DoughnutRenderer","options","_options","_containerEl","_groupEl","_svgEl","_rendered","_observable","selector","ct","d3","width","node","offsetWidth","height","offsetHeight","value","_value","angle","_angle","tau","innerRadius","_innerRadius","outerRadius","_outerRadius","arc","_arc","startAngle","append","attr","style","g","_inactiveArc","datum","endAngle","inactiveColor","_activeArc","activeColor","_backgroundArc","backgroundColor","_hoverEl","on","fire","eventName","off","opts","activeArcTransition","transition","duration","animationDuration","attrTween","_arcTween","_this2","interpolateOuterRadius","interpolateInnerRadius","d","interpolateAngle","t","_this3","removeChild","destroy","getOptionValue","optionValue","defaultOptionValue","Doughnut","Defaults","renderTo","_doughnutRenderer","render","isRendered","update","WIDTH","HEIGHT","MARGIN","INACTIVE_BAR_COLOR","INACTIVE_BAR_OPACITY","OVER_SELECTION_COLOR","OVER_SELECTION_OPACITY","SELECTION_COLOR","ENABLE_SELECTION_TOGGLE","FONT_SIZE","DEFAULT_COLORS","HistogramData","data","_histogramData","_loadHistogramData","_minMax","_calculateMinMax","histogramData","max","min","position","minMax","getMinMax","getValueRatio","valueRatio","constrainedValue","Math","round","numOfBarsPerBucket","forEach","bucket","step","volume","Array","isArray","gradientIndex","HistogramHandle","groupEl","_handleEl","_handleLineEl","_handleCircleEl","_handleMaskEl","_handleMaskGradientEl","_handleLabelEl","_isOver","_index","_initialValue","Number","_position","valueToPosition","_initialPosition","_labelSizeCache","_elements","_renderHandle","element","remove","_createHandleElement","_createHandleLineElement","_createHandleCircleElement","_createDragMaskElement","_createMaskGradientElement","_createDragLabelElement","_handleHoverState","_handleDrag","parseInt","_updateLabelPosition","getBBox","offset","text","setLabelOffset","setHoverState","unsetHoverState","classed","xpos","x","positionToValue","_getLabelText","format","call","_onDrag","bind","_onStartDrag","_onEndDrag","label","content","innerHTML","getComputedTextLength","maskPadding","fontSize","textLength","_getComputedLabelTextLength","maskWidth","xPosition","selectAll","color","enter","getHandlePositionOffsets","handle1","handle2","label1Box","getLabelBox","label2Box","conflictDiff","posDiff1","posDiff2","xMax","HistogramSelectionRenderer","_histogramSelection","_overSelectionIndex","_handles","_draggingHandle","_prevSelection","_animating","_destroyHandles","_selectionBarGroups","handle","handleIndex","handleValue","promptHandler","then","promptResult","startSelectionSnapshot","JSON","stringify","_this","getOutputSelection","parseFloat","points","getSelectionPoints","positions","sort","p1","p2","map","point","_updateSelectionPositions","_updateSelection","_renderHandles","selection","selectionIndex","disabled","enabled","target","allowsToggle","_toggleSelection","_onHandleClick","_onClick","histogramSelection","_animate","animate","getSelection","_prevHistogramData","_clear","_renderSelection","_handleClick","needRefresh","refresh","prevHistogramSelection","prev","curr","sel","from","to","handles","slice","h1","h2","getXPosition","labelOffsets","PositionUtils","nodes","_updateSelectionControlsHoverState","selectionbargroup","_onSelectionMouseOut","_onSelectionMouseOver","p","pos","reverse","_selectionBarsIcons","selectionbaricon","icon","src","_selectionBars","selectionbar","hidden","hide","_onHandleDrag","disable","enable","barX","s","isLast","colors","volumeIndex","selectionColor","inactiveBarColor","overSelectionColor","segmentDivider","barSelectionIndex","_getBarSelectionIndex","some","_getSelectionColor","isOver","isDisabled","overSelectionOpacity","inactiveBarOpacity","opacity","selection1","selection2","data1","data2","onTransition","onComplete","s1","s2","_this4","frames","transitions","abs","si","hi","bars","bar","fillBars","_this5","_getBarColor","_getBarOpacity","prevSelection","prevData","setHandleXPosition","setLabelPosition","_onSelectionTransition","align","y","selectionIconWidth","showLabel","_this6","hideLabel","HistogramRenderer","_historyData","_xAxis","range","_yAxis","maxBarHeight","_prevData","_selectionRenderer","_labelsVisible","margin","svg","left","right","top","bottom","histogram","inactive","active","domain","getData","_renderXAxis","_renderDataBars","showSelectionLabels","setSelection","hideSelectionLabels","topMargin","v","floor","ceil","HistogramSelection","_selection","getSelectionWithPositions","Object","assign","SelectionTypes","MultipleHistogramSelection","MULTI","result","DefaultHistogramSelectionImpl","start","MultipleHistogramSelectionImpl","FilterHistogramSelectionImpl","FILTER","InvertedFilterHistogramSelectionImpl","_getInvertedSelection","invertedSelection","INVERTED_FILTER","HistogramSelectionFactory","selectionType","Histogram","enableSelectionToggle","_histogramRenderer","_selectionFactory","getHistogramSelection","String","selectionCopy","parse","LINE_COLOR","LINE_COLORS","LINE_OPACITY","FILL_COLOR","FILL_COLORS","FILL_OPACITY","LINE_WIDTH","DOT_SIZE","AXIS_COLOR","ZERO_LINE_COLOR","LineData","series","_series","concat","dataMap","getAllData","item","values","tooltips","tooltip","numParts","toString","split","TooltipRenderer","_lineData","_onMouseOut","xPos","bottomLabelWidth","filter","lineColors","lineColor","join","_tooltipGroup","_tooltipBottomLabel","textAnchor","_getTextAnchor","bottomMaskWidth","bottomMaskPadding","_tooltipBottomLabelMask","tooltipHtml","_getTooltipHTML","_tooltipTopLabel","labelLeft","_getLabelLeft","_tooltipLineCircle","circle","labelWidth","parentNode","contains","relatedTarget","_hideTooltip","hoverWidth","getMergedData","getSeries","_hoverAreas","_onHoverAreaOver","lineWidth","lineOpacity","_tooltipAxisCircle","insert","_tooltipRendered","gradientID","lineData","_renderTooltip","LineRenderer","_tooltipRenderer","line","verticalSpacing","allData","_renderZeroLine","seriesIndex","_renderDataLines","axisColor","_showZeroLine","zeroLineColor","minHeight","areaZero","fillColor","fillColors","area","y0","y1","_getGroupedData","fillOpacity","dotSize","path","group","Line","_lineRenderer","setData","getPrecision","LABEL_FONT_SIZE","TOOLTIP_FONT_SIZE","TOOLTIP_SYMBOL","ACTIVE_COLORS","DETAILS_HIDDEN","DETAILS_BOTTOM_SPACE","MINMAX","DUAL_VALUE","ENABLE_BAR_HOVER","ENABLE_BAR_TOGGLE","FORMAT","BAR_HEIGHT","BAR_DISABLED","HORIZONTAL_PADDING","STRIPE_HEIGHT","STRIPE_BACKGROUND_COLOR","TOOLTIP_SPACE","CORNER_ROUNDED","SHOW_ONLY_TOOL","ONLY_TOOL_TEXT","SHOW_LABEL_CIRCLE","BarchartData","_","detailsData","barsData","_detailsData","_barsData","barData","containsNegativeVal","containsPositiveVal","sum","calculateMinMax","precision","barchartData","details","DetailsData","_label","_disabled","_color","_tooltips","tooltipData","TooltipData","symbol","_symbol","_text","isNumber","str","includes","isNaN","isFinite","BarData","stripesData","highlighted","_highlighted","_stripesData","stripeData","absMax","stripes","stripe","StripeData","leftValue","leftColor","rightValue","rightColor","_right","_left","dual","leftData","rightData","JsonDataConverter","barchartJsonData","tooltipsData","tooltipJsonData","barJsonData","stripeJsonData","MASK_INDEX","Component","className","alignRight","alignBottom","_width","_height","_container","_maskIndex","_className","_alignRight","_alignBottom","_data","_renderContainer","clickableArea","_render","clearData","constructor","name","convert","_setData","_clearData","select","calculateTextWidth","canvas","context","getContext","window","getComputedStyle","fontStyle","getPropertyValue","fontVariant","fontWeight","fontStrech","fontFamily","font","measureText","Tooltip","space","_fontSize","_activeColor","_format","_space","_canvas","container","empty","spec","tooltipWidth","CleverChartsUtils","_renderTwoColoredFill","color1","color2","twoColoredFill","OnlyTool","onlyToolText","_onlyToolText","_onlyToolTextSvg","Details","labelFontSize","tooltipFontSize","tooltipSymbol","activeColors","horizontalPadding","showOnlyTool","enableToggle","showLabelCircle","_labelFontSize","_tooltipFontSize","_tooltipSymbol","_activeColors","_horizontalPadding","_showOnlyTool","_enableToggle","_showLabelCircle","_tooltipsBackground","_labelCircle","_tipWrapper","_tip","add","labelPadding","gradient","_createTooltips","_renderAndSetTooltipsData","_createOnlyTool","_renderOnlyTool","_rightSideStart","_handleLongLabel","_onlyTool","stopPropagation","undefined","previousTooltipX","reversedIndex","tooltipReversed","maxWidth","gradientWidth","document","documentElement","getBoundingClientRect","_getOffset","el","rect","scrollX","scrollY","COLOR_PATTERN_INDEX","Stripe","dualValue","topCornerRounded","bottomCornerRounded","condensed","_backgroundColor","_dualValue","_topCornerRounded","_bottomCornerRounded","_condensed","clipPath","_renderProgress","_renderStripe","x1","x2","axis","xBase","_renderXBase","Bar","detailsHidden","detailsHeight","enableHover","stripeHeight","stripeBackgroundColor","_detailsHidden","_detailsHeight","_enableHover","_stripeHeight","_stripeBackgroundColor","_details","_stripes","_createDetails","_renderDetails","_doEnableToggle","_setDetailsData","_createStripes","_renderStripes","_setStripesData","detailsDataDefault","copyAs","Barchart","detailsVisible","detailsBottomSpace","barHeight","enableBarHover","enableBarToggle","_detailsVisible","_detailsBottomSpace","_barHeight","_enableBarHover","_enableBarToggle","_bars","updateFunction","setDetailsData","setBarData","barDataDefault","_setDefaultBarDetails","addTooltip","_svgWrapper","_doSelectOnly","onlyIndex","_setDisabledValue","_adjustDetails","_adjustHeight","_createBars","_renderBars","barsContainer","topDetailsWidth","_lastData","lastData","ENABLE_LINE_TOOLTIP","HIGHLIGHT_COLOR","LinechartLine","keys","appearance","_updateAppearance","pointData","_updatePoint","newData","_parts","_renderLine","_point","_renderPoint","xAxis","yAxis","id","strokeWidth","part","renderAreas","_getPartedData","partData","lastEmpty","LinechartMask","enableLineTooltip","_enableLineTooltip","observable","mergedData","_mergeSeriesData","_renderTooltipAreas","_renderTooltipLines","_renderAnnotations","annotations","mergedAnnotations","_mergeAnnotations","annotationGroup","warn","merged","annotation","valueId","valueIndex","lineValue","lineIndex","title","_renderTooltipLine","maskAppearance","LinechartLabel","visible","annotationCircles","_renderLabel","renderDot","_renderCircle","labelMask","gradientEdge","colorWhite","colorTransparent","LinechartTooltip","html","_getLabelTop","dark","yPos","yTop","LinechartAnnotation","highlight","_annotation","_renderAnnotation","_getAxes","_renderMask","_tooltip","_lines","_shouldRenderZeroLine","_annotationCircles","_annotations","mask","_onLineEnter","_onLineLeave","valueData","valueLabel","_onValueEnter","_onValueLeave","annotationData","annotationId","annotationIndex","_onAnnotationEnter","_onAnnotationLeave","_onLeave","coord","_getAnnotationHTML","hasTooltips","_getValueTooltipHTML","highlightAppearance","subtitle","zeroLinePosition"],"mappings":"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"}