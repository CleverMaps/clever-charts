{"version":3,"file":"clever-charts-1.2.3.min.js","sources":["../src/utils/Observable.js","../src/doughnut/DoughnutDefaults.js","../src/doughnut/DoughnutRenderer.js","../src/doughnut/Doughnut.js","../src/histogram/HistogramDefaults.js","../src/histogram/HistogramData.js","../src/histogram/selection/HistogramHandle.js","../src/histogram/utils/PositionUtils.js","../src/histogram/selection/HistogramSelectionRenderer.js","../src/histogram/HistogramRenderer.js","../src/histogram/selection/HistogramSelection.js","../src/histogram/selection/MultipleHistogramSelectionImpl.js","../src/histogram/selection/DefaultHistogramSelectionImpl.js","../src/histogram/selection/FilterHistogramSelectionImpl.js","../src/histogram/selection/InvertedFilterHistogramSelectionImpl.js","../src/histogram/selection/HistogramSelectionFactory.js","../src/histogram/Histogram.js","../src/line/LineDefaults.js","../src/line/LineData.js","../src/line/TooltipRenderer.js","../src/line/LineRenderer.js","../src/line/Line.js","../src/barchart/defaults/BarchartDefaults.js","../src/barchart/data/BarchartData.js","../src/barchart/data/DetailsData.js","../src/barchart/data/TooltipData.js","../src/barchart/data/BarData.js","../src/barchart/data/StripeData.js","../src/barchart/JsonDataConverter.js","../src/barchart/components/Component.js","../src/barchart/components/Tooltip.js","../src/barchart/components/Details.js","../src/barchart/components/Stripe.js","../src/barchart/components/Bar.js","../src/CleverCharts.js","../src/barchart/components/Barchart.js"],"sourcesContent":["/**\n * @class\n * Observable class, handles binding and firing events\n * @param {Array} events list of events for this observable\n */\nexport default class Observable {\n    /**\n     * @param {Array} events\n     */\n    constructor(events = []) {\n        // create a map of handlers where each event has an array of bound handlers\n        this._handlers = events.reduce((acc, cur)=>{\n            acc[cur] = [];\n            return acc;\n        },{});\n    }\n\n\t/**\n\t * @public\n\t * Bind event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t */\n    on(event, handler) {\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tthis._handlers[event].push(handler);\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Unbind event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler, optional\n\t */\n    off(event, handler) {\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tif (!handler) {\n\t\t\tthis._handlers[event] = [];\n\t\t} else {\n\t\t\tvar handlers = this._handlers[event];\n\t\t\tvar index = handlers.indexOf(handler);\n\t\t\tif (index != -1){\n\t\t\t\thandlers.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Add new event to be handled\n\t * @param {String} event\n\t */\n\tadd(event) {\n\t\tif (!(event in this._handlers)) {\n\t\t\tthis._handlers[event] = [];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Fire widget event\n\t * @param {String} event event name\n\t * @param {*} ...args event arguments\n\t */\n\tfire(event, ...args) {\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tvar handlers = this._handlers[event];\n\t\tfor (var i = 0; i < handlers.length; i++) {\n\t\t\thandlers[i].apply(this, args);\n\t\t}\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Destorys this observable, removes events and so on \n\t */\n\tdestroy() {\n\t\tthis._handlers = null;\n\t\treturn this;\n    }\n\t\n}","/**\n * @public\n * Default outer radius\n */\nexport const OUTER_RADIUS = 10;\n\n/**\n * @public\n * Default inner radius\n */\nexport const INNER_RADIUS = 10;\n\n/**\n * @public\n * Default value\n */\nexport const VALUE = 0;\n\n/**\n * @public\n * Default active color\n */\nexport const ACTIVE_COLOR = \"#49ace2\";\n\n/**\n * @public\n * Default inactive color\n */\nexport const INACTIVE_COLOR = \"#F0F0F0\";\n\n/**\n * @public\n * Default background color\n */\nexport const BACKGROUND_COLOR = \"transparent\";\n\n/**\n * @public\n * Default animation duration\n */\nexport const ANIMATION_DURATION = 250;","import style from \"./Doughnut.css\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\nconst tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n\n/**\n * @class\n * Doughnut renderer class\n * @param {Object} options\n */\nexport default class DoughnutRenderer {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Doughnut options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Doughnut has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over\n\t\t\t */\n\t\t\t\"mouseOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out\n\t\t\t */\n\t\t\t\"mouseOut\"\n\t\t]);\t\t\n\t}\n\n\t/**\n\t * @public\n\t * Returns whether Doughnut has been rendered or not\n\t * @returns {boolean} true if Doughnut has been rendered\n\t */\n\tisRendered() {\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Doughnut} returns this widget instance\n\t */\n\trender(selector) {\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._containerEl.node().offsetWidth;\n\t\tvar height = this._containerEl.node().offsetHeight;\n\t\tvar value = this._value = this._options.value;\n\t\tvar angle = this._angle = value / 100 * tau;\n\t\tvar innerRadius = this._innerRadius = this._options.innerRadius;\n\t\tvar outerRadius = this._outerRadius = this._options.outerRadius;\n\n\t\t// arc settings\n\t\tvar arc = this._arc = d3.arc()\n\t\t\t.innerRadius(innerRadius)\n\t\t\t.outerRadius(outerRadius)\n\t\t\t.startAngle(0);\n\n\t\t// render SVG\n\t\tthis._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"class\", style[\"svg\"]);\n\n\t\t// render group\n\t\tvar g = this._groupEl = this._svgEl\n\t\t\t.append(\"g\")\n\t\t\t.attr(\"class\", style[\"doughnut\"])\n\t\t\t.attr(\"transform\", \"translate(\" + width / 2 + \", \" + height / 2 + \")\");\n\n\t\t// render inactive doughtnut\t\n\t\tthis._inactiveArc = g.append(\"path\")\n\t\t\t.datum({ endAngle: tau })\n\t\t\t.attr(\"fill\", this._options.inactiveColor)\n\t\t\t.attr(\"d\", arc);\n\n\t\t// render active doughtnut\t\n\t\tthis._activeArc = g.append(\"path\")\n\t\t\t.datum({ endAngle: angle })\n\t\t\t.attr(\"fill\", this._options.activeColor)\n\t\t\t.attr(\"d\", arc);\n\n\t\t// render background\t\n\t\tthis._backgroundArc = g.append(\"circle\")\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\n\t\t\t.attr(\"r\", innerRadius)\n\t\t\t.attr(\"cx\", 0)\n\t\t\t.attr(\"cy\", 0)\n\n\t\t// render background\t\n\t\tthis._backgroundArc = g.append(\"circle\")\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\n\t\t\t.attr(\"r\", innerRadius)\n\t\t\t.attr(\"cx\", 0)\n\t\t\t.attr(\"cy\", 0)\n\n\t\t// hover element, this needs to be rendered in order to have stable and animation\n\t\t// independent hover \n\t\tthis._hoverEl = g.append(\"rect\")\n\t\t\t.attr(\"fill\", \"transparent\")\n\t\t\t.attr(\"x\", -width/2)\n\t\t\t.attr(\"y\", -height/2)\n\t\t\t.attr(\"width\",width)\n\t\t\t.attr(\"height\",height)\n\n\t\tg.on(\"mouseover\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOver\");\n\t\t})\n\n\t\tg.on(\"mouseout\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOut\");\n\t\t})\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t\t * Bind widget event\n\t\t * @param {String} event event name\n\t\t * @param {Function} handler event handler\n\t\t * @returns {Doughnut} returns this widget instance\n\t\t */\n\t\ton(eventName, handler) {\n\t\t\tthis._observable.on(eventName, handler);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Unbind widget event\n\t\t * @param {String} event event name\n\t\t * @param {Function} [handler] event handler\n\t\t * @returns {Doughnut} returns this widget instance\n\t\t */\n\t\toff(eventName, handler) {\n\t\t\tthis._observable.off(eventName, handler);\n\t\t\treturn this;\n\t\t}\t\n\t\n\n\t/**\n\t * @public\n\t * @param {opts} new options\n\t * Updates doughnut with new options\n\t */\n\tupdate(opts) {\n\t\tvar options = opts || {};\n\n\t\tif (typeof options.value == \"undefined\"){\n\t\t\toptions.value = this._value;\n\t\t} else {\n\t\t\tthis._value = options.value;\n\t\t}\n\n\t\t// first tween foreground, note that this is also changing this._arc radiuses \n\t\tvar activeArcTransition = this._activeArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"d\", this._arcTween(options, true))\n\n\t\t// se we only get new path on background as it uses radiuses saved in the previous call\n\t\tthis._inactiveArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"d\", () => {\n\t\t\t\treturn () => {\n\t\t\t\t\treturn this._arc({ endAngle: tau });\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis._backgroundArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"r\", () => {\n\t\t\t\treturn () => {\n\t\t\t\t\treturn this._innerRadius;\n\t\t\t\t}\n\t\t\t});\n\n\t\tif (options.activeColor && options.activeColor !== this._options.activeColor){\n\t\t\tthis._options.activeColor = options.activeColor;\n\t\t\tactiveArcTransition.attr(\"fill\", options.activeColor)\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * @param {options} new options\n\t * returns tween function for arc \n\t */\n\t_arcTween(options) {\n\t\tvar angle = options.value / 100 * tau;\n\t\t// change angle if new value is provided \n\t\tif (typeof options.value != \"undefined\") {\n\t\t\tangle = options.value / 100 * tau;\n\t\t}\n\n\t\t// handle new radiuses\n\t\tvar innerRadius = this._innerRadius;\n\t\tvar outerRadius = this._outerRadius;\n\n\t\tif (typeof options.innerRadius != \"undefined\") {\n\t\t\tinnerRadius = options.innerRadius;\n\t\t}\n\n\t\tif (typeof options.outerRadius != \"undefined\") {\n\t\t\touterRadius = options.outerRadius;\n\t\t}\n\n\t\t// get interpolation fns between new radiuses and old ones\n\t\t// for simlicity, do this even if value doesn't change as we\n\t\t// likely generate new path anyway\n\t\tvar interpolateOuterRadius = d3.interpolate(this._outerRadius, outerRadius);\n\t\tvar interpolateInnerRadius = d3.interpolate(this._innerRadius, innerRadius);\n\n\t\treturn (d) => {\n\t\t\t// get angle interpolation fn \n\t\t\tvar interpolateAngle = d3.interpolate(d.endAngle, angle);\n\n\t\t\treturn (t) => {\n\t\t\t\t// on each cycle, set new radiuses and endAngle\n\t\t\t\tthis._arc.outerRadius(this._outerRadius = interpolateOuterRadius(t));\n\t\t\t\tthis._arc.innerRadius(this._innerRadius = interpolateInnerRadius(t));\n\n\t\t\t\td.endAngle = this._angle = interpolateAngle(t);\n\t\t\t\treturn this._arc(d);\n\t\t\t};\n\t\t};\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Doughnut UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered) {\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n\t}\n\n}","import Observable from \"../utils/Observable\";\nimport * as Defaults from \"./DoughnutDefaults\";\nimport DoughnutRenderer from \"./DoughnutRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main doughnut class\n * @param {Object} options\n */\nclass Doughnut {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.outerRadius = getOptionValue(options.outerRadius, Defaults.OUTER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.innerRadius = getOptionValue(options.innerRadius, Defaults.INNER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Active color\n\t\t */\n\t\tthis._options.activeColor = getOptionValue(options.activeColor, Defaults.ACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.inactiveColor = getOptionValue(options.inactiveColor, Defaults.INACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.backgroundColor = getOptionValue(options.backgroundColor, Defaults.BACKGROUND_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Value\n\t\t */\n\t\tthis._options.value = getOptionValue(options.value, Defaults.VALUE);\n\n\t\t/**\n\t\t * @public\n\t\t * Animation duration\n\t\t */\n\t\tthis._options.animationDuration = getOptionValue(options.animationDuration, Defaults.ANIMATION_DURATION);\n\n\t\t/**\n\t\t * @public\n\t\t * Render to container\n\t\t */\n\t\tthis._options.renderTo = getOptionValue(options.renderTo, null);\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over\n\t\t\t */\n\t\t\t\"mouseOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out\n\t\t\t */\n\t\t\t\"mouseOut\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * DoughnutRenderer\n\t\t */\n\t\tthis._doughnutRenderer = new DoughnutRenderer(this._options);\n\n\t\tthis._doughnutRenderer.on(\"mouseOver\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOver\")\n\t\t});\n\n\t\tthis._doughnutRenderer.on(\"mouseOut\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOut\")\n\t\t});\n\n\t\tif (options.renderTo){\n\t\t\tthis.render(options.renderTo);\n\t\t}\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._doughnutRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Doughnut} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._doughnutRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Object} options\n\t * @returns {Doughnut} returns this widget instance \n\t */\n\tupdate(options) {\n\t\tif (!this._doughnutRenderer.isRendered()) {\n\t\t\tthrow \"Can't call update() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tthis._doughnutRenderer.update(options);\n\n\t\treturn this;\n\t}\n}\n\nexport default Doughnut;\n","/**\n * @public\n * Default widget width\n */\nexport const WIDTH = 360;\n\n/**\n * @public\n * Default widget height\n */\nexport const HEIGHT = 150;\n\n/**\n * @public\n * Default widget margin\n */\nexport const MARGIN = {\n    top:0,\n    left:5,\n    right:5,\n    bottom:15\n};\n\n/**\n * Default label margin from x axis\n */\nexport const LABEL_MARGIN = 7;\n\n/**\n * @public\n * Default inactive bar color\n */\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\n\n/**\n * @public\n * Default inactive bar opacity\n */\nexport const INACTIVE_BAR_OPACITY = 1;\n\n/**\n * @public\n * Default over bar color\n */\nexport const OVER_SELECTION_COLOR = \"#ffea00\";\n\n/**\n * @public\n * Default over selection opacity\n */\nexport const OVER_SELECTION_OPACITY = 1;\n\n/**\n * @public\n * Default over bar color\n */\nexport const SELECTION_COLOR = \"#49ace2\";\n\n/**\n * @public\n * Enable selection toggle\n */\nexport const ENABLE_SELECTION_TOGGLE = true;\n\n/**\n * @public\n * Default font size\n */\nexport const FONT_SIZE = 11;\n\n/**\n * @public\n * Default colors \n */\nexport const DEFAULT_COLORS = [\"#e6f3fb\", \"#cbe7f6\", \"#b1dbf2\", \"#98cfee\", \"#7ec4ea\"];\n\n/**\n * @public\n * Default width of active handle area\n */\nexport const ACTIVE_HANDLE_AREA_WIDTH = 4;","import * as d3 from \"d3\";\n\n/**\n * @class\n * HistogramData representing data for the histogram view\n */\nexport default class HistogramData {\n\t/**\n\t * @param {data} data\n\t * @param {Object} options\n\t */\n\tconstructor(data, options) {\n\t\tthis._histogramData = this._loadHistogramData(data, options.width);\n\t\tthis._minMax = this._calculateMinMax(this._histogramData);\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns histogram data\n\t * @returns {Array} histogram data\n\t */\n\tgetData() {\n\t\treturn this._histogramData;\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given histogramData\n\t* @param {Array} histogramData\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(histogramData) {\n\t\tvar min = d3.min(histogramData, function (d) { return d.value; });\n\t\tvar max = d3.max(histogramData, function (d) { return d.value; });\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t* Returns value ratio between bars and data\n\t* @return {Number} value ratio \n\t*/\n\tgetValueRatio() {\n\t\tvar range = this._minMax.max - this._minMax.min;\n\t\treturn range / this._options.width;\n\t}\n\n\t/**\n\t * @public\n\t * Returns data value from given position \n\t * @param {Number} position\n\t */\n\tpositionToValue(position) {\n\t\tvar minMax = this.getMinMax();\n\t\t// return min if position is 0\n\t\tif (position === 0){\n\t\t\treturn minMax.min;\n\t\t}\n\n\t\t// return max if position is at the end\n\t\tif (position === this._options.width){\n\t\t\treturn minMax.max;\n\t\t}\n\n\t\t// else calculate based on value ratio and min/max\n\t\tvar valueRatio = this.getValueRatio();\n\t\treturn position * valueRatio + minMax.min;\n\t}\n\n\t/**\n\t * @public\n\t * Returns position from given data value \n\t * @param {Number} value\n\t */\n\tvalueToPosition(value) {\n\t\tvar valueRatio = this.getValueRatio();\n\t\tvar minMax = this.getMinMax();\n\t\tvar constrainedValue = Math.min(Math.max(value, minMax.min), minMax.max);\n\t\t\n\t\treturn Math.round(constrainedValue / valueRatio - minMax.min / valueRatio);\n\t}\n\n\t/** \n\t* @private\n\t* @param {Array} buckets\n\t* @param {int} numOfBarsPerBucket - number of bars per column\\\n\t* @returns {Array} data from given buckets \n\t*/\n\t_loadHistogramData(data, width) {\n\t\tvar histogramData = [];\n\t\t// calculate number of bars per bucket excluding last pixel for max value\n\t\tvar numOfBarsPerBucket = (width-1) / data.length;\n\n\t\tdata.forEach((bucket, i) => {\n\t\t\tvar step = (bucket.max - bucket.min) / numOfBarsPerBucket;\n\t\t\t// support array as well as single values\n\t\t\tconst volume = Array.isArray(bucket.volume)?bucket.volume:[bucket.volume];\n\n\t\t\td3.range(bucket.min, bucket.max, step).forEach((value) => {\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tvolume: volume\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// adding max value pixel as each non-last bucket ends one pixel before next bucket starts\n\t\t\tif (i == data.length-1){\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: bucket.max,\n\t\t\t\t\tvolume: volume\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn histogramData;\n\t}\n}","import * as d3 from \"d3\";\nimport style from \"../Histogram.css\";\nimport * as Defaults from \"../HistogramDefaults\";\nimport Observable from \"../../utils/Observable\";\n\n/**\n * Gradient index shared for all instances\n */\nvar gradientIndex = 0;\n\n/**\n * @class\n * HistogramHandle representing control handle for histogram\n */\nexport default class HistogramHandle {\n\t/**\n\t * @param {D3Selection} groupEl\n\t * @param {Number} value\n\t * @param {Number} index\n\t * @param {HistoryData} histogramData\n\t * @param {Object} options\n\t */\n\tconstructor(groupEl, value, index, histogramData, options) {\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"drag\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when drag on handle starts\n\t\t\t * @param {HistogramHandle} handle\n\t\t\t */\n\t\t\t\"startDrag\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when drag on handle ends\n\t\t\t * @param {HistogramHandle} handle\n\t\t\t */\n\t\t\t\"endDrag\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * handle element\n\t\t */\n\t\tthis._handleEl = null;\n\t\t\n\t\t/**\n\t\t * @private\n\t\t * handle line element\n\t\t */\n\t\tthis._handleLineEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle circle element\n\t\t */\n\t\tthis._handleCircleEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle mask element\n\t\t */\n\t\tthis._handleMaskEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle mask gradient element\n\t\t */\n\t\tthis._handleMaskGradientEl = null;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * handle label element\n\t\t */\n\t\tthis._handleLabelEl = null;\t\t\n\n\t\t/**\n\t\t * @private \n\t\t * True if handle is over\n\t\t */\n\t\tthis._isOver = false;\n\t\t\n\t\t/**\n\t\t * @private \n\t\t * Main group element\n\t\t */\t\t\n\t\tthis._groupEl = groupEl;\n\t\t/**\n\t\t * @private \n\t\t * handle index\n\t\t */\t\t\n\t\tthis._index = index;\n\t\t/**\n\t\t * @private \n\t\t * handle value\n\t\t */\t\t\n\t\tthis._value = value;\n\t\t/**\n\t\t * @private \n\t\t * initial handle value\n\t\t */\t\t\n\t\tthis._initialValue = new Number(value);\t\t\n\t\t/**\n\t\t * @private \n\t\t * handle position\n\t\t */\t\t\n\t\tthis._position = histogramData.valueToPosition(value);\n\t\t/**\n\t\t * @private \n\t\t * initial handle position\n\t\t */\t\t\n\t\tthis._initialPosition = new Number(this._position);\n\t\t/**\n\t\t * @private \n\t\t * bar options\n\t\t */\t\t\n\t\tthis._options = options;\n\t\t/**\n\t\t * @private \n\t\t * histogram data\n\t\t */\t\t\n\t\tthis._histogramData = histogramData;\n\t\t/**\n\t\t * @private \n\t\t * Cache for storing label size, enhances performance when animating\n\t\t */\t\t\n\t\tthis._labelSizeCache = {};\n\n\t\t/**\n\t\t * @private \n\t\t * elements\n\t\t */\t\t\n\t\tthis._elements = [];\t\t\n\t\t\n\t\tthis._renderHandle();\n\t}\n\n\t/**\n\t * @public\n\t * Destroys this handle\n\t */\n\tdestroy(){\n\t\tthis._elements.forEach(element=>element.remove());\n\t\tthis._elements = [];\n\t}\n\n\t/**\n\t * @private\n\t   * Renders drag handle\n\t   */\n\t_renderHandle() {\n\t\tthis._elements = [\n\t\t\tthis._createHandleElement(),\n\t\t\tthis._createHandleLineElement(),\n\t\t\tthis._createHandleCircleElement(),\n\t\t\tthis._createDragMaskElement(),\n\t\t\tthis._createMaskGradientElement(),\n\t\t\tthis._createDragLabelElement()\n\t\t];\n\n\t\tthis._handleHoverState();\n\t\tthis._handleDrag();\n\t}\t\n\n\thide(){\n\t\tthis._elements.forEach(element=>element.attr(\"visibility\", \"hidden\"));\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Returns X position of this handle\n\t * @returns {Number} X position handle\n\t */\n\tgetXPosition() {\n\t\treturn parseInt(this._handleEl.attr(\"x\"))+Defaults.ACTIVE_HANDLE_AREA_WIDTH/2;\n\t}\n\n\t/**\n\t * @public\n\t * Sets hover state\n\t */\n\tsetHoverState(){\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 3);\n\t\tthis._updateLabelPosition(this._position);\n\t}\n\t\n\t/**\n\t * @public \n\t * @returns {SVGRect} \n\t * Returns drag label box for this handle\n\t */\n\tgetLabelBox(){\n\t\treturn this._handleLabelEl.node().getBBox();\n\t}\n\n\t/**\n\t * @public \n\t * Shifts handle label by given offset so it can handle label position conflicts\n\t */\n\tsetLabelOffset(offset){\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\n\t\tthis._updateLabelPosition(this._position);\n\t}\n\n\t/**\n\t * @public \n\t * Sets handle position\n\t */\n\tsetHandleXPosition(position){\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\"+position+\", \"+this._options.height+\")\")\n\t\treturn this;\n\t}\n\n\tsetLabelText(text){\n\t\tthis._handleLabelEl.text(text);\n\t\treturn this;\n\t}\n\n\tshowLabel(){\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\n\t\treturn this;\n\t}\n\n\thideLabel(){\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\n\t\treturn this;\n\t}\t\n\n\tsetLabelPosition(position){\n\t\tthis.setLabelOffset(0);\n\t\tthis._updateLabelPosition(position);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Unsets hover state\n\t */\n\tunsetHoverState(){\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 1);\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(0, 0)\")\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(0, 0)\")\n\t}\n\n\t/**\n\t * @public\n\t * Enables this handle \n\t */\n\tenable(){\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"all\"));\n\t}\n\n\t/**\n\t * @public\n\t * Disables this handle \n\t */\n\tdisable(){\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"none\"));\n\t}\n\n\t/**\n\t * @private\n\t * Handle hover state\n\t */\n\t_handleHoverState(){\n\t\t// line hover effect\n\t\tthis._handleEl.on(\"mouseover\", () => {\n\t\t\tthis._isOver = true;\n\t\t\tthis.setHoverState();\n\t\t})\n\t\tthis._handleEl.on(\"mouseout\", () => {\n\t\t\tthis._isOver = false;\n\t\t\tthis.unsetHoverState();\n\t\t})\n\t}\n\n\t/**\n\t * @private\n\t * handles what happens when drag starts\n\t */\n\t_onStartDrag(){\n\t\tthis._groupEl.classed(style[\"dragging\"], true);\n\t\tthis._observable.fire(\"startDrag\", this);\n\t}\n\n\t/**\n\t * @private\n\t * handles what happens on drag\n\t */\n\t_onDrag(){\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar xpos = Math.round(Math.max(Math.min(d3.event.x, width), 0));\n\n\t\tthis._handleEl.attr(\"x\", xpos - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\n\t\tthis._handleLineEl.attr(\"x\", xpos - 2);\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\" + xpos + \",\" + height + \")\");\n\t\tthis._handleEl.attr(\"data-handle-value\", this._histogramData.positionToValue(xpos))\n\n\t\tthis.setHoverState();\n\n\t\tthis._position = xpos;\n\n\t\t// prevent recalculating value for the same position\n\t\tif (parseInt(this._position) !== parseInt(this._initialPosition)){\n\t\t\tthis._value = this._histogramData.positionToValue(xpos);\n\t\t} else {\n\t\t\tthis._value = this._initialValue;\n\t\t}\n\n\t\tthis._handleLabelEl.text(this._getLabelText())\n\n\t\tthis._updateLabelPosition(xpos);\n\t\tthis._observable.fire(\"drag\");\t\t\n\t}\n\n\t_getLabelText() {\n\t\treturn this._options.format(this._value);\n\t}\n\t/**\n\t * @private\n\t * handles what happens when drag ends\n\t */\n\t_onEndDrag(){\n\t\tthis._groupEl.classed(style[\"dragging\"], false);\n\t\tif (!this._isOver) {\n\t\t\tthis.unsetHoverState();\n\t\t}\n\n\t\tthis._observable.fire(\"endDrag\", this);\t\t\n\t}\n\n\t/**\n\t * @private\n\t * Handles handle drag \n\t */\n\t_handleDrag(){\n\t\tthis._handleEl.call(d3.drag()\n\t\t\t.on(\"drag\", this._onDrag.bind(this))\n\t\t\t.on(\"start\", this._onStartDrag.bind(this))\n\t\t\t.on(\"end\", this._onEndDrag.bind(this)));\n\t}\n\t/**\n\t * @private\n\t * Return computed or stored label length\n\t * @param {SVGElement}\n\t * @param {Number} length \n\t */\n\t_getComputedLabelTextLength(label){\n\t\tvar content = label.innerHTML;\n\t\tthis._labelSizeCache[content] = this._labelSizeCache[content] || label.getComputedTextLength();\n\t\treturn this._labelSizeCache[content];\n\t}\n\n\t/**\n\t * @private\n\t * Updates label position\n\t * @param {Number} position \n\t */\n\t_updateLabelPosition(position) {\n\t\tvar label = this._handleLabelEl.node();\n\t\tvar maskPadding = this._options.fontSize;\t\t\n\n\t\t// we need to calculate text length so we can create mask and center text\n\t\tvar textLength = this._getComputedLabelTextLength(label);\n\t\tvar maskWidth = textLength + maskPadding * 2;\n\t\tvar xPosition = position - textLength / 2;\n\n\t\t// handle when dragging towards left side\n\t\tif (xPosition < 0) {\n\t\t\txPosition = 0;\n\t\t}\n\n\t\t// handle when dragging towards right side\n\t\tif (xPosition + textLength > this._options.width) {\n\t\t\txPosition = this._options.width  - textLength;\n\t\t\tthis._handleLabelEl.attr(\"x\", this._options.width);\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"end\");\n\t\t} else {\n\t\t\tthis._handleLabelEl.attr(\"x\", xPosition);\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"start\");\n\t\t}\n\n\t\t// position mask\n\t\tthis._handleMaskEl.attr(\"x\", () => {\n\t\t\treturn parseInt(xPosition) - maskPadding;\n\t\t});\n\n\t\tthis._handleMaskGradientEl.attr(\"x1\", xPosition - maskPadding);\n\t\tthis._handleMaskGradientEl.attr(\"x2\", xPosition + maskWidth - maskPadding);\n\n\t\tthis._handleMaskEl.attr(\"width\", maskWidth);\n\t\tthis._handleMaskEl.attr(\"height\", this._options.fontSize);\n\t}\n\t\t\n\t/**\n\t * Creates mask gradient element\n\t * @param {Number} handleIndex \n\t */\n\t_createMaskGradientElement(){\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\n\t\t\t.attr(\"id\", \"brush-mask-gradient-\" + gradientIndex++)\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\n\t\t\t.attr(\"y1\", 0).attr(\"x1\", 50)\n\t\t\t.attr(\"y2\", 0).attr(\"x2\", 0);\n\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\n\t\t\t.data([\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\n\t\t\t])\n\t\t\t.enter().append(\"stop\")\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\n\n\t\treturn this._handleMaskGradientEl;\n\t}\n\n\t/**\n\t * @private \n\t * Renders main handle element \n\t * @returns {SVGElement}\n\t */\n\t_createHandleElement(){\n\t\tthis._handleEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"custom-handle\"])\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"data-handle-index\", this._index)\n\t\t\t.attr(\"data-handle-value\", this._value)\n\t\t\t.attr(\"cursor\", \"ew-resize\")\n\t\t\t.attr(\"width\", Defaults.ACTIVE_HANDLE_AREA_WIDTH)\n\t\t\t.attr(\"height\", this._options.height + 5)\n\t\t\t.attr(\"x\", this._position - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\n\n\t\treturn this._handleEl;\n\t}\n\n\t/**\n\t * @private \n\t * Renders handle line element \n\t * @returns {SVGElement} \n\t */\n\t_createHandleLineElement(){\n\t\tthis._handleLineEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"custom-handle-line\"])\n\t\t\t.attr(\"width\", 4)\n\t\t\t.attr(\"height\", this._options.height)\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"x\", this._position - 2);\n\n\t\treturn this._handleLineEl;\n\t}\t\n\n\t/**\n\t * @private \n\t * Renders handle circle element \n\t * @returns {SVGElement} \n\t */\n\t_createHandleCircleElement(){\n\t\tthis._handleCircleEl = this._groupEl.append(\"circle\")\n\t\t\t.attr(\"class\", style[\"custom-handle-circle\"])\n\t\t\t.attr(\"transform\", \"translate(\" + this._position + \",\" + this._options.height + \")\")\n\t\t\t.attr(\"fill\", \"#ffffff\")\n\t\t\t.attr(\"fill-opacity\", 1)\n\t\t\t.attr(\"stroke\", \"#000\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"cursor\", \"ew-resize\")\n\t\t\t.attr(\"r\", 3.5);\n\n\t\treturn this._handleCircleEl;\n\t}\t\t\n\n\t/**\n\t * @private \n\t * Renders drag mask element \n\t * @returns {SVGElement} \n\t */\n\t_createDragMaskElement(){\n\t\tthis._handleMaskEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"drag-label-mask\"])\n\t\t\t.attr(\"fill\", \"url(#brush-mask-gradient-\" + gradientIndex+\")\")\n\t\t\t.attr(\"y\", this._options.height + Defaults.LABEL_MARGIN)\n\t\t\t.attr(\"display\", \"none\");\t\t\t\n\n\t\treturn this._handleMaskEl;\n\t}\n\t\n\t/**\n\t * @private \n\t * Renders handle label element \n\t * @returns {SVGElement}  \n\t */\n\t_createDragLabelElement(){\n\t\tvar format = this._options.format;\n\t\tvar height = this._options.height;\n\t\tthis._handleLabelEl = this._groupEl.append(\"text\")\n\t\t\t.attr(\"class\", style[\"drag-label\"])\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"font-size\", this._options.fontSize)\n\t\t\t.text(() => {\n\t\t\t\tvar formattedValue = format(this._initialValue);\n\t\t\t\treturn formattedValue;\n\t\t\t})\n\t\t\t.attr(\"y\", height + this._options.fontSize + Defaults.LABEL_MARGIN);\n\n\t\t\n\t\tthis._updateLabelPosition(this._position);\n\t\treturn this._handleLabelEl;\n\t}\n}","/**\n * @public\n * Returns handle positions offsets so that labels don't conflict visually\n * @param {HistogramData} histogramData \n * @returns {Array} label offsets\n */\nexport function getHandlePositionOffsets(handle1, handle2, maskPadding, width){\n    var label1Box = handle1.getLabelBox();\n    var label2Box = handle2.getLabelBox();\n\n    // calculate conflict number\n    var conflictDiff = label2Box.x - (label1Box.x + label1Box.width)-maskPadding;\n    // and handle if there is not enough space\n    if (conflictDiff<0){\n        // pos1 diff to the left\n        var posDiff1 = conflictDiff/2;\n        // pos2 diff to to right\n        var posDiff2 = conflictDiff/2;\n\n        // position left to 0 if position would be lower than 0\n        var xMin = label1Box.x+posDiff1;\n        if (xMin < 0){\n            posDiff1 = label1Box.x; \n            // also shift right label so we keep it visible\n            posDiff2 = posDiff2*2\n        }\n\n        // same with max value\n        var xMax = label2Box.x+label2Box.width-posDiff2;\n        if (xMax > width){\n            posDiff2 += xMax-width; \n            posDiff1 = posDiff1*2\n        }\n        return [posDiff1, -posDiff2];                  \n    }\n\n    return [0,0];\n}","import style from \"../Histogram.css\";\nimport HistogramHandle from \"./HistogramHandle\";\nimport Observable from \"../../utils/Observable\";\nimport * as PositionUtils from \"../utils/PositionUtils\"\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Histogram renderer class\n * @param {Object} options\n */\nexport default class HistogramSelectionRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Histogram options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Bar data \n\t\t */\n\t\tthis._histogramData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * history selection\n\t\t */\n\t\tthis._histogramSelection = null;\n\n\t\t/**\n\t\t * @private\n\t\t * index of over selection  \n\t\t */\n\t\tthis._overSelectionIndex = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * selection handles\n\t\t */\n\t\tthis._handles = [];\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * true if handle is dragged\n\t\t */\n\t\tthis._draggingHandle = false;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous selection for animation\n\t\t */\n\t\tthis._prevSelection = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * true if animation is run\n\t\t */\n\t\tthis._animating = false;\n\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a category\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is changed\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\t\t\n    }\n\n\t/**\n\t * @public\n\t * Returns whether histogram has been rendered or not\n\t * @returns {boolean} true if histogram has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * @param {DOMElement}  \n\t * @returns {HistogramSelectionRenderer} returns this widget instance\n\t */\n\trender(groupEl){\n\t\tthis._rendered = true;\n\t\tthis._groupEl = groupEl\n\n\t\treturn this;\n\t} \t\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._destroyHandles();\n\t\tif (this._selectionBars){\n\t\t\tthis._selectionBars.remove();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Destroys selection controls \n\t */\n\t_destroyHandles(){\n\t\tthis._handles.forEach(handle=>handle.destroy());\n\t\tthis._handles = [];\n\t}\n\n\t/**\n\t * @private\n\t * Handles click on handle\n\t * @param {Number} handleIndex\n\t * @param {Number} handleValue \n\t */\n\t_onHandleClick(handleIndex, handleValue){\n\t\t// call prompt handler if available\n\t\tif (this._options.promptHandler){\n\t\t\tthis._options.promptHandler(handleValue).then((promptResult)=>{\n\t\t\t\tvar startSelectionSnapshot = JSON.stringify(this._histogramSelection.getOutputSelection());\n\t\t\t\tpromptResult = parseFloat(promptResult);\n\t\t\t\t// must be within min max range\n\t\t\t\tvar minMax = this._histogramData.getMinMax();\n\t\t\t\tpromptResult = Math.min(minMax.max, promptResult);\n\t\t\t\tpromptResult = Math.max(minMax.min, promptResult);\n\n\t\t\t\tvar points = this._histogramSelection.getSelectionPoints();\n\t\t\t\tpoints[handleIndex] = {\n\t\t\t\t\tvalue:promptResult\n\t\t\t\t};\n\n\t\t\t\tvar positions = points\n\t\t\t\t\t.sort((p1,p2)=>p1.value-p2.value)\n\t\t\t\t\t.map(point=>this._histogramData.valueToPosition(point.value));\n\t\t\t\t\n\t\t\t\tthis._updateSelectionPositions(positions, points);\n\t\t\t\tthis._updateSelection();\n\n\t\t\t\t// TODO: update handles without destroying them\n\t\t\t\tthis._destroyHandles();\n\t\t\t\tthis._renderHandles();\n\n\t\t\t\t// fire selection change if selection is changed\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t}\n\n\t/**\n\t * @private\n\t * Toggles selection\n\t * @param {Number} selectionIndex \n\t */\n\t_toggleSelection(selectionIndex){\n\t\tvar selection = this._options.selection[selectionIndex];\n\t\tselection.disabled = !selection.disabled;\n\t\tvar enabled = !selection.disabled;\n\t\tthis._updateSelection();\n\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t}\t\n\n\t/**\n\t * @private\n\t * Handles click on chart\n\t */\n\t_onClick(){\n\t\tvar target = d3.select(d3.event.target);\n\t\tvar selectionIndex = target.attr(\"data-selection-index\");\n\t\tvar handleIndex = target.attr(\"data-handle-index\");\n\n\t\tif (selectionIndex != null && this._histogramSelection.allowsToggle()){\n\t\t\tthis._toggleSelection(selectionIndex)\n\t\t} else if (handleIndex != null){\n\t\t\tthis._onHandleClick(handleIndex, target.attr(\"data-handle-value\"));\n\t\t}\n\t}\n\t/**\n\t * @private\n\t * Handles handle click \n\t */\n\t_handleClick(){\n\t\tthis._groupEl.on(\"click\", this._onClick.bind(this));\n\t}\n\n    /**\n     * @private\n     * updates histogram selection\n     * @param {HistogramSelection}\n     */\n\tupdateSelection(histogramSelection) {\n        this._histogramSelection = histogramSelection;\n        this._updateSelection();\n\t}\n\n\t/**\n\t * @private\n\t * Refreshes histogram data \n\t * @param {HistogramData}\n\t * @param {HistogramSelection}\n\t * @param {Object} options\n\t */\n\trefresh(histogramData, histogramSelection, options){\n\t\tthis._animate = options && options.animate;\n\t\tif (this._animate && this._histogramSelection && this._histogramSelection.getSelection().length == histogramSelection.getSelection().length){\n\t\t\tthis._prevSelection = this._histogramSelection.getSelection();\n\t\t\tthis._prevHistogramData = this._histogramSelection.getSelection();\n\t\t}\n\n\t\tif (this._animate && this._histogramData){\n\t\t\tthis._prevHistogramData = this._histogramData;\n\t\t}\n\n\t\tthis._histogramData = histogramData;\n\t\tthis._histogramSelection = histogramSelection;\n\t\t\n\t\tthis._clear();\n\t\tthis._renderSelection();\n\t\tthis._updateSelection();\n\n\t\tthis._handleHoverState();\n\t\tthis._handleClick();\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * Updates selection controls on hover\n\t * @param {Number} selectionIndex \n\t */\n\t_updateSelectionControlsHoverState(selectionIndex){\n\t\t// get all handles sorted by X position\n\t\tvar handles = this._handles.slice().sort((h1,h2)=>{\n\t\t\treturn h1.getXPosition() - h2.getXPosition();\n\t\t});\n\n\t\t// unset hover state on all handles\n\t\thandles.forEach(handle=>handle.unsetHoverState());\n\n\t\t// selection is active, active both handles for active selection\n\t\tif (selectionIndex != null){\n\t\t\tvar handle1 = handles[selectionIndex];\n\t\t\tvar handle2 = handles[selectionIndex+1];\n\n\t\t\thandle1.setHoverState();\n\t\t\thandle2.setHoverState();\n\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\n\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\n\t\t}\n\t}\t\n\n\t/**\n\t * \n\t * @private \n\t * Handles what happens when mouse is over selection\n\t * @param {String} type \n\t * @param {Number} i \n\t * @param {HTMLElement[]} array \n\t */\n\t_onSelectionMouseOver(d, i, nodes){\n\t\t// prevent selection when dragging handles\n\t\tif (this._draggingHandle){\n\t\t\treturn;\n\t\t}\n\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0.00)\")\n\t\tvar selectionIndex = parseInt(d3.select(d3.event.target).attr(\"data-selection-index\"));\n\t\tif (this._overSelectionIndex != selectionIndex){\n\t\t\tthis._overSelectionIndex = selectionIndex;\n\t\t\tthis._updateSelection();\n\t\t\tthis._updateSelectionControlsHoverState(selectionIndex);\n\t\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @private \n\t * Handles what happens when mouse is out of selection\n\t * @param {String} type \n\t * @param {Number} i \n\t * @param {HTMLElement[]} array \n\t */\n\t_onSelectionMouseOut(d, i, nodes){\n\t\t// prevent selection when dragging handles\n\t\tif (this._draggingHandle){\n\t\t\treturn;\n\t\t}\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0)\")\n\n\t\tthis._overSelectionIndex = null;\n\t\tthis._updateSelectionControlsHoverState(null);\n\t\tthis._updateSelection();\n\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\n\t\t\n\t}\n\n\t/**\n\t * @private \n\t * Handles hover state\n\t */\n\t_handleHoverState(){\n\t\tvar g = this._groupEl;\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseout\", this._onSelectionMouseOut.bind(this));\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseover\", this._onSelectionMouseOver.bind(this));\n\t}\t\n\n\t/**\n\t * @private \n\t * Handles when handle is dragged\n\t */\n\t_onHandleDrag(){\n\t\tvar positions = this._handles.map(handle=>handle.getXPosition()).sort((p1, p2)=>{\n\t\t\treturn p1-p2;\n\t\t});\n\n\t\tthis._updateSelectionPositions(positions);\n\t\tthis._updateSelection();\n\t}\n\n\t/**\n\t* @private\n\t* Updates selection with new positions\n\t* @param {Array} positions\n\t* @param {Array} points\n\t*/\n\t_updateSelectionPositions(positions, points){\n\t\tvar selection = this._histogramSelection.getSelection();\n\t\tpositions.forEach((p, index)=>{\n\t\t\tif (index>selection.length-1){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar position = {\n\t\t\t\tfrom:p,\n\t\t\t\tto:positions[index+1]\n\t\t\t};\n\n\t\t\tvar value = {\n\t\t\t\tfrom:points?points[index].value:this._histogramData.positionToValue(position.from),\n\t\t\t\tto:points?points[index+1].value:this._histogramData.positionToValue(position.to),\n\t\t\t};\n\n\t\t\t[\"from\", \"to\"].forEach(pos=>{\n\t\t\t\tconst selectionChanged = points?\n\t\t\t\t\t// if new points are given, we need to compare selection values\n\t\t\t\t\tselection[index][pos] !== value[pos]:\n\t\t\t\t\t// otherwise, we need to compare selection position\n\t\t\t\t\tselection[index][\"position\"][pos] !== position[pos];\n\n\t\t\t\t// update selection on change\n\t\t\t\tif (selectionChanged){\n\t\t\t\t\tselection[index][pos] = value[pos];\t\n\t\t\t\t\tselection[index][\"position\"][pos] = position[pos];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\t\n\n\t/**\n\t* @private\n\t* Renders selection bars\n\t*/\n\t_renderSelection() {\n\t\tvar height = this._options.height;\n\t\tvar selection = this._histogramSelection.getSelection();\n\n\t\t// hover selection bars\n\t\tthis._selectionBars = this._groupEl.selectAll(\".\"+style.selectionbar)\n\t\t\t.data(selection)\n\t\t\t.enter().append(\"rect\")\n\t\t\t.attr(\"class\", style.selectionbar)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\n\t\t\t.attr(\"height\", height);      \n\n\n\t\tthis._renderHandles();\n\t}\n\n\t/**\n\t* @private\n\t* Renders selection controls\n\t*/\n\t_renderHandles(){\n\t\t// render selection controls\n\t\tthis._handles = this._histogramSelection.getSelectionPoints().map((point, index)=>{\n\t\t\tvar value = point.value;\n\n\t\t\tvar handle = new HistogramHandle(this._groupEl, value, index, this._histogramData, this._options);\n\n\t\t\tif(point.hidden){\n\t\t\t\thandle.hide();\n\t\t\t}\n\n\t\t\thandle.on(\"drag\", ()=>{\n\t\t\t\tthis._onHandleDrag();\n\t\t\t}, this);\n\n\t\t\tvar startSelectionSnapshot;\n\n\t\t\t// disable other handles when draggin starts\n\t\t\thandle.on(\"startDrag\", ()=>{\n\t\t\t\tstartSelectionSnapshot = JSON.stringify(this._options.selection);\n\t\t\t\t\n\t\t\t\tthis._draggingHandle = true;\n\t\t\t\tthis._handles.forEach(handle=>handle.disable());\n\t\t\t\thandle.enable();\n\t\t\t}, this);\n\n\t\t\t// enable all handles when draggin starts\n\t\t\thandle.on(\"endDrag\", ()=>{\n\t\t\t\tthis._draggingHandle = false;\n\t\t\t\tthis._handles.forEach(handle=>handle.enable());\n\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\n\t\t\n\t\t\treturn handle;\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Returns bar color based on X position\n\n\t* @param {Number} barX\n\t* @param {Array} selection\n\t* @returns {Number} bar category index\n\t* @param {HistogramData} histogram data \n\t*/\n\t_getBarSelectionIndex(barX, selection, data){\n\t\tfor (var i=0;i<selection.length;i++){\n\t\t\tvar s = selection[i];\n\t\t\tvar isLast = i == selection.length-1;\n\t\t\tvar within = barX >= data.valueToPosition(s.from) && (barX < data.valueToPosition(s.to) || (isLast && barX <= data.valueToPosition(s.to)));\n\t\t\tif (within) return i;\n\t\t}\n\n\t\treturn null;\n\t}\t\n\n\t/**\n\t * @private\n\t * Returns selection color\n\t * @param {Object} selection\n\t * @param {Object} d datum\n\t */\n\t_getSelectionColor(selection, d){\n\t\tif (selection.colors){\n\t\t\treturn selection.colors[d.volumeIndex];\n\t\t}\n\n\t\tif (selection.color){\n\t\t\treturn selection.color\n\t\t}\n\n\t\treturn this._options.selectionColor;\n\t}\n\n\t/**\n\t * @private\n\t * Returns bar color for given bar position with given selection\n\t * @param {Number} barX \n\t * @param {Array} selection \n\t * @param {HistogramData} histogram data \n\t */\n\t_getBarColor (barX, selection, data, d){\n\t\tvar inactiveBarColor = this._options.inactiveBarColor;\n\t\tvar overSelectionColor = this._options.overSelectionColor;\n\t\t\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\n\t\tif (barSelectionIndex == null){\n\t\t\treturn inactiveBarColor;\n\t\t} else if (selection[barSelectionIndex].disabled){\n\t\t\treturn inactiveBarColor;\n\t\t} if (this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex){\n\t\t\treturn overSelectionColor;\n\t\t} else {\n\t\t\treturn this._getSelectionColor(selection[barSelectionIndex], d);\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Returns bar color for given bar position with given selection\n\t * @param {Number} barX \n\t * @param {Array} selection \n\t * @param {HistogramData} histogram data \n\t */\n\t_getBarOpacity (barX, selection, data){\n\t\tvar defaultOpacity = 1;\n\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\n\t\tvar isOver = this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex;\n\t\tvar isDisabled = barSelectionIndex != null && selection[barSelectionIndex].disabled;\n\n\t\tif (isOver){\n\t\t\treturn this._options.overSelectionOpacity;\n\t\t}\n\n\t\tif (isDisabled){\n\t\t\treturn this._options.inactiveBarOpacity;\n\t\t}\n\t\t\n\t\t// otherwise use set opacity if \n\t\tif (barSelectionIndex != null && selection[barSelectionIndex].opacity != null){\n\t\t\treturn selection[barSelectionIndex].opacity;\n\t\t} \n\n\t\treturn defaultOpacity;\n\t}\t\n\n\t/**\n\t * Runs onTransition as a transition between two selections\n\t * @param {Array} selection1 \n\t * @param {Array} selection2 \n\t * @param {Function} onTransition handler\n\t */\n\t_onSelectionTransition(selection1, selection2, data1, data2, onTransition, onComplete){\n\t\tselection1.forEach((s1,selectionIndex)=>{\n\t\t\tvar s2 = selection2[selectionIndex];\n\t\t\tvar width = this._options.width;\n\t\t\tif (selection1[selectionIndex]){\n\t\t\t\tvar transitions = [];\n\t\t\t\tvar frames = [];\n\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.from)), Math.round(data2.valueToPosition(s2.from))]);\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.to)), Math.round(data2.valueToPosition(s2.to))]);\n\n\t\t\t\t// make sure duration is calculated based on transition length\n\t\t\t\tframes = [Math.abs((transitions[0][0] - transitions[0][1])/width), Math.abs((transitions[1][0] - transitions[1][1])/width)];\n\n\t\t\t\ttransitions.forEach((t, handleIndex)=>{\n\t\t\t\t\tvar duration = 0;\n\n\t\t\t\t\twhile(t[0] !== t[1]){\n\t\t\t\t\t\tsetTimeout(onTransition.bind(this, t[0], selectionIndex, handleIndex), duration);\n\t\t\t\t\t\t\n\t\t\t\t\t\tduration = duration+0.5/frames[handleIndex];\n\t\t\t\t\t\tt[0] = t[0]>t[1]?t[0]-1:t[0]+1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// call final complete fn only if duration is > 0, this prevents premature animation end\n\t\t\t\t\t// when one of the sides is in the same position\n\t\t\t\t\tif (duration>0){\n\t\t\t\t\t\tsetTimeout(function(p, si, hi){\n\t\t\t\t\t\t\tonTransition(p, si, hi)\n\t\t\t\t\t\t\tonComplete(p, si, hi);\n\t\t\t\t\t\t}.bind(this, t[1], selectionIndex, handleIndex), ++duration);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Updates selection\n\t*/\n\t_updateSelection(){\n\t\tvar selection = this._histogramSelection.getSelection();\n\t\tvar bars = this._groupEl.selectAll(\".\"+style.bar);\n\n\t\t// fills bars with given selection\n\t\tvar fillBars = (s, data) => {\n\t\t\t// handle bar colors\n\t\t\tbars.attr(\"fill\", (d)=> {\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\n\t\t\t\treturn this._getBarColor(barX, s, data, d);\n\t\t\t})\n\n\t\t\t// handle bar opacity\n\t\t\tbars.attr(\"fill-opacity\", (d)=> {\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\n\t\t\t\treturn this._getBarOpacity(barX, s, data, d);\n\t\t\t})\n\t\t}\n\n\t\t// handle animation if previous selection is set\n\t\tif (this._animate && this._prevSelection){\n\t\t\tvar prevSelection = this._prevSelection;\n\t\t\tvar prevData = this._prevHistogramData;\n\t\t\t\n\t\t\t// set prev selection\n\t\t\tfillBars(prevSelection, this._prevHistogramData);\n\n\t\t\t// set handle positions to prev selection\n\t\t\tprevSelection.forEach((s, i)=>{\n\t\t\t\tvar p1 = this._prevHistogramData.valueToPosition(s.from);\n\t\t\t\tvar p2 = this._prevHistogramData.valueToPosition(s.to);\n\n\t\t\t\tthis._handles[i].setHandleXPosition(p1).setLabelPosition(p1);\n\t\t\t\tthis._handles[i+1].setHandleXPosition(p2).setLabelPosition(p2)\n\t\t\t});\n\n\t\t\tthis._animating = true;\n\t\t\t//fill bars on selection transition and move handles\n\t\t\tthis._onSelectionTransition(prevSelection, selection, prevData, this._histogramData, \n\t\t\t\t// on transition callback\n\t\t\t\t(p, selectionIndex, handleIndex)=>{\n\t\t\t\t\tvar bar = d3.select(bars.nodes()[p]);\n\t\t\t\t\tbar.attr(\"fill\", d=>{\n\t\t\t\t\t\treturn this._getBarColor(p, selection, this._histogramData, d);\n\t\t\t\t\t});\n\n\t\t\t\t\t//var handleText = this._options.format(this._histogramData.positionToValue(p));\n\t\t\t\t\t// move handles\n\t\t\t\t\t[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].setHandleXPosition(p).setLabelPosition(p)\n\n\t\t\t\t// on complete callback\t\t\n\t\t\t},()=>{\n\t\t\t\t\t// hide handles\n\t\t\t\t\t//[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].hideLabel();\n\t\t\t\t\tfillBars(selection, this._histogramData)\n\t\t\t\t\tthis._animating = false;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tthis._prevSelection = null;\n\t\t\tthis._prevHistogramData = null;\n\t\t\n\t\t} else {\n\t\t\tfillBars(selection, this._histogramData)\n\t\t}\n\t\t\n\t\t// selection rects\n\t\tthis._groupEl.selectAll(\".\"+style.selectionbar)\n\t\t\t.data(selection)\n\t\t\t.attr(\"data-selection-index\", function(d,i){\n\t\t\t\treturn i;\n\t\t\t})\n\t\t\t.attr(\"x\", (d) => { \n\t\t\t\treturn this._histogramData.valueToPosition(d.from);\n\t\t\t})\n\t\t\t.attr(\"width\", (d) => {\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\n\t\t\t})\n\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\t// show label without calculating offsets when animating\n\t\tif (this._animating) {\n\t\t\treturn this._handles.forEach(handle=>handle.showLabel());\n\t\t}\n\n\t\tthis._histogramSelection.getSelection().forEach((s,i)=>{\n\t\t\tvar handle1 = this._handles[i];\n\t\t\tvar handle2 = this._handles[i+1];\n\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\n\t\t});\n\t\t\n\t\tthis._handles.forEach(handle=>handle.showLabel());\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._handles.forEach(handle=>handle.hideLabel());\n\t}\t\t\n\n\t/**\n\t * @public\n\t * Destorys histogram UI  \n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._clear();\n\n\t\treturn this;\n    }\t\t\n}","import style from \"./Histogram.css\";\nimport HistogramSelectionRenderer from \"./selection/HistogramSelectionRenderer\";\nimport * as Defaults from \"./HistogramDefaults\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Histogram renderer class\n * @param {Object} options\n */\nexport default class HistogramRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Histogram options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Bar data \n\t\t */\n\t\tthis._historyData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = d3.scaleBand().range([0, options.width]);\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = d3.scaleLinear().range([options.height, 0]);\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous data for animation\n\t\t */\n\t\tthis._prevData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * selection renderer\n\t\t */\n\t\tthis._selectionRenderer = new HistogramSelectionRenderer(options);\n\n\t\t/**\n\t\t * @private\n\t\t * True if labels are visible\n\t\t */\n\t\tthis._labelsVisible = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a category\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is changed\n\t\t\t * @param {Array} selection\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\t\t\n\n\t\t// relay selection events\n\t\tthis._selectionRenderer.on(\"selectionOver\", (selectionIndex)=>{\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"selectionChanged\", (selection)=>{\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t\t});\t\t\n    }\n\n\t/**\n\t * @public\n\t * Returns whether histogram has been rendered or not\n\t * @returns {boolean} true if histogram has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector){\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar margin = Defaults.MARGIN;\n\n\t\t// render SVG\n\t\tvar svg = this._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width + margin.left + margin.right)\n\t\t\t.attr(\"height\", height + margin.top + this._options.fontSize + margin.bottom)\n\t\t\t.classed(style.histogram, true);\n\n\t\t// render group element\n\t\tvar g = this._groupEl = this._svgEl.append(\"g\")\n\t\t\t.classed(style.inactive, true)\n\t\t\t.attr(\"transform\",\n\t\t\t\"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\t\t// handle hover over svg element\n\t\tsvg.on(\"mouseover.hover\", ()=>{\n\t\t\tg.classed(style.active, true)\n\t\t\tg.classed(style.inactive, false)\n\t\t})\n\n\t\tsvg.on(\"mouseout.hover\", ()=>{\n\t\t\tg.classed(style.inactive, true)\n\t\t\tg.classed(style.active, false)\n\t\t})\n\n\t\tthis._selectionRenderer.render(g);\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t} \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._groupEl.node().innerHTML = \"\";\n\t}\n\n    /**\n     * @private\n     * Update histogram selection. Updated selection should have the same length as the current one.\n     * @param {HistogramSelection} selection\n     * @returns {HistogramRenderer} returns this renderer instance\n     */\n    updateSelection(histogramSelection) {\n        if (!this.isRendered()) {\n            throw \"Can't call updateSelection() when widget is not rendered, please call .render() first.\"\n        }\n\n        if (!this._histogramData) {\n            throw \"Can't call updateSelection() when no data is available, please call .setData() first.\"\n        }\n        this._selectionRenderer.updateSelection(histogramSelection);\n\n        return this;\n    }\n\n\t/**\n\t * @private\n\t * Refreshes histogram data \n\t * @param {HistogramData}\n\t * @param {HistogramSelection}\n\t * @param {Object} options\n\t */\n\trefresh(histogramData, histogramSelection, options){\n\t\tthis._animate = options && options.animate;\n\n\t\tthis._histogramData = histogramData;\t\t\n\t\tthis._clear();\n\n\t\tthis._xAxis.domain(histogramData.getData().map(function (d) {return d.value; }));\n\t\tthis._yAxis.domain([0, d3.max(histogramData.getData(), function (d) { return Math.max.apply(Math, d.volume); })]);\n\n\t\tthis._renderXAxis();\t\t\n\t\tthis._renderDataBars();\n\n\t\tthis._prevData = histogramData.getData();\t\t\t\n\n\t\tthis._selectionRenderer.refresh(histogramData, histogramSelection, options);\t\n\n\t\tif (this._labelsVisible){\n\t\t\tthis.showSelectionLabels()\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\tthis._selectionRenderer.showSelectionLabels();\n\t\t// hide axis labels when selection labels are visible\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"none\");\n\t\tthis._labelsVisible = true;\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._selectionRenderer.hideSelectionLabels();\n\t\t// show axis labels when selection labels are not visible\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"block\");\t\t\n\t\tthis._labelsVisible = false;\n\t}\t\n\n\t/**\n\t * @private\n\t * Renders data bars\n\t*/\n\t_renderDataBars() { \n\t\tvar data = this._histogramData.getData();\n\t\t// var prevData = this._prevData;\n\t\tvar height = this._options.height;\n\n\t\tvar y = this._yAxis;\n\n\t\tdata.forEach(d=>{\n\t\t\td.volume.forEach((v, i)=>{\n\t\t\t\tthis._groupEl\n\t\t\t\t\t.append(\"rect\")\n\t\t\t\t\t.datum({\n\t\t\t\t\t\tvalue:d.value,\n\t\t\t\t\t\tvolumeIndex:i\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"class\", style.bar)\n\t\t\t\t\t.attr(\"x\", this._histogramData.valueToPosition(d.value))\n\t\t\t\t\t.attr(\"width\", \"1\")\n\t\t\t\t\t.attr(\"y\", Math.floor(y(d.volume[i])))\n\t\t\t\t\t.attr(\"height\", Math.ceil(height - y(d.volume[i])))\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Renders X axis \n\t*/        \n\t_renderXAxis(){\n\t\tvar minMax = this._histogramData.getMinMax();\n\t\tvar format = this._options.format;\n\t\tvar height = this._options.height + this._options.fontSize + Defaults.LABEL_MARGIN;\n\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"])\n\t\t\t.data([minMax.min, minMax.max])\n\t\t\t.enter()\n\t\t\t.append(\"text\")\n\t\t\t.text((d)=>format(d))\n\t\t\t.attr(\"font-size\", this._options.fontSize)\n\t\t\t.attr(\"transform\", (d, i)=>{\n\t\t\t\treturn [\n\t\t\t\t\t\"translate(\"+0+\",\" + height + \")\",\n\t\t\t\t\t\"translate(\"+this._options.width+\",\" + height + \")\"\n\t\t\t\t][i]\n\t\t\t})\n\t\t\t.attr(\"text-anchor\", function(d, i){\n\t\t\t\treturn [\"start\", \"end\"][i];\n\t\t\t})\n\t\t\t.classed(style[\"x-axis\"], true)\n\t}\n\n\t/**\n\t * @public\n\t * Destorys histogram UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\t\tthis._selectionRenderer.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","/**\n * @abstract\n * abstract HistogramSelection class\n */\nexport default class HistogramSelection {\n\tconstructor(histogramData, selection){\n\t\tthis._selection = this.getSelectionWithPositions(histogramData, selection);\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelection()\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\treturn this._selection;\n\t}\n\n\t/**\n\t * @public\n\t * @abstract\n\t * @returns {Array} histogram selection\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\tthrow \"HistogramSelection.getOutputSelection() has to be implemented\";\n\t}\n\n\t/**\n\t * @public \n\t * @abstract\n\t * @returns {String}\n\t * Returns histogram selection type\n\t */\n\tgetSelectionType(){\n\t\tthrow \"HistogramSelection.getSelectionType() has to be implemented\";\n\t}\n\n\t/**\n\t * @abstract\n\t * @public \n\t * @returns {Boolean}\n\t * Returns true if toogle is allowed\n\t */\n\tallowsToggle(){\n\t\tthrow \"HistogramSelection.allowsToggle() has to be implemented\";\n\t}\t\n\n\t/**\n\t * @public\n\t * @abstract \n\t * @returns {Array}\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tthrow \"HistogramSelection.getSelection() has to be implemented\";\n\t}  \t\n\n\t/**\n\t * @public\n\t * @param {Array} histogramData\n\t * @param {Array} selection\n\t * @returns {Array}\n\t * Returns modified selection with positions\n\t */\n\tgetSelectionWithPositions(histogramData, selection){\n\t\treturn selection.map(s=>{\n\t\t\treturn Object.assign(s, {\n\t\t\t\tposition:{\n\t\t\t\t\tfrom:histogramData.valueToPosition(s.from),\n\t\t\t\t\tto:histogramData.valueToPosition(s.to)\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nvar SelectionTypes = {\n\tMULTI:\"multi\",\n\tFILTER:\"filter\",\n\tINVERTED_FILTER:\"inverted-filter\"\n}\n\nexport {SelectionTypes} ","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class MultipleHistogramSelection extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.MULTI;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn true;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\t\t\t\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t \t\n}","import MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport * as Defaults from \"../HistogramDefaults\";\n\n/**\n * @class\n * DefaultHistogramSelectionImpl representing histogram selection\n */\nexport default class DefaultHistogramSelectionImpl extends MultipleHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData) {\n\t\tvar minMax = histogramData.getMinMax();\n\t\tvar colors = Defaults.DEFAULT_COLORS;\n\t\tvar start = minMax.min;\n\t\tvar step = (minMax.max - minMax.min) / colors.length;\n\t\tvar selection = colors.map(color=>{\n\t\t\tvar from = start;\n\t\t\tvar to = start + step;\n\t\t\tstart += step;\n\n\t\t\treturn {\n\t\t\t\tfrom:from, \n\t\t\t\tto:to,\n\t\t\t\tcolor:color\n\t\t\t}\n\t\t});\n\n\t\tsuper(histogramData, selection);\n    }\n}","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class FilterHistogramSelectionImpl extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tif (selection.length != 1){\n\t\t\tthrow \"Filter selection doesn't allow more than one selection\"\n\t\t}\n\t\tsuper(histogramData, selection);\n\t}\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.FILTER;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn false;\n\t}\t\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t\n}","import FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class InvertedFilterHistogramSelectionImpl extends FilterHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n\n\t\tthis._selection = this._getInvertedSelection(histogramData, selection);\n    }\n\n\n\t_getInvertedSelection(histogramData, selection){\n\t\tvar minMax = histogramData.getMinMax();\n\n\t\tvar invertedSelection = [\n\t\t\t{\n\t\t\t\tfrom:minMax.min,\n\t\t\t\tto:selection[0].from\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].from,\n\t\t\t\tdisabled:true,\n\t\t\t\tto:selection[0].to\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].to,\n\t\t\t\tto:minMax.max\n\t\t\t}\n\t\t];\n\n\t\treturn this.getSelectionWithPositions(histogramData, invertedSelection);\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:this._selection[1].from,\n\t\t\t\tto:this._selection[1].to\n\t\t\t}\n\t\t];\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.INVERTED_FILTER;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = super.getSelectionPoints();\n\t\t\n\t\tresult[0].hidden = true;\n\t\tresult[result.length-1].hidden = true;\n\n\t\treturn result;\n\t}  \t\n}","import DefaultHistogramSelectionImpl from \"./DefaultHistogramSelectionImpl\";\nimport MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport InvertedFilterHistogramSelectionImpl from \"./InvertedFilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * HistogramSelection factory returns appropriate selection implementation\n */\nexport default class HistogramSelectionFactory {\n\t/**\n\t * @param {Object} options\n\t */\n\tconstructor(options) {\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * @param {HistogramData} histogramData\n\t * @returns {HistogramSelection} returns histogram selection\n\t * Returns histogram selection\n\t */\n\tgetHistogramSelection(selection, histogramData){\t\t\n\t\t// use default histogram selection if selection is not provided\n\t\tif (!selection){\n\t\t\treturn new DefaultHistogramSelectionImpl(histogramData, this._options.selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.FILTER){\n\t\t\treturn new FilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.INVERTED_FILTER){\n\t\t\treturn new InvertedFilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else {\n\t\t\treturn new MultipleHistogramSelectionImpl(histogramData, selection);\n\t\t}\n\t}  \t\n}","import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./HistogramDefaults\";\nimport HistogramData from \"./HistogramData\";\nimport HistogramRenderer from \"./HistogramRenderer\";\nimport HistogramSelectionFactory from \"./selection/HistogramSelectionFactory\"\nimport {SelectionTypes} from \"./selection/HistogramSelection\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main histogram class\n * @param {Object} options\n */\nclass Histogram {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * prompt handler\n\t\t */\n\t\tthis._options.promptHandler = options.promptHandler || null;\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar color \n\t\t */\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar opacity \n\t\t */\n\t\tthis._options.inactiveBarOpacity = getOptionValue(options.inactiveBarOpacity, Defaults.INACTIVE_BAR_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Over bar color \n\t\t */\n\t\tthis._options.overSelectionColor = getOptionValue(options.overSelectionColor, Defaults.OVER_SELECTION_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Over selection opacity \n\t\t */\n\t\tthis._options.overSelectionOpacity = getOptionValue(options.overSelectionOpacity, Defaults.OVER_SELECTION_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.selectionColor = getOptionValue(options.selectionColor, Defaults.SELECTION_COLOR);\n\t\t\n\t\t/**\n\t\t * @public\n\t\t * Enable selection toggle \n\t\t */\n\t\tthis._options.enableSelectionToggle = getOptionValue(options.enableSelectionToggle, Defaults.ENABLE_SELECTION_TOGGLE);\n\n\t\t/**\n\t\t * @public\n\t\t * Font size\n\t\t */\n\t\tthis._options.fontSize = getOptionValue(options.fontSize, Defaults.FONT_SIZE);\n\n\t\t/**\n\t\t * @public\n\t\t * selection type\n\t\t */\n\t\tthis._options.selectionType = getOptionValue(options.selectionType, null);\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t * @param {MouseEvent} browser event\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * histogramRenderer\n\t\t */\n\t\tthis._histogramRenderer = new HistogramRenderer(this._options);\n\n\t\tthis._histogramRenderer.on(\"selectionOver\", selectionIndex=>{\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled, d3.event);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"selectionChanged\", (selection)=>{\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t\t});\n\t\t\n\t\tthis._selectionFactory = new HistogramSelectionFactory(this._options);\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Histogram} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._histogramRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._histogramRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Array} data\n\t * @param {Array} selection\n\t * @param {Object} set data options\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetData(data, selection, options) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar histogramData = this._histogramData = new HistogramData(data, this._options);\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, histogramData);\n\n\t\tthis._options.selection = histogramSelection.getSelection();\n\t\tthis._selection = selection;\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = (value => String(value));\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._histogramRenderer.refresh(histogramData, histogramSelection, options);\n\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * @public\n\t * Sets selection type\n\t * @param {String} selectionType\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetSelectionType(selectionType){\n\t\tthis._options.selectionType = selectionType;\n\t\tthis.setSelection(this._selection);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\tthis._histogramRenderer.showSelectionLabels();\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._histogramRenderer.hideSelectionLabels();\n\t}\n\n    /**\n     * @private\n     * Update histogram selection. Updated selection should have the same length as the current one.\n     * @param {Array} selection\n     * @returns {Histogram} returns this widget instance\n     */\n    updateSelection(selection) {\n        if (!this._histogramRenderer.isRendered()) {\n            throw \"Can't call activateSelection() when widget is not rendered, please call .render() first.\"\n        }\n\n        if (!this._histogramData) {\n            throw \"Can't call activateSelection() when no data is available, please call .setData() first.\"\n        }\n\n        var histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, this._histogramData);\n        this._options.selection = histogramSelection.getSelection();\n        this._selection = selection;\n        this._histogramRenderer.updateSelection(histogramSelection);\n\n        return this;\n    }\n\t\n\t/**\n\t * @public\n\t * Sets selection\n\t * @param {Array} selection\n\t * @param {Object} options\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetSelection(selection, options) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tif (!this._histogramData) {\n\t\t\tthrow \"Can't call setSelection() when no data is available.\"\n\t\t}\n\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, this._histogramData);\n\t\tthis._options.selection = histogramSelection.getSelection();\n\t\tthis._selection = selection;\n\t\tthis._histogramRenderer.refresh(this._histogramData, this._histogramSelection, options);\n\n\t\treturn this;\n\t}\n\n}\n\nHistogram.SelectionTypes = SelectionTypes;\nexport default Histogram;\n","/**\n * @public\n * Default widget width\n */\nexport const WIDTH = 360;\n\n/**\n * @public\n * Default widget height\n */\nexport const HEIGHT = 200;\n\n/**\n * @public\n * Default line color\n */\nexport const LINE_COLOR = \"#7ed321\";\n\n/**\n * @public\n * Default line colors\n */\nexport const LINE_COLORS = [];\n\n/**\n * @public\n * Default line opacity\n */\nexport const LINE_OPACITY = 1;\n\n/**\n * @public\n * Default fill color\n */\nexport const FILL_COLOR = \"#7ed321\";\n\n/**\n * @public\n * Default fill colors\n */\nexport const FILL_COLORS = [];\n\n/**\n * @public\n * Default fill opacity\n */\nexport const FILL_OPACITY = 0.1;\n\n/**\n * @public\n * Default line width\n */\nexport const LINE_WIDTH = 3;\n\n/**\n * @public\n * Default dot size\n */\nexport const DOT_SIZE = 6;\n\n/**\n * @public\n * Default margin \n */\nexport const MARGIN = {\n    bottom:28\n};\n\n/**\n * @public \n * Default axis color \n */\nexport const AXIS_COLOR = \"#f0f0f0\";\n\n\n/**\n * @public \n * Vertical label offset\n */\nexport const LABEL_OFFSET = 5;\n\n\n/**\n * @public \n * Zero line color\n */\nexport const ZERO_LINE_COLOR = \"#bababa\";","import * as d3 from \"d3\";\n\n/**\n * @class\n * series representing data for the line\n */\nexport default class LineData {\n\t/**\n\t * @param {Array} series\n\t * @param {Object} options\n\t */\n\tconstructor(series) {\n\t\tthis._series = series.slice();\n\t\tthis._minMax = this._calculateMinMax(this._series);\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns line series\n\t * @returns {Array} line series\n\t */\n\tgetSeries() {\n\t\treturn this._series;\n\t}\n\n\t/**\n\t * @public\n\t * Returns all data from all series merged into one array\n\t * @returns {Array}\n\t */\n\tgetAllData() {\n\t\treturn [].concat.apply([], this._series);\n\t}\n\n\t/**\n\t * Returns merged data where each unique label has an array of values\n\t */\n\tgetMergedData() {\n\t\tvar dataMap = {};\n\t\tthis.getAllData().forEach((item=>{\n\t\t\tconst result = dataMap[item.label] || {\n\t\t\t\tlabel:item.label,\n\t\t\t\tvalues:[],\n\t\t\t\ttooltips:[]\n\t\t\t};\n\t\t\tresult.values.push(item.value);\n\t\t\tresult.tooltips.push(item.tooltip);\n\t\t\tdataMap[item.label] = result;\n\t\t}));\n\n\t\treturn Object.values(dataMap);\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given series\n\t* @param {Array} series\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(series) {\n\t\tvar data = [].concat.apply([], series);\n\t\tvar min = d3.min(data, function (d) { return d.value; });\n\t\tvar max = d3.max(data, function (d) { return d.value; });\n\n\t\tif (data.length <= series.length) {\n\t\t\tmin = Math.min(min, 0);\n\t\t\tmax = Math.max(max, 0);\n\t\t}\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.max;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}","import style from \"./Line.css\";\nimport * as Defaults from \"./LineDefaults\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\nvar gradientID = 0;\n\n/**\n * @class\n * Line renderer class\n * @param {Object} options\n */\nexport default class TooltipRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Line options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Line data \n\t\t */\n\t\tthis._lineData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Line has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n    }\n\n\t/**\n\t * @public\n\t * Returns whether Line has been rendered or not\n\t * @returns {boolean} true if Line has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {LineHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(groupEl){\n\t\tthis._groupEl = groupEl;\n\t\tthis._rendered = true;\n\n\t\tthis._groupEl.on(\"mouseout\", this._onMouseOut.bind(this))\n\n\t\treturn this;\n\t}\n\n\t_getTextAnchor(xPos, bottomLabelWidth, width){\n\t\tvar xpos = xPos;\n\t\tif (xpos - bottomLabelWidth/2 < 0){\n\t\t\treturn \"start\"\n\t\t} else if (xpos + bottomLabelWidth/2 > width){\n\t\t\treturn \"end\"\n\t\t} else {\n\t\t\treturn \"middle\";\n\t\t}\n\t}\n\n\t_getTooltipHTML(d){\n\t\treturn d.tooltips.filter((tooltip, index)=>{\n\t\t\treturn d.values[index] != null;\n\t\t}).map((tooltip, index)=>{\n\t\t\tconst value = tooltip || this._options.format(d.values[index]);\n\t\t\tvar color = this._options.lineColors[index] || this._options.lineColor;\n\t\t\tconst icon = `\n\t\t\t\t<span style=\"display:inline-block;position:relative;top:-1px;margin-right:5px;width:6px;height:6px;border-radius:50%;background-color:${color}\"></span>\n\t\t\t`;\n\n\t\t\tif (d.tooltips.length>1){\n\t\t\t\treturn icon + value;\n\t\t\t} else {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\t\n\t\t}).join(\"<br />\");\n\t}\n\n\t_onHoverAreaOver(d){\n\t\tvar duration = this._tooltipGroup.attr(\"visibility\") == \"visible\"?0:0;\n\t\tvar x = this._xAxis;\n\t\tvar y = this._yAxis;\n\t\tvar width = this._options.width;\n\t\tvar xPos = x(d.label);\n\n\t\t// update tooltip position\n\t\tthis._tooltipGroup\n\t\t\t.transition()\n\t\t\t.duration(duration)\n\t\t\t.attr(\"visibility\", \"visible\")\n\t\t\t.attr(\"transform\", \"translate(\"+xPos+\", 0)\")\n\n\t\t// update tooltip bottom label\n\t\tvar bottomLabelWidth = this._tooltipBottomLabel.node().getBBox().width;\n\t\tvar bottomMaskPadding = 25;\n\t\tvar textAnchor = this._getTextAnchor(xPos, bottomLabelWidth, width);\n\n\t\tthis._tooltipBottomLabel\n\t\t\t.text(d.label)\n\t\t\t.attr(\"text-anchor\", textAnchor);\n\n\t\tthis._tooltipBottomLabel.attr(\"transform\", ()=>{\n\t\t\treturn {\n\t\t\t\t\"start\":\"translate(\"+-xPos+\", 0)\",\n\t\t\t\t\"middle\":\"translate(0, 0)\",\n\t\t\t\t\"end\":\"translate(\"+(width-xPos)+\", 0)\"\n\t\t\t}[textAnchor]\n\t\t});\n\t\t\n\t\tvar bottomMaskWidth = bottomMaskPadding*2 + bottomLabelWidth;\n\t\tthis._tooltipBottomLabelMask\n\t\t\t.attr(\"width\", bottomMaskWidth)\n\t\t\t.attr(\"x\", ()=>{\n\t\t\t\treturn {\n\t\t\t\t\t\"start\":-xPos-bottomMaskPadding,\n\t\t\t\t\t\"middle\":-bottomMaskWidth/2,\n\t\t\t\t\t\"end\":width-xPos-bottomMaskWidth+bottomMaskPadding,\n\t\t\t\t}[textAnchor]\n\t\t\t})\n\n\t\tthis._handleMaskGradientEl.attr(\"x1\", -bottomMaskWidth/2);\n\t\tthis._handleMaskGradientEl.attr(\"x2\", bottomMaskWidth/2);\t\t\t\n\n\t\t// update tooltip top label \n\t\tvar tooltipHtml = this._getTooltipHTML(d);\n\t\tthis._tooltipTopLabel.node().innerHTML = tooltipHtml;\n\t\tvar labelLeft = this._getLabelLeft(xPos);\n\n\t\t// if value is not null or undefined\n\t\tif (d.values.some(d => d != null)){\n\t\t\tthis._tooltipTopLabel\n\t\t\t\t.style(\"left\", labelLeft+\"px\")\n\t\t\t\t.style(\"visibility\", \"visible\")\n\t\t\t\t.style(\"top\", y(Math.max.apply(Math,d.values))-50+\"px\")\n\n\t\t\t// update line circle\n\t\t\tthis._tooltipLineCircle\n\t\t\t\t.transition()\n\t\t\t\t.duration(duration)\n\t\t\t\t.style(\"visibility\", (circle, i)=>{\n\t\t\t\t\treturn d.values[i]?\"visible\":\"hidden\";\n\t\t\t\t})\n\t\t\t\t.attr(\"cy\", (circle, i)=>{\n\t\t\t\t\treturn d.values[i]?y(d.values[i]):0\n\t\t\t\t})\t\t\t\t\n\t\t} else {\n\t\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\");\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\n\t\t}\n\t\n\t}\n\n\t_getLabelLeft(xPos){\n\t\tvar labelWidth = this._tooltipTopLabel.node().offsetWidth;\n\t\tvar labelLeft = xPos-labelWidth/2;\n\t\t\n\t\tif (labelLeft<0){\n\t\t\tlabelLeft = 0;\n\t\t}\n\n\t\tif (labelLeft>this._options.width - labelWidth){\n\t\t\tlabelLeft = this._options.width - labelWidth;\n\t\t}\n\n\t\treturn labelLeft;\n\t}\n\n\t_onMouseOut(){\n\t\t// only hide when mouse is outside of widget\n\t\tif (!this._groupEl.node().parentNode.contains(d3.event.relatedTarget)){\n\t\t\tthis._hideTooltip();\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\n\t\t}\n\t\t\n\t}\n\n\t_hideTooltip(){\n\t\tthis._tooltipGroup.attr(\"visibility\", \"hidden\")\n\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\")\n\t}\n\n\t_renderTooltip(){\n\t\tvar data = this._lineData.getMergedData();\n\t\t\n\t\tvar series = this._lineData.getSeries();\n\t\tvar hoverWidth;\n\t\tif (data.length>series.length){\n\t\t\thoverWidth = this._options.width / (data.length-1);\n\t\t} else {\n\t\t\thoverWidth = this._options.width;\n\t\t}\n\n\t\tthis._hoverAreas = this._groupEl\n\t\t\t.selectAll(\".\"+style[\"tooltip-hover-area\"])\n\t\t\t.data(data)\n\t\t\t.enter()\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"tooltip-hover-area\"])\n\t\t\t.attr(\"width\", hoverWidth)\n\t\t\t.attr(\"fill-opacity\", 0.00)\n\t\t\t.attr(\"x\", (d)=>{\n\t\t\t\treturn this._xAxis(d.label) - hoverWidth/2\n\t\t\t})\n\t\t\t.attr(\"height\", this._options.height)\n\t\t\t.on(\"mouseover\", this._onHoverAreaOver.bind(this))\n\n\t\tthis._tooltipGroup = this._groupEl\n\t\t\t.append(\"g\")\n\t\t\t.attr(\"visibility\", \"hidden\")\n\t\t\t.attr(\"class\", style[\"tooltip-group\"])\n\n\n\t\tthis._tooltipLineCircle = this._tooltipGroup\n\t\t\t.selectAll(\".\"+style[\"tooltip-line-circle\"])\n\t\t\t.data(series)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"visibility\", \"hidden\")\n\t\t\t.attr(\"class\", style[\"tooltip-line-circle\"])\n\t\t\t.attr(\"stroke-width\", this._options.lineWidth)\n\t\t\t.attr(\"stroke\", (d, i)=>{\n\t\t\t\treturn this._options.lineColors[i] || this._options.lineColor;\n\t\t\t})\n\t\t\t.attr(\"stroke-opacity\", this._options.lineOpacity)\n\t\t\t.attr(\"r\", 2.5+this._options.lineWidth/2)\n\n\t\tthis._tooltipAxisCircle = this._tooltipGroup\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"class\", style[\"tooltip-axis-circle\"])\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"cy\", this._options.height - Defaults.MARGIN.bottom)\n\t\t\t.attr(\"r\", 2.5 + 1/2)\n\n\t\tthis._tooltipBottomLabelMask = this._tooltipGroup\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"fill\", \"url(#\"+this._handleMaskGradientEl.attr(\"id\")+\")\")\n\t\t\t.attr(\"class\", style[\"tooltip-label-mask\"])\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET-15)\n\t\t\t.attr(\"height\", 20)\n\n\t\tthis._tooltipBottomLabel = this._tooltipGroup\n\t\t\t.append(\"text\")\n\t\t\t.attr(\"class\", style[\"tooltip-label\"])\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET)\n\t\t\t.attr(\"text-anchor\", \"start\")\n\t\t\t.text(data[0].label)\n\n\t\tthis._tooltipTopLabel = d3.select(this._groupEl.node().parentNode.parentNode)\n\t\t\t.insert(\"span\", \":first-child\")\n\t\t\t.attr(\"class\", style[\"tooltip-top-label\"])\n\t\t\t.style(\"position\", \"absolute\")\n\t\t\t.style(\"visibility\", \"hidden\")\n\n\t\tthis._tooltipRendered = true;\n\t}\n\n\t/**\n\t * Creates mask gradient element\n\t * @param {Number} handleIndex \n\t */\n\t_createMaskGradientElement(){\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\n\t\t\t.attr(\"id\", style[\"tooltip-label-mask\"]+\"-\"+(gradientID++)+\"-gradient\")\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\n\t\t\t.attr(\"y1\", \"0\").attr(\"x1\", \"0\")\n\t\t\t.attr(\"y2\", \"0\").attr(\"x2\", \"0\");\n\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\n\t\t\t.data([\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\n\t\t\t])\n\t\t\t.enter().append(\"stop\")\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\n\n\t\treturn this._handleMaskGradientEl;\n\t}\n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tif (this._tooltipRendered){\n\t\t\tthis._hoverAreas.remove();\n\t\t\tthis._tooltipGroup.remove();\n\t\t\tthis._tooltipTopLabel.remove();\n\t\t\tthis._tooltipRendered = false;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Sets line data \n\t * @param {LineData}\n\t */\n\tupdate(lineData, x, y){\n\t\tthis._xAxis = x;\n\t\tthis._yAxis = y; \n\t\tthis._lineData = lineData;\n\n\t\tthis._createMaskGradientElement();\n\t\tthis._clear();\n\t\tthis._renderTooltip();\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Line UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._clear();\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","import style from \"./Line.css\";\nimport * as Defaults from \"./LineDefaults\";\nimport Observable from \"../utils/Observable\";\nimport TooltipRenderer from \"./TooltipRenderer\";\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Line renderer class\n * @param {Object} options\n */\nexport default class LineRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Line options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Line data \n\t\t */\n\t\tthis._lineData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Line has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous data for animation\n\t\t */\n\t\tthis._prevData = null;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n\n\t\tthis._tooltipRenderer = new TooltipRenderer(options);\n    }\n\n\t/**\n\t * @public\n\t * Returns whether Line has been rendered or not\n\t * @returns {boolean} true if Line has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {LineHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(selector){\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\n\t\t// force position relative so the toolip shows correctly\n\t\tct.style(\"position\", \"relative\");\n\n\t\t// render SVG\n\t\tthis._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.classed(style.svg, true)\n\t\t\t.classed(style.line, true);\n\n\t\t// render group element\n\t\tthis._groupEl = this._svgEl.append(\"g\");\n\n\t\tthis._tooltipRenderer.render(this._groupEl);\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t} \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._groupEl.node().innerHTML = \"\";\n\t}\n\n\t/**\n\t * @private\n\t * Sets line data \n\t * @param {LineData}\n\t */\n\tupdate(lineData){\n\t\tthis._lineData = lineData;\t\t\n\t\tthis._clear();\n\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar verticalSpacing = this._options.verticalSpacing;\n\n\t\tvar series = lineData.getSeries();\n\t\tvar allData = lineData.getAllData()\n\t\tvar minMax = lineData.getMinMax();\n\n\t\tvar x = this._xAxis = d3.scalePoint().range([0, width]);\t\n\t\tvar y = this._yAxis = d3.scaleLinear().range([height-verticalSpacing, verticalSpacing]);\n\n\t\tx.domain(allData.map(function (d) {return d.label; }));\n\t\ty.domain([minMax.min, minMax.max]);\n\n\t\tthis._renderZeroLine(allData);\n\t\tseries.forEach((data, seriesIndex)=>{\n\t\t\tthis._renderDataLines(data, seriesIndex);\n\t\t});\n\t\tthis._renderXAxis(allData);\n\t\tthis._tooltipRenderer.update(lineData, x, y);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * Renders x axis\n\t*/\n\t_renderXAxis(data){\n\t\tthis._groupEl.append(\"line\")\n\t\t\t.attr(\"x1\", 0)\n\t\t\t.attr(\"x2\", this._options.width)\n\t\t\t.attr(\"y1\", this._options.height-Defaults.MARGIN.bottom)\n\t\t\t.attr(\"y2\", this._options.height-Defaults.MARGIN.bottom)\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke\", this._options.axisColor)\n\n\t\t// render to labels on start and end sides if multiple items are available\n\t\tif (data.length>1){\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[0].label)\n\t\t\t\t.attr(\"x\", 0)\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\n\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[data.length-1].label)\n\t\t\t\t.attr(\"x\", this._options.width)\n\t\t\t\t.attr(\"text-anchor\", \"end\")\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\n\n\t\t// render single label in the middle if only one item is available\t\t\t\t\n\t\t} else if (data.length == 1){\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[0].label)\n\t\t\t\t.attr(\"x\", this._options.width/2)\n\t\t\t\t.attr(\"text-anchor\", \"middle\")\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\n\t\t}\t\n\t}\n\t/**\n\t * Returns true if graph should render zero line\n\t * @param {Array} data \n\t */\n\t_showZeroLine(){\n\t\tvar zeroLinePosition = this._yAxis(0);\n\t\tvar axisPosition = this._options.height-Defaults.MARGIN.bottom;\n\t\tvar treshold = 10;\n\t\treturn zeroLinePosition<axisPosition-treshold;\n\t}\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * Renders zero line\n\t*/\n\t_renderZeroLine(){\n\t\tif (this._showZeroLine()){\n\t\t\tthis._groupEl.append(\"line\")\n\t\t\t\t.attr(\"x1\", 0)\n\t\t\t\t.attr(\"x2\", this._options.width)\n\t\t\t\t.attr(\"y1\", Math.round(this._yAxis(0)))\n\t\t\t\t.attr(\"y2\", Math.round(this._yAxis(0)))\n\t\t\t\t.attr(\"stroke-dasharray\",\"2 ,2\")\n\t\t\t\t.attr(\"stroke\", this._options.zeroLineColor)\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * @param {Number} seriesIndex\n\t * Renders data lines\n\t*/\n\t_renderDataLines(data, seriesIndex) { \n\t\tvar x = this._xAxis;\n\t\tvar y = this._yAxis;\n\t\t\n\t\tvar options = this._options;\n\t\tvar minHeight = this._options.height-Defaults.MARGIN.bottom;\n\t\tvar areaZero = this._showZeroLine()?Math.min(minHeight, y(0)):minHeight;\n\t\tvar lineColor = options.lineColors[seriesIndex] || options.lineColor;\n\t\tvar fillColor = options.fillColors[seriesIndex] || options.fillColor;\n\n\t\t// define the area\n\t\tvar area = d3.area()\n\t\t\t.x(function(d) {return x(d.label); })\n\t\t\t.y0(areaZero)\n\t\t\t.y1(function(d) { return y(d.value); });\n\n\t\t// define the line\n\t\tvar line = d3.line()\n\t\t\t.x(function(d) { return x(d.label); })\n\t\t\t.y(function(d) { return y(d.value); });\t\t\n\n\t\t// apply grouping if needed (null or other splits)\n\t\tconst groupedData = this._getGroupedData(data);\n\n\t\tgroupedData.forEach(lineData=>{\n\t\t\t// only add area if not rendering a dot\n\t\t\tif (lineData.length>1){\n\t\t\t\t// add the area path\n\t\t\t\tthis._groupEl.append(\"path\")\n\t\t\t\t.data([lineData])\n\t\t\t\t.attr(\"class\", style[\"area\"])\n\t\t\t\t.attr(\"fill\", fillColor)\n\t\t\t\t.attr(\"fill-opacity\", options.fillOpacity)\n\t\t\t\t.attr(\"d\", area);\n\t\t\t}\n\n\t\t\tif (lineData.length){\n\t\t\t\t// add the line path\n\t\t\t\tthis._groupEl.append(\"path\")\n\t\t\t\t\t.data([lineData])\n\t\t\t\t\t.attr(\"fill\", \"none\")\n\t\t\t\t\t.attr(\"stroke-linecap\", \"round\")\n\t\t\t\t\t.attr(\"stroke\", lineColor)\n\t\t\t\t\t.attr(\"stroke-opacity\", 1)\n\t\t\t\t\t// note that in case of a single item, dot is rendered with a different size\n\t\t\t\t\t.attr(\"stroke-width\", lineData.length>1?options.lineWidth:options.dotSize)\n\t\t\t\t\t.attr(\"class\", style[\"line\"])\n\t\t\t\t\t.attr(\"d\", (d)=>{\n\t\t\t\t\t\tvar path = line(d);\n\t\t\t\t\t\t// Fix issue in Chrome on Mac and Surface where\n\t\t\t\t\t\t// path points are not rendererd if it's a single point \n\t\t\t\t\t\tif (path && path.split(\",\").length == 2){\n\t\t\t\t\t\t\treturn path + \" \" + path;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn path;\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\t\n\n\t}\n\n\t/**\n\t * @private\n\t * Splits given array into multiple in case there is null in value\n\t * @param {Array} data \n\t */\n\t_getGroupedData(data){\n\t\tlet group = [];\n\t\tconst result = [group];\n\t\t\n\t\tdata.forEach(item=>{\n\t\t\tif (item.value === null){\n\t\t\t\tgroup = [];\n\t\t\t\tresult.push(group);\n\t\t\t} else {\n\t\t\t\tgroup.push(item);\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Line UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./LineDefaults\";\nimport LineData from \"./LineData\";\nimport LineRenderer from \"./LineRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main Line class\n * @param {Object} options\n */\nclass Line {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Line width\n\t\t */\n\t\tthis._options.lineWidth = getOptionValue(options.lineWidth, Defaults.LINE_WIDTH);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Dot size\n\t\t */\n\t\tthis._options.dotSize = getOptionValue(options.dotSize, Defaults.DOT_SIZE);\t\t\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Line color \n\t\t */\n\t\tthis._options.lineColor = getOptionValue(options.lineColor, Defaults.LINE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Line colors \n\t\t */\n\t\tthis._options.lineColors = getOptionValue(options.lineColors, Defaults.LINE_COLORS);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Line opacity \n\t\t */\n\t\tthis._options.lineOpacity = getOptionValue(options.lineOpacity, Defaults.LINE_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill color \n\t\t */\n\t\tthis._options.fillColor = getOptionValue(options.fillColor, Defaults.FILL_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill colors\n\t\t */\n\t\tthis._options.fillColors = getOptionValue(options.fillColors, Defaults.FILL_COLORS);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Fill opacity\n\t\t */\n\t\tthis._options.fillOpacity = getOptionValue(options.fillOpacity, Defaults.FILL_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.axisColor = getOptionValue(options.axisColor, Defaults.AXIS_COLOR);\t\t\n\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.zeroLineColor = getOptionValue(options.zeroLineColor, Defaults.ZERO_LINE_COLOR);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Vertical spacing\n\t\t */\n\t\tthis._options.verticalSpacing = getOptionValue(options.verticalSpacing, this._options.height / 4);\t\t\n\t\t\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * LineRenderer\n\t\t */\n\t\tthis._lineRenderer = new LineRenderer(this._options);\n\n\t\tthis._lineRenderer.on(\"pointOver\", data=>{\n\t\t\tthis._observable.fire(\"pointOver\", data);\n\t\t})\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Line} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._lineRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._lineRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets multiple series of data\n\t * @param {Array[]} series\n\t * @returns {Line} returns this widget instance \n\t */\n\tsetSeries(series) {\n\t\treturn this.setData.apply(this, series);\n\t}\n\n\t/**\n\t * Sets line data\n\t * @param {...Array} series\n\t * @returns {Line} returns this widget instance \n\t */\n\tsetData(...series) {\n\t\tif (!this._lineRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar lineData = this._lineData = new LineData(series, this._options);\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + this._lineData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._lineRenderer.update(lineData);\n\n\t\treturn this;\n\t}\n}\n\nexport default Line;\n","\nexport const WIDTH = 360;\nexport const HEIGHT = 129;\nexport const LABEL_FONT_SIZE = 13;\nexport const TOOLTIP_FONT_SIZE = 11;\nexport const TOOLTIP_SYMBOL = '_circle';\nexport const ACTIVE_COLORS = [\"#49ace2\", \"#ca62dc\"];\nexport const DETAILS_HIDDEN = false;\nexport const MINMAX = \"sum\";\nexport const DUAL_VALUE = false;\nexport const ENABLE_BAR_HOVER = false;\nexport const ENABLE_BAR_TOGGLE = false;\nexport const FORMAT = \",f\";\nexport const BAR_HEIGHT = 43;\nexport const BAR_DISABLED = false;\nexport const HORIZONTAL_PADDING = 10;\nexport const STRIPE_HEIGHT = 5;\nexport const STRIPE_BACKGROUND_COLOR = \"#f0f0f0\";\nexport const TOOLTIP_SPACE = 7;\nexport const CORNER_ROUNDED = true;","export default class BarchartData {\n\n\tconstructor(\n\t\t_,\n\t\tdetailsData,\n\t\tbarsData\n\t) {\n\t\tif (typeof barsData === 'undefined') throw \"barsData is required parameter\";\n\n\t\tthis._detailsData = detailsData;\n\t\tthis._barsData = barsData;\n\t}\n\n\t/**\n\t * @param {BarchartData} barchartData\n\t */\n\tstatic copyAs(barchartData) {\n\t\treturn new BarchartData(\n\t\t\t{},\n\t\t\tbarchartData.details,\n\t\t\tbarchartData.bars\n\t\t);\n\t}\n\n\tget details() {\n\t\treturn this._detailsData;\n\t}\n\tset details(detailsData) {\n\t\tthis._detailsData = detailsData;\n\t}\n\n\tget bars() {\n\t\treturn this._barsData;\n\t}\n\tgetBar(index) {\n\t\treturn this._barsData[index];\n\t}\n\tsetBar(index, barData) {\n\t\tthis._barsData[index] = barData;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (minMax === \"sum\") {\n\n\t\t\tlet containsNegativeVal = false;\n\t\t\tlet containsPositiveVal = false;\n\t\t\tconst sum = this.bars.reduce((sum, bar) => {\n\t\t\t\tconst min = bar.calculateMinMax(minMax).min;\n\t\t\t\tconst max = bar.calculateMinMax(minMax).max;\n\t\t\t\tif (min < 0) containsNegativeVal = true;\n\t\t\t\tif (max > 0) containsPositiveVal = true;\n\t\t\t\treturn sum + Math.max(Math.abs(min), Math.abs(max));\n\t\t\t}, 0);\n\n\t\t\treturn {\n\t\t\t\tmin: containsNegativeVal ? -sum : 0,\n\t\t\t\tmax: containsPositiveVal ? sum : 0\n\t\t\t}\n\n\t\t} else if (minMax === \"auto\") {\n\n\t\t\treturn {\n\t\t\t\tmin: this.bars.reduce((min, bar) => Math.min(min, bar.calculateMinMax(minMax).min), 0),\n\t\t\t\tmax: this.bars.reduce((max, bar) => Math.max(max, bar.calculateMinMax(minMax).max), 0)\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn minMax;\n\t\t}\n\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\treturn this.bars.reduce((max, bar) => Math.max(max, bar.getPrecision(precision)), 0)\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n}","export default class DetailsData {\n\n\tconstructor(\n\t\t{\n\t\t\tlabel,\n\t\t\tdisabled\n\t\t},\n\t\ttooltips\n\t) {\n\t\tif (typeof label === 'undefined') throw \"label is required parameter\";\n\n\t\tthis._label = label;\n\t\tthis._disabled = disabled;\n\t\tthis._tooltips = tooltips;\n\t}\n\n\t/**\n\t * @param {DetailsData} detailsData\n\t */\n\tstatic copyAs(detailsData) {\n\t\treturn new DetailsData(\n\t\t\t{\n\t\t\t\tlabel: detailsData.label,\n\t\t\t\tdisabled: detailsData.disabled\n\t\t\t},\n\t\t\tdetailsData.tooltips,\n\t\t);\n\t}\n\n\tget label() {\n\t\treturn this._label;\n\t}\n\tset label(label) {\n\t\tthis._label = label;\n\t}\n\n\tget tooltips() {\n\t\treturn this._tooltips;\n\t}\n\tgetTooltip(index) {\n\t\treturn this._tooltips[index];\n\t}\n\taddTooltip(tooltipData) {\n\t\tif (typeof this._tooltips === 'undefined') {\n\t\t\tthis._tooltips = [];\n\t\t}\n\t\tthis._tooltips.push(tooltipData);\n\t}\n\tsetTooltip(index, tooltipData) {\n\t\tthis._tooltips[index] = tooltipData;\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\tset disabled(disabled) {\n\t\tthis._disabled = disabled;\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\tif (!this.tooltips) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn this.tooltips.reduce((max, tooltip) => Math.max(max, tooltip.getPrecision()), 0);\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n}","\nexport default class TooltipData {\n\n\tconstructor(\n\t\t{\n\t\t\ttext,\n\t\t\tsymbol,\n\t\t\tcolor\n\t\t}\n\t) {\n\t\tif (typeof text === 'undefined') throw \"text is required parameter\";\n\t\tthis._symbol = symbol;\n\t\tthis._color = color;\n\t\tthis._text = text;\n\t}\n\n\t/**\n\t * @param {TooltipData} tooltipData\n\t */\n\tstatic copyAs(tooltipData) {\n\t\treturn new TooltipData({\n\t\t\ttext: tooltipData.text,\n\t\t\tsymbol: tooltipData.symbol,\n\t\t\tcolor: tooltipData.color\n\t\t});\n\t}\n\n\tget symbol() {\n\t\treturn this._symbol;\n\t}\n\tset symbol(symbol) {\n\t\tthis._symbol = symbol;\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tget text() {\n\t\treturn this._text;\n\t}\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\tif (this.isNumber()) {\n\t\t\t\tconst str = this.text.toString();\n\t\t\t\tif (str.includes('.')) {\n\t\t\t\t\treturn str.split(\".\")[1].length;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n\tisNumber() {\n\t\treturn !isNaN(parseFloat(this.text)) && isFinite(this.text);\n\t}\n\n}","\nexport default class BarData {\n\n\tconstructor(\n\t\t{\n\t\t\tdisabled,\n\t\t\thighlighted\n\t\t},\n\t\tdetailsData,\n\t\tstripesData\n\t) {\n\t\tif (typeof stripesData === 'undefined') throw \"stripesData is required parameter\";\n\n\t\tthis._disabled = disabled;\n\t\tthis._highlighted = highlighted;\n\t\tthis._detailsData = detailsData;\n\t\tthis._stripesData = stripesData;\n\t}\n\n\t/**\n\t * @param {BarData} barData\n\t */\n\tstatic copyAs(barData) {\n\t\treturn new BarData(\n\t\t\t{\n\t\t\t\tdisabled: barData.disabled,\n\t\t\t\thighlighted: barData.highlighted\n\t\t\t},\n\t\t\tbarData.details,\n\t\t\tbarData.stripes\n\t\t);\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\tset disabled(disabled) {\n\t\tthis._disabled = disabled;\n\t}\n\n\tget highlighted() {\n\t\treturn this._highlighted;\n\t}\n\tset highlighted(highlighted) {\n\t\tthis._highlighted = highlighted;\n\t}\n\n\tget details() {\n\t\treturn this._detailsData;\n\t}\n\tset details(detailsData) {\n\t\tthis._detailsData = detailsData;\n\t}\n\n\tget stripes() {\n\t\treturn this._stripesData;\n\t}\n\tgetStripe(index) {\n\t\treturn this._stripesData[index];\n\t}\n\tsetStripe(index, stripeData) {\n\t\tthis._stripesData[index] = stripeData;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (minMax === \"sum\") {\n\n\t\t\tlet containsNegativeVal = false;\n\t\t\tlet containsPositiveVal = false;\n\t\t\tconst absMax = this.stripes.reduce((sum, stripe) => {\n\t\t\t\tconst min = stripe.calculateMinMax(minMax).min;\n\t\t\t\tconst max = stripe.calculateMinMax(minMax).max;\n\t\t\t\tif (min < 0) containsNegativeVal = true;\n\t\t\t\tif (max > 0) containsPositiveVal = true;\n\t\t\t\treturn sum + Math.max(Math.abs(min), Math.abs(max))\n\t\t\t}, 0);\n\n\t\t\treturn {\n\t\t\t\tmin: containsNegativeVal ? -absMax : 0,\n\t\t\t\tmax: containsPositiveVal ? absMax : 0\n\t\t\t}\n\n\t\t} else if (minMax === \"auto\") {\n\n\t\t\treturn {\n\t\t\t\tmin: this.stripes.reduce((min, stripe) => Math.min(min, stripe.calculateMinMax(minMax).min), 0),\n\t\t\t\tmax: this.stripes.reduce((max, stripe) => Math.max(max, stripe.calculateMinMax(minMax).max), 0)\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn minMax;\n\t\t}\n\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (typeof this.details === 'undefined') {\n\t\t\treturn 0;\n\t\t}\n\t\tif (this.details === null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.details.getPrecision(precision);\n\t}\n\n}","\nexport default class StripeData {\n\n\tconstructor(\n\t\t{\n\t\t\tvalue,\n\t\t\tcolor,\n\t\t\tright: {\n\t\t\t\tvalue: leftValue,\n\t\t\t\tcolor: leftColor\n\t\t\t} = {},\n\t\t\tleft: {\n\t\t\t\tvalue: rightValue,\n\t\t\t\tcolor: rightColor\n\t\t\t} = {}\n\t\t}\n\t) {\n\t\tif (typeof value === 'undefined') {\n\t\t\tif (typeof leftValue === 'undefined') throw \"value or leftValue is required parameter\";\n\t\t\tif (typeof rightValue === 'undefined') throw \"value or rightValue is required parameter\";\n\n\t\t\tthis._right = {\n\t\t\t\tvalue: leftValue,\n\t\t\t\tcolor: leftColor\n\t\t\t};\n\t\t\tthis._left = {\n\t\t\t\tvalue: rightValue,\n\t\t\t\tcolor: rightColor\n\t\t\t}\n\t\t} else {\n\t\t\tthis._value = value;\n\t\t\tthis._color = color;\n\t\t}\n\t}\n\n\t/**\n\t * @param {StripeData} stripeData\n\t */\n\tstatic copyAs(stripeData) {\n\t\tif (stripeData.dual) {\n\t\t\treturn new StripeData({\n\t\t\t\tright: stripeData.right,\n\t\t\t\tleft: stripeData.left\n\t\t\t});\n\t\t} else {\n\t\t\treturn new StripeData({\n\t\t\t\tvalue: stripeData.value,\n\t\t\t\tcolor: stripeData.color,\n\t\t\t});\n\t\t}\n\t}\n\n\tget dual() {\n\t\treturn (typeof this._value === 'undefined');\n\t}\n\n\tget value() {\n\t\treturn this._value;\n\t}\n\tset value(value) {\n\t\tthis._value = value;\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tget left() {\n\t\treturn this._left;\n\t}\n\tset left(leftData) {\n\t\tthis._left = leftData;\n\t}\n\n\tget right() {\n\t\treturn this._right;\n\t}\n\tset right(rightData) {\n\t\tthis._right = rightData;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (this.dual) {\n\t\t\tif (minMax === \"sum\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.left.value, this.right.value),\n\t\t\t\t\tmax: Math.max(0, this.left.value + this.right.value)\n\t\t\t\t}\n\t\t\t} else if (minMax === \"auto\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.left.value, this.right.value),\n\t\t\t\t\tmax: Math.max(0, this.left.value, this.right.value)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn minMax;\n\t\t\t}\n\n\t\t} else {\n\t\t\tif (minMax === \"sum\" || minMax === \"auto\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.value),\n\t\t\t\t\tmax: Math.max(0, this.value)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn minMax;\n\t\t\t}\n\t\t}\n\t}\n\n}","import BarchartData from \"./data/BarchartData\";\nimport DetailsData from \"./data/DetailsData\";\nimport TooltipData from \"./data/TooltipData\";\nimport BarData from \"./data/BarData\";\nimport StripeData from \"./data/StripeData\";\n\nclass JsonDataConverter {\n\n\tconvert(barchartJsonData) {\n\n\t\tlet detailsData;\n\t\tif (typeof barchartJsonData.details !== 'undefined') {\n\t\t\tlet tooltipsData;\n\t\t\tif (typeof barchartJsonData.details.tooltips !== 'undefined') {\n\t\t\t\ttooltipsData = barchartJsonData.details.tooltips.map(\n\t\t\t\t\ttooltipJsonData => new TooltipData(tooltipJsonData)\n\t\t\t\t);\n\t\t\t}\n\t\t\tdetailsData = new DetailsData(barchartJsonData.details, tooltipsData);\n\t\t}\n\n\t\tconst barsData = barchartJsonData.bars.map(barJsonData => {\n\n\t\t\tlet detailsData;\n\t\t\tif (typeof barJsonData.details !== 'undefined') {\n\t\t\t\tlet tooltipsData;\n\t\t\t\tif (typeof barJsonData.details.tooltips !== 'undefined') {\n\t\t\t\t\ttooltipsData = barJsonData.details.tooltips.map(\n\t\t\t\t\t\ttooltipJsonData => new TooltipData(tooltipJsonData)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tdetailsData = new DetailsData(barJsonData.details, tooltipsData);\n\t\t\t}\n\n\t\t\tconst stripesData = barJsonData.stripes.map(stripeJsonData => new StripeData(stripeJsonData));\n\n\t\t\treturn new BarData(barJsonData, detailsData, stripesData);\n\t\t});\n\n\t\tconst barchartData = new BarchartData(barchartJsonData, detailsData, barsData);\n\n\t\treturn barchartData;\n\n\t}\n\n}\n\nexport default JsonDataConverter;\n","import style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport Observable from \"../../utils/Observable\";\nimport JsonDataConverter from \"../JsonDataConverter\";\n\nlet MASK_INDEX = 0;\n\nclass Component {\n\n\tconstructor(\n\t\twidth,\n\t\theight,\n\t\tclassName = \"component\",\n\t\talignRight = false,\n\t\talignBottom = false\n\t) {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tthis._container = null;\n\t\tthis._maskIndex = MASK_INDEX++;\n\t\tthis._className = className;\n\t\tthis._observable = new Observable([\n\t\t\t\"enter\",\n\t\t\t\"leave\",\n\t\t\t\"click\"\n\t\t]);\n\t\tthis._alignRight = alignRight;\n\t\tthis._alignBottom = alignBottom;\n\n\t\tthis._data = null;\n\t}\n\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\n\n\tget width() {\n\t\treturn this._width;\n\t}\n\n\tget height() {\n\t\treturn this._height;\n\t}\n\n\tget className() {\n\t\treturn this._className;\n\t}\n\n\tget container() {\n\t\treturn this._container;\n\t}\n\n\tget alignRight() {\n\t\treturn this._alignRight;\n\t}\n\n\tget alignBottom() {\n\t\treturn this._alignBottom;\n\t}\n\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\tset width(value) {\n\t\tthis._width = value;\n\t\tif (this.isRendered()) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"width\", value);\n\t\t}\n\t\tif (this.alignRight) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"x\", -value);\n\t\t}\n\t}\n\n\tset height(value) {\n\t\tthis._height = value;\n\t\tif (this.isRendered()) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"height\", value);\n\t\t}\n\t\tif (this.alignBottom) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"y\", -value);\n\t\t}\n\t}\n\n\t_renderContainer(selector, x = 0, y = 0){\n\n\t\treturn d3.select(selector).append(\"g\")\n\t\t\t.attr(\"class\", style[this.className])\n\t\t\t.attr(\"transform\", `translate(${x}, ${y})`)\n\n\t}\n\n\trender(selector, x = 0, y = 0, index = 0){\n\t\tthis.destroy();\n\n\t\tthis._container = this._renderContainer(selector, x, y);\n\n\t\tthis._container.datum(index);\n\n\t\tthis._container\n\t\t\t.on(\"click\", (index) => {\n\t\t\t\tthis._observable.fire(\"click\", index)\n\t\t\t})\n\t\t\t.on(\"mouseenter\", (index) => {\n\t\t\t\tthis._observable.fire(\"enter\", index)\n\t\t\t})\n\t\t\t.on(\"mouseleave\", (index) => {\n\t\t\t\tthis._observable.fire(\"leave\", index)\n\t\t\t});\n\n\t\tif (!this._container) {\n\t\t\tthrow `Component ${this._className} was not rendered. Check your selector: ${selector}`;\n\t\t}\n\n\t\t// clickable area\n\t\tconst clickableArea = this._container.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"clickable-area\"])\n\t\t\t.attr(\"fill\", \"transparent\")\n\t\t\t.attr(\"width\", this.width)\n\t\t\t.attr(\"height\", this.height);\n\n\t\tif (this.alignBottom) {\n\t\t\tclickableArea.attr(\"y\", -this.height);\n\t\t}\n\t\tif (this.alignRight) {\n\t\t\tclickableArea.attr(\"x\", -this.width);\n\t\t}\n\n\t\tthis._render(index);\n\n\t\treturn this;\n\t}\n\n\t_render(index){\n\t\t// prepared to be implemented by subclasses\n\t}\n\n\tdestroy(){\n\t\tif (this.isRendered()) {\n\t\t\tthis.clearData();\n\t\t\tthis._container.datum(null);\n\t\t\tthis._container.remove();\n\t\t\tthis._container = null;\n\t\t}\n\t\treturn this;\n\t}\n\n\tisRendered(){\n\t\treturn this._container !== null;\n\t}\n\n\tsetData(data) {\n\t\tif (!this.isRendered()) {\n\t\t\tthrow \"Can't call setData() when component is not rendered, please call .render() first.\"\n\t\t}\n\n\t\t// Is plain object = not class => convert\n\t\tif (data.constructor.name === \"Object\") {\n\t\t\tdata = new JsonDataConverter().convert(data);\n\t\t}\n\n\t\tthis.clearData();\n\t\tthis._data = data;\n\t\tthis._setData(data);\n\t\treturn this;\n\t}\n\n\tclearData() {\n\t\tif (!this.isRendered()) {\n\t\t\tthrow \"Can't call clearData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\t\tthis._clearData();\n\t\tthis._data = null;\n\t\treturn this;\n\t}\n\n\t_setData(data) {\n\t\t// prepared to be implemented by subclasses\n\t}\n\n\t_clearData() {\n\t\t// prepared to be implemented by subclasses\n\t}\n}\n\nexport default Component;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\n\nclass Tooltip extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\tfontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\twidth = fontSize,\n\t\t\theight = fontSize,\n\t\t\tsymbol,\n\t\t\tactiveColor = Defaults.ACTIVE_COLORS[0],\n\t\t\tformat = Defaults.FORMAT,\n\t\t\tspace = Defaults.TOOLTIP_SPACE\n\t\t}\n\t) {\n\t\tsuper(width, height, \"tooltip\", true, true);\n\t\tthis._fontSize = fontSize;\n\t\tthis._symbol = symbol;\n\t\tthis._activeColor = activeColor;\n\t\tthis._format = format;\n\t\tthis._space = space;\n\n\t\tthis._canvas;\n\t}\n\n\t_render() {\n\n\t\tthis.container.append(\"text\")\n\t\t\t.text(\"-\")\n\t\t\t.attr(\"class\", style[\"tooltip-text\"])\n\t\t\t.attr(\"text-anchor\",\"end\")\n\t\t\t.attr(\"font-size\", this.fontSize);\n\n\t\tif (d3.select(\".text-width-helper\").empty()) {\n\t\t\tthis._canvas = d3.select(\"body\")\n\t\t\t\t.append('canvas')\n\t\t\t\t.attr(\"class\", \"text-width-helper\")\n\t\t\t\t.style(\"display\",\"none\")\n\t\t\t\t.text(\"Helper element for computing text width\");\n\t\t} else {\n\t\t\tthis._canvas = d3.select(\".text-width-helper\");\n\t\t}\n\n\t}\n\n\t/**\n\t * @param {TooltipData} data\n\t */\n\t_setData(data) {\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = data.getPrecision(\"max\");\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tlet text = data.text;\n\t\tif (data.isNumber()) {\n\t\t\ttext = d3.format(format)(data.text);\n\t\t}\n\n\t\tconst tooltipText = this.container.select(`.${style[\"tooltip-text\"]}`)\n\t\t\t.text(text);\n\n\t\tlet tooltipWidth = this._calculateTextWidth(tooltipText);\n\n\t\tif (data.symbol || this.symbol) {\n\n\t\t\tlet color;\n\t\t\tif (data.color instanceof Array) {\n\t\t\t\tthis._renderTwoColoredFill(data.color[0], data.color[1]);\n\t\t\t\tcolor = \"url(#two-colored-symbol-\"+this._maskIndex+\")\";\n\t\t\t} else if (this.activeColor instanceof Array) {\n\t\t\t\tthis._renderTwoColoredFill(this.activeColor[0], this.activeColor[1]);\n\t\t\t\tcolor = \"url(#two-colored-symbol-\"+this._maskIndex+\")\";\n\t\t\t} else {\n\t\t\t\tcolor = data.color ? data.color : this.activeColor;\n\t\t\t}\n\n\t\t\tconst symbol = data.symbol ? data.symbol : this.symbol;\n\n\t\t\tif (symbol === \"_circle\") {\n\n\t\t\t\tthis.container.append(\"circle\")\n\t\t\t\t\t.attr(\"r\", 3)\n\t\t\t\t\t.attr(\"fill\", color)\n\t\t\t\t\t.attr(\"cx\", -tooltipWidth - this.space)\n\t\t\t\t\t.attr(\"cy\", -this.fontSize/3);\n\n\t\t\t\ttooltipWidth += 6 + this.space;\n\n\t\t\t} else {\n\n\t\t\t\tconst tooltipSymbol = this.container.append(\"text\")\n\t\t\t\t\t.text(data.symbol ? data.symbol : this.symbol)\n\t\t\t\t\t.attr(\"class\", style[\"symbol\"])\n\t\t\t\t\t.attr(\"text-anchor\",\"end\")\n\t\t\t\t\t.attr(\"font-size\", this.fontSize)\n\t\t\t\t\t.attr(\"fill\", color)\n\t\t\t\t\t.attr(\"x\", -tooltipWidth - this.space);\n\n\t\t\t\ttooltipWidth += this._calculateTextWidth(tooltipSymbol) + this.space;\n\t\t\t}\n\n\t\t}\n\t\tthis.width = tooltipWidth;\n\t}\n\n\t_calculateTextWidth(element) {\n\n\t\tconst context = this._canvas.node().getContext(\"2d\");\n\n\t\tconst style = window.getComputedStyle(element.node());\n\t\tconst fontStyle = style.getPropertyValue(\"font-style\");\n\t\tconst fontVariant = style.getPropertyValue(\"font-variant\");\n\t\tconst fontWeight = style.getPropertyValue(\"font-weight\");\n\t\tconst fontStrech = style.getPropertyValue(\"font-strech\");\n\t\tconst fontSize = style.getPropertyValue(\"font-size\");\n\t\tconst fontFamily = style.getPropertyValue(\"font-family\");\n\t\tcontext.font = `${fontStyle} ${fontVariant} ${fontWeight} ${fontStrech} ${fontSize} ${fontFamily}`;\n\n\t\tvar metrics = context.measureText(element.text());\n\t\treturn metrics.width;\n\t}\n\n\t_renderTwoColoredFill(color1, color2) {\n\n\t\tconst twoColoredFill = this.container.append(\"pattern\")\n\t\t\t.attr(\"id\", \"two-colored-symbol-\"+this._maskIndex)\n\t\t\t.attr(\"width\", \"1\")\n\t\t\t.attr(\"height\", \"1\")\n\t\t\t.attr(\"patternContentUnits\", \"objectBoundingBox\");\n\n\t\ttwoColoredFill.append('rect')\n\t\t\t.attr('fill', color1)\n\t\t\t.attr(\"width\", \"1\")\n\t\t\t.attr(\"height\", \"1\");\n\n\t\ttwoColoredFill.append('path')\n\t\t\t.attr('fill', color2)\n\t\t\t.attr('d', 'M0,0 L1,0 L1,1 Z');\n\t}\n\n\t_clearData() {\n\t\tthis.container.select(`.${style[\"tooltip-text\"]}`)\n\t\t\t.text(\"-\");\n\n\t\tthis.container.select(`.${style[\"symbol\"]}`).remove()\n\t}\n\n\tget fontSize() {\n\t\treturn this._fontSize;\n\t}\n\n\tget symbol() {\n\t\treturn this._symbol;\n\t}\n\n\tget activeColor() {\n\t\treturn this._activeColor;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget space() {\n\t\treturn this._space;\n\t}\n}\n\nexport default Tooltip;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport Tooltip from \"./Tooltip\";\n\nclass Details extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = labelFontSize + 10,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tformat = Defaults.FORMAT,\n\t\t}\n\t) {\n\t\tsuper(width, height, \"details\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._format = format;\n\n\t\tthis._tooltips;\n\t\tthis._tooltipsBackground;\n\t\tthis._label;\n\n\t\tthis._tipWrapper;\n\t\tthis._tip;\n\t\tthis._canvas;\n\t}\n\n\t_render() {\n\n\t\tthis._label = this.container.append(\"text\")\n\t\t\t.text(\"\")\n\t\t\t.attr(\"class\", style[\"label\"])\n\t\t\t.attr(\"x\", Defaults.HORIZONTAL_PADDING)\n\t\t\t.attr(\"y\", this.labelFontSize)\n\t\t\t.attr(\"font-size\", this.labelFontSize);\n\n\t\tconst gradient = this.container.append(\"linearGradient\")\n\t\t\t.attr(\"id\", \"tooltips-background\");\n\n\t\tgradient.append(\"stop\")\n\t\t\t.attr(\"offset\", \"0%\")\n\t\t\t.attr(\"stop-color\", \"white\")\n\t\t\t.attr(\"stop-opacity\", \"0\");\n\t\tgradient.append(\"stop\")\n\t\t\t.attr(\"offset\", \"100%\")\n\t\t\t.attr(\"stop-color\", \"white\")\n\t\t\t.attr(\"stop-opacity\", \"1\");\n\n\t\tif (d3.select(\".text-width-helper\").empty()) {\n\t\t\tthis._canvas = d3.select(\"body\")\n\t\t\t\t.append('canvas')\n\t\t\t\t.attr(\"class\", \"text-width-helper\")\n\t\t\t\t.style(\"display\",\"none\")\n\t\t\t\t.text(\"Helper element for computing text width\");\n\t\t} else {\n\t\t\tthis._canvas = d3.select(\".text-width-helper\");\n\t\t}\n\n\t\tif (d3.select('.' + style[\"tip\"]).empty()) {\n\t\t\tthis._tipWrapper = d3.select(\"body\").append('span')\n\t\t\t\t.attr(\"class\", style['tip-wrapper']);\n\t\t\tthis._tip = this._tipWrapper.append('span')\n\t\t\t\t.attr(\"class\", style['tip']);\n\t\t} else {\n\t\t\tthis._tipWrapper = d3.select('.' + style[\"tip-wrapper\"]);\n\t\t\tthis._tip = d3.select('.' + style[\"tip\"]);\n\t\t}\n\t}\n\n\t/**\n\t * @param {DetailsData} data\n\t */\n\t_setData(data) {\n\t\tthis._clearData();\n\n\t\tthis._label.text(data.label);\n\n\t\tthis.container.classed(style['details-disabled'], data.disabled);\n\n\t\tif (data.tooltips) {\n\t\t\tthis._createTooltips(data);\n\t\t\tthis._renderAndSetTooltipsData(data.tooltips);\n\t\t}\n\t}\n\n\t/**\n\t * @param {DetailsData} detailsData\n\t */\n\t_createTooltips(detailsData) {\n\t\tconst tooltipsData = detailsData.tooltips;\n\t\tconst tooltipsReversed = tooltipsData.slice();\n\t\ttooltipsReversed.reverse();\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = detailsData.getPrecision(\"max\");\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tthis._tooltips = tooltipsData.map((_, index) => new Tooltip({\n\t\t\tfontSize: this.tooltipFontSize,\n\t\t\tsymbol: tooltipsData.length>1 ? this.tooltipSymbol : undefined,\n\t\t\tactiveColor: this.activeColors[index % this.activeColors.length],\n\t\t\tformat: format\n\t\t}));\n\t}\n\n\t/**\n\t * @param {TooltipData[]} tooltipsData\n\t */\n\t_renderAndSetTooltipsData(tooltipsData) {\n\t\tlet previousTooltipX = this.width - Defaults.HORIZONTAL_PADDING;\n\t\tthis._tooltips.forEach((_, index) => {\n\t\t\tconst reversedIndex = this._tooltips.length - 1 - index;\n\t\t\tconst tooltipReversed = this._tooltips[reversedIndex];\n\t\t\tconst tooltipData = tooltipsData[reversedIndex];\n\n\t\t\ttooltipReversed.render(this.container.node(), previousTooltipX, this.labelFontSize, reversedIndex);\n\t\t\ttooltipReversed.setData(tooltipData);\n\n\t\t\tpreviousTooltipX -= tooltipReversed.width + 24;\n\t\t});\n\n\t\tif (this._calculateTextWidth(this._label) > previousTooltipX + 12) {\n\t\t\tthis._handleLongLabel(previousTooltipX);\n\t\t}\n\t}\n\n\t_handleLongLabel(maxWidth) {\n\n\t\t// render white background under values\n\t\tthis._tooltipsBackground = this.container\n\t\t\t.insert(\"g\", \"g.\" + style[\"tooltip\"]);\n\n\t\tconst gradientWidth = 40;\n\t\tconst xOffset = -10;\n\t\tthis._tooltipsBackground\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"x\", maxWidth - xOffset)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", this.width - maxWidth + xOffset)\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.attr(\"fill\", \"white\");\n\t\tthis._tooltipsBackground\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"x\", maxWidth - xOffset - gradientWidth)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", gradientWidth + 1) // 1 px extra looks better\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.attr(\"fill\", \"url(#tooltips-background)\");\n\n\t\t// handle label tooltips\n\t\tthis._label.on(\"mouseenter\", () => {\n\t\t\tconst right = document.documentElement.getBoundingClientRect().width\n\t\t\t\t- this._getOffset(this._label.node()).left;\n\t\t\tthis._tipWrapper\n\t\t\t\t.style(\"right\", right + \"px\")\n\t\t\t\t.style(\"top\", this._getOffset(this._label.node()).top + \"px\");\n\t\t\tthis._tip\n\t\t\t\t.text(this._label.text())\n\t\t\t\t.style(\"transition-delay\", \".5s\")\n\t\t\t\t.style(\"transform\", \"scale(1)\")\n\t\t});\n\t\tthis._label.on(\"mouseleave\", () => {\n\t\t\tthis._tip\n\t\t\t\t.style(\"transition-delay\", \"0s\")\n\t\t\t\t.style(\"transform\", \"scale(0)\");\n\t\t});\n\t}\n\n\t_getOffset(el) {\n\t\tconst rect = el.getBoundingClientRect();\n\t\treturn {\n\t\t\tleft: rect.left + window.scrollX,\n\t\t\ttop: rect.top + window.scrollY\n\t\t};\n\t}\n\n\t_calculateTextWidth(element) {\n\n\t\tconst context = this._canvas.node().getContext(\"2d\");\n\n\t\tconst style = window.getComputedStyle(element.node());\n\t\tconst fontStyle = style.getPropertyValue(\"font-style\");\n\t\tconst fontVariant = style.getPropertyValue(\"font-variant\");\n\t\tconst fontWeight = style.getPropertyValue(\"font-weight\");\n\t\tconst fontStrech = style.getPropertyValue(\"font-strech\");\n\t\tconst fontSize = style.getPropertyValue(\"font-size\");\n\t\tconst fontFamily = style.getPropertyValue(\"font-family\");\n\t\tcontext.font = `${fontStyle} ${fontVariant} ${fontWeight} ${fontStrech} ${fontSize} ${fontFamily}`;\n\n\t\tvar metrics = context.measureText(element.text());\n\t\treturn metrics.width;\n\t}\n\n\t_clearData() {\n\t\tthis.container.select(`.${style[\"label\"]}`).text(\"-\");\n\t\tthis.container.selectAll(`.${style[\"tooltip\"]}`).remove();\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\tset activeColors(activeColors) {\n\t\tthis._activeColors = activeColors;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\tset format(format) {\n\t\tthis._format = format;\n\t}\n\n\tget tooltips() {\n\t\treturn this._tooltips;\n\t}\n}\n\nexport default Details;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport * as d3 from \"d3\";\nimport style from \"../Barchart.css\";\n\nlet COLOR_PATTERN_INDEX = 0;\n\nclass Stripe extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.STRIPE_HEIGHT,\n\t\t\tbackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\ttopCornerRounded = Defaults.CORNER_ROUNDED,\n\t\t\tbottomCornerRounded = Defaults.CORNER_ROUNDED,\n\t\t\tcondensed = Defaults.DETAILS_HIDDEN\n\t\t}) {\n\t\tsuper(width, height, \"stripe\");\n\t\tthis._backgroundColor = backgroundColor;\n\t\tthis._activeColors = activeColors;\n\t\tthis._dualValue = dualValue;\n\t\tthis._minMax = minMax;\n\t\tthis._topCornerRounded = topCornerRounded;\n\t\tthis._bottomCornerRounded = bottomCornerRounded;\n\t\tthis._condensed = condensed;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget backgroundColor() {\n\t\treturn this._backgroundColor;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget topCornerRounded() {\n\t\treturn this._topCornerRounded;\n\t}\n\n\tget bottomCornerRounded() {\n\t\treturn this._bottomCornerRounded;\n\t}\n\n\tget condensed() {\n\t\treturn this._condensed;\n\t}\n\n\t_render() {\n\n\t\tconst clipPath = this.container.append(\"clipPath\")\n\t\t\t.attr(\"id\", \"rounded-corners-\"+this._maskIndex);\n\n        if (this.topCornerRounded && this.bottomCornerRounded) {\n            clipPath\n                .append(\"rect\")\n                .attr(\"width\", this.width)\n                .attr(\"height\", this.height)\n                .attr(\"rx\", Math.min(this.width, this.height)/2)\n                .attr(\"ry\", Math.min(this.width, this.height)/2);\n        } else if (!this.topCornerRounded && !this.bottomCornerRounded) {\n            clipPath\n                .append(\"rect\")\n                .attr(\"width\", this.width)\n                .attr(\"height\", this.height);\n        } else {\n            clipPath\n                .append(\"rect\")\n                .attr(\"width\", this.width - 2*this.height)\n                .attr(\"height\", this.height)\n                .attr(\"x\", this.height);\n            if (this.topCornerRounded) {\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.height)\n                    .attr(\"cy\", this.height)\n                    .attr(\"r\", this.height);\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.width - this.height)\n                    .attr(\"cy\", this.height)\n                    .attr(\"r\", this.height);\n            }\n            if (this.bottomCornerRounded) {\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.height)\n                    .attr(\"cy\", 0)\n                    .attr(\"r\", this.height);\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.width - this.height)\n                    .attr(\"cy\", 0)\n                    .attr(\"r\", this.height);\n            }\n        }\n\n\t\tthis._renderProgress(0, this.width, this.backgroundColor, \"stripe-background\");\n\t}\n\n\t/**\n\t * @param {StripeData} data\n\t */\n\t_setData(data) {\n\n\t\tif (this.dualValue) {\n\n\t\t\tthis._renderStripe(0, this.width/2-0.5,\n\t\t\t\tdata.left.value,\n\t\t\t\tdata.left.color ? data.left.color : this.activeColors[1] ? this.activeColors[1] : this.activeColors[0],\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tthis._renderStripe(this.width/2+0.5, this.width,\n\t\t\t\tdata.right.value,\n\t\t\t\tdata.right.color ? data.right.color : this.activeColors[0],\n\t\t\t\tfalse\n\t\t\t);\n\n\t\t} else {\n\t\t\tthis._renderStripe(0, this.width, data.value, data.color ? data.color : this.activeColors[0]);\n\t\t}\n\t}\n\n\t_clearData() {\n\t\tthis.container.selectAll(style[\"progress\"]).remove();\n\t}\n\n\n\t_renderXBase(x) {\n\n\t\tthis.container.append(\"line\")\n\t\t\t.attr(\"x1\", x)\n\t\t\t.attr(\"x2\", x)\n\t\t\t.attr(\"y1\", 0)\n\t\t\t.attr(\"y2\", this.condensed ? -4 : -7)\n\t\t\t.attr(\"stroke\", \"#C9C9C9\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke-dasharray\", [1,2]);\n\n\t\tthis.container.append(\"line\")\n\t\t\t.attr(\"x1\", x)\n\t\t\t.attr(\"x2\", x)\n\t\t\t.attr(\"y1\", this.height)\n\t\t\t.attr(\"y2\", this.height + (this.condensed ? 4 : 7))\n\t\t\t.attr(\"stroke\", \"#C9C9C9\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke-dasharray\", [1,2]);\n\t}\n\n\t_renderStripe(x1, x2, value, color, alignRight = false) {\n\n\t\tconst axis = d3.scaleLinear()\n\t\t\t.range([x1, x2]);\n\n\t\tif (alignRight) {\n\t\t\taxis.domain([this.minMax.max, this.minMax.min]);\n\t\t} else {\n\t\t\taxis.domain([this.minMax.min, this.minMax.max]);\n\t\t}\n\n\t\tconst xBase = axis(0);\n\n\t\tif (this.minMax.min < 0 && this.minMax.max > 0) {\n\t\t\tthis._renderXBase(xBase);\n\t\t}\n\n\t\tif (alignRight === value < 0) {\n\n\t\t\tthis._renderProgress(xBase, axis(value), color);\n\n\t\t} else {\n\n\t\t\tthis._renderProgress(axis(value), xBase, color);\n\n\t\t}\n\n\t}\n\n\t_renderProgress(x1, x2, color, className = \"progress\") {\n\n\t\tif (color instanceof Array) {\n\t\t\tthis._renderTwoColoredFill(color[0], color[1]);\n\t\t}\n\n\t\tthis.container.append(\"rect\")\n\t\t\t.attr(\"fill\", color instanceof Array ? \"url(#two-colored-\"+this._maskIndex+\"-\"+COLOR_PATTERN_INDEX+\")\" : color)\n\t\t\t.attr(\"class\", style[className])\n\t\t\t.attr(\"x\", x1)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", x2-x1)\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.attr(\"transform\", \"translate(\" + 0 + \", \" + 0 + \")\")\n\t\t\t.attr(\"clip-path\", \"url(#rounded-corners-\"+this._maskIndex+\")\");\n\n\t}\n\n\t_renderTwoColoredFill(color1, color2) {\n\n\t\tCOLOR_PATTERN_INDEX++;\n\n\t\tconst twoColoredFill = this.container.append(\"pattern\")\n\t\t\t.attr(\"id\", \"two-colored-\"+this._maskIndex+\"-\"+COLOR_PATTERN_INDEX)\n\t\t\t.attr(\"width\", \"20\")\n\t\t\t.attr(\"height\", \"20\")\n\t\t\t.attr(\"patternUnits\", \"userSpaceOnUse\");\n\n\t\ttwoColoredFill.append('rect')\n\t\t\t.attr('fill', color1)\n\t\t\t.attr(\"width\", \"20\")\n\t\t\t.attr(\"height\", \"20\");\n\n\t\ttwoColoredFill.append('path')\n\t\t\t.attr('fill', color2)\n\t\t\t.attr('d', 'M20,0 L10,0 L20,10 Z');\n\t\ttwoColoredFill.append('path')\n\t\t\t.attr('fill', color2)\n\t\t\t.attr('d', 'M0,0 L20,20 L10,20 L0,10 Z');\n\t}\n\n\n}\n\nexport default Stripe;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport Details from \"./Details\";\nimport Stripe from \"./Stripe\";\nimport style from \"../Barchart.css\";\nimport DetailsData from \"../data/DetailsData\";\n\nclass Bar extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.BAR_HEIGHT,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\tdetailsHidden = Defaults.DETAILS_HIDDEN,\n\t\t\tdetailsHeight = labelFontSize + 10,\n\t\t\tenableHover = Defaults.ENABLE_BAR_HOVER,\n\t\t\tenableToggle = Defaults.ENABLE_BAR_TOGGLE,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tdisabled = Defaults.BAR_DISABLED,\n\t\t\tformat = Defaults.FORMAT,\n\t\t\tstripeBackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR\n\t\t}\n\t) {\n\t\tsuper(width, height, \"bar\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._minMax = minMax;\n\t\tthis._detailsHidden = detailsHidden;\n\t\tthis._detailsHeight = detailsHeight;\n\t\tthis._enableHover = enableHover;\n\t\tthis._enableToggle = enableToggle;\n\t\tthis._dualValue = dualValue;\n\t\tthis._disabled = disabled;\n\t\tthis._format = format;\n\t\tthis._stripeBackgroundColor = stripeBackgroundColor;\n\n\t\tthis._details;\n\t\tthis._stripes;\n\n\t\tthis._observable\n\t\t\t.add(\"disabled\");\n\t}\n\n\t_render() {\n\t\tif (!this.detailsHidden) {\n\t\t\tthis._createDetails();\n\t\t\tthis._renderDetails();\n\t\t}\n\n\t\tthis.container.classed(style['hover-enabled'], this.enableHover);\n\n\t\tif (this.enableToggle) {\n\t\t\tthis._doEnableToggle();\n\t\t}\n\t}\n\n\t/**\n\t * @param {BarData} data\n\t */\n\t_setData(data) {\n\t\tthis._disabled = data.disabled;\n\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\n\t\tthis.container.classed(style[\"bar-highlighted\"], data.highlighted);\n\n\t\tthis._setDetailsData(data.details);\n\n\t\tthis._createStripes(data);\n\t\tthis._renderStripes();\n\t\tthis._setStripesData(data);\n\t}\n\n\t_clearData() {\n\t\tif (!this.detailsHidden) {\n\t\t\tthis._details.clearData();\n\t\t}\n\t}\n\n\t_createDetails() {\n\t\tthis._details = new Details({\n\t\t\twidth: this.width,\n\t\t\theight: this.detailsHeight,\n\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\tactiveColors: this.activeColors,\n\t\t\tformat: this.format\n\t\t});\n\t}\n\n\t_renderDetails() {\n\t\tthis._details.render(this.container.node(), 0, 0);\n\t}\n\n\t_setDetailsData(detailsData) {\n\t\tif (this.details) {\n\t\t\tconst detailsDataDefault = DetailsData.copyAs(detailsData);\n\t\t\tthis.details.setData(detailsDataDefault);\n\t\t}\n\t}\n\n\t_createStripes(data) {\n\t\tconst minMax = data.calculateMinMax(this.minMax);\n\t\tthis._stripes = data.stripes.map((stripe, index) => {\n\t\t\tlet colors;\n\t\t\tif (data.stripes.length > 1) {\n\t\t\t\tcolors = [this.activeColors[index % this.activeColors.length]]\n\t\t\t} else {\n\t\t\t\tcolors = this.activeColors.slice();\n\t\t\t}\n\n\t\t\treturn new Stripe({\n\t\t\t\twidth: this.width,\n\t\t\t\tactiveColors: colors,\n\t\t\t\tdualValue: this.dualValue,\n\t\t\t\tminMax: minMax,\n\t\t\t\tbackgroundColor: this.stripeBackgroundColor,\n\t\t\t\ttopCornerRounded: index === 0,\n\t\t\t\tbottomCornerRounded: index === data.stripes.length-1,\n\t\t\t\tcondensed: this.detailsHidden\n\t\t\t})\n\t\t});\n\t}\n\n\t_renderStripes() {\n\t\tconst detailsHeight = this.detailsHidden ? 0 : this.detailsHeight;\n\t\tthis.stripes.forEach((stripe, index) => {\n\t\t\tstripe.render(this.container.node(), 0, detailsHeight + 5 * index, index);\n\t\t});\n\t}\n\n\t_setStripesData(data) {\n\t\tdata.stripes.forEach((stripeData, index) => this.stripes[index].setData(stripeData));\n\t}\n\n\t_doEnableToggle() {\n\t\tthis.container.attr(\"cursor\", \"pointer\");\n\t\tthis.on(\"click\", (index) => {\n\t\t\tthis._disabled = !this._disabled;\n\t\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\n\t\t\tthis._observable.fire(\"disabled\", index, this._disabled);\n\t\t});\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget detailsHidden() {\n\t\treturn this._detailsHidden;\n\t}\n\n\tget detailsHeight() {\n\t\treturn this._detailsHeight;\n\t}\n\n\tget enableToggle() {\n\t\treturn this._enableToggle;\n\t}\n\n\tget enableHover() {\n\t\treturn this._enableHover;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget stripeBackgroundColor() {\n\t\treturn this._stripeBackgroundColor;\n\t}\n\n\n\tget stripes() {\n\t\treturn this._stripes;\n\t}\n\n\tget details() {\n\t\treturn this._details;\n\t}\n\n}\n\nexport default Bar;\n","\nimport Doughnut from \"./doughnut/Doughnut\";\nimport Histogram from \"./histogram/Histogram\";\nimport Line from \"./line/Line\";\nimport Barchart from \"./barchart/components/Barchart\";\n\nexport default {\n\tBarchart:Barchart,\n\n    Doughnut:Doughnut,\n    Histogram:Histogram,\n    Line:Line\n}","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport Bar from \"./Bar\";\nimport Details from \"./Details\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport BarData from \"../data/BarData\";\nimport TooltipData from \"../data/TooltipData\";\nimport DetailsData from \"../data/DetailsData\";\nimport BarchartData from \"../data/BarchartData\";\n\nclass Barchart extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.HEIGHT,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\tdetailsVisible = Defaults.DETAILS_HIDDEN,\n\t\t\tdetailsHeight = labelFontSize + 10,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tbarHeight = Defaults.BAR_HEIGHT,\n\t\t\tenableBarHover = Defaults.ENABLE_BAR_HOVER,\n\t\t\tenableBarToggle = Defaults.ENABLE_BAR_TOGGLE,\n\t\t\tformat = Defaults.FORMAT,\n\t\t\tstripeBackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR\n\t\t}\n\t) {\n\t\tsuper(width, height, \"barchart\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._minMax = minMax;\n\t\tthis._detailsVisible = detailsVisible;\n\t\tthis._detailsHeight = detailsHeight;\n\t\tthis._dualValue = dualValue;\n\t\tthis._barHeight = barHeight;\n\t\tthis._enableBarHover = enableBarHover;\n\t\tthis._enableBarToggle = enableBarToggle;\n\t\tthis._format = format;\n\t\tthis._stripeBackgroundColor = stripeBackgroundColor;\n\n\t\tthis._details;\n\t\tthis._bars;\n\n\t\tthis._observable\n\t\t\t.add(\"barEnter\")\n\t\t\t.add(\"barLeave\")\n\t\t\t.add(\"barClick\")\n\t\t\t.add(\"barDisabled\")\n\t\t\t.add(\"barsEnter\")\n\t\t\t.add(\"barsLeave\");\n\n\t}\n\n\tisBarDisabled(index) {\n\t\treturn this.bars[index].disabled;\n\t}\n\n\tupdateData(updateFunction) {\n\t\tthis.setData(updateFunction(this.data));\n\t}\n\n\tupdateDetailsData(updateFunction) {\n\t\tthis.setDetailsData(updateFunction(this.details.data));\n\t}\n\n\tupdateBarData(index, updateFunction) {\n\t\tthis.setBarData(index, updateFunction(this.bars[index].data));\n\t}\n\n\tsetDetailsData(detailsData) {\n\t\tconst detailsDataDefault = DetailsData.copyAs(detailsData);\n\t\tthis.details.setData(detailsDataDefault);\n\t}\n\n\tsetBarData(index, barData) {\n\t\tconst barDataDefault = BarData.copyAs(barData);\n\n\t\tthis._setDefaultBarDetails(barData);\n\n\t\tthis.bars[index].setData(barDataDefault);\n\t}\n\n\t_setDefaultBarDetails(barData) {\n\n\t\tif (!barData.details) {\n\t\t\tbarData.details = new DetailsData({\n\t\t\t\tlabel: this.data.details.label\n\t\t\t});\n\t\t}\n\n\t\tif (typeof barData.details.tooltips === 'undefined') {\n\n\t\t\tbarData.stripes.forEach((stripeData, index) => {\n\n\t\t\t\tlet colors;\n\t\t\t\tif (barData.stripes.length > 1) {\n\t\t\t\t\tcolors = [this.activeColors[index % this.activeColors.length]]\n\t\t\t\t} else {\n\t\t\t\t\tcolors = this.activeColors.slice();\n\t\t\t\t}\n\n\t\t\t\tif (this.dualValue) {\n\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\n\t\t\t\t\t\ttext: stripeData.left.value,\n\t\t\t\t\t\tsymbol: this.tooltipSymbol,\n\t\t\t\t\t\tcolor: stripeData.left.color ? stripeData.left.color : (colors[1] ? colors[1] : colors[0])\n\t\t\t\t\t}));\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\n\t\t\t\t\t\ttext: stripeData.right.value,\n\t\t\t\t\t\tsymbol: this.tooltipSymbol,\n\t\t\t\t\t\tcolor: stripeData.right.color ? stripeData.right.color : colors[0]\n\t\t\t\t\t}));\n\t\t\t\t} else {\n\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\n\t\t\t\t\t\ttext: stripeData.value,\n\t\t\t\t\t\tsymbol: barData.stripes.length > 1 ? this.tooltipSymbol : undefined,\n\t\t\t\t\t\tcolor: stripeData.color ? stripeData.color : colors[0]\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t});\n\t\t}\n\n\t}\n\n\t_renderContainer(selector, x = 0, y = 0){\n\n\t\tthis._svgWrapper = d3.select(selector).append(\"svg\")\n\t\t\t.attr(\"class\", style[this.className])\n\t\t\t.attr(\"width\", this.width)\n\t\t\t.attr(\"height\", this.height);\n\n\t\tthis._svgWrapper.style({\n\t\t\t'position': 'relative',\n\t\t\t'left': x,\n\t\t\t'top': y\n\t\t});\n\n\t\treturn this._svgWrapper.append(\"g\")\n\t}\n\n\t_render() {\n\t\tif (this.detailsVisible) {\n\t\t\tthis._createDetails();\n\t\t\tthis._renderDetails();\n\t\t}\n\t}\n\n\t/**\n\t * @param {BarchartData} data\n\t */\n\t_setData(data) {\n\n\t\tdata.bars.forEach((barData) => this._setDefaultBarDetails(barData));\n\n\t\tif (this.detailsVisible) {\n\t\t\tthis._adjustDetails(data);\n\t\t\tthis.setDetailsData(data.details);\n\t\t}\n\n\t\tthis._adjustHeight(data);\n\n\t\tthis._createBars(data);\n\n\t\tthis._renderBars();\n\n\t\tdata.bars.forEach((barData, index) => this.setBarData(index, barData));\n\t}\n\n\t_clearData() {\n\t\tif (this.detailsVisible) {\n\t\t\tthis._details.clearData();\n\t\t}\n\t\tthis._container.selectAll(`.${style[\"bar\"]}`).remove();\n\t}\n\n\t_adjustDetails(data) {\n\t\tif (!this.details.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = data.getPrecision(\"max\");\n\t\t\tthis.details.format = spec.toString();\n\t\t}\n\n\t\tif (this.dualValue && data.details.tooltips && data.bars[0].stripes.length === 1) {\n\t\t\tthis.details.activeColors = this.details.activeColors.slice().reverse();\n\t\t}\n\t}\n\n\t_createDetails() {\n\n\t\tthis._details = new Details({\n\t\t\twidth: this.width,\n\t\t\theight: this.detailsHeight,\n\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\tactiveColors: this.activeColors,\n\t\t\tformat: this.format\n\t\t});\n\t}\n\n\t_renderDetails() {\n\t\tthis._details.render(this._container.node(), 0, 0);\n\t}\n\n\t_createBars(data) {\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = data.getPrecision(\"max\");\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tconst minMax = data.calculateMinMax(this.minMax);\n\n\t\tthis._bars = data.bars.map(() => new Bar({\n\t\t\twidth: this.width,\n\t\t\theight: this.barHeight,\n\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\tactiveColors: this.activeColors,\n\t\t\tdetailsHidden: this.detailsVisible,\n\t\t\tdetailsHeight: this.detailsHeight,\n\t\t\tdualValue: this.dualValue,\n\t\t\tenableToggle: this.enableBarToggle,\n\t\t\tenableHover: this.enableBarHover,\n\t\t\tminMax: minMax,\n\t\t\tformat: format,\n\t\t\tstripeBackgroundColor: this.stripeBackgroundColor\n\t\t}));\n\t}\n\n\t_renderBars() {\n\n\t\tconst barsContainer = this._container.append(\"g\")\n\t\t\t.on(\"mouseenter\", () => {\n\t\t\t\tthis._observable.fire(\"barsEnter\");\n\t\t\t})\n\t\t\t.on(\"mouseleave\", () => {\n\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\tthis.details.setData(this.data.details);\n\t\t\t\t}\n\t\t\t\tthis._observable.fire(\"barsLeave\");\n\t\t\t});\n\n\t\tthis.bars.forEach((bar, index) => {\n\n\t\t\tconst topDetailsWidth = (this.detailsVisible ? this.detailsHeight : 0);\n\n\t\t\tbar.render(barsContainer.node(), 0, topDetailsWidth + this.barHeight*index, index)\n\t\t\t\t.on(\"click\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barClick\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"enter\", (index) => {\n\t\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\t\tthis.details.setData(this.bars[index].data.details);\n\t\t\t\t\t}\n\t\t\t\t\tthis._observable.fire(\"barEnter\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"leave\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barLeave\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"disabled\", (index, disabled) => {\n\t\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\t\tconst detailsData = this.details.data;\n\t\t\t\t\t\tdetailsData.disabled = disabled;\n\t\t\t\t\t\tthis.details.setData(detailsData);\n\t\t\t\t\t}\n\t\t\t\t\tthis._observable.fire(\"barDisabled\", index, disabled);\n\t\t\t\t});\n\t\t});\n\n\t}\n\n\t_adjustHeight(data) {\n\t\tlet height = data.bars.length * this.barHeight;\n\t\tif (this.detailsVisible) {\n\t\t\theight += this.detailsHeight;\n\t\t}\n\t\tthis.height = height;\n\t\tthis._svgWrapper.attr(\"height\", height);\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget detailsVisible() {\n\t\treturn this._detailsVisible;\n\t}\n\n\tget detailsHeight() {\n\t\treturn this._detailsHeight;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget barHeight() {\n\t\treturn this._barHeight;\n\t}\n\n\tget enableBarHover() {\n\t\treturn this._enableBarHover;\n\t}\n\n\tget enableBarToggle() {\n\t\treturn this._enableBarToggle;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget stripeBackgroundColor() {\n\t\treturn this._stripeBackgroundColor;\n\t}\n\n\n\tget details() {\n\t\treturn this._details;\n\t}\n\n\tget bars() {\n\t\treturn this._bars;\n\t}\n}\n\nexport default Barchart;\n"],"names":["Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","OUTER_RADIUS","INNER_RADIUS","VALUE","ACTIVE_COLOR","INACTIVE_COLOR","BACKGROUND_COLOR","ANIMATION_DURATION","DoughnutRenderer","options","_options","_containerEl","_groupEl","_svgEl","_rendered","_observable","selector","ct","d3","width","node","offsetWidth","height","offsetHeight","value","_value","angle","_angle","tau","innerRadius","_innerRadius","outerRadius","_outerRadius","arc","_arc","startAngle","append","attr","style","g","_inactiveArc","datum","endAngle","inactiveColor","_activeArc","activeColor","_backgroundArc","backgroundColor","_hoverEl","on","fire","eventName","off","opts","activeArcTransition","transition","duration","animationDuration","attrTween","_arcTween","_this2","interpolateOuterRadius","interpolateInnerRadius","d","interpolateAngle","t","_this3","removeChild","destroy","getOptionValue","optionValue","defaultOptionValue","Doughnut","Defaults","renderTo","_doughnutRenderer","render","isRendered","update","WIDTH","HEIGHT","MARGIN","INACTIVE_BAR_COLOR","INACTIVE_BAR_OPACITY","OVER_SELECTION_COLOR","OVER_SELECTION_OPACITY","SELECTION_COLOR","ENABLE_SELECTION_TOGGLE","FONT_SIZE","DEFAULT_COLORS","HistogramData","data","_histogramData","_loadHistogramData","_minMax","_calculateMinMax","histogramData","max","min","position","minMax","getMinMax","getValueRatio","valueRatio","constrainedValue","Math","round","numOfBarsPerBucket","forEach","bucket","step","volume","Array","isArray","gradientIndex","HistogramHandle","groupEl","_handleEl","_handleLineEl","_handleCircleEl","_handleMaskEl","_handleMaskGradientEl","_handleLabelEl","_isOver","_index","_initialValue","Number","_position","valueToPosition","_initialPosition","_labelSizeCache","_elements","_renderHandle","element","remove","_createHandleElement","_createHandleLineElement","_createHandleCircleElement","_createDragMaskElement","_createMaskGradientElement","_createDragLabelElement","_handleHoverState","_handleDrag","parseInt","_updateLabelPosition","getBBox","offset","text","setLabelOffset","setHoverState","unsetHoverState","classed","xpos","x","positionToValue","_getLabelText","format","call","_onDrag","bind","_onStartDrag","_onEndDrag","label","content","innerHTML","getComputedTextLength","maskPadding","fontSize","textLength","_getComputedLabelTextLength","maskWidth","xPosition","selectAll","color","enter","getHandlePositionOffsets","handle1","handle2","label1Box","getLabelBox","label2Box","conflictDiff","posDiff1","posDiff2","xMax","HistogramSelectionRenderer","_histogramSelection","_overSelectionIndex","_handles","_draggingHandle","_prevSelection","_animating","_destroyHandles","_selectionBars","handle","handleIndex","handleValue","promptHandler","then","promptResult","startSelectionSnapshot","JSON","stringify","_this","getOutputSelection","parseFloat","points","getSelectionPoints","positions","sort","p1","p2","map","point","_updateSelectionPositions","_updateSelection","_renderHandles","selection","selectionIndex","disabled","enabled","target","allowsToggle","_toggleSelection","_onHandleClick","_onClick","histogramSelection","_animate","animate","getSelection","_prevHistogramData","_clear","_renderSelection","_handleClick","handles","slice","h1","h2","getXPosition","labelOffsets","PositionUtils","nodes","_updateSelectionControlsHoverState","selectionbar","_onSelectionMouseOut","_onSelectionMouseOver","p","from","to","pos","hidden","hide","_onHandleDrag","disable","enable","barX","s","isLast","colors","volumeIndex","selectionColor","inactiveBarColor","overSelectionColor","barSelectionIndex","_getBarSelectionIndex","_getSelectionColor","isOver","isDisabled","overSelectionOpacity","inactiveBarOpacity","opacity","selection1","selection2","data1","data2","onTransition","onComplete","s1","s2","_this4","frames","transitions","abs","si","hi","bars","bar","fillBars","_this5","_getBarColor","_getBarOpacity","prevSelection","prevData","setHandleXPosition","setLabelPosition","_onSelectionTransition","showLabel","_this6","hideLabel","HistogramRenderer","_historyData","_xAxis","range","_yAxis","_prevData","_selectionRenderer","_labelsVisible","margin","svg","left","right","top","bottom","histogram","inactive","active","updateSelection","domain","getData","_renderXAxis","_renderDataBars","refresh","showSelectionLabels","hideSelectionLabels","y","v","floor","ceil","HistogramSelection","_selection","getSelectionWithPositions","Object","assign","SelectionTypes","MultipleHistogramSelection","MULTI","result","DefaultHistogramSelectionImpl","start","MultipleHistogramSelectionImpl","FilterHistogramSelectionImpl","FILTER","InvertedFilterHistogramSelectionImpl","_getInvertedSelection","invertedSelection","INVERTED_FILTER","HistogramSelectionFactory","selectionType","Histogram","enableSelectionToggle","_histogramRenderer","_selectionFactory","getHistogramSelection","String","setSelection","LINE_COLOR","LINE_COLORS","LINE_OPACITY","FILL_COLOR","FILL_COLORS","FILL_OPACITY","LINE_WIDTH","DOT_SIZE","AXIS_COLOR","ZERO_LINE_COLOR","LineData","series","_series","concat","dataMap","getAllData","item","values","tooltips","tooltip","numParts","toString","split","TooltipRenderer","_lineData","_onMouseOut","xPos","bottomLabelWidth","filter","icon","lineColors","lineColor","join","_tooltipGroup","_tooltipBottomLabel","textAnchor","_getTextAnchor","bottomMaskWidth","bottomMaskPadding","_tooltipBottomLabelMask","tooltipHtml","_getTooltipHTML","_tooltipTopLabel","labelLeft","_getLabelLeft","some","_tooltipLineCircle","circle","labelWidth","parentNode","contains","relatedTarget","_hideTooltip","hoverWidth","getMergedData","getSeries","_hoverAreas","_onHoverAreaOver","lineWidth","lineOpacity","_tooltipAxisCircle","insert","_tooltipRendered","gradientID","lineData","_renderTooltip","LineRenderer","_tooltipRenderer","line","verticalSpacing","allData","_renderZeroLine","seriesIndex","_renderDataLines","axisColor","_showZeroLine","zeroLineColor","minHeight","areaZero","fillColor","fillColors","area","y0","y1","_getGroupedData","fillOpacity","dotSize","path","group","Line","_lineRenderer","setData","getPrecision","LABEL_FONT_SIZE","TOOLTIP_FONT_SIZE","TOOLTIP_SYMBOL","ACTIVE_COLORS","DETAILS_HIDDEN","MINMAX","DUAL_VALUE","ENABLE_BAR_HOVER","ENABLE_BAR_TOGGLE","FORMAT","BAR_HEIGHT","BAR_DISABLED","STRIPE_HEIGHT","STRIPE_BACKGROUND_COLOR","TOOLTIP_SPACE","CORNER_ROUNDED","BarchartData","_","detailsData","barsData","_detailsData","_barsData","barData","containsNegativeVal","containsPositiveVal","sum","calculateMinMax","precision","barchartData","details","DetailsData","_label","_disabled","_tooltips","tooltipData","TooltipData","symbol","_symbol","_color","_text","isNumber","str","includes","isNaN","isFinite","BarData","stripesData","highlighted","_highlighted","_stripesData","stripeData","absMax","stripes","stripe","StripeData","leftValue","leftColor","rightValue","rightColor","_right","_left","dual","leftData","rightData","JsonDataConverter","barchartJsonData","tooltipsData","tooltipJsonData","barJsonData","stripeJsonData","MASK_INDEX","Component","className","alignRight","alignBottom","_width","_height","_container","_maskIndex","_className","_alignRight","_alignBottom","_data","_renderContainer","clickableArea","_render","clearData","constructor","name","convert","_setData","_clearData","select","Tooltip","space","_fontSize","_activeColor","_format","_space","_canvas","container","empty","spec","tooltipText","tooltipWidth","_calculateTextWidth","_renderTwoColoredFill","tooltipSymbol","context","getContext","window","getComputedStyle","fontStyle","getPropertyValue","fontVariant","fontWeight","fontStrech","fontFamily","font","measureText","color1","color2","twoColoredFill","Details","labelFontSize","tooltipFontSize","activeColors","_labelFontSize","_tooltipFontSize","_tooltipSymbol","_activeColors","_tooltipsBackground","_tipWrapper","_tip","gradient","_createTooltips","_renderAndSetTooltipsData","reverse","undefined","previousTooltipX","reversedIndex","tooltipReversed","_handleLongLabel","maxWidth","gradientWidth","document","documentElement","getBoundingClientRect","_getOffset","el","rect","scrollX","scrollY","COLOR_PATTERN_INDEX","Stripe","dualValue","topCornerRounded","bottomCornerRounded","condensed","_backgroundColor","_dualValue","_topCornerRounded","_bottomCornerRounded","_condensed","clipPath","_renderProgress","_renderStripe","x1","x2","axis","xBase","_renderXBase","Bar","detailsHidden","detailsHeight","enableHover","enableToggle","stripeBackgroundColor","_detailsHidden","_detailsHeight","_enableHover","_enableToggle","_stripeBackgroundColor","_details","_stripes","add","_createDetails","_renderDetails","_doEnableToggle","_setDetailsData","_createStripes","_renderStripes","_setStripesData","detailsDataDefault","copyAs","detailsVisible","barHeight","enableBarHover","enableBarToggle","_detailsVisible","_barHeight","_enableBarHover","_enableBarToggle","_bars","updateFunction","setDetailsData","setBarData","barDataDefault","_setDefaultBarDetails","addTooltip","_svgWrapper","_adjustDetails","_adjustHeight","_createBars","_renderBars","barsContainer","topDetailsWidth"],"mappings":"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"}