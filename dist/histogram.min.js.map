{"version":3,"file":"histogram.min.js","sources":["../src/utils/PositionUtils.js","../src/Histogram.js","../src/utils/Observable.js","../src/HistogramDefaults.js","../src/HistogramData.js","../src/selection/HistogramSelection.js","../src/selection/MultipleHistogramSelectionImpl.js","../src/selection/DefaultHistogramSelectionImpl.js","../src/selection/HistogramHandle.js","../src/selection/HistogramSelectionRenderer.js","../src/HistogramRenderer.js","../src/selection/FilterHistogramSelectionImpl.js","../src/selection/InvertedFilterHistogramSelectionImpl.js","../src/selection/HistogramSelectionFactory.js"],"sourcesContent":["/**\n * @public\n * Returns handle positions offsets so that labels don't conflict visually\n * @param {HistogramData} histogramData \n * @returns {Array} label offsets\n */\nexport function getHandlePositionOffsets(handle1, handle2, maskPadding, width){\n    var label1Box = handle1.getLabelBox();\n    var label2Box = handle2.getLabelBox();\n\n    // calculate conflict number\n    var conflictDiff = label2Box.x - (label1Box.x + label1Box.width)-maskPadding;\n    // and handle if there is not enough space\n    if (conflictDiff<0){\n        // pos1 diff to the left\n        var posDiff1 = conflictDiff/2;\n        // pos2 diff to to right\n        var posDiff2 = conflictDiff/2;\n\n        // position left to 0 if position would be lower than 0\n        var xMin = label1Box.x+posDiff1;\n        if (xMin < 0){\n            posDiff1 = label1Box.x; \n            // also shift right label so we keep it visible\n            posDiff2 = posDiff2*2\n        }\n\n        // same with max value\n        var xMax = label2Box.x+label2Box.width-posDiff2;\n        if (xMax > width){\n            // needs to consider 2px offset otherwise label woudl shift, TODO: investigate why\n            var offset = 2;\n            posDiff2 += xMax-width-offset; \n            posDiff1 = posDiff1*2\n        }\n        return [posDiff1, -posDiff2];                  \n    }\n\n    return [0,0];\n}","import * as d3 from \"d3\";\nimport Observable from \"./utils/Observable\";\nimport * as Defaults from \"./HistogramDefaults\";\nimport HistogramData from \"./HistogramData\";\nimport DefaultHistogramSelectionImpl from \"./selection/DefaultHistogramSelectionImpl\";\nimport HistogramRenderer from \"./HistogramRenderer\";\nimport HistogramSelectionFactory from \"./selection/HistogramSelectionFactory\"\nimport {SelectionTypes} from \"./selection/HistogramSelection\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main histogram class\n * @param {Object} options\n */\nclass Histogram {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * prompt handler\n\t\t */\n\t\tthis._options.promptHandler = options.promptHandler || null;\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar color \n\t\t */\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Over bar color \n\t\t */\n\t\tthis._options.overSelectionColor = getOptionValue(options.overSelectionColor, Defaults.OVER_SELECTION_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.selectionColor = getOptionValue(options.selectionColor, Defaults.SELECTION_COLOR);\n\t\t\n\t\t/**\n\t\t * @public\n\t\t * Enable selection toggle \n\t\t */\n\t\tthis._options.enableSelectionToggle = getOptionValue(options.enableSelectionToggle, Defaults.ENABLE_SELECTION_TOGGLE);\n\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Mask padding\n\t\t */\n\t\tthis._options.maskPadding = getOptionValue(options.maskPadding, Defaults.MASK_PADDING);\n\n\t\t/**\n\t\t * @public\n\t\t * selection type\n\t\t */\n\t\tthis._options.selectionType = getOptionValue(options.selectionType, null);\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * histogramRenderer\n\t\t */\n\t\tthis._histogramRenderer = new HistogramRenderer(this._options);\n\n\t\tthis._histogramRenderer.on(\"selectionOver\", selectionIndex=>{\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"selectionChanged\", (selection)=>{\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t\t});\n\t\t\n\t\tthis._selectionFactory = new HistogramSelectionFactory(this._options);\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Histogram} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._histogramRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._histogramRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Array} data\n\t * @param {Array} selection\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetData(data, selection) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar histogramData = this._histogramData = new HistogramData(data, this._options);\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, histogramData);\n\n\t\tthis._options.selection = histogramSelection.getSelection();\n\t\tthis._selection = selection;\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + this._histogramData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._histogramRenderer.refresh(histogramData, histogramSelection);\n\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * @public\n\t * Sets selection type\n\t * @param {String} selectionType\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetSelectionType(selectionType){\n\t\tthis._options.selectionType = selectionType;\n\t\tthis.setSelection(this._selection);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Sets selection\n\t * @param {Array} selection\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetSelection(selection) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tif (!this._histogramData) {\n\t\t\tthrow \"Can't call setSelection() when no data is available.\"\n\t\t}\n\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, this._histogramData);\n\t\tthis._options.selection = histogramSelection.getSelection();\n\t\tthis._selection = selection;\n\t\tthis._histogramRenderer.refresh(this._histogramData, this._histogramSelection);\n\n\t\treturn this;\n\t}\n\n}\n\nHistogram.SelectionTypes = SelectionTypes;\nexport default Histogram;\n","/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nexport default class Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tthis._handlers[event].push(handler);\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unbind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler, optional\r\n\t */\r\n    off(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tif (!handler) {\r\n\t\t\tthis._handlers[event] = [];\r\n\t\t} else {\r\n\t\t\tvar handlers = this._handlers[event];\r\n\t\t\tvar index = handlers.indexOf(handler);\r\n\t\t\tif (index != -1){\r\n\t\t\t\thandlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Fire widget event\r\n\t * @param {String} event event name\r\n\t * @param {*} ...args event arguments\r\n\t */\r\n\tfire(event, ...args) {\r\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tvar handlers = this._handlers[event];\r\n\t\tfor (var i = 0; i < handlers.length; i++) {\r\n\t\t\thandlers[i].apply(this, args);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys this observable, removes events and so on \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._handlers = null;\r\n\t\treturn this;\r\n    }\r\n\t\r\n}","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default widget height\r\n */\r\nexport const HEIGHT = 150;\r\n\r\n/**\r\n * @public\r\n * Default widget margin\r\n */\r\nexport const MARGIN = {\r\n    top:0,\r\n    left:5,\r\n    right:5,\r\n    bottom:25\r\n};\r\n\r\n/**\r\n * @public\r\n * Default inactive bar color\r\n */\r\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const OVER_SELECTION_COLOR = \"#ffea00\";\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const SELECTION_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Enable selection toggle\r\n */\r\nexport const ENABLE_SELECTION_TOGGLE = true;\r\n\r\n/**\r\n * @public\r\n * Default padding of label mask\r\n */\r\nexport const MASK_PADDING = 10;\r\n\r\n/**\r\n * @public\r\n * Default colors \r\n */\r\nexport const DEFAULT_COLORS = [\"#e6f3fb\", \"#cbe7f6\", \"#b1dbf2\", \"#98cfee\", \"#7ec4ea\"];","import * as d3 from \"d3\";\n\n/**\n * @class\n * HistogramData representing data for the histogram view\n */\nexport default class HistogramData {\n\t/**\n\t * @param {data} data\n\t * @param {Object} options\n\t */\n\tconstructor(data, options) {\n\t\tthis._histogramData = this._loadHistogramData(data, options.width);\n\t\tthis._minMax = this._calculateMinMax(this._histogramData);\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns histogram data\n\t * @returns {Array} histogram data\n\t */\n\tgetData() {\n\t\treturn this._histogramData;\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given histogramData\n\t* @param {Array} histogramData\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(histogramData) {\n\t\tvar min = d3.min(histogramData, function (d) { return d.value; });\n\t\tvar max = d3.max(histogramData, function (d) { return d.value; });\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t* Returns value ratio between bars and data\n\t* @return {Number} value ratio \n\t*/\n\tgetValueRatio() {\n\t\tvar range = this._minMax.max - this._minMax.min;\n\t\treturn range / this._options.width;\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.min;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns data value from given position \n\t * @param {Number} position\n\t */\n\tpositionToValue(position) {\n\t\tvar valueRatio = this.getValueRatio();\n\t\tvar minMax = this.getMinMax();\n\t\treturn position * valueRatio + minMax.min;\n\t}\n\n\t/**\n\t * @public\n\t * Returns position from given data value \n\t * @param {Number} value\n\t */\n\tvalueToPosition(value) {\n\t\tvar valueRatio = this.getValueRatio();\n\t\tvar minMax = this.getMinMax();\n\t\treturn value / valueRatio - minMax.min / valueRatio;\n\t}\n\n\t/** \n\t* @private\n\t* @param {Array} buckets\n\t* @param {int} numOfBarsPerBucket - number of bars per column\\\n\t* @returns {Array} data from given buckets \n\t*/\n\t_loadHistogramData(data, width) {\n\t\tvar histogramData = [];\n\t\t// calculate number of bars per bucket excluding last pixel for max value\n\t\tvar numOfBarsPerBucket = (width-1) / data.length;\n\n\t\tdata.forEach((bucket, i) => {\n\t\t\tvar step = (bucket.max - bucket.min) / numOfBarsPerBucket;\n\t\t\td3.range(bucket.min, bucket.max, step).forEach((value) => {\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tvolume: bucket.content[0].frequency\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// adding max value pixel as each non-last bucket ends one pixel before next bucket starts\n\t\t\tif (i == data.length-1){\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: bucket.max,\n\t\t\t\t\tvolume: bucket.content[0].frequency\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn histogramData;\n\t}\n}","/**\n * @interface\n * HistogramSelection interface\n */\nexport default class HistogramSelection {\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\tthrow \"HistogramSelection.getSelection() has to be implemented\";\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\tthrow \"HistogramSelection.getOutputSelection() has to be implemented\";\n\t}\n\n\t/**\n\t * @public \n\t * @returns {String}\n\t * Returns histogram selection type\n\t */\n\tgetSelectionType(){\n\t\tthrow \"HistogramSelection.getSelectionType() has to be implemented\";\n\t}\n\n\t/**\n\t * @public \n\t * @returns {Boolean}\n\t * Returns true if toogle is allowed\n\t */\n\tallowsToggle(){\n\t\tthrow \"HistogramSelection.allowsToogle() has to be implemented\";\n\t}\t\n\n\t/**\n\t * @public \n\t * @returns {Array}\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tthrow \"HistogramSelection.getSelection() has to be implemented\";\n\t}  \t\n}\n\nvar SelectionTypes = {\n\tMULTI:\"multi\",\n\tFILTER:\"filter\",\n\tINVERTED_FILTER:\"inverted-filter\"\n}\n\nexport {SelectionTypes} ","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\nimport * as Defaults from \"../HistogramDefaults\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class MultipleHistogramSelection extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper();\n\t\tthis._selection = selection.slice();\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.MULTI;\n\t}\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelection()\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\treturn this._selection;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn true;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\t\t\t\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t \t\n}","import HistogramSelection from \"./HistogramSelection\";\nimport MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport * as Defaults from \"../HistogramDefaults\";\n\n/**\n * @class\n * DefaultHistogramSelectionImpl representing histogram selection\n */\nexport default class DefaultHistogramSelectionImpl extends MultipleHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData) {\n\t\tvar minMax = histogramData.getMinMax();\n\t\tvar colors = Defaults.DEFAULT_COLORS;\n\t\tvar start = minMax.min;\n\t\tvar step = (minMax.max - minMax.min) / colors.length;\n\t\tvar selection = colors.map(color=>{\n\t\t\tvar from = start;\n\t\t\tvar to = start + step;\n\t\t\tstart += step;\n\n\t\t\treturn {\n\t\t\t\tfrom:from, \n\t\t\t\tto:to,\n\t\t\t\tcolor:color\n\t\t\t}\n\t\t});\n\n\t\tsuper(histogramData, selection);\n    }\n}","import * as d3 from \"d3\";\r\nimport style from \"../Histogram.css\";\r\nimport Observable from \"../utils/Observable\";\r\n\r\n/**\r\n * Gradient index shared for all instances\r\n */\r\nvar gradientIndex = 0;\r\n\r\n/**\r\n * @class\r\n * HistogramHandle representing control handle for histogram\r\n */\r\nexport default class HistogramHandle {\r\n\t/**\r\n\t * @param {D3Selection} groupEl\r\n\t * @param {Number} value\r\n\t * @param {Number} index\r\n\t * @param {HistoryData} histogramData\r\n\t * @param {Object} options\r\n\t */\r\n\tconstructor(groupEl, value, index, histogramData, options) {\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a selection\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"drag\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when drag on handle starts\r\n\t\t\t * @param {HistogramHandle} handle\r\n\t\t\t */\r\n\t\t\t\"startDrag\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when drag on handle ends\r\n\t\t\t * @param {HistogramHandle} handle\r\n\t\t\t */\r\n\t\t\t\"endDrag\"\r\n\t\t]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle element\r\n\t\t */\r\n\t\tthis._handleEl = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle line element\r\n\t\t */\r\n\t\tthis._handleLineEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle circle element\r\n\t\t */\r\n\t\tthis._handleCircleEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle mask element\r\n\t\t */\r\n\t\tthis._handleMaskEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle mask gradient element\r\n\t\t */\r\n\t\tthis._handleMaskGradientEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle label element\r\n\t\t */\r\n\t\tthis._handleLabelEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * True if handle is over\r\n\t\t */\r\n\t\tthis._isOver = false;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element\r\n\t\t */\t\t\r\n\t\tthis._groupEl = groupEl;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle index\r\n\t\t */\t\t\r\n\t\tthis._index = index;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle value\r\n\t\t */\t\t\r\n\t\tthis._value = value;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle position\r\n\t\t */\t\t\r\n\t\tthis._position = histogramData.valueToPosition(value);\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * bar options\r\n\t\t */\t\t\r\n\t\tthis._options = options;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * histogram data\r\n\t\t */\t\t\r\n\t\tthis._histogramData = histogramData;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * elements\r\n\t\t */\t\t\r\n\t\tthis._elements = [];\t\t\r\n\t\t\r\n\t\tthis._renderHandle();\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destroys this handle\r\n\t */\r\n\tdestroy(){\r\n\t\tthis._elements.forEach(element=>element.remove());\r\n\t\tthis._elements = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t   * Renders drag handle\r\n\t   */\r\n\t_renderHandle() {\r\n\t\tthis._elements = [\r\n\t\t\tthis._createHandleElement(),\r\n\t\t\tthis._createHandleLineElement(),\r\n\t\t\tthis._createHandleCircleElement(),\r\n\t\t\tthis._createDragMaskElement(),\r\n\t\t\tthis._createMaskGradientElement(),\r\n\t\t\tthis._createDragLabelElement()\r\n\t\t];\r\n\r\n\t\tthis._handleHoverState();\r\n\t\tthis._handleDrag();\r\n\t}\t\r\n\r\n\thide(){\r\n\t\tthis._elements.forEach(element=>element.attr(\"visibility\", \"hidden\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns X position of this handle\r\n\t * @returns {Number} X position handle\r\n\t */\r\n\tgetXPosition() {\r\n\t\treturn parseInt(this._handleEl.attr(\"x\"))+5;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Sets hover state\r\n\t */\r\n\tsetHoverState(){\r\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\r\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 3);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public \r\n\t * @returns {SVGRect} \r\n\t * Returns drag label box for this handle\r\n\t */\r\n\tgetLabelBox(){\r\n\t\treturn this._handleLabelEl.node().getBBox();\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * Shifts handle label by given offset so it can handle label position conflicts\r\n\t */\r\n\tsetLabelOffset(offset){\r\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(\"+offset+\", 0)\")\r\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(\"+offset+\", 0)\")\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * Sets handle position\r\n\t */\r\n\tsetHandleXPosition(position){\r\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\"+position+\", \"+this._options.height+\")\")\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unsets hover state\r\n\t */\r\n\tunsetHoverState(){\r\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\r\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 1);\r\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(0, 0)\")\r\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(0, 0)\")\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Enables this handle \r\n\t */\r\n\tenable(){\r\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"all\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Disables this handle \r\n\t */\r\n\tdisable(){\r\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"none\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handle hover state\r\n\t */\r\n\t_handleHoverState(){\r\n\t\t// line hover effect\r\n\t\tthis._handleEl.on(\"mouseover\", () => {\r\n\t\t\tthis._isOver = true;\r\n\t\t\tthis.setHoverState();\r\n\t\t})\r\n\t\tthis._handleEl.on(\"mouseout\", () => {\r\n\t\t\tthis._isOver = false;\r\n\t\t\tthis.unsetHoverState();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens when drag starts\r\n\t */\r\n\t_onStartDrag(){\r\n\t\tthis._groupEl.classed(style[\"dragging\"], true);\r\n\t\tthis._observable.fire(\"startDrag\", this);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens on drag\r\n\t */\r\n\t_onDrag(){\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar xpos = Math.round(Math.max(Math.min(d3.event.x, width), 0));\r\n\t\tvar format = this._options.format;\r\n\r\n\t\tthis._handleEl.attr(\"x\", xpos - 5);\r\n\t\tthis._handleLineEl.attr(\"x\", xpos - 2);\r\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\" + xpos + \",\" + height + \")\");\r\n\t\tthis._handleEl.attr(\"data-handle-value\", this._histogramData.positionToValue(xpos))\r\n\r\n\t\tthis.setHoverState();\r\n\r\n\t\tthis._handleLabelEl.text(() => {\r\n\t\t\treturn format(this._histogramData.positionToValue(xpos));\r\n\t\t})\r\n\r\n\t\tthis._updateLabelPosition(xpos);\r\n\t\tthis._observable.fire(\"drag\");\t\t\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens when drag ends\r\n\t */\r\n\t_onEndDrag(){\r\n\t\tthis._groupEl.classed(style[\"dragging\"], false);\r\n\t\tif (!this._isOver) {\r\n\t\t\tthis.unsetHoverState();\r\n\t\t}\r\n\r\n\t\tthis._observable.fire(\"endDrag\", this);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles handle drag \r\n\t */\r\n\t_handleDrag(){\r\n\t\tthis._handleEl.call(d3.drag()\r\n\t\t\t.on(\"drag\", this._onDrag.bind(this))\r\n\t\t\t.on(\"start\", this._onStartDrag.bind(this))\r\n\t\t\t.on(\"end\", this._onEndDrag.bind(this)));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Updates label position\r\n\t * @param {Number} position \r\n\t */\r\n\t_updateLabelPosition(position) {\r\n\t\tvar label = this._handleLabelEl.node();\r\n\t\tvar maskPadding = this._options.maskPadding;\t\t\r\n\r\n\t\t// we need to calculate text length so we can create mask and center text\r\n\t\tvar textLength = label.getComputedTextLength();\r\n\t\tvar maskWidth = textLength + maskPadding * 2;\r\n\t\tvar xPosition = position - textLength / 2;\r\n\r\n\t\t// handle when dragging towards left side\r\n\t\tif (xPosition < 0) {\r\n\t\t\txPosition = 0;\r\n\t\t}\r\n\r\n\t\t// handle when dragging towards right side\r\n\t\tif (xPosition + textLength > this._options.width) {\r\n\t\t\txPosition = this._options.width  - textLength;\r\n\t\t\tthis._handleLabelEl.attr(\"x\", this._options.width);\r\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"end\");\r\n\t\t} else {\r\n\t\t\tthis._handleLabelEl.attr(\"x\", xPosition);\r\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"start\");\r\n\t\t}\r\n\r\n\t\t// position mask\r\n\t\tthis._handleMaskEl.attr(\"x\", () => {\r\n\t\t\treturn parseInt(xPosition) - maskPadding;\r\n\t\t});\r\n\r\n\t\tthis._handleMaskGradientEl.attr(\"x1\", xPosition - maskPadding);\r\n\t\tthis._handleMaskGradientEl.attr(\"x2\", xPosition + maskWidth - maskPadding);\r\n\r\n\t\tthis._handleMaskEl.attr(\"width\", maskWidth);\r\n\t\tthis._handleMaskEl.attr(\"height\", 20);\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * Creates mask gradient element\r\n\t * @param {Number} handleIndex \r\n\t */\r\n\t_createMaskGradientElement(){\r\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\r\n\t\t\t.attr(\"id\", \"brush-mask-gradient-\" + gradientIndex++)\r\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\r\n\t\t\t.attr(\"y1\", 0).attr(\"x1\", 50)\r\n\t\t\t.attr(\"y2\", 0).attr(\"x2\", 0);\r\n\r\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\r\n\t\t\t.data([\r\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\r\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\r\n\t\t\t])\r\n\t\t\t.enter().append(\"stop\")\r\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\r\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\r\n\r\n\t\treturn this._handleMaskGradientEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders main handle element \r\n\t * @returns {SVGElement}\r\n\t */\r\n\t_createHandleElement(){\r\n\t\tthis._handleEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle\"])\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"data-handle-index\", this._index)\r\n\t\t\t.attr(\"data-handle-value\", this._value)\r\n\t\t\t.attr(\"cursor\", \"ew-resize\")\r\n\t\t\t.attr(\"width\", 10)\r\n\t\t\t.attr(\"height\", this._options.height + 5)\r\n\t\t\t.attr(\"x\", this._position - 5);\r\n\r\n\t\treturn this._handleEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders handle line element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createHandleLineElement(){\r\n\t\tthis._handleLineEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle-line\"])\r\n\t\t\t.attr(\"width\", 4)\r\n\t\t\t.attr(\"height\", this._options.height)\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"x\", this._position - 2);\r\n\r\n\t\treturn this._handleLineEl;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders handle circle element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createHandleCircleElement(){\r\n\t\tthis._handleCircleEl = this._groupEl.append(\"circle\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle-circle\"])\r\n\t\t\t.attr(\"transform\", \"translate(\" + this._position + \",\" + this._options.height + \")\")\r\n\t\t\t.attr(\"fill\", \"#ffffff\")\r\n\t\t\t.attr(\"fill-opacity\", 1)\r\n\t\t\t.attr(\"stroke\", \"#000\")\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"cursor\", \"ew-resize\")\r\n\t\t\t.attr(\"r\", 3.5);\r\n\r\n\t\treturn this._handleCircleEl;\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders drag mask element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createDragMaskElement(){\r\n\t\tthis._handleMaskEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"drag-label-mask\"])\r\n\t\t\t.attr(\"fill\", \"url(#brush-mask-gradient-\" + gradientIndex+\")\")\r\n\t\t\t.attr(\"y\", this._options.height + 12)\r\n\t\t\t.attr(\"display\", \"none\");\t\t\t\r\n\r\n\t\treturn this._handleMaskEl;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @private \r\n\t * Renders handle label element \r\n\t * @returns {SVGElement}  \r\n\t */\r\n\t_createDragLabelElement(){\r\n\t\tvar format = this._options.format;\r\n\t\tvar data = this._histogramData;\r\n\t\tvar height = this._options.height;\r\n\t\tthis._handleLabelEl = this._groupEl.append(\"text\")\r\n\t\t\t.attr(\"class\", style[\"drag-label\"])\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.text(() => {\r\n\t\t\t\treturn format(data.positionToValue(this._position));\r\n\t\t\t}).attr(\"y\", height + 22);\r\n\r\n\t\t\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t\treturn this._handleLabelEl;\r\n\t}\r\n}","import style from \"../Histogram.css\";\r\nimport HistogramHandle from \"./HistogramHandle\";\r\nimport * as Defaults from \"../HistogramDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as PositionUtils from \"../utils/PositionUtils\"\r\nimport * as d3 from \"d3\";\r\nimport {SelectionTypes} from \"./HistogramSelection\";\r\n\r\n/**\r\n * @class\r\n * Histogram renderer class\r\n * @param {Object} options\r\n */\r\nexport default class HistogramSelectionRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Histogram options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._histogramData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * history selection\r\n\t\t */\r\n\t\tthis._histogramSelection = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * index of over selection  \r\n\t\t */\r\n\t\tthis._overSelectionIndex = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * selection handles\r\n\t\t */\r\n\t\tthis._handles = [];\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if handle is dragged\r\n\t\t */\r\n\t\tthis._draggingHandle = false;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous selection for animation\r\n\t\t */\r\n\t\tthis._prevSelection = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a category\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is changed\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\t\t\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether histogram has been rendered or not\r\n\t * @returns {boolean} true if histogram has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @param {DOMElement}  \r\n\t * @returns {HistogramSelectionRenderer} returns this widget instance\r\n\t */\r\n\trender(groupEl){\r\n\t\tthis._rendered = true;\r\n\t\tthis._groupEl = groupEl\r\n\r\n\t\treturn this;\r\n\t} \t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._destroyHandles();\r\n\t\tif (this._selectionBars){\r\n\t\t\tthis._selectionBars.remove();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Destroys selection controls \r\n\t */\r\n\t_destroyHandles(){\r\n\t\tthis._handles.forEach(handle=>handle.destroy());\r\n\t\tthis._handles = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles click on handle\r\n\t * @param {Number} handleIndex\r\n\t * @param {Number} handleValue \r\n\t */\r\n\t_onHandleClick(handleIndex, handleValue){\r\n\t\t// call prompt handler if available\r\n\t\tif (this._options.promptHandler){\r\n\t\t\tvar promptResult = this._options.promptHandler(this._options.format(handleValue)).then((promptResult)=>{\r\n\t\t\t\tpromptResult = parseFloat(promptResult);\r\n\t\t\t\t// must be within min max range\r\n\t\t\t\tvar minMax = this._histogramData.getMinMax();\r\n\t\t\t\tpromptResult = Math.min(minMax.max, promptResult);\r\n\t\t\t\tpromptResult = Math.max(minMax.min, promptResult);\r\n\r\n\t\t\t\tvar points = this._histogramSelection.getSelectionPoints();\r\n\t\t\t\tpoints[handleIndex] = {\r\n\t\t\t\t\tvalue:promptResult\r\n\t\t\t\t};\r\n\t\t\t\t\r\n\t\t\t\tvar positions = points\r\n\t\t\t\t\t.map(point=>this._histogramData.valueToPosition(point.value))\r\n\t\t\t\t\t.sort((p1,p2)=>p1-p2);\r\n\t\t\t\t\r\n\t\t\t\tthis._updateSelectionPositions(positions);\r\n\t\t\t\tthis._updateSelection();\r\n\r\n\t\t\t\t// TODO: update handles without destroying them\r\n\t\t\t\tthis._destroyHandles();\r\n\t\t\t\tthis._renderHandles();\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Toggles selection\r\n\t * @param {Number} selectionIndex \r\n\t */\r\n\t_toggleSelection(selectionIndex){\r\n\t\tvar selection = this._options.selection[selectionIndex];\r\n\t\tselection.disabled = !selection.disabled;\r\n\t\tvar enabled = !selection.disabled;\r\n\t\tthis._updateSelection();\r\n\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles click on chart\r\n\t */\r\n\t_onClick(){\r\n\t\tvar target = d3.select(d3.event.target);\r\n\t\tvar selectionIndex = target.attr(\"data-selection-index\");\r\n\t\tvar handleIndex = target.attr(\"data-handle-index\");\r\n\r\n\t\tif (selectionIndex != null && this._histogramSelection.allowsToggle()){\r\n\t\t\tthis._toggleSelection(selectionIndex)\r\n\t\t} else if (handleIndex != null){\r\n\t\t\tthis._onHandleClick(handleIndex, target.attr(\"data-handle-value\"));\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * Handles handle click \r\n\t */\r\n\t_handleClick(){\r\n\t\tthis._groupEl.on(\"click\", this._onClick.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Refreshes histogram data \r\n\t * @param {HistogramData}\r\n\t * @param {HistogramSelection}\r\n\t */\r\n\trefresh(histogramData, histogramSelection){\r\n\t\tif (this._histogramSelection && this._histogramSelection.getSelection().length == histogramSelection.getSelection().length){\r\n\t\t\tthis._prevSelection = this._histogramSelection.getSelection();\r\n\t\t}\r\n\r\n\t\tthis._histogramData = histogramData;\r\n\t\tthis._histogramSelection = histogramSelection;\r\n\t\t\r\n\t\tthis._clear();\r\n\t\tthis._renderSelection();\r\n\t\tthis._updateSelection();\r\n\r\n\t\tthis._handleHoverState();\r\n\t\tthis._handleClick();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Updates selection controls on hover\r\n\t * @param {Number} selectionIndex \r\n\t */\r\n\t_updateSelectionControlsHoverState(selectionIndex){\r\n\t\t// get all handles sorted by X position\r\n\t\tvar handles = this._handles.slice().sort((h1,h2)=>{\r\n\t\t\treturn h1.getXPosition() - h2.getXPosition();\r\n\t\t});\r\n\r\n\t\t// unset hover state on all handles\r\n\t\thandles.forEach(handle=>handle.unsetHoverState());\r\n\r\n\t\t// selection is active, active both handles for active selection\r\n\t\tif (selectionIndex != null){\r\n\t\t\tvar handle1 = handles[selectionIndex];\r\n\t\t\tvar handle2 = handles[selectionIndex+1];\r\n\r\n\t\t\thandle1.setHoverState();\r\n\t\t\thandle2.setHoverState();\r\n\r\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.maskPadding, this._options.width);\r\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\r\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * \r\n\t * @private \r\n\t * Handles what happens when mouse is over selection\r\n\t * @param {String} type \r\n\t * @param {Number} i \r\n\t * @param {HTMLElement[]} array \r\n\t */\r\n\t_onSelectionMouseOver(d, i, nodes){\r\n\t\t// prevent selection when dragging handles\r\n\t\tif (this._draggingHandle){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\tvar selectionIndex = parseInt(d3.select(d3.event.target).attr(\"data-selection-index\"));\r\n\t\tif (this._overSelectionIndex != selectionIndex){\r\n\t\t\tthis._overSelectionIndex = selectionIndex;\r\n\t\t\tthis._updateSelection();\r\n\t\t\tthis._updateSelectionControlsHoverState(selectionIndex);\r\n\t\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @private \r\n\t * Handles what happens when mouse is out of selection\r\n\t * @param {String} type \r\n\t * @param {Number} i \r\n\t * @param {HTMLElement[]} array \r\n\t */\r\n\t_onSelectionMouseOut(d, i, nodes){\r\n\t\t// prevent selection when dragging handles\r\n\t\tif (this._draggingHandle){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0)\")\r\n\r\n\t\tthis._overSelectionIndex = null;\r\n\t\tthis._updateSelectionControlsHoverState(null);\r\n\t\tthis._updateSelection();\r\n\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Handles hover state\r\n\t */\r\n\t_handleHoverState(){\r\n\t\tvar g = this._groupEl;\r\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseout\", this._onSelectionMouseOut.bind(this));\r\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseover\", this._onSelectionMouseOver.bind(this));\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Handles when handle is dragged\r\n\t */\r\n\t_onHandleDrag(){\r\n\t\tvar positions = this._handles.map(handle=>handle.getXPosition()).sort((p1, p2)=>{\r\n\t\t\treturn p1-p2;\r\n\t\t});\r\n\r\n\t\tthis._updateSelectionPositions(positions);\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Updates selection with new positions\r\n\t* @param {Array} positions\r\n\t*/\r\n\t_updateSelectionPositions(positions){\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\t\tpositions.forEach((p, index)=>{\r\n\t\t\tif (index>selection.length-1){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tselection[index].from = this._histogramData.positionToValue(p);\r\n\t\t\tselection[index].to = this._histogramData.positionToValue(positions[index+1]);\r\n\t\t});\r\n\r\n\t\tthis._updateSelection();\r\n\t}\t\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders selection bars\r\n\t*/\r\n\t_renderSelection() {\r\n\t\tvar height = this._options.height;\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\r\n\t\t// hover selection bars\r\n\t\tthis._selectionBars = this._groupEl.selectAll(\".\"+style.selectionbar)\r\n\t\t\t.data(selection)\r\n\t\t\t.enter().append(\"rect\")\r\n\t\t\t.attr(\"class\", style.selectionbar)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\t\t.attr(\"height\", height);      \r\n\r\n\r\n\t\tthis._renderHandles();\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders selection controls\r\n\t*/\r\n\t_renderHandles(){\r\n\t\t// render selection controls\r\n\t\tthis._handles = this._histogramSelection.getSelectionPoints().map((point, index)=>{\r\n\t\t\tvar value = point.value;\r\n\r\n\t\t\tvar handle = new HistogramHandle(this._groupEl, value, index, this._histogramData, this._options);\r\n\r\n\t\t\tif(point.hidden){\r\n\t\t\t\thandle.hide();\r\n\t\t\t}\r\n\r\n\t\t\thandle.on(\"drag\", ()=>{\r\n\t\t\t\tthis._onHandleDrag();\r\n\t\t\t}, this);\r\n\r\n\t\t\tvar startSelectionSnapshot;\r\n\r\n\t\t\t// disable other handles when draggin starts\r\n\t\t\thandle.on(\"startDrag\", ()=>{\r\n\t\t\t\tstartSelectionSnapshot = JSON.stringify(this._options.selection);\r\n\t\t\t\t\r\n\t\t\t\tthis._draggingHandle = true;\r\n\t\t\t\tthis._handles.forEach(handle=>handle.disable());\r\n\t\t\t\thandle.enable();\r\n\t\t\t}, this);\r\n\r\n\t\t\t// enable all handles when draggin starts\r\n\t\t\thandle.on(\"endDrag\", ()=>{\r\n\t\t\t\tthis._draggingHandle = false;\r\n\t\t\t\tthis._handles.forEach(handle=>handle.enable());\r\n\r\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\r\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\r\n\t\t\r\n\t\t\treturn handle;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Returns bar color based on X position\r\n\r\n\t* @param {Number} barX\r\n\t* @param {Array} selection\r\n\t* @returns {Number} bar category index\r\n\t*/\r\n\t_getBarSelectionIndex(barX, selection){\r\n\t\tfor (var i=0;i<selection.length;i++){\r\n\t\t\tvar s = selection[i];\r\n\t\t\tvar within = barX >= this._histogramData.valueToPosition(s.from) && barX < this._histogramData.valueToPosition(s.to);\r\n\t\t\tif (within) return i;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns bar color for given bar position with given selection\r\n\t * @param {Number} barX \r\n\t * @param {Array} selection \r\n\t */\r\n\t_getBarColor (barX, s){\r\n\t\tvar inactiveBarColor = this._options.inactiveBarColor;\r\n\t\tvar overSelectionColor = this._options.overSelectionColor;\r\n\t\t\r\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, s);\r\n\t\tif (barSelectionIndex == null){\r\n\t\t\treturn inactiveBarColor;\r\n\t\t} else if (s[barSelectionIndex].disabled){\r\n\t\t\treturn inactiveBarColor;\r\n\t\t} if (this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex){\r\n\t\t\treturn overSelectionColor;\r\n\t\t} else {\r\n\t\t\treturn s[barSelectionIndex].color || this._options.selectionColor;                    \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Runs onTransition as a transition between two selections\r\n\t * @param {Array} selection1 \r\n\t * @param {Array} selection2 \r\n\t * @param {Function} onTransition handler\r\n\t */\r\n\t_onSelectionTransition(selection1, selection2, onTransition){\r\n\t\tvar histogramData = this._histogramData;\r\n\r\n\t\tselection1.forEach((s1,selectionIndex)=>{\r\n\t\t\tvar s2 = selection2[selectionIndex];\r\n\t\t\tvar width = this._options.width;\r\n\t\t\tif (selection1[selectionIndex]){\r\n\t\t\t\tvar transitions = [];\r\n\t\t\t\tvar frames = [];\r\n\r\n\t\t\t\ttransitions.push([Math.round(histogramData.valueToPosition(s1.from)), Math.round(histogramData.valueToPosition(s2.from))]);\r\n\t\t\t\ttransitions.push([Math.round(histogramData.valueToPosition(s1.to)), Math.round(histogramData.valueToPosition(s2.to))]);\r\n\r\n\t\t\t\t// make sure duration is calculated based on transitino length\r\n\t\t\t\tframes = [Math.abs((transitions[0][0] - transitions[0][1])/width), Math.abs((transitions[1][0] - transitions[1][1])/width)];\r\n\r\n\t\t\t\ttransitions.forEach((t, handleIndex)=>{\r\n\t\t\t\t\tvar duration = 0;\r\n\r\n\t\t\t\t\twhile(t[0] !== t[1]){\r\n\t\t\t\t\t\tsetTimeout(onTransition.bind(this, t[0], selectionIndex, handleIndex), duration);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tduration = duration+1/frames[handleIndex];\r\n\t\t\t\t\t\tt[0] = t[0]>t[1]?t[0]-1:t[0]+1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tsetTimeout(onTransition.bind(this, t[1], selectionIndex, handleIndex), ++duration);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Updates selection\r\n\t*/\r\n\t_updateSelection(){\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\t\tvar bars = this._groupEl.selectAll(\".\"+style.bar);\r\n\r\n\t\t// fills bars with given selection\r\n\t\tvar fillBars = (s) => {\r\n\t\t\t// handle bar colors\r\n\t\t\tbars.attr(\"fill\", (d)=> {\r\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\r\n\t\t\t\treturn this._getBarColor(barX, s);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// handle animation if previous selection is set\r\n\t\tif (this._prevSelection){\r\n\t\t\t// set prev selection\r\n\t\t\tfillBars(this._prevSelection);\r\n\r\n\t\t\t// set handle positions to prev selection\r\n\t\t\tthis._prevSelection.forEach((s, i)=>{\r\n\t\t\t\tthis._handles[i].setHandleXPosition(this._histogramData.valueToPosition(s.from))\r\n\t\t\t\tthis._handles[i+1].setHandleXPosition(this._histogramData.valueToPosition(s.to))\r\n\t\t\t});\r\n\r\n\t\t\t// fill bars on selection transition and move handles\r\n\t\t\tthis._onSelectionTransition(this._prevSelection, selection, (p, selectionIndex, handleIndex)=>{\r\n\t\t\t\tvar bar = d3.select(bars.nodes()[p-1]);\r\n\t\t\t\tbar.attr(\"fill\", this._getBarColor(p, selection));\r\n\r\n\t\t\t\t// move handles\r\n\t\t\t\t[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].setHandleXPosition(p);\r\n\t\t\t});\r\n\r\n\t\t\tthis._prevSelection = null;\r\n\t\t\r\n\t\t} else {\r\n\t\t\tfillBars(selection)\r\n\t\t}\r\n\t\t\r\n\t\t// space filling rectangles\r\n\t\tthis._groupEl.selectAll(\".\"+style.selectionbar)\r\n\t\t\t.data(selection)\r\n\t\t\t.attr(\"data-selection-index\", function(d,i){\r\n\t\t\t\treturn i;\r\n\t\t\t})\r\n\t\t\t.attr(\"x\", (d) => { \r\n\t\t\t\treturn this._histogramData.valueToPosition(d.from);\r\n\t\t\t})\r\n\t\t\t.attr(\"width\", (d) => {\r\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\r\n\t\t\t})\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys histogram UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._observable.destroy();\r\n\t\tthis._clear();\r\n\r\n\t\treturn this;\r\n    }\t\t\r\n}","import style from \"./Histogram.css\";\r\nimport HistogramSelectionRenderer from \"./selection/HistogramSelectionRenderer\";\r\nimport * as Defaults from \"./HistogramDefaults\";\r\nimport Observable from \"./utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Histogram renderer class\r\n * @param {Object} options\r\n */\r\nexport default class HistogramRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Histogram options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._historyData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = d3.scaleBand().range([0, options.width]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = d3.scaleLinear().range([options.height, 0]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous data for animation\r\n\t\t */\r\n\t\tthis._prevData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * selection renderer\r\n\t\t */\r\n\t\tthis._selectionRenderer = new HistogramSelectionRenderer(options);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a category\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is changed\r\n\t\t\t * @param {Array} selection\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\t\t\r\n\r\n\t\t// relay selection events\r\n\t\tthis._selectionRenderer.on(\"selectionOver\", (selectionIndex)=>{\r\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\r\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"selectionChanged\", (selection)=>{\r\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\r\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t\t});\t\t\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether histogram has been rendered or not\r\n\t * @returns {boolean} true if histogram has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\trender(selector){\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar margin = Defaults.MARGIN;\r\n\r\n\t\t// render SVG\r\n\t\tvar svg = this._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width + margin.left + margin.right)\r\n\t\t\t.attr(\"height\", height + margin.top + margin.bottom);\r\n\r\n\t\t// render group element\r\n\t\tvar g = this._groupEl = this._svgEl.append(\"g\")\r\n\t\t\t.classed(style.inactive, true)\r\n\t\t\t.attr(\"transform\",\r\n\t\t\t\"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\t\t// handle hover over svg element\r\n\t\tsvg.on(\"mouseover.hover\", ()=>{\r\n\t\t\tg.classed(style.active, true)\r\n\t\t\tg.classed(style.inactive, false)\r\n\t\t})\r\n\r\n\t\tsvg.on(\"mouseout.hover\", ()=>{\r\n\t\t\tg.classed(style.inactive, true)\r\n\t\t\tg.classed(style.active, false)\r\n\t\t})\r\n\r\n\t\tthis._selectionRenderer.render(g);\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t} \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._groupEl.node().innerHTML = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Refreshes histogram data \r\n\t * @param {HistogramData}\r\n\t * @param {HistogramSelection}\r\n\t */\r\n\trefresh(histogramData, histogramSelection){\r\n\t\tthis._histogramData = histogramData;\t\t\r\n\t\tthis._clear();\r\n\r\n\t\tthis._xAxis.domain(histogramData.getData().map(function (d) {return d.value; }));\r\n\t\tthis._yAxis.domain([0, d3.max(histogramData.getData(), function (d) { return d.volume; })]);\r\n\r\n\t\tthis._renderXAxis();\t\t\r\n\t\tthis._renderDataBars();\r\n\r\n\t\tthis._prevData = histogramData.getData();\t\t\t\r\n\r\n\t\tthis._selectionRenderer.refresh(histogramData, histogramSelection);\t\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Renders data bars\r\n\t*/\r\n\t_renderDataBars() { \r\n\t\tvar data = this._histogramData.getData();\r\n\t\tvar prevData = this._prevData;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\tvar x = this._xAxis;\r\n\t\tvar y = this._yAxis;\r\n\r\n\t\t// animate from previous data if available\r\n\t\tif (prevData){\r\n\t\t\tx.domain(prevData.map(function (d) {return d.value; }));\r\n\t\t\ty.domain([0, d3.max(prevData, function (d) { return d.volume; })]);\r\n\r\n\t\t\tthis._groupEl.selectAll(\".\"+style.bar)\r\n\t\t\t\t.data(prevData)\r\n\t\t\t\t.enter().append(\"rect\")\r\n\t\t\t\t.attr(\"class\", style.bar)\r\n\t\t\t\t.attr(\"x\", function (d) { return x(d.value); })\r\n\t\t\t\t.attr(\"width\", x.bandwidth())\r\n\t\t\t\t.attr(\"y\", function (d) { return Math.floor(y(d.volume)); })\r\n\t\t\t\t.attr(\"height\", function (d) {return Math.ceil(height - y(d.volume)); })\r\n\r\n\t\t\tx.domain(data.map(function (d) {return d.value; }));\r\n\t\t\ty.domain([0, d3.max(data, function (d) { return d.volume; })]);\t\t\t\t\r\n\r\n\t\t\tthis._groupEl.selectAll(\".\"+style.bar)\r\n\t\t\t\t.data(data)\r\n\t\t\t\t.transition()\r\n\t\t\t\t.duration(500)\r\n\t\t\t\t.attr(\"y\", function (d) { return Math.floor(y(d.volume)); })\r\n\t\t\t\t.attr(\"height\", function (d) { return Math.ceil(height - y(d.volume)); })\r\n\t\t} else {\r\n\t\t\t// append the rectangles for the bar chart\r\n\t\t\tthis._groupEl.selectAll(\".\"+style.bar)\r\n\t\t\t\t.data(data)\r\n\t\t\t\t.enter().append(\"rect\")\r\n\t\t\t\t.attr(\"class\", style.bar)\r\n\t\t\t\t.attr(\"x\", function (d) { return x(d.value); })\r\n\t\t\t\t.attr(\"width\", x.bandwidth())\r\n\t\t\t\t.attr(\"y\", function (d) { return Math.floor(y(d.volume)); })\r\n\t\t\t\t.attr(\"height\", function (d) { return Math.ceil(height - y(d.volume)); })\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders X axis \r\n\t*/        \r\n\t_renderXAxis(){\r\n\t\tvar minMax = this._histogramData.getMinMax();\r\n\t\tvar format = this._options.format;\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\t// create bottom axis\r\n\t\tvar axis = d3.axisBottom(this._xAxis)\r\n\t\t\t.tickValues([minMax.min, minMax.max])\r\n\t\t\t.tickSize(0)\r\n\t\t\t.tickFormat(format)\r\n\t\t\t.tickPadding(15);\r\n\r\n\t\tvar axisGroup = this._groupEl.append(\"g\")\r\n\t\t\t.attr(\"transform\", \"translate(0,\" + height + \")\")\r\n\t\t\t.classed(style[\"x-axis\"], true)\r\n\t\t\t.call(axis);\r\n\r\n\t\taxisGroup.selectAll(\".tick\").attr(\"transform\", function(d, i){\r\n\t\t\treturn [\"translate(0,0)\", \"translate(\"+width+\",0)\"][i];\r\n\t\t})\r\n\r\n\t\taxisGroup.selectAll(\".tick>text\").attr(\"x\", 0);\r\n\r\n\t\taxisGroup.selectAll(\".tick\").attr(\"text-anchor\", function(d, i){\r\n\t\t\treturn [\"start\", \"end\"][i];\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys histogram UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\t\tthis._selectionRenderer.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","import HistogramSelection from \"./HistogramSelection\";\nimport * as Defaults from \"../HistogramDefaults\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class FilterHistogramSelectionImpl extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tif (selection.length != 1){\n\t\t\tthrow \"Filter selection doesn't allow more than one selection\"\n\t\t}\n\t\tsuper();\n\t\tthis._selection = selection.slice();\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelection()\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\treturn this._selection;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.FILTER;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn false;\n\t}\t\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t\n}","import FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class InvertedFilterHistogramSelectionImpl extends FilterHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n\n\t\tthis._selection = this._getInvertedSelection(histogramData, selection);\n    }\n\n\n\t_getInvertedSelection(histogramData, selection){\n\t\tvar minMax = histogramData.getMinMax();\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:minMax.min,\n\t\t\t\tto:selection[0].from\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].from,\n\t\t\t\tdisabled:true,\n\t\t\t\tto:selection[0].to\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].to,\n\t\t\t\tto:minMax.max\n\t\t\t}\n\t\t];\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:this._selection[1].from,\n\t\t\t\tto:this._selection[1].to\n\t\t\t}\n\t\t];\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.INVERTED_FILTER;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = super.getSelectionPoints();\n\t\t\n\t\tresult[0].hidden = true;\n\t\tresult[result.length-1].hidden = true;\n\n\t\treturn result;\n\t}  \t\n}","import DefaultHistogramSelectionImpl from \"./DefaultHistogramSelectionImpl\";\nimport MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport InvertedFilterHistogramSelectionImpl from \"./InvertedFilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * HistogramSelection factory returns appropriate selection implementation\n */\nexport default class HistogramSelectionFactory {\n\t/**\n\t * @param {Object} options\n\t */\n\tconstructor(options) {\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * @param {HistogramData} histogramData\n\t * @returns {HistogramSelection} returns histogram selection\n\t * Returns histogram selection\n\t */\n\tgetHistogramSelection(selection, histogramData){\t\t\n\t\t// use default histogram selection if selection is not provided\n\t\tif (!selection){\n\t\t\treturn new DefaultHistogramSelectionImpl(histogramData, this._options.selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.FILTER){\n\t\t\treturn new FilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.INVERTED_FILTER){\n\t\t\treturn new InvertedFilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else {\n\t\t\treturn new MultipleHistogramSelectionImpl(histogramData, selection);\n\t\t}\n\t}  \t\n}"],"names":["getHandlePositionOffsets","handle1","handle2","maskPadding","width","label1Box","getLabelBox","label2Box","conflictDiff","x","posDiff1","posDiff2","xMax","getOptionValue","optionValue","defaultOptionValue","Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","WIDTH","HEIGHT","MARGIN","INACTIVE_BAR_COLOR","OVER_SELECTION_COLOR","SELECTION_COLOR","ENABLE_SELECTION_TOGGLE","MASK_PADDING","DEFAULT_COLORS","HistogramData","data","options","_histogramData","_loadHistogramData","_minMax","_calculateMinMax","_options","histogramData","d3","d","value","max","min","num","numParts","toString","split","position","getValueRatio","getMinMax","valueRatio","numOfBarsPerBucket","forEach","bucket","step","content","frequency","HistogramSelection","SelectionTypes","MultipleHistogramSelection","selection","_selection","slice","MULTI","result","getSelection","s","from","to","DefaultHistogramSelectionImpl","minMax","colors","Defaults","start","map","color","MultipleHistogramSelectionImpl","gradientIndex","HistogramHandle","groupEl","_observable","_handleEl","_handleLineEl","_handleCircleEl","_handleMaskEl","_handleMaskGradientEl","_handleLabelEl","_isOver","_groupEl","_index","_value","_position","valueToPosition","_elements","_renderHandle","element","remove","_createHandleElement","_createHandleLineElement","_createHandleCircleElement","_createDragMaskElement","_createMaskGradientElement","_createDragLabelElement","_handleHoverState","_handleDrag","attr","eventName","on","parseInt","node","getBBox","offset","height","setHoverState","unsetHoverState","classed","style","fire","xpos","Math","round","format","positionToValue","text","_this2","_updateLabelPosition","call","_onDrag","bind","_onStartDrag","_onEndDrag","label","textLength","getComputedTextLength","maskWidth","xPosition","append","selectAll","enter","_this3","HistogramSelectionRenderer","_histogramSelection","_overSelectionIndex","_rendered","_handles","_draggingHandle","_prevSelection","_destroyHandles","_selectionBars","handle","destroy","handleIndex","handleValue","promptHandler","then","promptResult","parseFloat","_this","points","getSelectionPoints","positions","point","sort","p1","p2","_updateSelectionPositions","_updateSelection","_renderHandles","selectionIndex","disabled","enabled","target","allowsToggle","_toggleSelection","_onHandleClick","_onClick","histogramSelection","_clear","_renderSelection","_handleClick","handles","h1","h2","getXPosition","labelOffsets","PositionUtils","setLabelOffset","nodes","_updateSelectionControlsHoverState","g","selectionbar","_onSelectionMouseOut","_onSelectionMouseOver","p","hidden","hide","_onHandleDrag","startSelectionSnapshot","JSON","stringify","disable","enable","getOutputSelection","barX","inactiveBarColor","overSelectionColor","barSelectionIndex","_getBarSelectionIndex","selectionColor","selection1","selection2","onTransition","s1","s2","_this4","transitions","frames","abs","t","duration","bars","bar","fillBars","_this5","_getBarColor","setHandleXPosition","_onSelectionTransition","HistogramRenderer","_containerEl","_svgEl","_historyData","_xAxis","range","_yAxis","_prevData","_selectionRenderer","selector","ct","margin","svg","left","right","top","bottom","inactive","active","render","innerHTML","domain","getData","volume","_renderXAxis","_renderDataBars","refresh","prevData","y","bandwidth","floor","ceil","transition","axis","tickValues","tickSize","tickFormat","tickPadding","axisGroup","removeChild","FilterHistogramSelectionImpl","FILTER","InvertedFilterHistogramSelectionImpl","_getInvertedSelection","INVERTED_FILTER","HistogramSelectionFactory","selectionType","Histogram","enableSelectionToggle","_histogramRenderer","_selectionFactory","off","isRendered","getHistogramSelection","getPrecision","setSelection"],"mappings":"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"}