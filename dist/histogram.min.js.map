{"version":3,"file":"histogram.min.js","sources":["../src/utils/SelectionUtils.js","../src/utils/PositionUtils.js","../src/Histogram.js","../src/utils/Observable.js","../src/HistogramDefaults.js","../src/HistogramData.js","../src/HistogramSelection.js","../src/HistogramHandle.js","../src/HistogramRenderer.js"],"sourcesContent":["import * as Defaults from \"../HistogramDefaults\";\n\n/**\n * @public\n * @param {HistogramData} histogramData \n */\nexport function getDefaultSelection(histogramData){\n    var minMax = histogramData.getMinMax();\n    var colors = Defaults.DEFAULT_COLORS;\n    var start = minMax.min;\n    var step = (minMax.max - minMax.min) / colors.length;\n    return colors.map(color=>{\n        var from = start;\n        var to = start + step;\n        start += step;\n\n        return {\n            from:from, \n            to:to,\n            color:color\n        }\n    });\n}","/**\n * @public\n * Returns handle positions offsets so that labels don't conflict visually\n * @param {HistogramData} histogramData \n * @returns {Array} label offsets\n */\nexport function getHandlePositionOffsets(handle1, handle2, maskPadding, width){\n    var label1Box = handle1.getLabelBox();\n    var label2Box = handle2.getLabelBox();\n\n    // calculate conflict number\n    var conflictDiff = label2Box.x - (label1Box.x + label1Box.width)-maskPadding;\n    // and handle if there is not enough space\n    if (conflictDiff<0){\n        // pos1 diff to the left\n        var posDiff1 = conflictDiff/2;\n        // pos2 diff to to right\n        var posDiff2 = conflictDiff/2;\n\n        // position left to 0 if position would be lower than 0\n        var xMin = label1Box.x+posDiff1;\n        if (xMin < 0){\n            posDiff1 = label1Box.x; \n            // also shift right label so we keep it visible\n            posDiff2 = posDiff2*2\n        }\n\n        // same with max value\n        var xMax = label2Box.x+label2Box.width-posDiff2;\n        if (xMax > width){\n            // needs to consider 2px offset otherwise label woudl shift, TODO: investigate why\n            var offset = 2;\n            posDiff2 += xMax-width-offset; \n            posDiff1 = posDiff1*2\n        }\n        return [posDiff1, -posDiff2];                  \n    }\n\n    return [0,0];\n}","import * as d3 from \"d3\";\nimport { Observable } from \"./utils/Observable\";\nimport * as Defaults from \"./HistogramDefaults\";\nimport * as SelectionUtils from \"./utils/SelectionUtils\";\nimport { HistogramData } from \"./HistogramData\";\nimport { HistogramSelection } from \"./HistogramSelection\";\nimport { HistogramRenderer } from \"./HistogramRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main histogram class\n * @param {Object} options\n */\nclass Histogram {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar color \n\t\t */\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Over bar color \n\t\t */\n\t\tthis._options.overSelectionColor = getOptionValue(options.overSelectionColor, Defaults.OVER_SELECTION_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.selectionColor = getOptionValue(options.selectionColor, Defaults.SELECTION_COLOR);\n\t\t\n\t\t/**\n\t\t * @public\n\t\t * Enable selection toggle \n\t\t */\n\t\tthis._options.enableSelectionToggle = getOptionValue(options.enableSelectionToggle, Defaults.ENABLE_SELECTION_TOGGLE);\n\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Mask padding\n\t\t */\n\t\tthis._options.maskPadding = getOptionValue(options.maskPadding, Defaults.MASK_PADDING);\n\n\t\t/**\n\t\t * @public\n\t\t * selection array\n\t\t */\n\t\tthis._options.selection = getOptionValue(options.selection, null);\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * histogramRenderer\n\t\t */\n\t\tthis._histogramRenderer = new HistogramRenderer(this._options);\n\n\t\tthis._histogramRenderer.on(\"selectionOver\", selectionIndex=>{\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"selectionChanged\", (selection)=>{\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\n\t\t})\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._histogramRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Array} data\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetData(data, selection) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar histogramData = new HistogramData(data, this._options);\n\n\t\tif (!selection) {\n\t\t\tthis._options.selection = SelectionUtils.getDefaultSelection(histogramData);\n\t\t} else {\n\t\t\tthis._options.selection = selection;\n\t\t}\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + histogramData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tvar histogramSelection = new HistogramSelection(this._options.selection);\n\n\t\tthis._histogramRenderer.refresh(histogramData, histogramSelection);\n\n\t\treturn this;\n\t}\n\n}\nexport default Histogram;","/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nclass Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tthis._handlers[event].push(handler);\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Fire widget event\r\n\t * @param {String} event event name\r\n\t * @param {*} ...args event arguments\r\n\t */\r\n\tfire(event, ...args) {\r\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tvar handlers = this._handlers[event];\r\n\t\tfor (var i = 0; i < handlers.length; i++) {\r\n\t\t\thandlers[i].apply(this, args);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n}\r\nexport {Observable}","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default widget height\r\n */\r\nexport const HEIGHT = 150;\r\n\r\n/**\r\n * @public\r\n * Default widget margin\r\n */\r\nexport const MARGIN = {\r\n    top:0,\r\n    left:5,\r\n    right:5,\r\n    bottom:25\r\n};\r\n\r\n/**\r\n * @public\r\n * Default inactive bar color\r\n */\r\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const OVER_SELECTION_COLOR = \"#ffea00\";\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const SELECTION_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Enable selection toggle\r\n */\r\nexport const ENABLE_SELECTION_TOGGLE = true;\r\n\r\n/**\r\n * @public\r\n * Default padding of label mask\r\n */\r\nexport const MASK_PADDING = 10;\r\n\r\n/**\r\n * @public\r\n * Default colors \r\n */\r\nexport const DEFAULT_COLORS = [\"#e6f3fb\", \"#cbe7f6\", \"#b1dbf2\", \"#98cfee\", \"#7ec4ea\"];","import * as d3 from \"d3\";\n\n/**\n * @class\n * HistogramData representing data for the histogram view\n */\nclass HistogramData {\n\t/**\n\t * @param {data} data\n\t * @param {Object} options\n\t */\n\tconstructor(data, options) {\n\t\tthis._histogramData = this._loadHistogramData(data, options.width);\n\t\tthis._minMax = this._calculateMinMax(this._histogramData);\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns histogram data\n\t * @returns {Array} histogram data\n\t */\n\tgetData() {\n\t\treturn this._histogramData;\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given histogramData\n\t* @param {Array} histogramData\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(histogramData) {\n\t\tvar min = d3.min(histogramData, function (d) { return d.value; });\n\t\tvar max = d3.max(histogramData, function (d) { return d.value; });\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t* Returns value ratio between bars and data\n\t* @return {Number} value ratio \n\t*/\n\tgetValueRatio() {\n\t\tvar range = this._minMax.max - this._minMax.min;\n\t\treturn range / this._options.width;\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.min;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns data value from given position \n\t * @param {Number} position\n\t */\n\tpositionToValue(position) {\n\t\tvar valueRatio = this.getValueRatio();\n\t\tvar minMax = this.getMinMax();\n\t\treturn position * valueRatio + minMax.min;\n\t}\n\n\t/**\n\t * @public\n\t * Returns position from given data value \n\t * @param {Number} value\n\t */\n\tvalueToPosition(value) {\n\t\tvar valueRatio = this.getValueRatio();\n\t\tvar minMax = this.getMinMax();\n\t\treturn Math.round(value / valueRatio - minMax.min / valueRatio);\n\t}\n\n\t/** \n\t* @private\n\t* @param {Array} buckets\n\t* @param {int} numOfBarsPerBucket - number of bars per column\\\n\t* @returns {Array} data from given buckets \n\t*/\n\t_loadHistogramData(data, width) {\n\t\tvar histogramData = [];\n\t\t// calculate number of bars per bucket excluding last pixel for max value\n\t\tvar numOfBarsPerBucket = (width-1) / data.length;\n\n\t\tdata.forEach((bucket, i) => {\n\t\t\tvar step = (bucket.max - bucket.min) / numOfBarsPerBucket;\n\t\t\td3.range(bucket.min, bucket.max, step).forEach((value, i) => {\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tvolume: bucket.content[0].frequency\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// adding max value pixel as each non-last bucket ends one pixel before next bucket starts\n\t\t\tif (i == data.length-1){\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: bucket.max,\n\t\t\t\t\tvolume: bucket.content[0].frequency\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn histogramData;\n\t}\n}\n\nexport { HistogramData };","/**\n * @class\n * HistogramSelection representing histogram selection\n */\nclass HistogramSelection {\n\t/**\n\t * @param {Array} selection\n\t */\n    constructor(selection) {\n\t\tthis._selection = selection.slice();\n    }\n\n\t/**\n\t * @public\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\treturn this._selection;\n\t}\n\n\t/**\n\t * @public \n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push(s.from);\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push(s.to);\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t\n}\n\nexport {HistogramSelection};","import * as d3 from \"d3\";\r\nimport style from \"./Histogram.css\";\r\nimport { Observable } from \"./utils/Observable\";\r\n\r\n/**\r\n * Gradient index shared for all instances\r\n */\r\nvar gradientIndex = 0;\r\n\r\n/**\r\n * @class\r\n * HistogramHandle representing control handle for histogram\r\n */\r\nclass HistogramHandle {\r\n\t/**\r\n\t * @param {D3Selection} groupEl\r\n\t * @param {Number} value\r\n\t * @param {Number} index\r\n\t * @param {HistoryData} histogramData\r\n\t * @param {Object} options\r\n\t */\r\n\tconstructor(groupEl, value, index, histogramData, options) {\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a selection\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"drag\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when drag on handle starts\r\n\t\t\t * @param {HistogramHandle} handle\r\n\t\t\t */\r\n\t\t\t\"startDrag\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when drag on handle ends\r\n\t\t\t * @param {HistogramHandle} handle\r\n\t\t\t */\r\n\t\t\t\"endDrag\"\r\n\t\t]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle element\r\n\t\t */\r\n\t\tthis._handleEl = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle line element\r\n\t\t */\r\n\t\tthis._handleLineEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle circle element\r\n\t\t */\r\n\t\tthis._handleCircleEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle mask element\r\n\t\t */\r\n\t\tthis._handleMaskEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle mask gradient element\r\n\t\t */\r\n\t\tthis._handleMaskGradientEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle label element\r\n\t\t */\r\n\t\tthis._handleLabelEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * True if handle is over\r\n\t\t */\r\n\t\tthis._isOver = false;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element\r\n\t\t */\t\t\r\n\t\tthis._groupEl = groupEl;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle index\r\n\t\t */\t\t\r\n\t\tthis._index = index;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle value\r\n\t\t */\t\t\r\n\t\tthis._value = value;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle position\r\n\t\t */\t\t\r\n\t\tthis._position = histogramData.valueToPosition(value);\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * bar options\r\n\t\t */\t\t\r\n\t\tthis._options = options;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * histogram data\r\n\t\t */\t\t\r\n\t\tthis._histogramData = histogramData;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * elements\r\n\t\t */\t\t\r\n\t\tthis._elements = [];\t\t\r\n\t\t\r\n\t\tthis._renderHandle();\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destroys this handle\r\n\t */\r\n\tdestroy(){\r\n\t\tthis._elements.forEach(element=>element.remove());\r\n\t\tthis._elements = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t   * Renders drag handle\r\n\t   */\r\n\t_renderHandle() {\r\n\t\tthis._elements = [\r\n\t\t\tthis._createHandleElement(),\r\n\t\t\tthis._createHandleLineElement(),\r\n\t\t\tthis._createHandleCircleElement(),\r\n\t\t\tthis._createDragMaskElement(),\r\n\t\t\tthis._createMaskGradientElement(),\r\n\t\t\tthis._createDragLabelElement()\r\n\t\t];\r\n\r\n\t\tthis._handleHoverState();\r\n\t\tthis._handleDrag();\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns X position of this handle\r\n\t * @returns {Number} X position handle\r\n\t */\r\n\tgetXPosition() {\r\n\t\treturn parseInt(this._handleEl.attr(\"x\"))+5;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Sets hover state\r\n\t */\r\n\tsetHoverState(){\r\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleMaskEl.attr(\"visibility\", \"visible\");\r\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 3);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public \r\n\t * @returns {SVGRect} \r\n\t * Returns drag label box for this handle\r\n\t */\r\n\tgetLabelBox(){\r\n\t\treturn this._handleLabelEl.node().getBBox();\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * Shifts handle label by given offset so it can handle label position conflicts\r\n\t */\r\n\tsetLabelOffset(offset){\r\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(\"+offset+\", 0)\")\r\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(\"+offset+\", 0)\")\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * Sets handle position\r\n\t */\r\n\tsetHandleXPosition(position){\r\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\"+position+\", \"+this._options.height+\")\")\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unsets hover state\r\n\t */\r\n\tunsetHoverState(){\r\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleMaskEl.attr(\"visibility\", \"hidden\");\r\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 1);\r\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(0, 0)\")\r\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(0, 0)\")\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Enables this handle \r\n\t */\r\n\tenable(){\r\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"all\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Disables this handle \r\n\t */\r\n\tdisable(){\r\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"none\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handle hover state\r\n\t */\r\n\t_handleHoverState(){\r\n\t\t// line hover effect\r\n\t\tthis._handleEl.on(\"mouseover\", () => {\r\n\t\t\tthis._isOver = true;\r\n\t\t\tthis.setHoverState();\r\n\t\t})\r\n\t\tthis._handleEl.on(\"mouseout\", () => {\r\n\t\t\tthis._isOver = false;\r\n\t\t\tthis.unsetHoverState();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens when drag starts\r\n\t */\r\n\t_onStartDrag(){\r\n\t\tthis._groupEl.classed(style[\"dragging\"], true);\r\n\t\tthis._observable.fire(\"startDrag\", this);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens on drag\r\n\t */\r\n\t_onDrag(){\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar xpos = Math.round(Math.max(Math.min(d3.event.x, width), 0));\r\n\t\tvar format = this._options.format;\r\n\r\n\t\tthis._handleEl.attr(\"x\", xpos - 5);\r\n\t\tthis._handleLineEl.attr(\"x\", xpos - 2);\r\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\" + xpos + \",\" + height + \")\");\r\n\t\tthis._handleEl.attr(\"data-handle-value\", this._histogramData.positionToValue(xpos))\r\n\r\n\t\tthis.setHoverState();\r\n\r\n\t\tthis._handleLabelEl.text(() => {\r\n\t\t\treturn format(this._histogramData.positionToValue(xpos));\r\n\t\t})\r\n\r\n\t\tthis._updateLabelPosition(xpos);\r\n\t\tthis._observable.fire(\"drag\");\t\t\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens when drag ends\r\n\t */\r\n\t_onEndDrag(){\r\n\t\tthis._groupEl.classed(style[\"dragging\"], false);\r\n\t\tif (!this._isOver) {\r\n\t\t\tthis.unsetHoverState();\r\n\t\t}\r\n\r\n\t\tthis._observable.fire(\"endDrag\", this);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles handle drag \r\n\t */\r\n\t_handleDrag(){\r\n\t\tthis._handleEl.call(d3.drag()\r\n\t\t\t.on(\"drag\", this._onDrag.bind(this))\r\n\t\t\t.on(\"start\", this._onStartDrag.bind(this))\r\n\t\t\t.on(\"end\", this._onEndDrag.bind(this)));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Updates label position\r\n\t * @param {Number} position \r\n\t */\r\n\t_updateLabelPosition(position) {\r\n\t\tvar label = this._handleLabelEl.node();\r\n\t\tvar maskPadding = this._options.maskPadding;\t\t\r\n\r\n\t\t// we need to calculate text length so we can create mask and center text\r\n\t\tvar textLength = label.getComputedTextLength();\r\n\t\tvar maskWidth = textLength + maskPadding * 2;\r\n\t\tvar xPosition = position - textLength / 2;\r\n\r\n\t\t// handle when dragging towards left side\r\n\t\tif (xPosition < 0) {\r\n\t\t\txPosition = 0;\r\n\t\t}\r\n\r\n\t\t// handle when dragging towards right side\r\n\t\tif (xPosition + textLength > this._options.width) {\r\n\t\t\txPosition = this._options.width  - textLength;\r\n\t\t\tthis._handleLabelEl.attr(\"x\", this._options.width);\r\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"end\");\r\n\t\t} else {\r\n\t\t\tthis._handleLabelEl.attr(\"x\", xPosition);\r\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"start\");\r\n\t\t}\r\n\r\n\t\t// position mask\r\n\t\tthis._handleMaskEl.attr(\"x\", () => {\r\n\t\t\treturn parseInt(xPosition) - maskPadding;\r\n\t\t});\r\n\r\n\t\tthis._handleMaskGradientEl.attr(\"x1\", xPosition - maskPadding);\r\n\t\tthis._handleMaskGradientEl.attr(\"x2\", xPosition + maskWidth - maskPadding);\r\n\r\n\t\tthis._handleMaskEl.attr(\"width\", maskWidth);\r\n\t\tthis._handleMaskEl.attr(\"height\", 20);\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * Creates mask gradient element\r\n\t * @param {Number} handleIndex \r\n\t */\r\n\t_createMaskGradientElement(){\r\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\r\n\t\t\t.attr(\"id\", \"brush-mask-gradient-\" + gradientIndex++)\r\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\r\n\t\t\t.attr(\"y1\", 0).attr(\"x1\", 50)\r\n\t\t\t.attr(\"y2\", 0).attr(\"x2\", 0);\r\n\r\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\r\n\t\t\t.data([\r\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\r\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\r\n\t\t\t])\r\n\t\t\t.enter().append(\"stop\")\r\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\r\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\r\n\r\n\t\treturn this._handleMaskGradientEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders main handle element \r\n\t * @returns {SVGElement}\r\n\t */\r\n\t_createHandleElement(){\r\n\t\tthis._handleEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle\"])\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"data-handle-index\", this._index)\r\n\t\t\t.attr(\"data-handle-value\", this._value)\r\n\t\t\t.attr(\"cursor\", \"ew-resize\")\r\n\t\t\t.attr(\"width\", 10)\r\n\t\t\t.attr(\"height\", this._options.height + 5)\r\n\t\t\t.attr(\"x\", this._position - 5);\r\n\r\n\t\treturn this._handleEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders handle line element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createHandleLineElement(){\r\n\t\tthis._handleLineEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle-line\"])\r\n\t\t\t.attr(\"width\", 4)\r\n\t\t\t.attr(\"height\", this._options.height)\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"x\", this._position - 2);\r\n\r\n\t\treturn this._handleLineEl;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders handle circle element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createHandleCircleElement(){\r\n\t\tthis._handleCircleEl = this._groupEl.append(\"circle\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle-circle\"])\r\n\t\t\t.attr(\"transform\", \"translate(\" + this._position + \",\" + this._options.height + \")\")\r\n\t\t\t.attr(\"fill\", \"#ffffff\")\r\n\t\t\t.attr(\"fill-opacity\", 1)\r\n\t\t\t.attr(\"stroke\", \"#000\")\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"cursor\", \"ew-resize\")\r\n\t\t\t.attr(\"r\", 3.5);\r\n\r\n\t\treturn this._handleCircleEl;\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders drag mask element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createDragMaskElement(){\r\n\t\tthis._handleMaskEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"drag-label-mask\"])\r\n\t\t\t.attr(\"fill\", \"url(#brush-mask-gradient-\" + gradientIndex+\")\")\r\n\t\t\t.attr(\"y\", this._options.height + 12)\r\n\t\t\t.attr(\"visibility\", \"hidden\");\t\t\t\r\n\r\n\t\treturn this._handleMaskEl;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @private \r\n\t * Renders handle label element \r\n\t * @returns {SVGElement}  \r\n\t */\r\n\t_createDragLabelElement(){\r\n\t\tvar format = this._options.format;\r\n\t\tvar data = this._histogramData;\r\n\t\tvar height = this._options.height;\r\n\t\tthis._handleLabelEl = this._groupEl.append(\"text\")\r\n\t\t\t.attr(\"class\", style[\"drag-label\"])\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.text(() => {\r\n\t\t\t\treturn format(data.positionToValue(this._position));\r\n\t\t\t}).attr(\"y\", height + 22);\r\n\r\n\t\t\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t\treturn this._handleLabelEl;\r\n\t}\r\n}\r\n\r\nexport { HistogramHandle };","import style from \"./Histogram.css\";\r\nimport {HistogramHandle} from \"./HistogramHandle\";\r\nimport * as Defaults from \"./HistogramDefaults\";\r\nimport { Observable } from \"./utils/Observable\";\r\nimport * as PositionUtils from \"./utils/PositionUtils\"\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Histogram renderer class\r\n * @param {Object} options\r\n */\r\nclass HistogramRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Histogram options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._historyData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = d3.scaleBand().range([0, options.width]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = d3.scaleLinear().range([options.height, 0]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * index of over selection  \r\n\t\t */\r\n\t\tthis._overSelectionIndex = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if handle is dragged\r\n\t\t */\r\n\t\tthis._draggingHandle = false;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous data for animation\r\n\t\t */\r\n\t\tthis._prevData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous selection for animation\r\n\t\t */\r\n\t\tthis._prevSelection = null;\r\n\r\n\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a category\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is changed\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\"\r\n\t\t]);\t\t\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether histogram has been rendered or not\r\n\t * @returns {boolean} true if histogram has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\trender(selector){\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar margin = Defaults.MARGIN;\r\n\r\n\t\t// render SVG\r\n\t\tvar svg = this._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width + margin.left + margin.right)\r\n\t\t\t.attr(\"height\", height + margin.top + margin.bottom);\r\n\r\n\t\t// render group element\r\n\t\tvar g = this._groupEl = this._svgEl.append(\"g\")\r\n\t\t\t.classed(style.inactive, true)\r\n\t\t\t.attr(\"transform\",\r\n\t\t\t\"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\t\t// handle hover over svg element\r\n\t\tsvg.on(\"mouseover.hover\", ()=>{\r\n\t\t\tg.classed(style.active, true)\r\n\t\t\tg.classed(style.inactive, false)\r\n\t\t})\r\n\r\n\t\tsvg.on(\"mouseout.hover\", ()=>{\r\n\t\t\tg.classed(style.inactive, true)\r\n\t\t\tg.classed(style.active, false)\r\n\t\t})\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t} \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._groupEl.node().innerHTML = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Destroys selection controls \r\n\t */\r\n\t_destroyHandles(){\r\n\t\tthis._handles.forEach(handle=>handle.destroy());\r\n\t\tthis._handles = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles click on handle\r\n\t * @param {Number} handleIndex\r\n\t * @param {Number} handleValue \r\n\t */\r\n\t_onHandleClick(handleIndex, handleValue){\r\n\t\t// TODO: replace this by CAN API or options \r\n\t\tvar promptResult = window.prompt(\"value\", this._options.format(handleValue));\r\n\t\tif (promptResult == null){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// must be within min max range\r\n\t\tvar minMax = this._histogramData.getMinMax();\r\n\t\tpromptResult = Math.min(minMax.max, promptResult);\r\n\t\tpromptResult = Math.max(minMax.min, promptResult);\r\n\r\n\t\tvar points = this._histogramSelection.getSelectionPoints();\r\n\t\tpoints[handleIndex] = promptResult;\r\n\t\tvar positions = points\r\n\t\t\t.map(value=>this._histogramData.valueToPosition(value))\r\n\t\t\t.sort((p1,p2)=>p1-p2);\r\n\t\t\r\n\t\tthis._updateSelectionPositions(positions);\r\n\t\tthis._updateSelection();\r\n\r\n\t\t// TODO: update handles without destroying them\r\n\t\tthis._destroyHandles();\r\n\t\tthis._renderHandles();\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Toggles selection\r\n\t * @param {Number} selectionIndex \r\n\t */\r\n\t_toggleSelection(selectionIndex){\r\n\t\tvar selection = this._options.selection[selectionIndex];\r\n\t\tselection.disabled = !selection.disabled;\r\n\t\tvar enabled = !selection.disabled;\r\n\t\tthis._updateSelection();\r\n\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles click on chart\r\n\t */\r\n\t_onClick(){\r\n\t\tvar target = d3.select(d3.event.target);\r\n\t\tvar selectionIndex = target.attr(\"data-selection-index\");\r\n\t\tvar handleIndex = target.attr(\"data-handle-index\");\r\n\r\n\t\tif (selectionIndex != null){\r\n\t\t\tthis._toggleSelection(selectionIndex)\r\n\t\t} else if (handleIndex != null){\r\n\t\t\tthis._onHandleClick(handleIndex, target.attr(\"data-handle-value\"));\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * Handles handle click \r\n\t */\r\n\t_handleClick(){\r\n\t\tthis._groupEl.on(\"click\", this._onClick.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Refreshes histogram data \r\n\t * @param {HistogramData}\r\n\t * @param {HistogramSelection}\r\n\t */\r\n\trefresh(histogramData, histogramSelection){\r\n\t\tif (this._histogramSelection){\r\n\t\t\tthis._prevSelection = this._histogramSelection.getSelection();\r\n\t\t}\r\n\r\n\t\tthis._histogramData = histogramData;\r\n\t\tthis._histogramSelection = histogramSelection;\r\n\t\t\r\n\t\tthis._clear();\r\n\r\n\t\tthis._xAxis.domain(histogramData.getData().map(function (d) {return d.value; }));\r\n\t\tthis._yAxis.domain([0, d3.max(histogramData.getData(), function (d) { return d.volume; })]);\r\n\r\n\t\tthis._renderXAxis();\t\t\r\n\t\tthis._renderDataBars();\r\n\t\tthis._renderSelection();\r\n\t\tthis._updateSelection();\r\n\r\n\t\tthis._handleHoverState();\r\n\t\tif (this._options.enableSelectionToggle){\r\n\t\t\tthis._handleClick();\r\n\t\t}\r\n\r\n\t\tthis._prevData = histogramData.getData();\t\t\t\t\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Updates selection controls on hover\r\n\t * @param {Number} selectionIndex \r\n\t */\r\n\t_updateSelectionControlsHoverState(selectionIndex){\r\n\t\t// get all handles sorted by X position\r\n\t\tvar handles = this._handles.slice().sort((h1,h2)=>{\r\n\t\t\treturn h1.getXPosition() - h2.getXPosition();\r\n\t\t});\r\n\r\n\t\t// unset hover state on all handles\r\n\t\thandles.forEach(handle=>handle.unsetHoverState());\r\n\r\n\t\t// selection is active, active both handles for active selection\r\n\t\tif (selectionIndex != null){\r\n\t\t\tvar handle1 = handles[selectionIndex];\r\n\t\t\tvar handle2 = handles[selectionIndex+1];\r\n\r\n\t\t\thandle1.setHoverState();\r\n\t\t\thandle2.setHoverState();\r\n\r\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.maskPadding, this._options.width);\r\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\r\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * \r\n\t * @private \r\n\t * Handles what happens when mouse is over selection\r\n\t * @param {String} type \r\n\t * @param {Number} i \r\n\t * @param {HTMLElement[]} array \r\n\t */\r\n\t_onSelectionMouseOver(d, i, nodes){\r\n\t\t// prevent selection when dragging handles\r\n\t\tif (this._draggingHandle){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\tvar selectionIndex = parseInt(d3.select(d3.event.target).attr(\"data-selection-index\"));\r\n\t\tif (this._overSelectionIndex != selectionIndex){\r\n\t\t\tthis._overSelectionIndex = selectionIndex;\r\n\t\t\tthis._updateSelection();\r\n\t\t\tthis._updateSelectionControlsHoverState(selectionIndex);\r\n\t\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @private \r\n\t * Handles what happens when mouse is out of selection\r\n\t * @param {String} type \r\n\t * @param {Number} i \r\n\t * @param {HTMLElement[]} array \r\n\t */\r\n\t_onSelectionMouseOut(d, i, nodes){\r\n\t\t// prevent selection when dragging handles\r\n\t\tif (this._draggingHandle){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0)\")\r\n\t\tthis._overSelectionIndex = null;\r\n\t\tthis._updateSelectionControlsHoverState(null);\r\n\t\tthis._updateSelection();\r\n\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Handles hover state\r\n\t */\r\n\t_handleHoverState(){\r\n\t\tvar g = this._groupEl;\r\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseout\", this._onSelectionMouseOut.bind(this));\r\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseover\", this._onSelectionMouseOver.bind(this));\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Handles when handle is dragged\r\n\t */\r\n\t_onHandleDrag(){\r\n\t\tvar positions = this._handles.map(handle=>handle.getXPosition()).sort((p1, p2)=>{\r\n\t\t\treturn p1-p2;\r\n\t\t});\r\n\r\n\t\tthis._updateSelectionPositions(positions);\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Updates selection with new positions\r\n\t* @param {Array} positions\r\n\t*/\r\n\t_updateSelectionPositions(positions){\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\t\tpositions.forEach((p, index)=>{\r\n\t\t\tif (index>selection.length-1){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tselection[index].from = this._histogramData.positionToValue(p);\r\n\t\t\tselection[index].to = this._histogramData.positionToValue(positions[index+1]);\r\n\t\t});\r\n\r\n\t\tthis._updateSelection();\r\n\t}\t\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders selection bars\r\n\t*/\r\n\t_renderSelection() {\r\n\t\tvar height = this._options.height;\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\r\n\t\t// hover selection bars\r\n\t\tthis._groupEl.selectAll(\".\"+style.selectionbar)\r\n\t\t\t.data(selection)\r\n\t\t\t.enter().append(\"rect\")\r\n\t\t\t.attr(\"class\", style.selectionbar)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\t\t.attr(\"height\", height);      \r\n\r\n\r\n\t\tthis._renderHandles();\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders selection controls\r\n\t*/\r\n\t_renderHandles(){\r\n\t\t// render selection controls\r\n\t\tthis._handles = this._histogramSelection.getSelectionPoints().map((value, index)=>{\r\n\t\t\tvar handle = new HistogramHandle(this._groupEl, value, index, this._histogramData, this._options);\r\n\t\t\t\r\n\t\t\thandle.on(\"drag\", ()=>{\r\n\t\t\t\tthis._onHandleDrag();\r\n\t\t\t}, this);\r\n\r\n\t\t\tvar startSelectionSnapshot;\r\n\r\n\t\t\t// disable other handles when draggin starts\r\n\t\t\thandle.on(\"startDrag\", ()=>{\r\n\t\t\t\tstartSelectionSnapshot = JSON.stringify(this._options.selection);\r\n\t\t\t\t\r\n\t\t\t\tthis._draggingHandle = true;\r\n\t\t\t\tthis._handles.forEach(handle=>handle.disable());\r\n\t\t\t\thandle.enable();\r\n\t\t\t}, this);\r\n\r\n\t\t\t// enable all handles when draggin starts\r\n\t\t\thandle.on(\"endDrag\", ()=>{\r\n\t\t\t\tthis._draggingHandle = false;\r\n\t\t\t\tthis._handles.forEach(handle=>handle.enable());\r\n\r\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\r\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._options.selection);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\treturn handle;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Renders data bars\r\n\t*/\r\n\t_renderDataBars() { \r\n\t\tvar data = this._histogramData.getData();\r\n\t\tvar prevData = this._prevData;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\tvar x = this._xAxis;\r\n\t\tvar y = this._yAxis;\r\n\r\n\t\t// animate from previous data if available\r\n\t\tif (prevData){\r\n\t\t\tx.domain(prevData.map(function (d) {return d.value; }));\r\n\t\t\ty.domain([0, d3.max(prevData, function (d) { return d.volume; })]);\r\n\r\n\t\t\tthis._groupEl.selectAll(\".\"+style.bar)\r\n\t\t\t\t.data(prevData)\r\n\t\t\t\t.enter().append(\"rect\")\r\n\t\t\t\t.attr(\"class\", style.bar)\r\n\t\t\t\t.attr(\"x\", function (d) { return x(d.value); })\r\n\t\t\t\t.attr(\"width\", x.bandwidth())\r\n\t\t\t\t.attr(\"y\", function (d) { return Math.floor(y(d.volume)); })\r\n\t\t\t\t.attr(\"height\", function (d) {return Math.ceil(height - y(d.volume)); })\r\n\r\n\t\t\tx.domain(data.map(function (d) {return d.value; }));\r\n\t\t\ty.domain([0, d3.max(data, function (d) { return d.volume; })]);\t\t\t\t\r\n\r\n\t\t\tthis._groupEl.selectAll(\".\"+style.bar)\r\n\t\t\t\t.data(data)\r\n\t\t\t\t.transition()\r\n\t\t\t\t.duration(500)\r\n\t\t\t\t.attr(\"y\", function (d) { return Math.floor(y(d.volume)); })\r\n\t\t\t\t.attr(\"height\", function (d) { return Math.ceil(height - y(d.volume)); })\r\n\t\t} else {\r\n\t\t\t// append the rectangles for the bar chart\r\n\t\t\tthis._groupEl.selectAll(\".\"+style.bar)\r\n\t\t\t\t.data(data)\r\n\t\t\t\t.enter().append(\"rect\")\r\n\t\t\t\t.attr(\"class\", style.bar)\r\n\t\t\t\t.attr(\"x\", function (d) { return x(d.value); })\r\n\t\t\t\t.attr(\"width\", x.bandwidth())\r\n\t\t\t\t.attr(\"y\", function (d) { return Math.floor(y(d.volume)); })\r\n\t\t\t\t.attr(\"height\", function (d) { return Math.ceil(height - y(d.volume)); })\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Returns bar color based on X position\r\n\r\n\t* @param {Number} barX\r\n\t* @param {Array} selection\r\n\t* @returns {Number} bar category index\r\n\t*/\r\n\t_getBarSelectionIndex(barX, selection){\r\n\t\tfor (var i=0;i<selection.length;i++){\r\n\t\t\tvar s = selection[i];\r\n\t\t\tvar within = barX >= this._histogramData.valueToPosition(s.from) && barX < this._histogramData.valueToPosition(s.to);\r\n\t\t\tif (within) return i;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns bar color for given bar position with given selection\r\n\t * @param {Number} barX \r\n\t * @param {Array} selection \r\n\t */\r\n\t_getBarColor (barX, s){\r\n\t\tvar inactiveBarColor = this._options.inactiveBarColor;\r\n\t\tvar overSelectionColor = this._options.overSelectionColor;\r\n\t\t\r\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, s);\r\n\t\tif (barSelectionIndex == null){\r\n\t\t\treturn inactiveBarColor;\r\n\t\t} else if (s[barSelectionIndex].disabled){\r\n\t\t\treturn inactiveBarColor;\r\n\t\t} if (this._overSelectionIndex == barSelectionIndex){\r\n\t\t\treturn overSelectionColor;\r\n\t\t} else {\r\n\t\t\treturn s[barSelectionIndex].color || this._options.selectionColor;                    \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Runs onTransition as a transition between two selections\r\n\t * @param {Array} selection1 \r\n\t * @param {Array} selection2 \r\n\t * @param {Function} onTransition handler\r\n\t */\r\n\t_onSelectionTransition(selection1, selection2, onTransition){\r\n\t\tvar histogramData = this._histogramData;\r\n\r\n\t\tselection1.forEach((s1,selectionIndex)=>{\r\n\t\t\tvar s2 = selection2[selectionIndex];\r\n\t\t\tvar width = this._options.width;\r\n\t\t\tif (selection1[selectionIndex]){\r\n\t\t\t\tvar transitions = [];\r\n\t\t\t\tvar frames = [];\r\n\r\n\t\t\t\ttransitions.push([histogramData.valueToPosition(s1.from), histogramData.valueToPosition(s2.from)]);\r\n\t\t\t\ttransitions.push([histogramData.valueToPosition(s1.to), histogramData.valueToPosition(s2.to)]);\r\n\r\n\t\t\t\t// make sure duration is calculated based on transitino length\r\n\t\t\t\tframes = [Math.abs((transitions[0][0] - transitions[0][1])/width), Math.abs((transitions[1][0] - transitions[1][1])/width)];\r\n\r\n\t\t\t\ttransitions.forEach((t, handleIndex)=>{\r\n\t\t\t\t\tvar duration = 0;\r\n\t\t\t\t\twhile(t[0] !== t[1]){\r\n\t\t\t\t\t\tsetTimeout(onTransition.bind(this, t[0], selectionIndex, handleIndex), duration);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tduration = duration+1/frames[handleIndex];\r\n\t\t\t\t\t\tt[0] = t[0]>t[1]?t[0]-1:t[0]+1;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Updates selection\r\n\t*/\r\n\t_updateSelection(){\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\t\tvar bars = this._groupEl.selectAll(\".\"+style.bar);\r\n\r\n\t\t// fills bars with given selection\r\n\t\tvar fillBars = (s) => {\r\n\t\t\t// handle bar colors\r\n\t\t\tbars.attr(\"fill\", (d)=> {\r\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\r\n\t\t\t\treturn this._getBarColor(barX, s);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// handle animation if previous selection is set\r\n\t\tif (this._prevSelection){\r\n\t\t\t// set prev selection\r\n\t\t\tfillBars(this._prevSelection);\r\n\r\n\t\t\t// set handle positions to prev selection\r\n\t\t\tthis._prevSelection.forEach((s, i)=>{\r\n\t\t\t\tthis._handles[i].setHandleXPosition(this._histogramData.valueToPosition(s.from))\r\n\t\t\t\tthis._handles[i+1].setHandleXPosition(this._histogramData.valueToPosition(s.to))\r\n\t\t\t});\r\n\r\n\t\t\t// fill bars on selection transition and move handles\r\n\t\t\tthis._onSelectionTransition(this._prevSelection, selection, (p, selectionIndex, handleIndex)=>{\r\n\t\t\t\tvar bar = d3.select(bars.nodes()[p-1]);\r\n\t\t\t\tbar.attr(\"fill\", this._getBarColor(p, selection));\r\n\r\n\t\t\t\t// move handles\r\n\t\t\t\t[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].setHandleXPosition(p);\r\n\t\t\t});\r\n\r\n\t\t\tthis._prevSelection = null;\r\n\t\t\r\n\t\t} else {\r\n\t\t\tfillBars(selection)\r\n\t\t}\r\n\t\t\r\n\t\t// space filling rectangles\r\n\t\tthis._groupEl.selectAll(\".\"+style.selectionbar)\r\n\t\t\t.data(selection)\r\n\t\t\t.attr(\"data-selection-index\", function(d,i){\r\n\t\t\t\treturn i;\r\n\t\t\t})\r\n\t\t\t.attr(\"x\", (d) => { \r\n\t\t\t\treturn this._histogramData.valueToPosition(d.from);\r\n\t\t\t})\r\n\t\t\t.attr(\"width\", (d) => {\r\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\r\n\t\t\t})\r\n\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders X axis \r\n\t*/        \r\n\t_renderXAxis(){\r\n\t\tvar minMax = this._histogramData.getMinMax();\r\n\t\tvar format = this._options.format;\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\t// create bottom axis\r\n\t\tvar axis = d3.axisBottom(this._xAxis)\r\n\t\t\t.tickValues([minMax.min, minMax.max])\r\n\t\t\t.tickSize(0)\r\n\t\t\t.tickFormat(format)\r\n\t\t\t.tickPadding(15);\r\n\r\n\t\tvar axisGroup = this._groupEl.append(\"g\")\r\n\t\t\t.attr(\"transform\", \"translate(0,\" + height + \")\")\r\n\t\t\t.classed(style[\"x-axis\"], true)\r\n\t\t\t.call(axis);\r\n\r\n\t\taxisGroup.selectAll(\".tick\").attr(\"transform\", function(d, i){\r\n\t\t\treturn [\"translate(0,0)\", \"translate(\"+width+\",0)\"][i];\r\n\t\t})\r\n\r\n\t\taxisGroup.selectAll(\".tick>text\").attr(\"x\", 0);\r\n\r\n\t\taxisGroup.selectAll(\".tick\").attr(\"text-anchor\", function(d, i){\r\n\t\t\treturn [\"start\", \"end\"][i];\r\n\t\t})\r\n\t}\t\r\n\t\r\n}\r\n\r\nexport {HistogramRenderer};"],"names":["getDefaultSelection","histogramData","minMax","getMinMax","colors","Defaults","start","min","step","max","length","map","from","to","color","getHandlePositionOffsets","handle1","handle2","maskPadding","width","label1Box","getLabelBox","label2Box","conflictDiff","x","posDiff1","posDiff2","xMax","getOptionValue","optionValue","defaultOptionValue","Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","args","i","apply","MARGIN","DEFAULT_COLORS","HistogramData","data","options","_histogramData","_loadHistogramData","_minMax","_calculateMinMax","_options","d3","d","value","num","numParts","toString","split","position","getValueRatio","valueRatio","Math","round","numOfBarsPerBucket","forEach","bucket","content","frequency","HistogramSelection","selection","_selection","slice","result","getSelection","s","index","gradientIndex","HistogramHandle","groupEl","_observable","_handleEl","_handleLineEl","_handleCircleEl","_handleMaskEl","_handleMaskGradientEl","_handleLabelEl","_isOver","_groupEl","_index","_value","_position","valueToPosition","_elements","_renderHandle","element","remove","_createHandleElement","_createHandleLineElement","_createHandleCircleElement","_createDragMaskElement","_createMaskGradientElement","_createDragLabelElement","_handleHoverState","_handleDrag","eventName","on","parseInt","attr","node","getBBox","offset","height","setHoverState","unsetHoverState","classed","style","fire","xpos","format","positionToValue","text","_this2","_updateLabelPosition","call","_onDrag","bind","_onStartDrag","_onEndDrag","label","textLength","getComputedTextLength","maskWidth","xPosition","append","selectAll","enter","_this3","HistogramRenderer","_containerEl","_svgEl","_historyData","_xAxis","range","_yAxis","_overSelectionIndex","_rendered","_draggingHandle","_prevData","_prevSelection","selector","ct","margin","svg","left","right","top","bottom","g","inactive","active","innerHTML","_handles","handle","destroy","handleIndex","handleValue","promptResult","window","prompt","points","_histogramSelection","getSelectionPoints","positions","_this","sort","p1","p2","_updateSelectionPositions","_updateSelection","_destroyHandles","_renderHandles","selectionIndex","disabled","enabled","target","_toggleSelection","_onHandleClick","_onClick","histogramSelection","_clear","domain","getData","volume","_renderXAxis","_renderDataBars","_renderSelection","enableSelectionToggle","_handleClick","handles","h1","h2","getXPosition","labelOffsets","PositionUtils","setLabelOffset","nodes","_updateSelectionControlsHoverState","selectionbar","_onSelectionMouseOut","_onSelectionMouseOver","p","_onHandleDrag","startSelectionSnapshot","JSON","stringify","disable","enable","prevData","y","bar","bandwidth","floor","ceil","transition","duration","barX","inactiveBarColor","overSelectionColor","barSelectionIndex","_getBarSelectionIndex","selectionColor","selection1","selection2","onTransition","s1","s2","_this4","transitions","frames","abs","t","bars","fillBars","_this5","_getBarColor","setHandleXPosition","_onSelectionTransition","axis","tickValues","tickSize","tickFormat","tickPadding","axisGroup","_histogramRenderer","render","isRendered","SelectionUtils","getPrecision","refresh"],"mappings":"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"}