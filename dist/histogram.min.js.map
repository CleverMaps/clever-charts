{"version":3,"file":"histogram.min.js","sources":["../src/utils/PositionUtils.js","../src/Histogram.js","../src/utils/Observable.js","../src/HistogramDefaults.js","../src/HistogramData.js","../src/selection/HistogramHandle.js","../src/selection/HistogramSelectionRenderer.js","../src/HistogramRenderer.js","../src/selection/HistogramSelection.js","../src/selection/MultipleHistogramSelectionImpl.js","../src/selection/DefaultHistogramSelectionImpl.js","../src/selection/FilterHistogramSelectionImpl.js","../src/selection/InvertedFilterHistogramSelectionImpl.js","../src/selection/HistogramSelectionFactory.js"],"sourcesContent":["/**\n * @public\n * Returns handle positions offsets so that labels don't conflict visually\n * @param {HistogramData} histogramData \n * @returns {Array} label offsets\n */\nexport function getHandlePositionOffsets(handle1, handle2, maskPadding, width){\n    var label1Box = handle1.getLabelBox();\n    var label2Box = handle2.getLabelBox();\n\n    // calculate conflict number\n    var conflictDiff = label2Box.x - (label1Box.x + label1Box.width)-maskPadding;\n    // and handle if there is not enough space\n    if (conflictDiff<0){\n        // pos1 diff to the left\n        var posDiff1 = conflictDiff/2;\n        // pos2 diff to to right\n        var posDiff2 = conflictDiff/2;\n\n        // position left to 0 if position would be lower than 0\n        var xMin = label1Box.x+posDiff1;\n        if (xMin < 0){\n            posDiff1 = label1Box.x; \n            // also shift right label so we keep it visible\n            posDiff2 = posDiff2*2\n        }\n\n        // same with max value\n        var xMax = label2Box.x+label2Box.width-posDiff2;\n        if (xMax > width){\n            // needs to consider 0.5px offset otherwise label woudl shift, TODO: investigate why\n            var offset = 0.5;\n            posDiff2 += xMax-width-offset; \n            posDiff1 = posDiff1*2\n        }\n        return [posDiff1, -posDiff2];                  \n    }\n\n    return [0,0];\n}","import * as d3 from \"d3\";\nimport Observable from \"./utils/Observable\";\nimport * as Defaults from \"./HistogramDefaults\";\nimport HistogramData from \"./HistogramData\";\nimport HistogramRenderer from \"./HistogramRenderer\";\nimport HistogramSelectionFactory from \"./selection/HistogramSelectionFactory\"\nimport {SelectionTypes} from \"./selection/HistogramSelection\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main histogram class\n * @param {Object} options\n */\nclass Histogram {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * prompt handler\n\t\t */\n\t\tthis._options.promptHandler = options.promptHandler || null;\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar color \n\t\t */\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Over bar color \n\t\t */\n\t\tthis._options.overSelectionColor = getOptionValue(options.overSelectionColor, Defaults.OVER_SELECTION_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.selectionColor = getOptionValue(options.selectionColor, Defaults.SELECTION_COLOR);\n\t\t\n\t\t/**\n\t\t * @public\n\t\t * Enable selection toggle \n\t\t */\n\t\tthis._options.enableSelectionToggle = getOptionValue(options.enableSelectionToggle, Defaults.ENABLE_SELECTION_TOGGLE);\n\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Mask padding\n\t\t */\n\t\tthis._options.maskPadding = getOptionValue(options.maskPadding, Defaults.MASK_PADDING);\n\n\t\t/**\n\t\t * @public\n\t\t * selection type\n\t\t */\n\t\tthis._options.selectionType = getOptionValue(options.selectionType, null);\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * histogramRenderer\n\t\t */\n\t\tthis._histogramRenderer = new HistogramRenderer(this._options);\n\n\t\tthis._histogramRenderer.on(\"selectionOver\", selectionIndex=>{\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"selectionChanged\", (selection)=>{\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t\t});\n\t\t\n\t\tthis._selectionFactory = new HistogramSelectionFactory(this._options);\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Histogram} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._histogramRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._histogramRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Array} data\n\t * @param {Array} selection\n\t * @param {Object} set data options\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetData(data, selection, options) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar histogramData = this._histogramData = new HistogramData(data, this._options);\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, histogramData);\n\n\t\tthis._options.selection = histogramSelection.getSelection();\n\t\tthis._selection = selection;\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + this._histogramData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._histogramRenderer.refresh(histogramData, histogramSelection, options);\n\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * @public\n\t * Sets selection type\n\t * @param {String} selectionType\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetSelectionType(selectionType){\n\t\tthis._options.selectionType = selectionType;\n\t\tthis.setSelection(this._selection);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\tthis._histogramRenderer.showSelectionLabels();\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._histogramRenderer.hideSelectionLabels();\n\t}\n\t\n\t/**\n\t * @public\n\t * Sets selection\n\t * @param {Array} selection\n\t * @param {Object} options\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetSelection(selection, options) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tif (!this._histogramData) {\n\t\t\tthrow \"Can't call setSelection() when no data is available.\"\n\t\t}\n\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, this._histogramData);\n\t\tthis._options.selection = histogramSelection.getSelection();\n\t\tthis._selection = selection;\n\t\tthis._histogramRenderer.refresh(this._histogramData, this._histogramSelection, options);\n\n\t\treturn this;\n\t}\n\n}\n\nHistogram.SelectionTypes = SelectionTypes;\nexport default Histogram;\n","/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nexport default class Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tthis._handlers[event].push(handler);\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unbind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler, optional\r\n\t */\r\n    off(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tif (!handler) {\r\n\t\t\tthis._handlers[event] = [];\r\n\t\t} else {\r\n\t\t\tvar handlers = this._handlers[event];\r\n\t\t\tvar index = handlers.indexOf(handler);\r\n\t\t\tif (index != -1){\r\n\t\t\t\thandlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Fire widget event\r\n\t * @param {String} event event name\r\n\t * @param {*} ...args event arguments\r\n\t */\r\n\tfire(event, ...args) {\r\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tvar handlers = this._handlers[event];\r\n\t\tfor (var i = 0; i < handlers.length; i++) {\r\n\t\t\thandlers[i].apply(this, args);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys this observable, removes events and so on \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._handlers = null;\r\n\t\treturn this;\r\n    }\r\n\t\r\n}","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default widget height\r\n */\r\nexport const HEIGHT = 150;\r\n\r\n/**\r\n * @public\r\n * Default widget margin\r\n */\r\nexport const MARGIN = {\r\n    top:0,\r\n    left:5,\r\n    right:5,\r\n    bottom:25\r\n};\r\n\r\n/**\r\n * @public\r\n * Default inactive bar color\r\n */\r\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const OVER_SELECTION_COLOR = \"#ffea00\";\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const SELECTION_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Enable selection toggle\r\n */\r\nexport const ENABLE_SELECTION_TOGGLE = true;\r\n\r\n/**\r\n * @public\r\n * Default padding of label mask\r\n */\r\nexport const MASK_PADDING = 10;\r\n\r\n/**\r\n * @public\r\n * Default colors \r\n */\r\nexport const DEFAULT_COLORS = [\"#e6f3fb\", \"#cbe7f6\", \"#b1dbf2\", \"#98cfee\", \"#7ec4ea\"];","import * as d3 from \"d3\";\n\n/**\n * @class\n * HistogramData representing data for the histogram view\n */\nexport default class HistogramData {\n\t/**\n\t * @param {data} data\n\t * @param {Object} options\n\t */\n\tconstructor(data, options) {\n\t\tthis._histogramData = this._loadHistogramData(data, options.width);\n\t\tthis._minMax = this._calculateMinMax(this._histogramData);\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns histogram data\n\t * @returns {Array} histogram data\n\t */\n\tgetData() {\n\t\treturn this._histogramData;\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given histogramData\n\t* @param {Array} histogramData\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(histogramData) {\n\t\tvar min = d3.min(histogramData, function (d) { return d.value; });\n\t\tvar max = d3.max(histogramData, function (d) { return d.value; });\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t* Returns value ratio between bars and data\n\t* @return {Number} value ratio \n\t*/\n\tgetValueRatio() {\n\t\tvar range = this._minMax.max - this._minMax.min;\n\t\treturn range / this._options.width;\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.min;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns data value from given position \n\t * @param {Number} position\n\t */\n\tpositionToValue(position) {\n\t\tvar valueRatio = this.getValueRatio();\n\t\tvar minMax = this.getMinMax();\n\t\treturn position * valueRatio + minMax.min;\n\t}\n\n\t/**\n\t * @public\n\t * Returns position from given data value \n\t * @param {Number} value\n\t */\n\tvalueToPosition(value) {\n\t\tvar valueRatio = this.getValueRatio();\n\t\tvar minMax = this.getMinMax();\n\t\treturn value / valueRatio - minMax.min / valueRatio;\n\t}\n\n\t/** \n\t* @private\n\t* @param {Array} buckets\n\t* @param {int} numOfBarsPerBucket - number of bars per column\\\n\t* @returns {Array} data from given buckets \n\t*/\n\t_loadHistogramData(data, width) {\n\t\tvar histogramData = [];\n\t\t// calculate number of bars per bucket excluding last pixel for max value\n\t\tvar numOfBarsPerBucket = (width-1) / data.length;\n\n\t\tdata.forEach((bucket, i) => {\n\t\t\tvar step = (bucket.max - bucket.min) / numOfBarsPerBucket;\n\t\t\td3.range(bucket.min, bucket.max, step).forEach((value) => {\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tvolume: bucket.content[0].frequency\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// adding max value pixel as each non-last bucket ends one pixel before next bucket starts\n\t\t\tif (i == data.length-1){\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: bucket.max,\n\t\t\t\t\tvolume: bucket.content[0].frequency\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn histogramData;\n\t}\n}","import * as d3 from \"d3\";\r\nimport style from \"../Histogram.css\";\r\nimport Observable from \"../utils/Observable\";\r\n\r\n/**\r\n * Gradient index shared for all instances\r\n */\r\nvar gradientIndex = 0;\r\n\r\n/**\r\n * @class\r\n * HistogramHandle representing control handle for histogram\r\n */\r\nexport default class HistogramHandle {\r\n\t/**\r\n\t * @param {D3Selection} groupEl\r\n\t * @param {Number} value\r\n\t * @param {Number} index\r\n\t * @param {HistoryData} histogramData\r\n\t * @param {Object} options\r\n\t */\r\n\tconstructor(groupEl, value, index, histogramData, options) {\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a selection\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"drag\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when drag on handle starts\r\n\t\t\t * @param {HistogramHandle} handle\r\n\t\t\t */\r\n\t\t\t\"startDrag\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when drag on handle ends\r\n\t\t\t * @param {HistogramHandle} handle\r\n\t\t\t */\r\n\t\t\t\"endDrag\"\r\n\t\t]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle element\r\n\t\t */\r\n\t\tthis._handleEl = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle line element\r\n\t\t */\r\n\t\tthis._handleLineEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle circle element\r\n\t\t */\r\n\t\tthis._handleCircleEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle mask element\r\n\t\t */\r\n\t\tthis._handleMaskEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle mask gradient element\r\n\t\t */\r\n\t\tthis._handleMaskGradientEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle label element\r\n\t\t */\r\n\t\tthis._handleLabelEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * True if handle is over\r\n\t\t */\r\n\t\tthis._isOver = false;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element\r\n\t\t */\t\t\r\n\t\tthis._groupEl = groupEl;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle index\r\n\t\t */\t\t\r\n\t\tthis._index = index;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle value\r\n\t\t */\t\t\r\n\t\tthis._value = value;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle position\r\n\t\t */\t\t\r\n\t\tthis._position = histogramData.valueToPosition(value);\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * bar options\r\n\t\t */\t\t\r\n\t\tthis._options = options;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * histogram data\r\n\t\t */\t\t\r\n\t\tthis._histogramData = histogramData;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * elements\r\n\t\t */\t\t\r\n\t\tthis._elements = [];\t\t\r\n\t\t\r\n\t\tthis._renderHandle();\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destroys this handle\r\n\t */\r\n\tdestroy(){\r\n\t\tthis._elements.forEach(element=>element.remove());\r\n\t\tthis._elements = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t   * Renders drag handle\r\n\t   */\r\n\t_renderHandle() {\r\n\t\tthis._elements = [\r\n\t\t\tthis._createHandleElement(),\r\n\t\t\tthis._createHandleLineElement(),\r\n\t\t\tthis._createHandleCircleElement(),\r\n\t\t\tthis._createDragMaskElement(),\r\n\t\t\tthis._createMaskGradientElement(),\r\n\t\t\tthis._createDragLabelElement()\r\n\t\t];\r\n\r\n\t\tthis._handleHoverState();\r\n\t\tthis._handleDrag();\r\n\t}\t\r\n\r\n\thide(){\r\n\t\tthis._elements.forEach(element=>element.attr(\"visibility\", \"hidden\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns X position of this handle\r\n\t * @returns {Number} X position handle\r\n\t */\r\n\tgetXPosition() {\r\n\t\treturn parseInt(this._handleEl.attr(\"x\"))+5;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Sets hover state\r\n\t */\r\n\tsetHoverState(){\r\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\r\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 3);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public \r\n\t * @returns {SVGRect} \r\n\t * Returns drag label box for this handle\r\n\t */\r\n\tgetLabelBox(){\r\n\t\treturn this._handleLabelEl.node().getBBox();\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * Shifts handle label by given offset so it can handle label position conflicts\r\n\t */\r\n\tsetLabelOffset(offset){\r\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(\"+offset+\", 0)\")\r\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(\"+offset+\", 0)\")\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * Sets handle position\r\n\t */\r\n\tsetHandleXPosition(position){\r\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\"+position+\", \"+this._options.height+\")\")\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsetLabelText(text){\r\n\t\tthis._handleLabelEl.text(text);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tshowLabel(){\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\r\n\t\treturn this;\r\n\t}\r\n\r\n\thideLabel(){\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\tsetLabelPosition(position){\r\n\t\tthis.setLabelOffset(0);\r\n\t\tthis._updateLabelPosition(position);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unsets hover state\r\n\t */\r\n\tunsetHoverState(){\r\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\r\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 1);\r\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(0, 0)\")\r\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(0, 0)\")\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Enables this handle \r\n\t */\r\n\tenable(){\r\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"all\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Disables this handle \r\n\t */\r\n\tdisable(){\r\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"none\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handle hover state\r\n\t */\r\n\t_handleHoverState(){\r\n\t\t// line hover effect\r\n\t\tthis._handleEl.on(\"mouseover\", () => {\r\n\t\t\tthis._isOver = true;\r\n\t\t\tthis.setHoverState();\r\n\t\t})\r\n\t\tthis._handleEl.on(\"mouseout\", () => {\r\n\t\t\tthis._isOver = false;\r\n\t\t\tthis.unsetHoverState();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens when drag starts\r\n\t */\r\n\t_onStartDrag(){\r\n\t\tthis._groupEl.classed(style[\"dragging\"], true);\r\n\t\tthis._observable.fire(\"startDrag\", this);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens on drag\r\n\t */\r\n\t_onDrag(){\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar xpos = Math.round(Math.max(Math.min(d3.event.x, width), 0));\r\n\t\tvar format = this._options.format;\r\n\r\n\t\tthis._handleEl.attr(\"x\", xpos - 5);\r\n\t\tthis._handleLineEl.attr(\"x\", xpos - 2);\r\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\" + xpos + \",\" + height + \")\");\r\n\t\tthis._handleEl.attr(\"data-handle-value\", this._histogramData.positionToValue(xpos))\r\n\r\n\t\tthis.setHoverState();\r\n\r\n\t\tthis._handleLabelEl.text(() => {\r\n\t\t\treturn format(this._histogramData.positionToValue(xpos));\r\n\t\t})\r\n\r\n\t\tthis._updateLabelPosition(xpos);\r\n\t\tthis._observable.fire(\"drag\");\t\t\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens when drag ends\r\n\t */\r\n\t_onEndDrag(){\r\n\t\tthis._groupEl.classed(style[\"dragging\"], false);\r\n\t\tif (!this._isOver) {\r\n\t\t\tthis.unsetHoverState();\r\n\t\t}\r\n\r\n\t\tthis._observable.fire(\"endDrag\", this);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles handle drag \r\n\t */\r\n\t_handleDrag(){\r\n\t\tthis._handleEl.call(d3.drag()\r\n\t\t\t.on(\"drag\", this._onDrag.bind(this))\r\n\t\t\t.on(\"start\", this._onStartDrag.bind(this))\r\n\t\t\t.on(\"end\", this._onEndDrag.bind(this)));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Updates label position\r\n\t * @param {Number} position \r\n\t */\r\n\t_updateLabelPosition(position) {\r\n\t\tvar label = this._handleLabelEl.node();\r\n\t\tvar maskPadding = this._options.maskPadding;\t\t\r\n\r\n\t\t// we need to calculate text length so we can create mask and center text\r\n\t\tvar textLength = label.getComputedTextLength();\r\n\t\tvar maskWidth = textLength + maskPadding * 2;\r\n\t\tvar xPosition = position - textLength / 2;\r\n\r\n\t\t// handle when dragging towards left side\r\n\t\tif (xPosition < 0) {\r\n\t\t\txPosition = 0;\r\n\t\t}\r\n\r\n\t\t// handle when dragging towards right side\r\n\t\tif (xPosition + textLength > this._options.width) {\r\n\t\t\txPosition = this._options.width  - textLength;\r\n\t\t\tthis._handleLabelEl.attr(\"x\", this._options.width);\r\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"end\");\r\n\t\t} else {\r\n\t\t\tthis._handleLabelEl.attr(\"x\", xPosition);\r\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"start\");\r\n\t\t}\r\n\r\n\t\t// position mask\r\n\t\tthis._handleMaskEl.attr(\"x\", () => {\r\n\t\t\treturn parseInt(xPosition) - maskPadding;\r\n\t\t});\r\n\r\n\t\tthis._handleMaskGradientEl.attr(\"x1\", xPosition - maskPadding);\r\n\t\tthis._handleMaskGradientEl.attr(\"x2\", xPosition + maskWidth - maskPadding);\r\n\r\n\t\tthis._handleMaskEl.attr(\"width\", maskWidth);\r\n\t\tthis._handleMaskEl.attr(\"height\", 20);\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * Creates mask gradient element\r\n\t * @param {Number} handleIndex \r\n\t */\r\n\t_createMaskGradientElement(){\r\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\r\n\t\t\t.attr(\"id\", \"brush-mask-gradient-\" + gradientIndex++)\r\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\r\n\t\t\t.attr(\"y1\", 0).attr(\"x1\", 50)\r\n\t\t\t.attr(\"y2\", 0).attr(\"x2\", 0);\r\n\r\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\r\n\t\t\t.data([\r\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\r\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\r\n\t\t\t])\r\n\t\t\t.enter().append(\"stop\")\r\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\r\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\r\n\r\n\t\treturn this._handleMaskGradientEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders main handle element \r\n\t * @returns {SVGElement}\r\n\t */\r\n\t_createHandleElement(){\r\n\t\tthis._handleEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle\"])\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"data-handle-index\", this._index)\r\n\t\t\t.attr(\"data-handle-value\", this._value)\r\n\t\t\t.attr(\"cursor\", \"ew-resize\")\r\n\t\t\t.attr(\"width\", 10)\r\n\t\t\t.attr(\"height\", this._options.height + 5)\r\n\t\t\t.attr(\"x\", this._position - 5);\r\n\r\n\t\treturn this._handleEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders handle line element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createHandleLineElement(){\r\n\t\tthis._handleLineEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle-line\"])\r\n\t\t\t.attr(\"width\", 4)\r\n\t\t\t.attr(\"height\", this._options.height)\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"x\", this._position - 2);\r\n\r\n\t\treturn this._handleLineEl;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders handle circle element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createHandleCircleElement(){\r\n\t\tthis._handleCircleEl = this._groupEl.append(\"circle\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle-circle\"])\r\n\t\t\t.attr(\"transform\", \"translate(\" + this._position + \",\" + this._options.height + \")\")\r\n\t\t\t.attr(\"fill\", \"#ffffff\")\r\n\t\t\t.attr(\"fill-opacity\", 1)\r\n\t\t\t.attr(\"stroke\", \"#000\")\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"cursor\", \"ew-resize\")\r\n\t\t\t.attr(\"r\", 3.5);\r\n\r\n\t\treturn this._handleCircleEl;\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders drag mask element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createDragMaskElement(){\r\n\t\tthis._handleMaskEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"drag-label-mask\"])\r\n\t\t\t.attr(\"fill\", \"url(#brush-mask-gradient-\" + gradientIndex+\")\")\r\n\t\t\t.attr(\"y\", this._options.height + 12)\r\n\t\t\t.attr(\"display\", \"none\");\t\t\t\r\n\r\n\t\treturn this._handleMaskEl;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @private \r\n\t * Renders handle label element \r\n\t * @returns {SVGElement}  \r\n\t */\r\n\t_createDragLabelElement(){\r\n\t\tvar format = this._options.format;\r\n\t\tvar data = this._histogramData;\r\n\t\tvar height = this._options.height;\r\n\t\tthis._handleLabelEl = this._groupEl.append(\"text\")\r\n\t\t\t.attr(\"class\", style[\"drag-label\"])\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.text(() => {\r\n\t\t\t\treturn format(data.positionToValue(this._position));\r\n\t\t\t}).attr(\"y\", height + 22);\r\n\r\n\t\t\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t\treturn this._handleLabelEl;\r\n\t}\r\n}","import style from \"../Histogram.css\";\r\nimport HistogramHandle from \"./HistogramHandle\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as PositionUtils from \"../utils/PositionUtils\"\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Histogram renderer class\r\n * @param {Object} options\r\n */\r\nexport default class HistogramSelectionRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Histogram options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._histogramData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * history selection\r\n\t\t */\r\n\t\tthis._histogramSelection = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * index of over selection  \r\n\t\t */\r\n\t\tthis._overSelectionIndex = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * selection handles\r\n\t\t */\r\n\t\tthis._handles = [];\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if handle is dragged\r\n\t\t */\r\n\t\tthis._draggingHandle = false;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous selection for animation\r\n\t\t */\r\n\t\tthis._prevSelection = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a category\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is changed\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\t\t\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether histogram has been rendered or not\r\n\t * @returns {boolean} true if histogram has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @param {DOMElement}  \r\n\t * @returns {HistogramSelectionRenderer} returns this widget instance\r\n\t */\r\n\trender(groupEl){\r\n\t\tthis._rendered = true;\r\n\t\tthis._groupEl = groupEl\r\n\r\n\t\treturn this;\r\n\t} \t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._destroyHandles();\r\n\t\tif (this._selectionBars){\r\n\t\t\tthis._selectionBars.remove();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Destroys selection controls \r\n\t */\r\n\t_destroyHandles(){\r\n\t\tthis._handles.forEach(handle=>handle.destroy());\r\n\t\tthis._handles = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles click on handle\r\n\t * @param {Number} handleIndex\r\n\t * @param {Number} handleValue \r\n\t */\r\n\t_onHandleClick(handleIndex, handleValue){\r\n\t\t// call prompt handler if available\r\n\t\tif (this._options.promptHandler){\r\n\t\t\tthis._options.promptHandler(handleValue).then((promptResult)=>{\r\n\t\t\t\tpromptResult = parseFloat(promptResult);\r\n\t\t\t\t// must be within min max range\r\n\t\t\t\tvar minMax = this._histogramData.getMinMax();\r\n\t\t\t\tpromptResult = Math.min(minMax.max, promptResult);\r\n\t\t\t\tpromptResult = Math.max(minMax.min, promptResult);\r\n\r\n\t\t\t\tvar points = this._histogramSelection.getSelectionPoints();\r\n\t\t\t\tpoints[handleIndex] = {\r\n\t\t\t\t\tvalue:promptResult\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar positions = points\r\n\t\t\t\t\t.map(point=>this._histogramData.valueToPosition(point.value))\r\n\t\t\t\t\t.sort((p1,p2)=>p1-p2);\r\n\t\t\t\t\r\n\t\t\t\tthis._updateSelectionPositions(positions);\r\n\t\t\t\tthis._updateSelection();\r\n\r\n\t\t\t\t// TODO: update handles without destroying them\r\n\t\t\t\tthis._destroyHandles();\r\n\t\t\t\tthis._renderHandles();\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Toggles selection\r\n\t * @param {Number} selectionIndex \r\n\t */\r\n\t_toggleSelection(selectionIndex){\r\n\t\tvar selection = this._options.selection[selectionIndex];\r\n\t\tselection.disabled = !selection.disabled;\r\n\t\tvar enabled = !selection.disabled;\r\n\t\tthis._updateSelection();\r\n\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles click on chart\r\n\t */\r\n\t_onClick(){\r\n\t\tvar target = d3.select(d3.event.target);\r\n\t\tvar selectionIndex = target.attr(\"data-selection-index\");\r\n\t\tvar handleIndex = target.attr(\"data-handle-index\");\r\n\r\n\t\tif (selectionIndex != null && this._histogramSelection.allowsToggle()){\r\n\t\t\tthis._toggleSelection(selectionIndex)\r\n\t\t} else if (handleIndex != null){\r\n\t\t\tthis._onHandleClick(handleIndex, target.attr(\"data-handle-value\"));\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * Handles handle click \r\n\t */\r\n\t_handleClick(){\r\n\t\tthis._groupEl.on(\"click\", this._onClick.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Refreshes histogram data \r\n\t * @param {HistogramData}\r\n\t * @param {HistogramSelection}\r\n\t * @param {Object} options\r\n\t */\r\n\trefresh(histogramData, histogramSelection, options){\r\n\t\tthis._animate = options && options.animate;\r\n\t\tif (this._animate && this._histogramSelection && this._histogramSelection.getSelection().length == histogramSelection.getSelection().length){\r\n\t\t\tthis._prevSelection = this._histogramSelection.getSelection();\r\n\t\t\tthis._prevHistogramData = this._histogramSelection.getSelection();\r\n\t\t}\r\n\r\n\t\tif (this._animate && this._histogramData){\r\n\t\t\tthis._prevHistogramData = this._histogramData;\r\n\t\t}\r\n\r\n\t\tthis._histogramData = histogramData;\r\n\t\tthis._histogramSelection = histogramSelection;\r\n\t\t\r\n\t\tthis._clear();\r\n\t\tthis._renderSelection();\r\n\t\tthis._updateSelection();\r\n\r\n\t\tthis._handleHoverState();\r\n\t\tthis._handleClick();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Updates selection controls on hover\r\n\t * @param {Number} selectionIndex \r\n\t */\r\n\t_updateSelectionControlsHoverState(selectionIndex){\r\n\t\t// get all handles sorted by X position\r\n\t\tvar handles = this._handles.slice().sort((h1,h2)=>{\r\n\t\t\treturn h1.getXPosition() - h2.getXPosition();\r\n\t\t});\r\n\r\n\t\t// unset hover state on all handles\r\n\t\thandles.forEach(handle=>handle.unsetHoverState());\r\n\r\n\t\t// selection is active, active both handles for active selection\r\n\t\tif (selectionIndex != null){\r\n\t\t\tvar handle1 = handles[selectionIndex];\r\n\t\t\tvar handle2 = handles[selectionIndex+1];\r\n\r\n\t\t\thandle1.setHoverState();\r\n\t\t\thandle2.setHoverState();\r\n\r\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.maskPadding, this._options.width);\r\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\r\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * \r\n\t * @private \r\n\t * Handles what happens when mouse is over selection\r\n\t * @param {String} type \r\n\t * @param {Number} i \r\n\t * @param {HTMLElement[]} array \r\n\t */\r\n\t_onSelectionMouseOver(d, i, nodes){\r\n\t\t// prevent selection when dragging handles\r\n\t\tif (this._draggingHandle){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\tvar selectionIndex = parseInt(d3.select(d3.event.target).attr(\"data-selection-index\"));\r\n\t\tif (this._overSelectionIndex != selectionIndex){\r\n\t\t\tthis._overSelectionIndex = selectionIndex;\r\n\t\t\tthis._updateSelection();\r\n\t\t\tthis._updateSelectionControlsHoverState(selectionIndex);\r\n\t\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @private \r\n\t * Handles what happens when mouse is out of selection\r\n\t * @param {String} type \r\n\t * @param {Number} i \r\n\t * @param {HTMLElement[]} array \r\n\t */\r\n\t_onSelectionMouseOut(d, i, nodes){\r\n\t\t// prevent selection when dragging handles\r\n\t\tif (this._draggingHandle){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0)\")\r\n\r\n\t\tthis._overSelectionIndex = null;\r\n\t\tthis._updateSelectionControlsHoverState(null);\r\n\t\tthis._updateSelection();\r\n\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Handles hover state\r\n\t */\r\n\t_handleHoverState(){\r\n\t\tvar g = this._groupEl;\r\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseout\", this._onSelectionMouseOut.bind(this));\r\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseover\", this._onSelectionMouseOver.bind(this));\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Handles when handle is dragged\r\n\t */\r\n\t_onHandleDrag(){\r\n\t\tvar positions = this._handles.map(handle=>handle.getXPosition()).sort((p1, p2)=>{\r\n\t\t\treturn p1-p2;\r\n\t\t});\r\n\r\n\t\tthis._updateSelectionPositions(positions);\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Updates selection with new positions\r\n\t* @param {Array} positions\r\n\t*/\r\n\t_updateSelectionPositions(positions){\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\t\tpositions.forEach((p, index)=>{\r\n\t\t\tif (index>selection.length-1){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tselection[index].from = this._histogramData.positionToValue(p);\r\n\t\t\tselection[index].to = this._histogramData.positionToValue(positions[index+1]);\r\n\t\t});\r\n\r\n\t\tthis._updateSelection();\r\n\t}\t\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders selection bars\r\n\t*/\r\n\t_renderSelection() {\r\n\t\tvar height = this._options.height;\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\r\n\t\t// hover selection bars\r\n\t\tthis._selectionBars = this._groupEl.selectAll(\".\"+style.selectionbar)\r\n\t\t\t.data(selection)\r\n\t\t\t.enter().append(\"rect\")\r\n\t\t\t.attr(\"class\", style.selectionbar)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\t\t.attr(\"height\", height);      \r\n\r\n\r\n\t\tthis._renderHandles();\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders selection controls\r\n\t*/\r\n\t_renderHandles(){\r\n\t\t// render selection controls\r\n\t\tthis._handles = this._histogramSelection.getSelectionPoints().map((point, index)=>{\r\n\t\t\tvar value = point.value;\r\n\r\n\t\t\tvar handle = new HistogramHandle(this._groupEl, value, index, this._histogramData, this._options);\r\n\r\n\t\t\tif(point.hidden){\r\n\t\t\t\thandle.hide();\r\n\t\t\t}\r\n\r\n\t\t\thandle.on(\"drag\", ()=>{\r\n\t\t\t\tthis._onHandleDrag();\r\n\t\t\t}, this);\r\n\r\n\t\t\tvar startSelectionSnapshot;\r\n\r\n\t\t\t// disable other handles when draggin starts\r\n\t\t\thandle.on(\"startDrag\", ()=>{\r\n\t\t\t\tstartSelectionSnapshot = JSON.stringify(this._options.selection);\r\n\t\t\t\t\r\n\t\t\t\tthis._draggingHandle = true;\r\n\t\t\t\tthis._handles.forEach(handle=>handle.disable());\r\n\t\t\t\thandle.enable();\r\n\t\t\t}, this);\r\n\r\n\t\t\t// enable all handles when draggin starts\r\n\t\t\thandle.on(\"endDrag\", ()=>{\r\n\t\t\t\tthis._draggingHandle = false;\r\n\t\t\t\tthis._handles.forEach(handle=>handle.enable());\r\n\r\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\r\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\r\n\t\t\r\n\t\t\treturn handle;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Returns bar color based on X position\r\n\r\n\t* @param {Number} barX\r\n\t* @param {Array} selection\r\n\t* @returns {Number} bar category index\r\n\t* @param {HistogramData} histogram data \r\n\t*/\r\n\t_getBarSelectionIndex(barX, selection, data){\r\n\t\tfor (var i=0;i<selection.length;i++){\r\n\t\t\tvar s = selection[i];\r\n\t\t\tvar within = barX >= data.valueToPosition(s.from) && barX < data.valueToPosition(s.to);\r\n\t\t\tif (within) return i;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns bar color for given bar position with given selection\r\n\t * @param {Number} barX \r\n\t * @param {Array} selection \r\n\t * @param {HistogramData} histogram data \r\n\t */\r\n\t_getBarColor (barX, selection, data){\r\n\t\tvar inactiveBarColor = this._options.inactiveBarColor;\r\n\t\tvar overSelectionColor = this._options.overSelectionColor;\r\n\t\t\r\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\r\n\t\tif (barSelectionIndex == null){\r\n\t\t\treturn inactiveBarColor;\r\n\t\t} else if (selection[barSelectionIndex].disabled){\r\n\t\t\treturn inactiveBarColor;\r\n\t\t} if (this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex){\r\n\t\t\treturn overSelectionColor;\r\n\t\t} else {\r\n\t\t\treturn selection[barSelectionIndex].color || this._options.selectionColor;                    \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns bar color for given bar position with given selection\r\n\t * @param {Number} barX \r\n\t * @param {Array} selection \r\n\t * @param {HistogramData} histogram data \r\n\t */\r\n\t_getBarOpacity (barX, selection, data){\r\n\t\tvar defaultOpacity = 1;\r\n\t\t\r\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\r\n\t\tif (barSelectionIndex == null || !selection[barSelectionIndex].opacity){\r\n\t\t\treturn defaultOpacity;\r\n\t\t} else {\r\n\t\t\treturn selection[barSelectionIndex].opacity;\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * Runs onTransition as a transition between two selections\r\n\t * @param {Array} selection1 \r\n\t * @param {Array} selection2 \r\n\t * @param {Function} onTransition handler\r\n\t */\r\n\t_onSelectionTransition(selection1, selection2, data1, data2, onTransition, onComplete){\r\n\t\tselection1.forEach((s1,selectionIndex)=>{\r\n\t\t\tvar s2 = selection2[selectionIndex];\r\n\t\t\tvar width = this._options.width;\r\n\t\t\tif (selection1[selectionIndex]){\r\n\t\t\t\tvar transitions = [];\r\n\t\t\t\tvar frames = [];\r\n\r\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.from)), Math.round(data2.valueToPosition(s2.from))]);\r\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.to)), Math.round(data2.valueToPosition(s2.to))]);\r\n\r\n\t\t\t\t// make sure duration is calculated based on transitino length\r\n\t\t\t\tframes = [Math.abs((transitions[0][0] - transitions[0][1])/width), Math.abs((transitions[1][0] - transitions[1][1])/width)];\r\n\r\n\t\t\t\ttransitions.forEach((t, handleIndex)=>{\r\n\t\t\t\t\tvar duration = 0;\r\n\r\n\t\t\t\t\twhile(t[0] !== t[1]){\r\n\t\t\t\t\t\tsetTimeout(onTransition.bind(this, t[0], selectionIndex, handleIndex), duration);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tduration = duration+1/frames[handleIndex];\r\n\t\t\t\t\t\tt[0] = t[0]>t[1]?t[0]-1:t[0]+1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tsetTimeout(function(p, si, hi){\r\n\t\t\t\t\t\tonTransition(p, si, hi)\r\n\t\t\t\t\t\tonComplete(p, si, hi);\r\n\t\t\t\t\t}.bind(this, t[1], selectionIndex, handleIndex), ++duration);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Updates selection\r\n\t*/\r\n\t_updateSelection(){\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\t\tvar bars = this._groupEl.selectAll(\".\"+style.bar);\r\n\r\n\t\t// fills bars with given selection\r\n\t\tvar fillBars = (s, data) => {\r\n\t\t\t// handle bar colors\r\n\t\t\tbars.attr(\"fill\", (d)=> {\r\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\r\n\t\t\t\treturn this._getBarColor(barX, s, data);\r\n\t\t\t})\r\n\r\n\t\t\t// handle bar opacity\r\n\t\t\tbars.attr(\"fill-opacity\", (d)=> {\r\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\r\n\t\t\t\treturn this._getBarOpacity(barX, s, data);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// handle animation if previous selection is set\r\n\t\tif (this._animate && this._prevSelection){\r\n\t\t\tvar prevSelection = this._prevSelection;\r\n\t\t\tvar prevData = this._prevHistogramData;\r\n\t\t\t\r\n\t\t\t// set prev selection\r\n\t\t\tfillBars(prevSelection, this._prevHistogramData);\r\n\r\n\t\t\t// set handle positions to prev selection\r\n\t\t\tprevSelection.forEach((s, i)=>{\r\n\t\t\t\tvar p1 = this._prevHistogramData.valueToPosition(s.from);\r\n\t\t\t\tvar p2 = this._prevHistogramData.valueToPosition(s.to);\r\n\r\n\t\t\t\tthis._handles[i].setHandleXPosition(p1).setLabelPosition(p1);\r\n\t\t\t\tthis._handles[i+1].setHandleXPosition(p2).setLabelPosition(p2)\r\n\t\t\t});\r\n\r\n\t\t\t//fill bars on selection transition and move handles\r\n\t\t\tthis._onSelectionTransition(prevSelection, selection, prevData, this._histogramData, \r\n\t\t\t\t// on transition callback\r\n\t\t\t\t(p, selectionIndex, handleIndex)=>{\r\n\t\t\t\t\tvar bar = d3.select(bars.nodes()[p-1]);\r\n\t\t\t\t\tvar barColor = this._getBarColor(p, selection, this._histogramData);\r\n\t\t\t\t\tbar.attr(\"fill\", barColor);\r\n\r\n\t\t\t\t\t//var handleText = this._options.format(this._histogramData.positionToValue(p));\r\n\t\t\t\t\t// move handles\r\n\t\t\t\t\t[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].setHandleXPosition(p).setLabelPosition(p)\r\n\r\n\t\t\t\t// on complete callback\t\t\r\n\t\t\t},()=>{\r\n\t\t\t\t\t// hide handles\r\n\t\t\t\t\t//[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].hideLabel();\r\n\t\t\t\t\tfillBars(selection, this._histogramData)\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tthis._prevSelection = null;\r\n\t\t\tthis._prevHistogramData = null;\r\n\t\t\r\n\t\t} else {\r\n\t\t\tfillBars(selection, this._histogramData)\r\n\t\t}\r\n\t\t\r\n\t\t// selection rects\r\n\t\tthis._groupEl.selectAll(\".\"+style.selectionbar)\r\n\t\t\t.data(selection)\r\n\t\t\t.attr(\"data-selection-index\", function(d,i){\r\n\t\t\t\treturn i;\r\n\t\t\t})\r\n\t\t\t.attr(\"x\", (d) => { \r\n\t\t\t\treturn this._histogramData.valueToPosition(d.from);\r\n\t\t\t})\r\n\t\t\t.attr(\"width\", (d) => {\r\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\r\n\t\t\t})\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Shows selection labels\r\n\t */\r\n\tshowSelectionLabels(){\r\n\t\tthis._histogramSelection.getSelection().forEach((s,i)=>{\r\n\t\t\tvar handle1 = this._handles[i];\r\n\t\t\tvar handle2 = this._handles[i+1];\r\n\r\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.maskPadding, this._options.width);\r\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\r\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\r\n\t\t});\r\n\t\t\r\n\t\tthis._handles.forEach(handle=>handle.showLabel());\r\n\t}\r\n\r\n\t/**\r\n\t * Hides selection labels\r\n\t */\r\n\thideSelectionLabels(){\r\n\t\tthis._handles.forEach(handle=>handle.hideLabel());\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys histogram UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._observable.destroy();\r\n\t\tthis._clear();\r\n\r\n\t\treturn this;\r\n    }\t\t\r\n}","import style from \"./Histogram.css\";\r\nimport HistogramSelectionRenderer from \"./selection/HistogramSelectionRenderer\";\r\nimport * as Defaults from \"./HistogramDefaults\";\r\nimport Observable from \"./utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Histogram renderer class\r\n * @param {Object} options\r\n */\r\nexport default class HistogramRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Histogram options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._historyData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = d3.scaleBand().range([0, options.width]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = d3.scaleLinear().range([options.height, 0]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous data for animation\r\n\t\t */\r\n\t\tthis._prevData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * selection renderer\r\n\t\t */\r\n\t\tthis._selectionRenderer = new HistogramSelectionRenderer(options);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * True if labels are visible\r\n\t\t */\r\n\t\tthis._labelsVisible = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a category\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is changed\r\n\t\t\t * @param {Array} selection\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\t\t\r\n\r\n\t\t// relay selection events\r\n\t\tthis._selectionRenderer.on(\"selectionOver\", (selectionIndex)=>{\r\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\r\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"selectionChanged\", (selection)=>{\r\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\r\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t\t});\t\t\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether histogram has been rendered or not\r\n\t * @returns {boolean} true if histogram has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\trender(selector){\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar margin = Defaults.MARGIN;\r\n\r\n\t\t// render SVG\r\n\t\tvar svg = this._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width + margin.left + margin.right)\r\n\t\t\t.attr(\"height\", height + margin.top + margin.bottom);\r\n\r\n\t\t// render group element\r\n\t\tvar g = this._groupEl = this._svgEl.append(\"g\")\r\n\t\t\t.classed(style.inactive, true)\r\n\t\t\t.attr(\"transform\",\r\n\t\t\t\"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\t\t// handle hover over svg element\r\n\t\tsvg.on(\"mouseover.hover\", ()=>{\r\n\t\t\tg.classed(style.active, true)\r\n\t\t\tg.classed(style.inactive, false)\r\n\t\t})\r\n\r\n\t\tsvg.on(\"mouseout.hover\", ()=>{\r\n\t\t\tg.classed(style.inactive, true)\r\n\t\t\tg.classed(style.active, false)\r\n\t\t})\r\n\r\n\t\tthis._selectionRenderer.render(g);\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t} \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._groupEl.node().innerHTML = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Refreshes histogram data \r\n\t * @param {HistogramData}\r\n\t * @param {HistogramSelection}\r\n\t * @param {Object} options\r\n\t */\r\n\trefresh(histogramData, histogramSelection, options){\r\n\t\tthis._animate = options && options.animate;\r\n\r\n\t\tthis._histogramData = histogramData;\t\t\r\n\t\tthis._clear();\r\n\r\n\t\tthis._xAxis.domain(histogramData.getData().map(function (d) {return d.value; }));\r\n\t\tthis._yAxis.domain([0, d3.max(histogramData.getData(), function (d) { return d.volume; })]);\r\n\r\n\t\tthis._renderXAxis();\t\t\r\n\t\tthis._renderDataBars();\r\n\r\n\t\tthis._prevData = histogramData.getData();\t\t\t\r\n\r\n\t\tthis._selectionRenderer.refresh(histogramData, histogramSelection, options);\t\r\n\r\n\t\tif (this._labelsVisible){\r\n\t\t\tthis.showSelectionLabels()\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows selection labels\r\n\t */\r\n\tshowSelectionLabels(){\r\n\t\tthis._selectionRenderer.showSelectionLabels();\r\n\t\t// hide axis labels when selection labels are visible\r\n\t\tthis._axisGroup.selectAll(\".tick>text\").attr(\"display\", \"none\");\r\n\t\tthis._labelsVisible = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides selection labels\r\n\t */\r\n\thideSelectionLabels(){\r\n\t\tthis._selectionRenderer.hideSelectionLabels();\r\n\t\t// show axis labels when selection labels are not visible\r\n\t\tthis._axisGroup.selectAll(\".tick>text\").attr(\"display\", \"block\");\t\t\r\n\t\tthis._labelsVisible = false;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Renders data bars\r\n\t*/\r\n\t_renderDataBars() { \r\n\t\tvar data = this._histogramData.getData();\r\n\t\tvar prevData = this._prevData;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\tvar x = this._xAxis;\r\n\t\tvar y = this._yAxis;\r\n\r\n\t\t// animate from previous data if available\r\n\t\tif (this._animate && prevData){\r\n\t\t\tx.domain(prevData.map(function (d) {return d.value; }));\r\n\t\t\ty.domain([0, d3.max(prevData, function (d) { return d.volume; })]);\r\n\r\n\t\t\tthis._groupEl.selectAll(\".\"+style.bar)\r\n\t\t\t\t.data(prevData)\r\n\t\t\t\t.enter().append(\"rect\")\r\n\t\t\t\t.attr(\"class\", style.bar)\r\n\t\t\t\t.attr(\"x\", function (d) { return x(d.value); })\r\n\t\t\t\t.attr(\"width\", x.bandwidth())\r\n\t\t\t\t.attr(\"y\", function (d) { return Math.floor(y(d.volume)); })\r\n\t\t\t\t.attr(\"height\", function (d) {return Math.ceil(height - y(d.volume)); })\r\n\r\n\t\t\tx.domain(data.map(function (d) {return d.value; }));\r\n\t\t\ty.domain([0, d3.max(data, function (d) { return d.volume; })]);\t\t\t\t\r\n\r\n\t\t\tthis._groupEl.selectAll(\".\"+style.bar)\r\n\t\t\t\t.data(data)\r\n\t\t\t\t.transition()\r\n\t\t\t\t.duration(500)\r\n\t\t\t\t.attr(\"y\", function (d) { return Math.floor(y(d.volume)); })\r\n\t\t\t\t.attr(\"height\", function (d) { return Math.ceil(height - y(d.volume)); })\r\n\t\t} else {\r\n\t\t\t// append the rectangles for the bar chart\r\n\t\t\tthis._groupEl.selectAll(\".\"+style.bar)\r\n\t\t\t\t.data(data)\r\n\t\t\t\t.enter().append(\"rect\")\r\n\t\t\t\t.attr(\"class\", style.bar)\r\n\t\t\t\t.attr(\"x\", function (d) { return x(d.value); })\r\n\t\t\t\t.attr(\"width\", x.bandwidth())\r\n\t\t\t\t.attr(\"y\", function (d) { return Math.floor(y(d.volume)); })\r\n\t\t\t\t.attr(\"height\", function (d) { return Math.ceil(height - y(d.volume)); })\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders X axis \r\n\t*/        \r\n\t_renderXAxis(){\r\n\t\tvar minMax = this._histogramData.getMinMax();\r\n\t\tvar format = this._options.format;\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\t// create bottom axis\r\n\t\tvar axis = d3.axisBottom(this._xAxis)\r\n\t\t\t.tickValues([minMax.min, minMax.max])\r\n\t\t\t.tickSize(0)\r\n\t\t\t.tickFormat(format)\r\n\t\t\t.tickPadding(15);\r\n\r\n\t\tvar axisGroup = this._axisGroup = this._groupEl.append(\"g\")\r\n\t\t\t.attr(\"transform\", \"translate(0,\" + height + \")\")\r\n\t\t\t.classed(style[\"x-axis\"], true)\r\n\t\t\t.call(axis);\r\n\r\n\t\taxisGroup.selectAll(\".tick\").attr(\"transform\", function(d, i){\r\n\t\t\treturn [\"translate(0,0)\", \"translate(\"+width+\",0)\"][i];\r\n\t\t})\r\n\r\n\t\taxisGroup.selectAll(\".tick>text\").attr(\"x\", 0);\r\n\r\n\t\taxisGroup.selectAll(\".tick\").attr(\"text-anchor\", function(d, i){\r\n\t\t\treturn [\"start\", \"end\"][i];\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys histogram UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\t\tthis._selectionRenderer.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","/**\n * @interface\n * HistogramSelection interface\n */\nexport default class HistogramSelection {\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\tthrow \"HistogramSelection.getSelection() has to be implemented\";\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\tthrow \"HistogramSelection.getOutputSelection() has to be implemented\";\n\t}\n\n\t/**\n\t * @public \n\t * @returns {String}\n\t * Returns histogram selection type\n\t */\n\tgetSelectionType(){\n\t\tthrow \"HistogramSelection.getSelectionType() has to be implemented\";\n\t}\n\n\t/**\n\t * @public \n\t * @returns {Boolean}\n\t * Returns true if toogle is allowed\n\t */\n\tallowsToggle(){\n\t\tthrow \"HistogramSelection.allowsToogle() has to be implemented\";\n\t}\t\n\n\t/**\n\t * @public \n\t * @returns {Array}\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tthrow \"HistogramSelection.getSelection() has to be implemented\";\n\t}  \t\n}\n\nvar SelectionTypes = {\n\tMULTI:\"multi\",\n\tFILTER:\"filter\",\n\tINVERTED_FILTER:\"inverted-filter\"\n}\n\nexport {SelectionTypes} ","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class MultipleHistogramSelection extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper();\n\t\tthis._selection = selection.slice();\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.MULTI;\n\t}\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelection()\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\treturn this._selection;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn true;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\t\t\t\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t \t\n}","import MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport * as Defaults from \"../HistogramDefaults\";\n\n/**\n * @class\n * DefaultHistogramSelectionImpl representing histogram selection\n */\nexport default class DefaultHistogramSelectionImpl extends MultipleHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData) {\n\t\tvar minMax = histogramData.getMinMax();\n\t\tvar colors = Defaults.DEFAULT_COLORS;\n\t\tvar start = minMax.min;\n\t\tvar step = (minMax.max - minMax.min) / colors.length;\n\t\tvar selection = colors.map(color=>{\n\t\t\tvar from = start;\n\t\t\tvar to = start + step;\n\t\t\tstart += step;\n\n\t\t\treturn {\n\t\t\t\tfrom:from, \n\t\t\t\tto:to,\n\t\t\t\tcolor:color\n\t\t\t}\n\t\t});\n\n\t\tsuper(histogramData, selection);\n    }\n}","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class FilterHistogramSelectionImpl extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tif (selection.length != 1){\n\t\t\tthrow \"Filter selection doesn't allow more than one selection\"\n\t\t}\n\t\tsuper();\n\t\tthis._selection = selection.slice();\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelection()\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\treturn this._selection;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.FILTER;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn false;\n\t}\t\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t\n}","import FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class InvertedFilterHistogramSelectionImpl extends FilterHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n\n\t\tthis._selection = this._getInvertedSelection(histogramData, selection);\n    }\n\n\n\t_getInvertedSelection(histogramData, selection){\n\t\tvar minMax = histogramData.getMinMax();\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:minMax.min,\n\t\t\t\tto:selection[0].from\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].from,\n\t\t\t\tdisabled:true,\n\t\t\t\tto:selection[0].to\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].to,\n\t\t\t\tto:minMax.max\n\t\t\t}\n\t\t];\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:this._selection[1].from,\n\t\t\t\tto:this._selection[1].to\n\t\t\t}\n\t\t];\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.INVERTED_FILTER;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = super.getSelectionPoints();\n\t\t\n\t\tresult[0].hidden = true;\n\t\tresult[result.length-1].hidden = true;\n\n\t\treturn result;\n\t}  \t\n}","import DefaultHistogramSelectionImpl from \"./DefaultHistogramSelectionImpl\";\nimport MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport InvertedFilterHistogramSelectionImpl from \"./InvertedFilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * HistogramSelection factory returns appropriate selection implementation\n */\nexport default class HistogramSelectionFactory {\n\t/**\n\t * @param {Object} options\n\t */\n\tconstructor(options) {\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * @param {HistogramData} histogramData\n\t * @returns {HistogramSelection} returns histogram selection\n\t * Returns histogram selection\n\t */\n\tgetHistogramSelection(selection, histogramData){\t\t\n\t\t// use default histogram selection if selection is not provided\n\t\tif (!selection){\n\t\t\treturn new DefaultHistogramSelectionImpl(histogramData, this._options.selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.FILTER){\n\t\t\treturn new FilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.INVERTED_FILTER){\n\t\t\treturn new InvertedFilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else {\n\t\t\treturn new MultipleHistogramSelectionImpl(histogramData, selection);\n\t\t}\n\t}  \t\n}"],"names":["getHandlePositionOffsets","handle1","handle2","maskPadding","width","label1Box","getLabelBox","label2Box","conflictDiff","x","posDiff1","posDiff2","xMax","getOptionValue","optionValue","defaultOptionValue","Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","WIDTH","HEIGHT","MARGIN","INACTIVE_BAR_COLOR","OVER_SELECTION_COLOR","SELECTION_COLOR","ENABLE_SELECTION_TOGGLE","MASK_PADDING","DEFAULT_COLORS","HistogramData","data","options","_histogramData","_loadHistogramData","_minMax","_calculateMinMax","_options","histogramData","d3","d","value","max","min","num","numParts","toString","split","position","getValueRatio","getMinMax","valueRatio","numOfBarsPerBucket","forEach","bucket","step","content","frequency","gradientIndex","HistogramHandle","groupEl","_observable","_handleEl","_handleLineEl","_handleCircleEl","_handleMaskEl","_handleMaskGradientEl","_handleLabelEl","_isOver","_groupEl","_index","_value","_position","valueToPosition","_elements","_renderHandle","element","remove","_createHandleElement","_createHandleLineElement","_createHandleCircleElement","_createDragMaskElement","_createMaskGradientElement","_createDragLabelElement","_handleHoverState","_handleDrag","attr","eventName","on","parseInt","node","getBBox","offset","height","text","setLabelOffset","_updateLabelPosition","setHoverState","unsetHoverState","classed","style","fire","xpos","Math","round","format","positionToValue","_this2","call","_onDrag","bind","_onStartDrag","_onEndDrag","label","textLength","getComputedTextLength","maskWidth","xPosition","append","selectAll","color","enter","_this3","HistogramSelectionRenderer","_histogramSelection","_overSelectionIndex","_rendered","_handles","_draggingHandle","_prevSelection","_destroyHandles","_selectionBars","handle","destroy","handleIndex","handleValue","promptHandler","then","promptResult","parseFloat","minMax","_this","points","getSelectionPoints","positions","map","point","sort","p1","p2","_updateSelectionPositions","_updateSelection","_renderHandles","selectionIndex","selection","disabled","enabled","target","allowsToggle","_toggleSelection","_onHandleClick","_onClick","histogramSelection","_animate","animate","getSelection","_prevHistogramData","_clear","_renderSelection","_handleClick","handles","slice","h1","h2","getXPosition","labelOffsets","PositionUtils","nodes","_updateSelectionControlsHoverState","g","selectionbar","_onSelectionMouseOut","_onSelectionMouseOver","p","from","to","hidden","hide","_onHandleDrag","startSelectionSnapshot","JSON","stringify","disable","enable","getOutputSelection","barX","s","inactiveBarColor","overSelectionColor","barSelectionIndex","_getBarSelectionIndex","selectionColor","opacity","selection1","selection2","data1","data2","onTransition","onComplete","s1","s2","_this4","transitions","frames","abs","t","duration","si","hi","bars","bar","fillBars","_this5","_getBarColor","_getBarOpacity","prevSelection","prevData","setHandleXPosition","setLabelPosition","_onSelectionTransition","barColor","_this6","showLabel","hideLabel","HistogramRenderer","_containerEl","_svgEl","_historyData","_xAxis","range","_yAxis","_prevData","_selectionRenderer","_labelsVisible","selector","ct","margin","Defaults","svg","left","right","top","bottom","inactive","active","render","innerHTML","domain","getData","volume","_renderXAxis","_renderDataBars","refresh","showSelectionLabels","_axisGroup","hideSelectionLabels","y","bandwidth","floor","ceil","transition","axis","tickValues","tickSize","tickFormat","tickPadding","axisGroup","removeChild","HistogramSelection","SelectionTypes","MultipleHistogramSelection","_selection","MULTI","result","DefaultHistogramSelectionImpl","colors","start","MultipleHistogramSelectionImpl","FilterHistogramSelectionImpl","FILTER","InvertedFilterHistogramSelectionImpl","_getInvertedSelection","INVERTED_FILTER","HistogramSelectionFactory","selectionType","Histogram","enableSelectionToggle","_histogramRenderer","_selectionFactory","off","isRendered","getHistogramSelection","getPrecision","setSelection"],"mappings":"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"}