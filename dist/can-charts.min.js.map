{"version":3,"file":"can-charts.min.js","sources":["../src/bar/Bar.js","../src/doughnut/Doughnut.js","../src/histogram/utils/PositionUtils.js","../src/histogram/Histogram.js","../src/line/Line.js","../src/utils/Observable.js","../src/bar/BarDefaults.js","../src/bar/BarData.js","../src/bar/BarRenderer.js","../src/doughnut/DoughnutDefaults.js","../src/doughnut/DoughnutRenderer.js","../src/histogram/HistogramDefaults.js","../src/histogram/HistogramData.js","../src/histogram/selection/HistogramHandle.js","../src/histogram/selection/HistogramSelectionRenderer.js","../src/histogram/HistogramRenderer.js","../src/histogram/selection/HistogramSelection.js","../src/histogram/selection/MultipleHistogramSelectionImpl.js","../src/histogram/selection/DefaultHistogramSelectionImpl.js","../src/histogram/selection/FilterHistogramSelectionImpl.js","../src/histogram/selection/InvertedFilterHistogramSelectionImpl.js","../src/histogram/selection/HistogramSelectionFactory.js","../src/line/LineDefaults.js","../src/line/LineData.js","../src/line/TooltipRenderer.js","../src/line/LineRenderer.js","../src/CanCharts.js"],"sourcesContent":["import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./BarDefaults\";\nimport BarData from \"./BarData\";\nimport BarRenderer from \"./BarRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main Bar class\n * @param {Object} options\n */\nclass Bar {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.barHeight = getOptionValue(options.barHeight, Defaults.BAR_HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Label font size \n\t\t */\n\t\tthis._options.labelFontSize = getOptionValue(options.labelFontSize, Defaults.LABEL_FONT_SIZE);\n\n\t\t/**\n\t\t * @public\n\t\t * Label font size \n\t\t */\n\t\tthis._options.valueFontSize = getOptionValue(options.valueFontSize, Defaults.VALUE_FONT_SIZE);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar color \n\t\t */\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Over bar color \n\t\t */\n\t\tthis._options.overBarColor = getOptionValue(options.overBarColor, Defaults.OVER_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.activeBarColor = getOptionValue(options.activeBarColor, Defaults.ACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Enables bar toggle\n\t\t */\n\t\tthis._options.enableBarToggle = getOptionValue(options.enableBarToggle, Defaults.ENABLE_BAR_TOGGLE);\n\n\t\t/**\n\t\t * @public\n\t\t * Enables bar hover \n\t\t */\n\t\tthis._options.enableBarHover = getOptionValue(options.enableBarHover, Defaults.ENABLE_BAR_HOVER);\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a bar\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out of bar\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barOut\",\t\t\t\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when bar is clicked\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barClick\",\t\t\t\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when bar is disabled\n\t\t\t * @param {int} barIndex\n\t\t\t * @param {boolean} disabled\n\t\t\t */\n\t\t\t\"barDisabled\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * BarRenderer\n\t\t */\n\t\tthis._barRenderer = new BarRenderer(this._options);\n\n\t\tthis._barRenderer.on(\"barOver\", barIndex=>{\n\t\t\tthis._observable.fire(\"barOver\", barIndex);\n\t\t})\n\n\t\tthis._barRenderer.on(\"barOut\", barIndex=>{\n\t\t\tthis._observable.fire(\"barOut\", barIndex);\n\t\t})\n\n\t\tthis._barRenderer.on(\"barClick\", (barIndex)=>{\n\t\t\tthis._observable.fire(\"barClick\", barIndex);\n\t\t})\n\n\t\tthis._barRenderer.on(\"barDisabled\", (barIndex, disabled)=>{\n\t\t\tthis._observable.fire(\"barDisabled\", barIndex, disabled);\n\t\t})\t\t\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Bar} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Bar} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Bar} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._barRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Bar} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._barRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Array} data\n\t * @returns {Bar} returns this widget instance \n\t */\n\tsetData(data) {\n\t\tif (!this._barRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar barData = this._barData = new BarData(data, this._options);\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + this._barData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._barRenderer.setData(barData);\n\n\t\treturn this;\n\t}\n}\n\nexport default Bar;\n","import Observable from \"../utils/Observable\";\nimport * as Defaults from \"./DoughnutDefaults\";\nimport DoughnutRenderer from \"./DoughnutRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main doughnut class\n * @param {Object} options\n */\nclass Doughnut {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.outerRadius = getOptionValue(options.outerRadius, Defaults.OUTER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.innerRadius = getOptionValue(options.innerRadius, Defaults.INNER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Active color\n\t\t */\n\t\tthis._options.activeColor = getOptionValue(options.activeColor, Defaults.ACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.inactiveColor = getOptionValue(options.inactiveColor, Defaults.INACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.backgroundColor = getOptionValue(options.backgroundColor, Defaults.BACKGROUND_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Value\n\t\t */\n\t\tthis._options.value = getOptionValue(options.value, Defaults.VALUE);\n\n\t\t/**\n\t\t * @public\n\t\t * Animation duration\n\t\t */\n\t\tthis._options.animationDuration = getOptionValue(options.animationDuration, Defaults.ANIMATION_DURATION);\n\n\t\t/**\n\t\t * @public\n\t\t * Render to container\n\t\t */\n\t\tthis._options.renderTo = getOptionValue(options.renderTo, null);\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over\n\t\t\t */\n\t\t\t\"mouseOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out\n\t\t\t */\n\t\t\t\"mouseOut\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * DoughnutRenderer\n\t\t */\n\t\tthis._doughnutRenderer = new DoughnutRenderer(this._options);\n\n\t\tthis._doughnutRenderer.on(\"mouseOver\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOver\")\n\t\t});\n\n\t\tthis._doughnutRenderer.on(\"mouseOut\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOut\")\n\t\t});\n\n\t\tif (options.renderTo){\n\t\t\tthis.render(options.renderTo);\n\t\t}\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._doughnutRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Doughnut} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._doughnutRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Object} options\n\t * @returns {Doughnut} returns this widget instance \n\t */\n\tupdate(options) {\n\t\tif (!this._doughnutRenderer.isRendered()) {\n\t\t\tthrow \"Can't call update() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tthis._doughnutRenderer.update(options);\n\n\t\treturn this;\n\t}\n}\n\nexport default Doughnut;\n","/**\n * @public\n * Returns handle positions offsets so that labels don't conflict visually\n * @param {HistogramData} histogramData \n * @returns {Array} label offsets\n */\nexport function getHandlePositionOffsets(handle1, handle2, maskPadding, width){\n    var label1Box = handle1.getLabelBox();\n    var label2Box = handle2.getLabelBox();\n\n    // calculate conflict number\n    var conflictDiff = label2Box.x - (label1Box.x + label1Box.width)-maskPadding;\n    // and handle if there is not enough space\n    if (conflictDiff<0){\n        // pos1 diff to the left\n        var posDiff1 = conflictDiff/2;\n        // pos2 diff to to right\n        var posDiff2 = conflictDiff/2;\n\n        // position left to 0 if position would be lower than 0\n        var xMin = label1Box.x+posDiff1;\n        if (xMin < 0){\n            posDiff1 = label1Box.x; \n            // also shift right label so we keep it visible\n            posDiff2 = posDiff2*2\n        }\n\n        // same with max value\n        var xMax = label2Box.x+label2Box.width-posDiff2;\n        if (xMax > width){\n            posDiff2 += xMax-width; \n            posDiff1 = posDiff1*2\n        }\n        return [posDiff1, -posDiff2];                  \n    }\n\n    return [0,0];\n}","import * as d3 from \"d3\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as Defaults from \"./HistogramDefaults\";\r\nimport HistogramData from \"./HistogramData\";\r\nimport HistogramRenderer from \"./HistogramRenderer\";\r\nimport HistogramSelectionFactory from \"./selection/HistogramSelectionFactory\"\r\nimport {SelectionTypes} from \"./selection/HistogramSelection\";\r\n\r\n/**\r\n * @private \r\n * @param {*} optionValue option value \r\n * @param {*} defaultOptionValue default option value \r\n * @returns option or default option value \r\n */\r\nfunction getOptionValue(optionValue, defaultOptionValue) {\r\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\r\n}\r\n\r\n/**\r\n * @class\r\n * Main histogram class\r\n * @param {Object} options\r\n */\r\nclass Histogram {\r\n\tconstructor(options) {\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Options property exposing widget's options\r\n\t\t */\r\n\t\tthis._options = {};\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * prompt handler\r\n\t\t */\r\n\t\tthis._options.promptHandler = options.promptHandler || null;\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Width of the widget\r\n\t\t */\r\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Height of the widget\r\n\t\t */\r\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Format for widget labels \r\n\t\t */\r\n\t\tthis._options.format = getOptionValue(options.format, null);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Inactive bar color \r\n\t\t */\r\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Inactive bar opacity \r\n\t\t */\r\n\t\tthis._options.inactiveBarOpacity = getOptionValue(options.inactiveBarOpacity, Defaults.INACTIVE_BAR_OPACITY);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Over bar color \r\n\t\t */\r\n\t\tthis._options.overSelectionColor = getOptionValue(options.overSelectionColor, Defaults.OVER_SELECTION_COLOR);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Over selection opacity \r\n\t\t */\r\n\t\tthis._options.overSelectionOpacity = getOptionValue(options.overSelectionOpacity, Defaults.OVER_SELECTION_OPACITY);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Selection color \r\n\t\t */\r\n\t\tthis._options.selectionColor = getOptionValue(options.selectionColor, Defaults.SELECTION_COLOR);\r\n\t\t\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Enable selection toggle \r\n\t\t */\r\n\t\tthis._options.enableSelectionToggle = getOptionValue(options.enableSelectionToggle, Defaults.ENABLE_SELECTION_TOGGLE);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Font size\r\n\t\t */\r\n\t\tthis._options.fontSize = getOptionValue(options.fontSize, Defaults.FONT_SIZE);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * selection type\r\n\t\t */\r\n\t\tthis._options.selectionType = getOptionValue(options.selectionType, null);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a selection\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * histogramRenderer\r\n\t\t */\r\n\t\tthis._histogramRenderer = new HistogramRenderer(this._options);\r\n\r\n\t\tthis._histogramRenderer.on(\"selectionOver\", selectionIndex=>{\r\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\r\n\t\t})\r\n\r\n\t\tthis._histogramRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\r\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\r\n\t\t})\r\n\r\n\t\tthis._histogramRenderer.on(\"selectionChanged\", (selection)=>{\r\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\r\n\t\t})\r\n\r\n\t\tthis._histogramRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\r\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t\t});\r\n\t\t\r\n\t\tthis._selectionFactory = new HistogramSelectionFactory(this._options);\r\n\t}\r\n\r\n\t/**\r\n\t * Bind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Unbind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler\r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\toff(eventName, handler) {\r\n\t\tthis._observable.off(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Destroys widget\r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\tdestroy() {\r\n\t\tthis._observable.destroy();\r\n\t\tthis._histogramRenderer.destroy();\r\n\t\tthis._options = null;\r\n\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\trender(selector) {\r\n\t\tthis._histogramRenderer.render(selector);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets widget data\r\n\t * @param {Array} data\r\n\t * @param {Array} selection\r\n\t * @param {Object} set data options\r\n\t * @returns {Histogram} returns this widget instance \r\n\t */\r\n\tsetData(data, selection, options) {\r\n\t\tif (!this._histogramRenderer.isRendered()) {\r\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\r\n\t\t}\r\n\r\n\t\tvar histogramData = this._histogramData = new HistogramData(data, this._options);\r\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, histogramData);\r\n\r\n\t\tthis._options.selection = histogramSelection.getSelection();\r\n\t\tthis._selection = selection;\r\n\r\n\t\tif (!this._options.format) {\r\n\t\t\tthis._options.format = (value => String(value));\r\n\t\t} else if (typeof this._options.format == \"string\"){\r\n\t\t\tthis._options.format = d3.format(this._options.format);\r\n\t\t}\r\n\r\n\t\tthis._histogramRenderer.refresh(histogramData, histogramSelection, options);\r\n\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public\r\n\t * Sets selection type\r\n\t * @param {String} selectionType\r\n\t * @returns {Histogram} returns this widget instance \r\n\t */\r\n\tsetSelectionType(selectionType){\r\n\t\tthis._options.selectionType = selectionType;\r\n\t\tthis.setSelection(this._selection);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows selection labels\r\n\t */\r\n\tshowSelectionLabels(){\r\n\t\tthis._histogramRenderer.showSelectionLabels();\r\n\t}\r\n\r\n\t/**\r\n\t * Hides selection labels\r\n\t */\r\n\thideSelectionLabels(){\r\n\t\tthis._histogramRenderer.hideSelectionLabels();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public\r\n\t * Sets selection\r\n\t * @param {Array} selection\r\n\t * @param {Object} options\r\n\t * @returns {Histogram} returns this widget instance \r\n\t */\r\n\tsetSelection(selection, options) {\r\n\t\tif (!this._histogramRenderer.isRendered()) {\r\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\r\n\t\t}\r\n\r\n\t\tif (!this._histogramData) {\r\n\t\t\tthrow \"Can't call setSelection() when no data is available.\"\r\n\t\t}\r\n\r\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, this._histogramData);\r\n\t\tthis._options.selection = histogramSelection.getSelection();\r\n\t\tthis._selection = selection;\r\n\t\tthis._histogramRenderer.refresh(this._histogramData, this._histogramSelection, options);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\nHistogram.SelectionTypes = SelectionTypes;\r\nexport default Histogram;\r\n","import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./LineDefaults\";\nimport LineData from \"./LineData\";\nimport LineRenderer from \"./LineRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main Line class\n * @param {Object} options\n */\nclass Line {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Line width\n\t\t */\n\t\tthis._options.lineWidth = getOptionValue(options.lineWidth, Defaults.LINE_WIDTH);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Dot size\n\t\t */\n\t\tthis._options.dotSize = getOptionValue(options.dotSize, Defaults.DOT_SIZE);\t\t\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Line color \n\t\t */\n\t\tthis._options.lineColor = getOptionValue(options.lineColor, Defaults.LINE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Line opacity \n\t\t */\n\t\tthis._options.lineOpacity = getOptionValue(options.lineOpacity, Defaults.LINE_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill color \n\t\t */\n\t\tthis._options.fillColor = getOptionValue(options.fillColor, Defaults.FILL_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill opacity\n\t\t */\n\t\tthis._options.fillOpacity = getOptionValue(options.fillOpacity, Defaults.FILL_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.axisColor = getOptionValue(options.axisColor, Defaults.AXIS_COLOR);\t\t\n\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.zeroLineColor = getOptionValue(options.zeroLineColor, Defaults.ZERO_LINE_COLOR);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Vertical spacing\n\t\t */\n\t\tthis._options.verticalSpacing = getOptionValue(options.verticalSpacing, this._options.height / 4);\t\t\n\t\t\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * LineRenderer\n\t\t */\n\t\tthis._lineRenderer = new LineRenderer(this._options);\n\n\t\tthis._lineRenderer.on(\"pointOver\", data=>{\n\t\t\tthis._observable.fire(\"pointOver\", data);\n\t\t})\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Line} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._lineRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._lineRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Array} data\n\t * @returns {Line} returns this widget instance \n\t */\n\tsetData(data) {\n\t\tif (!this._lineRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar lineData = this._lineData = new LineData(data, this._options);\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + this._lineData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._lineRenderer.update(lineData);\n\n\t\treturn this;\n\t}\n}\n\nexport default Line;\n","/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nexport default class Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tthis._handlers[event].push(handler);\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unbind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler, optional\r\n\t */\r\n    off(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tif (!handler) {\r\n\t\t\tthis._handlers[event] = [];\r\n\t\t} else {\r\n\t\t\tvar handlers = this._handlers[event];\r\n\t\t\tvar index = handlers.indexOf(handler);\r\n\t\t\tif (index != -1){\r\n\t\t\t\thandlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Fire widget event\r\n\t * @param {String} event event name\r\n\t * @param {*} ...args event arguments\r\n\t */\r\n\tfire(event, ...args) {\r\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tvar handlers = this._handlers[event];\r\n\t\tfor (var i = 0; i < handlers.length; i++) {\r\n\t\t\thandlers[i].apply(this, args);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys this observable, removes events and so on \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._handlers = null;\r\n\t\treturn this;\r\n    }\r\n\t\r\n}","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default bar height\r\n */\r\nexport const BAR_HEIGHT = 43;\r\n\r\n/**\r\n * @public\r\n * Default inactive bar color\r\n */\r\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const OVER_BAR_COLOR = \"#ffea00\";\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const ACTIVE_BAR_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Enables bar toggle\r\n */\r\nexport const ENABLE_BAR_TOGGLE = false;\r\n\r\n/**\r\n * @public\r\n * Enables bar hover \r\n */\r\nexport const ENABLE_BAR_HOVER = false;\r\n\r\n/**\r\n * @public\r\n * Label font size\r\n */\r\nexport const LABEL_FONT_SIZE = 13;\r\n\r\n/**\r\n * @public\r\n * Value font size\r\n */\r\nexport const VALUE_FONT_SIZE = 11;","import * as d3 from \"d3\";\n\n/**\n * @class\n * BarData representing data for the bar\n */\nexport default class BarData {\n\t/**\n\t * @param {data} data\n\t * @param {Object} options\n\t */\n\tconstructor(data, options) {\n\t\tthis._barData = this._loadBarData(data, options);\n\t\tthis._minMax = this._calculateMinMax(this._barData);\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns histogram data\n\t * @returns {Array} histogram data\n\t */\n\tgetData() {\n\t\treturn this._barData;\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given BarData\n\t* @param {Array} BarData\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(barData) {\n\t\tvar max = d3.sum(barData, function (d) { return d.value; });\n\n\t\treturn {\n\t\t\tmin: 0,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.max;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/** \n\t* @private\n\t* @param {Array} data\n\t* @returns {Array} bar data\n\t*/\n\t_loadBarData(data) {\n\t\t// no transofrmation at this stage\n\t\treturn data.slice();\n\t}\n}","import style from \"./Bar.css\";\r\nimport * as Defaults from \"./BarDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\nvar MASK_INDEX = 0;\r\n\r\n/**\r\n * @class\r\n * Bar renderer class\r\n * @param {Object} options\r\n */\r\nexport default class BarRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Bar options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._barData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Bar has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous data for animation\r\n\t\t */\r\n\t\tthis._prevData = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a bar\r\n\t\t\t * @param {int} barIndex\r\n\t\t\t */\r\n\t\t\t\"barOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is out of a bar\r\n\t\t\t * @param {int} barIndex\r\n\t\t\t */\r\n\t\t\t\"barOut\",\t\t\t\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when bar is clicked\r\n\t\t\t * @param {int} barIndex\r\n\t\t\t */\r\n\t\t\t\"barClick\",\t\t\t\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when bar is disabled\r\n\t\t\t * @param {int} barIndex\r\n\t\t\t * @param {boolean} disabled\r\n\t\t\t */\r\n\t\t\t\"barDisabled\"\r\n\t\t]);\r\n\r\n\t\tthis._maskIndex = MASK_INDEX++;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Bar has been rendered or not\r\n\t * @returns {boolean} true if Bar has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {BarHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Bar} returns this widget instance\r\n\t */\r\n\trender(selector){\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\t// render SVG\r\n\t\tthis._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height);\r\n\r\n\t\t// render group element\r\n\t\tthis._groupEl = this._svgEl.append(\"g\");\r\n\r\n\r\n\t\tthis._clipPath = this._svgEl.append(\"clipPath\")\r\n\t\t\t.attr(\"id\", \"rounded-corners-\"+this._maskIndex)\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"y\", this._options.labelFontSize + 10)\r\n\t\t\t.attr(\"rx\", 2.5)\r\n\t\t\t.attr(\"ry\", 2.5)\r\n\t\t\t.attr(\"width\",this._options.width)\r\n\t\t\t.attr(\"height\", 5);\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t} \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._groupEl.node().innerHTML = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Sets bar data \r\n\t * @param {BarData}\r\n\t */\r\n\tsetData(barData){\r\n\t\tthis._barData = barData;\t\t\r\n\t\tthis._clear();\r\n\r\n\t\tvar data = barData.getData();\r\n\t\tvar minMax = barData.getMinMax();\r\n\r\n\t\tvar barHeight = this._options.barHeight;\r\n\t\tvar height = data.length * barHeight;\r\n\r\n\t\tthis._xAxis = d3.scaleLinear().range([0, this._options.width]);\r\n\t\tthis._yAxis = d3.scaleBand().range([height, 0]);\t\r\n\r\n\t\tthis._svgEl.attr(\"height\", height);\t\r\n\r\n\t\tthis._xAxis.domain([0, minMax.max]);\r\n\t\tthis._yAxis.domain(data.map((item, i)=>i).reverse());\r\n\r\n\t\tthis._renderDataBars(data);\r\n\t\tthis._prevData = barData.getData();\t\t\t\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * Renders data bars\r\n\t*/\r\n\t_renderDataBars(data) { \r\n\t\tvar x = this._xAxis;\r\n\t\tvar y = this._yAxis;\r\n\t\tvar horizontalPadding = 10;\r\n\t\tvar barHeight = 5;\r\n\t\tvar observable = this._observable;\r\n\t\tvar options = this._options;\r\n\r\n\t\t// create bar groups\r\n\t\tvar barGroups = this._groupEl.selectAll(\".\"+style.bar).data(data).enter().append(\"g\").attr(\"class\", style[\"bar\"]);\r\n\t\tbarGroups\r\n\t\t\t.attr(\"transform\", function (d, i) {return \"translate(0,\"+ (Math.floor(y(i)))+\")\"})\r\n\t\t\t.classed(style[\"bar-over\"], (d)=>{\r\n\t\t\t\treturn d.highlighted;\r\n\t\t\t})\r\n\r\n\t\t\t.on(\"mouseover\", function(d, i){\r\n\t\t\t\tif (options.enableBarHover){\r\n\t\t\t\t\td3.select(this).classed(style[\"bar-over\"], true);\r\n\t\t\t\t\tobservable.fire(\"barOver\", i);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.on(\"mouseout\", function(d, i){\r\n\t\t\t\tif (options.enableBarHover){\r\n\t\t\t\t\td3.select(this).classed(style[\"bar-over\"], false);\r\n\t\t\t\t\tobservable.fire(\"barOut\", i);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.on(\"click\", function(d, i){\r\n\t\t\t\tif (options.enableBarToggle){\r\n\t\t\t\t\tvar disabled = !d3.select(this).classed(style[\"bar-disabled\"]);\r\n\t\t\t\t\td3.select(this).classed(style[\"bar-disabled\"], disabled);\r\n\t\t\t\t\tobservable.fire(\"barDisabled\", i, disabled);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobservable.fire(\"barClick\", i);\r\n\t\t\t})\r\n\r\n\t\tbarGroups.classed(style[\"bar-disabled\"], (d)=>{\r\n\t\t\treturn d.disabled;\r\n\t\t})\r\n\r\n\t\t// label\r\n\t\tbarGroups.append(\"text\")\r\n\t\t\t.text(d=>d.label)\r\n\t\t\t.attr(\"class\", style[\"bar-label\"])\r\n\t\t\t.attr(\"x\", horizontalPadding)\r\n\t\t\t.attr(\"font-size\", this._options.labelFontSize)\r\n\t\t\t.attr(\"y\", this._options.labelFontSize)\r\n\r\n\t\t// tooltip\r\n\t\tbarGroups.append(\"text\")\r\n\t\t\t.text(d=>{\r\n\t\t\t\t//var pcValue = Math.round(x(d.value)/this._options.width*100);\r\n\t\t\t\treturn d.tooltip || this._options.format(d.value)\r\n\t\t\t})\r\n\t\t\t.attr(\"class\", style[\"bar-tooltip\"])\r\n\t\t\t.attr(\"x\", this._options.width-horizontalPadding)\r\n\t\t\t.attr(\"text-anchor\",\"end\")\r\n\t\t\t.attr(\"font-size\", this._options.valueFontSize)\r\n\t\t\t.attr(\"y\", this._options.labelFontSize)\r\n\t\t\r\n\t\t// active bar\r\n\t\tbarGroups.append(\"rect\")\r\n\t\t\t.attr(\"fill\",(d)=>{\r\n\t\t\t\treturn d.color || Defaults.ACTIVE_BAR_COLOR;\r\n\t\t\t})\r\n\t\t\t.attr(\"class\", style[\"bar-active\"])\r\n\t\t\t.attr(\"x\", 0)\r\n\t\t\t.attr(\"clip-path\", \"url(#rounded-corners-\"+this._maskIndex+\")\")\r\n\t\t\t.attr(\"width\", function (d) { return Math.floor(x(d.value)); })\r\n\t\t\t.attr(\"y\", this._options.labelFontSize + 10)\r\n\t\t\t.attr(\"height\", barHeight);\r\n\r\n\t\t// inactive bar\r\n\t\tbarGroups.append(\"rect\")\r\n\t\t\t.attr(\"fill\",Defaults.INACTIVE_BAR_COLOR)\r\n\t\t\t.attr(\"class\", style[\"bar-inactive\"])\r\n\t\t\t.attr(\"clip-path\", \"url(#rounded-corners-\"+MASK_INDEX+\")\")\r\n\t\t\t.attr(\"x\", (d) => {\r\n\t\t\t\treturn Math.floor(x(d.value));\r\n\t\t\t})\r\n\t\t\t.attr(\"width\", (d)=> { return this._options.width - Math.floor(x(d.value)); })\r\n\t\t\t.attr(\"y\", this._options.labelFontSize + 10)\r\n\t\t\t.attr(\"height\", barHeight)\r\n\r\n\t\t// hover\r\n\t\tbarGroups.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"bar-hover\"])\r\n\t\t\t.attr(\"fill\", \"transparent\")\r\n\t\t\t.attr(\"x\", 0)\r\n\t\t\t.attr(\"text-anchor\",\"end\")\r\n\t\t\t.attr(\"cursor\",()=>this._options.enableBarHover?\"pointer\":\"default\")\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"height\", this._options.barHeight)\t\t\t\t\t\r\n\t\t\t.attr(\"width\", this._options.width)\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Bar UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","/**\r\n * @public\r\n * Default outer radius\r\n */\r\nexport const OUTER_RADIUS = 10;\r\n\r\n/**\r\n * @public\r\n * Default inner radius\r\n */\r\nexport const INNER_RADIUS = 10;\r\n\r\n/**\r\n * @public\r\n * Default value\r\n */\r\nexport const VALUE = 0;\r\n\r\n/**\r\n * @public\r\n * Default active color\r\n */\r\nexport const ACTIVE_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Default inactive color\r\n */\r\nexport const INACTIVE_COLOR = \"#F0F0F0\";\r\n\r\n/**\r\n * @public\r\n * Default background color\r\n */\r\nexport const BACKGROUND_COLOR = \"transparent\";\r\n\r\n/**\r\n * @public\r\n * Default animation duration\r\n */\r\nexport const ANIMATION_DURATION = 250;","import style from \"./Doughnut.css\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\r\n\r\n/**\r\n * @class\r\n * Doughnut renderer class\r\n * @param {Object} options\r\n */\r\nexport default class DoughnutRenderer {\r\n\tconstructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Doughnut options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Doughnut has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over\r\n\t\t\t */\r\n\t\t\t\"mouseOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is out\r\n\t\t\t */\r\n\t\t\t\"mouseOut\"\r\n\t\t]);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Doughnut has been rendered or not\r\n\t * @returns {boolean} true if Doughnut has been rendered\r\n\t */\r\n\tisRendered() {\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Doughnut} returns this widget instance\r\n\t */\r\n\trender(selector) {\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._containerEl.node().offsetWidth;\r\n\t\tvar height = this._containerEl.node().offsetHeight;\r\n\t\tvar value = this._value = this._options.value;\r\n\t\tvar angle = this._angle = value / 100 * tau;\r\n\t\tvar innerRadius = this._innerRadius = this._options.innerRadius;\r\n\t\tvar outerRadius = this._outerRadius = this._options.outerRadius;\r\n\r\n\t\t// arc settings\r\n\t\tvar arc = this._arc = d3.arc()\r\n\t\t\t.innerRadius(innerRadius)\r\n\t\t\t.outerRadius(outerRadius)\r\n\t\t\t.startAngle(0);\r\n\r\n\t\t// render SVG\r\n\t\tthis._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height)\r\n\t\t\t.attr(\"class\", style[\"svg\"]);\r\n\r\n\t\t// render group\r\n\t\tvar g = this._groupEl = this._svgEl\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"class\", style[\"doughnut\"])\r\n\t\t\t.attr(\"transform\", \"translate(\" + width / 2 + \", \" + height / 2 + \")\");\r\n\r\n\t\t// render inactive doughtnut\t\r\n\t\tthis._inactiveArc = g.append(\"path\")\r\n\t\t\t.datum({ endAngle: tau })\r\n\t\t\t.attr(\"fill\", this._options.inactiveColor)\r\n\t\t\t.attr(\"d\", arc);\r\n\r\n\t\t// render active doughtnut\t\r\n\t\tthis._activeArc = g.append(\"path\")\r\n\t\t\t.datum({ endAngle: angle })\r\n\t\t\t.attr(\"fill\", this._options.activeColor)\r\n\t\t\t.attr(\"d\", arc);\r\n\r\n\t\t// render background\t\r\n\t\tthis._backgroundArc = g.append(\"circle\")\r\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\r\n\t\t\t.attr(\"r\", innerRadius)\r\n\t\t\t.attr(\"cx\", 0)\r\n\t\t\t.attr(\"cy\", 0)\r\n\r\n\t\t// render background\t\r\n\t\tthis._backgroundArc = g.append(\"circle\")\r\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\r\n\t\t\t.attr(\"r\", innerRadius)\r\n\t\t\t.attr(\"cx\", 0)\r\n\t\t\t.attr(\"cy\", 0)\r\n\r\n\t\t// hover element, this needs to be rendered in order to have stable and animation\r\n\t\t// independent hover \r\n\t\tthis._hoverEl = g.append(\"rect\")\r\n\t\t\t.attr(\"fill\", \"transparent\")\r\n\t\t\t.attr(\"x\", -width/2)\r\n\t\t\t.attr(\"y\", -height/2)\r\n\t\t\t.attr(\"width\",width)\r\n\t\t\t.attr(\"height\",height)\r\n\r\n\t\tg.on(\"mouseover\", ()=>{\r\n\t\t\tthis._observable.fire(\"mouseOver\");\r\n\t\t})\r\n\r\n\t\tg.on(\"mouseout\", ()=>{\r\n\t\t\tthis._observable.fire(\"mouseOut\");\r\n\t\t})\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t\t * Bind widget event\r\n\t\t * @param {String} event event name\r\n\t\t * @param {Function} handler event handler\r\n\t\t * @returns {Doughnut} returns this widget instance\r\n\t\t */\r\n\t\ton(eventName, handler) {\r\n\t\t\tthis._observable.on(eventName, handler);\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Unbind widget event\r\n\t\t * @param {String} event event name\r\n\t\t * @param {Function} [handler] event handler\r\n\t\t * @returns {Doughnut} returns this widget instance\r\n\t\t */\r\n\t\toff(eventName, handler) {\r\n\t\t\tthis._observable.off(eventName, handler);\r\n\t\t\treturn this;\r\n\t\t}\t\r\n\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * @param {opts} new options\r\n\t * Updates doughnut with new options\r\n\t */\r\n\tupdate(opts) {\r\n\t\tvar options = opts || {};\r\n\r\n\t\tif (typeof options.value == \"undefined\"){\r\n\t\t\toptions.value = this._value;\r\n\t\t} else {\r\n\t\t\tthis._value = options.value;\r\n\t\t}\r\n\r\n\t\t// first tween foreground, note that this is also changing this._arc radiuses \r\n\t\tvar activeArcTransition = this._activeArc.transition()\r\n\t\t\t.duration(this._options.animationDuration)\r\n\t\t\t.attrTween(\"d\", this._arcTween(options, true))\r\n\r\n\t\t// se we only get new path on background as it uses radiuses saved in the previous call\r\n\t\tthis._inactiveArc.transition()\r\n\t\t\t.duration(this._options.animationDuration)\r\n\t\t\t.attrTween(\"d\", () => {\r\n\t\t\t\treturn () => {\r\n\t\t\t\t\treturn this._arc({ endAngle: tau });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\tthis._backgroundArc.transition()\r\n\t\t\t.duration(this._options.animationDuration)\r\n\t\t\t.attrTween(\"r\", () => {\r\n\t\t\t\treturn () => {\r\n\t\t\t\t\treturn this._innerRadius;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\tif (options.activeColor && options.activeColor !== this._options.activeColor){\r\n\t\t\tthis._options.activeColor = options.activeColor;\r\n\t\t\tactiveArcTransition.attr(\"fill\", options.activeColor)\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {options} new options\r\n\t * returns tween function for arc \r\n\t */\r\n\t_arcTween(options) {\r\n\t\tvar angle = options.value / 100 * tau;\r\n\t\t// change angle if new value is provided \r\n\t\tif (typeof options.value != \"undefined\") {\r\n\t\t\tangle = options.value / 100 * tau;\r\n\t\t}\r\n\r\n\t\t// handle new radiuses\r\n\t\tvar innerRadius = this._innerRadius;\r\n\t\tvar outerRadius = this._outerRadius;\r\n\r\n\t\tif (typeof options.innerRadius != \"undefined\") {\r\n\t\t\tinnerRadius = options.innerRadius;\r\n\t\t}\r\n\r\n\t\tif (typeof options.outerRadius != \"undefined\") {\r\n\t\t\touterRadius = options.outerRadius;\r\n\t\t}\r\n\r\n\t\t// get interpolation fns between new radiuses and old ones\r\n\t\t// for simlicity, do this even if value doesn't change as we\r\n\t\t// likely generate new path anyway\r\n\t\tvar interpolateOuterRadius = d3.interpolate(this._outerRadius, outerRadius);\r\n\t\tvar interpolateInnerRadius = d3.interpolate(this._innerRadius, innerRadius);\r\n\r\n\t\treturn (d) => {\r\n\t\t\t// get angle interpolation fn \r\n\t\t\tvar interpolateAngle = d3.interpolate(d.endAngle, angle);\r\n\r\n\t\t\treturn (t) => {\r\n\t\t\t\t// on each cycle, set new radiuses and endAngle\r\n\t\t\t\tthis._arc.outerRadius(this._outerRadius = interpolateOuterRadius(t));\r\n\t\t\t\tthis._arc.innerRadius(this._innerRadius = interpolateInnerRadius(t));\r\n\r\n\t\t\t\td.endAngle = this._angle = interpolateAngle(t);\r\n\t\t\t\treturn this._arc(d);\r\n\t\t\t};\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Doughnut UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered) {\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default widget height\r\n */\r\nexport const HEIGHT = 150;\r\n\r\n/**\r\n * @public\r\n * Default widget margin\r\n */\r\nexport const MARGIN = {\r\n    top:0,\r\n    left:5,\r\n    right:5,\r\n    bottom:15\r\n};\r\n\r\n/**\r\n * Default label margin from x axis\r\n */\r\nexport const LABEL_MARGIN = 7;\r\n\r\n/**\r\n * @public\r\n * Default inactive bar color\r\n */\r\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\r\n\r\n/**\r\n * @public\r\n * Default inactive bar opacity\r\n */\r\nexport const INACTIVE_BAR_OPACITY = 1;\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const OVER_SELECTION_COLOR = \"#ffea00\";\r\n\r\n/**\r\n * @public\r\n * Default over selection opacity\r\n */\r\nexport const OVER_SELECTION_OPACITY = 1;\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const SELECTION_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Enable selection toggle\r\n */\r\nexport const ENABLE_SELECTION_TOGGLE = true;\r\n\r\n/**\r\n * @public\r\n * Default font size\r\n */\r\nexport const FONT_SIZE = 11;\r\n\r\n/**\r\n * @public\r\n * Default colors \r\n */\r\nexport const DEFAULT_COLORS = [\"#e6f3fb\", \"#cbe7f6\", \"#b1dbf2\", \"#98cfee\", \"#7ec4ea\"];\r\n\r\n/**\r\n * @public\r\n * Default width of active handle area\r\n */\r\nexport const ACTIVE_HANDLE_AREA_WIDTH = 4;","import * as d3 from \"d3\";\n\n/**\n * @class\n * HistogramData representing data for the histogram view\n */\nexport default class HistogramData {\n\t/**\n\t * @param {data} data\n\t * @param {Object} options\n\t */\n\tconstructor(data, options) {\n\t\tthis._histogramData = this._loadHistogramData(data, options.width);\n\t\tthis._minMax = this._calculateMinMax(this._histogramData);\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns histogram data\n\t * @returns {Array} histogram data\n\t */\n\tgetData() {\n\t\treturn this._histogramData;\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given histogramData\n\t* @param {Array} histogramData\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(histogramData) {\n\t\tvar min = d3.min(histogramData, function (d) { return d.value; });\n\t\tvar max = d3.max(histogramData, function (d) { return d.value; });\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t* Returns value ratio between bars and data\n\t* @return {Number} value ratio \n\t*/\n\tgetValueRatio() {\n\t\tvar range = this._minMax.max - this._minMax.min;\n\t\treturn range / this._options.width;\n\t}\n\n\t/**\n\t * @public\n\t * Returns data value from given position \n\t * @param {Number} position\n\t */\n\tpositionToValue(position) {\n\t\tvar minMax = this.getMinMax();\n\t\t// return min if position is 0\n\t\tif (position === 0){\n\t\t\treturn minMax.min;\n\t\t}\n\n\t\t// return max if position is at the end\n\t\tif (position === this._options.width){\n\t\t\treturn minMax.max;\n\t\t}\n\n\t\t// else calculate based on value ratio and min/max\n\t\tvar valueRatio = this.getValueRatio();\n\t\treturn position * valueRatio + minMax.min;\n\t}\n\n\t/**\n\t * @public\n\t * Returns position from given data value \n\t * @param {Number} value\n\t */\n\tvalueToPosition(value) {\n\t\tvar valueRatio = this.getValueRatio();\n\t\tvar minMax = this.getMinMax();\n\t\treturn Math.round(value / valueRatio - minMax.min / valueRatio);\n\t}\n\n\t/** \n\t* @private\n\t* @param {Array} buckets\n\t* @param {int} numOfBarsPerBucket - number of bars per column\\\n\t* @returns {Array} data from given buckets \n\t*/\n\t_loadHistogramData(data, width) {\n\t\tvar histogramData = [];\n\t\t// calculate number of bars per bucket excluding last pixel for max value\n\t\tvar numOfBarsPerBucket = (width-1) / data.length;\n\n\t\tdata.forEach((bucket, i) => {\n\t\t\tvar step = (bucket.max - bucket.min) / numOfBarsPerBucket;\n\t\t\td3.range(bucket.min, bucket.max, step).forEach((value) => {\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tvolume: bucket.content[0].frequency\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// adding max value pixel as each non-last bucket ends one pixel before next bucket starts\n\t\t\tif (i == data.length-1){\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: bucket.max,\n\t\t\t\t\tvolume: bucket.content[0].frequency\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn histogramData;\n\t}\n}","import * as d3 from \"d3\";\r\nimport style from \"../Histogram.css\";\r\nimport * as Defaults from \"../HistogramDefaults\";\r\nimport Observable from \"../../utils/Observable\";\r\n\r\n/**\r\n * Gradient index shared for all instances\r\n */\r\nvar gradientIndex = 0;\r\n\r\n/**\r\n * @class\r\n * HistogramHandle representing control handle for histogram\r\n */\r\nexport default class HistogramHandle {\r\n\t/**\r\n\t * @param {D3Selection} groupEl\r\n\t * @param {Number} value\r\n\t * @param {Number} index\r\n\t * @param {HistoryData} histogramData\r\n\t * @param {Object} options\r\n\t */\r\n\tconstructor(groupEl, value, index, histogramData, options) {\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a selection\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"drag\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when drag on handle starts\r\n\t\t\t * @param {HistogramHandle} handle\r\n\t\t\t */\r\n\t\t\t\"startDrag\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when drag on handle ends\r\n\t\t\t * @param {HistogramHandle} handle\r\n\t\t\t */\r\n\t\t\t\"endDrag\"\r\n\t\t]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle element\r\n\t\t */\r\n\t\tthis._handleEl = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle line element\r\n\t\t */\r\n\t\tthis._handleLineEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle circle element\r\n\t\t */\r\n\t\tthis._handleCircleEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle mask element\r\n\t\t */\r\n\t\tthis._handleMaskEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle mask gradient element\r\n\t\t */\r\n\t\tthis._handleMaskGradientEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle label element\r\n\t\t */\r\n\t\tthis._handleLabelEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * True if handle is over\r\n\t\t */\r\n\t\tthis._isOver = false;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element\r\n\t\t */\t\t\r\n\t\tthis._groupEl = groupEl;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle index\r\n\t\t */\t\t\r\n\t\tthis._index = index;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle value\r\n\t\t */\t\t\r\n\t\tthis._value = value;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * initial handle value\r\n\t\t */\t\t\r\n\t\tthis._initialValue = new Number(value);\t\t\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle position\r\n\t\t */\t\t\r\n\t\tthis._position = histogramData.valueToPosition(value);\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * initial handle position\r\n\t\t */\t\t\r\n\t\tthis._initialPosition = new Number(this._position);\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * bar options\r\n\t\t */\t\t\r\n\t\tthis._options = options;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * histogram data\r\n\t\t */\t\t\r\n\t\tthis._histogramData = histogramData;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Cache for storing label size, enhances performance when animating\r\n\t\t */\t\t\r\n\t\tthis._labelSizeCache = {};\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * elements\r\n\t\t */\t\t\r\n\t\tthis._elements = [];\t\t\r\n\t\t\r\n\t\tthis._renderHandle();\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destroys this handle\r\n\t */\r\n\tdestroy(){\r\n\t\tthis._elements.forEach(element=>element.remove());\r\n\t\tthis._elements = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t   * Renders drag handle\r\n\t   */\r\n\t_renderHandle() {\r\n\t\tthis._elements = [\r\n\t\t\tthis._createHandleElement(),\r\n\t\t\tthis._createHandleLineElement(),\r\n\t\t\tthis._createHandleCircleElement(),\r\n\t\t\tthis._createDragMaskElement(),\r\n\t\t\tthis._createMaskGradientElement(),\r\n\t\t\tthis._createDragLabelElement()\r\n\t\t];\r\n\r\n\t\tthis._handleHoverState();\r\n\t\tthis._handleDrag();\r\n\t}\t\r\n\r\n\thide(){\r\n\t\tthis._elements.forEach(element=>element.attr(\"visibility\", \"hidden\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns X position of this handle\r\n\t * @returns {Number} X position handle\r\n\t */\r\n\tgetXPosition() {\r\n\t\treturn parseInt(this._handleEl.attr(\"x\"))+Defaults.ACTIVE_HANDLE_AREA_WIDTH/2;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Sets hover state\r\n\t */\r\n\tsetHoverState(){\r\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\r\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 3);\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public \r\n\t * @returns {SVGRect} \r\n\t * Returns drag label box for this handle\r\n\t */\r\n\tgetLabelBox(){\r\n\t\treturn this._handleLabelEl.node().getBBox();\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * Shifts handle label by given offset so it can handle label position conflicts\r\n\t */\r\n\tsetLabelOffset(offset){\r\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\r\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * Sets handle position\r\n\t */\r\n\tsetHandleXPosition(position){\r\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\"+position+\", \"+this._options.height+\")\")\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsetLabelText(text){\r\n\t\tthis._handleLabelEl.text(text);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tshowLabel(){\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\r\n\t\treturn this;\r\n\t}\r\n\r\n\thideLabel(){\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\tsetLabelPosition(position){\r\n\t\tthis.setLabelOffset(0);\r\n\t\tthis._updateLabelPosition(position);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unsets hover state\r\n\t */\r\n\tunsetHoverState(){\r\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\r\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 1);\r\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(0, 0)\")\r\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(0, 0)\")\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Enables this handle \r\n\t */\r\n\tenable(){\r\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"all\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Disables this handle \r\n\t */\r\n\tdisable(){\r\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"none\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handle hover state\r\n\t */\r\n\t_handleHoverState(){\r\n\t\t// line hover effect\r\n\t\tthis._handleEl.on(\"mouseover\", () => {\r\n\t\t\tthis._isOver = true;\r\n\t\t\tthis.setHoverState();\r\n\t\t})\r\n\t\tthis._handleEl.on(\"mouseout\", () => {\r\n\t\t\tthis._isOver = false;\r\n\t\t\tthis.unsetHoverState();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens when drag starts\r\n\t */\r\n\t_onStartDrag(){\r\n\t\tthis._groupEl.classed(style[\"dragging\"], true);\r\n\t\tthis._observable.fire(\"startDrag\", this);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens on drag\r\n\t */\r\n\t_onDrag(){\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar xpos = Math.round(Math.max(Math.min(d3.event.x, width), 0));\r\n\r\n\t\tthis._handleEl.attr(\"x\", xpos - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\r\n\t\tthis._handleLineEl.attr(\"x\", xpos - 2);\r\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\" + xpos + \",\" + height + \")\");\r\n\t\tthis._handleEl.attr(\"data-handle-value\", this._histogramData.positionToValue(xpos))\r\n\r\n\t\tthis.setHoverState();\r\n\r\n\t\tthis._position = xpos;\r\n\r\n\t\t// prevent recalculating value for the same position\r\n\t\tif (parseInt(this._position) !== parseInt(this._initialPosition)){\r\n\t\t\tthis._value = this._histogramData.positionToValue(xpos);\r\n\t\t} else {\r\n\t\t\tthis._value = this._initialValue;\r\n\t\t}\r\n\r\n\t\tthis._handleLabelEl.text(this._getLabelText())\r\n\r\n\t\tthis._updateLabelPosition(xpos);\r\n\t\tthis._observable.fire(\"drag\");\t\t\r\n\t}\r\n\r\n\t_getLabelText() {\r\n\t\treturn this._options.format(this._value);\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * handles what happens when drag ends\r\n\t */\r\n\t_onEndDrag(){\r\n\t\tthis._groupEl.classed(style[\"dragging\"], false);\r\n\t\tif (!this._isOver) {\r\n\t\t\tthis.unsetHoverState();\r\n\t\t}\r\n\r\n\t\tthis._observable.fire(\"endDrag\", this);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles handle drag \r\n\t */\r\n\t_handleDrag(){\r\n\t\tthis._handleEl.call(d3.drag()\r\n\t\t\t.on(\"drag\", this._onDrag.bind(this))\r\n\t\t\t.on(\"start\", this._onStartDrag.bind(this))\r\n\t\t\t.on(\"end\", this._onEndDrag.bind(this)));\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * Return computed or stored label length\r\n\t * @param {SVGElement}\r\n\t * @param {Number} length \r\n\t */\r\n\t_getComputedLabelTextLength(label){\r\n\t\tvar content = label.innerHTML;\r\n\t\tthis._labelSizeCache[content] = this._labelSizeCache[content] || label.getComputedTextLength();\r\n\t\treturn this._labelSizeCache[content];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Updates label position\r\n\t * @param {Number} position \r\n\t */\r\n\t_updateLabelPosition(position) {\r\n\t\tvar label = this._handleLabelEl.node();\r\n\t\tvar maskPadding = this._options.fontSize;\t\t\r\n\r\n\t\t// we need to calculate text length so we can create mask and center text\r\n\t\tvar textLength = this._getComputedLabelTextLength(label);\r\n\t\tvar maskWidth = textLength + maskPadding * 2;\r\n\t\tvar xPosition = position - textLength / 2;\r\n\r\n\t\t// handle when dragging towards left side\r\n\t\tif (xPosition < 0) {\r\n\t\t\txPosition = 0;\r\n\t\t}\r\n\r\n\t\t// handle when dragging towards right side\r\n\t\tif (xPosition + textLength > this._options.width) {\r\n\t\t\txPosition = this._options.width  - textLength;\r\n\t\t\tthis._handleLabelEl.attr(\"x\", this._options.width);\r\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"end\");\r\n\t\t} else {\r\n\t\t\tthis._handleLabelEl.attr(\"x\", xPosition);\r\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"start\");\r\n\t\t}\r\n\r\n\t\t// position mask\r\n\t\tthis._handleMaskEl.attr(\"x\", () => {\r\n\t\t\treturn parseInt(xPosition) - maskPadding;\r\n\t\t});\r\n\r\n\t\tthis._handleMaskGradientEl.attr(\"x1\", xPosition - maskPadding);\r\n\t\tthis._handleMaskGradientEl.attr(\"x2\", xPosition + maskWidth - maskPadding);\r\n\r\n\t\tthis._handleMaskEl.attr(\"width\", maskWidth);\r\n\t\tthis._handleMaskEl.attr(\"height\", this._options.fontSize);\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * Creates mask gradient element\r\n\t * @param {Number} handleIndex \r\n\t */\r\n\t_createMaskGradientElement(){\r\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\r\n\t\t\t.attr(\"id\", \"brush-mask-gradient-\" + gradientIndex++)\r\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\r\n\t\t\t.attr(\"y1\", 0).attr(\"x1\", 50)\r\n\t\t\t.attr(\"y2\", 0).attr(\"x2\", 0);\r\n\r\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\r\n\t\t\t.data([\r\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\r\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\r\n\t\t\t])\r\n\t\t\t.enter().append(\"stop\")\r\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\r\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\r\n\r\n\t\treturn this._handleMaskGradientEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders main handle element \r\n\t * @returns {SVGElement}\r\n\t */\r\n\t_createHandleElement(){\r\n\t\tthis._handleEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle\"])\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"data-handle-index\", this._index)\r\n\t\t\t.attr(\"data-handle-value\", this._value)\r\n\t\t\t.attr(\"cursor\", \"ew-resize\")\r\n\t\t\t.attr(\"width\", Defaults.ACTIVE_HANDLE_AREA_WIDTH)\r\n\t\t\t.attr(\"height\", this._options.height + 5)\r\n\t\t\t.attr(\"x\", this._position - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\r\n\r\n\t\treturn this._handleEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders handle line element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createHandleLineElement(){\r\n\t\tthis._handleLineEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle-line\"])\r\n\t\t\t.attr(\"width\", 4)\r\n\t\t\t.attr(\"height\", this._options.height)\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"x\", this._position - 2);\r\n\r\n\t\treturn this._handleLineEl;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders handle circle element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createHandleCircleElement(){\r\n\t\tthis._handleCircleEl = this._groupEl.append(\"circle\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle-circle\"])\r\n\t\t\t.attr(\"transform\", \"translate(\" + this._position + \",\" + this._options.height + \")\")\r\n\t\t\t.attr(\"fill\", \"#ffffff\")\r\n\t\t\t.attr(\"fill-opacity\", 1)\r\n\t\t\t.attr(\"stroke\", \"#000\")\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"cursor\", \"ew-resize\")\r\n\t\t\t.attr(\"r\", 3.5);\r\n\r\n\t\treturn this._handleCircleEl;\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders drag mask element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createDragMaskElement(){\r\n\t\tthis._handleMaskEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"drag-label-mask\"])\r\n\t\t\t.attr(\"fill\", \"url(#brush-mask-gradient-\" + gradientIndex+\")\")\r\n\t\t\t.attr(\"y\", this._options.height + Defaults.LABEL_MARGIN)\r\n\t\t\t.attr(\"display\", \"none\");\t\t\t\r\n\r\n\t\treturn this._handleMaskEl;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @private \r\n\t * Renders handle label element \r\n\t * @returns {SVGElement}  \r\n\t */\r\n\t_createDragLabelElement(){\r\n\t\tvar format = this._options.format;\r\n\t\tvar height = this._options.height;\r\n\t\tthis._handleLabelEl = this._groupEl.append(\"text\")\r\n\t\t\t.attr(\"class\", style[\"drag-label\"])\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"font-size\", this._options.fontSize)\r\n\t\t\t.text(() => {\r\n\t\t\t\tvar formattedValue = format(this._initialValue);\r\n\t\t\t\treturn formattedValue;\r\n\t\t\t})\r\n\t\t\t.attr(\"y\", height + this._options.fontSize + Defaults.LABEL_MARGIN);\r\n\r\n\t\t\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t\treturn this._handleLabelEl;\r\n\t}\r\n}","import style from \"../Histogram.css\";\r\nimport HistogramHandle from \"./HistogramHandle\";\r\nimport Observable from \"../../utils/Observable\";\r\nimport * as PositionUtils from \"../utils/PositionUtils\"\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Histogram renderer class\r\n * @param {Object} options\r\n */\r\nexport default class HistogramSelectionRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Histogram options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._histogramData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * history selection\r\n\t\t */\r\n\t\tthis._histogramSelection = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * index of over selection  \r\n\t\t */\r\n\t\tthis._overSelectionIndex = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * selection handles\r\n\t\t */\r\n\t\tthis._handles = [];\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if handle is dragged\r\n\t\t */\r\n\t\tthis._draggingHandle = false;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous selection for animation\r\n\t\t */\r\n\t\tthis._prevSelection = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if animation is run\r\n\t\t */\r\n\t\tthis._animating = false;\r\n\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a category\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is changed\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\t\t\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether histogram has been rendered or not\r\n\t * @returns {boolean} true if histogram has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @param {DOMElement}  \r\n\t * @returns {HistogramSelectionRenderer} returns this widget instance\r\n\t */\r\n\trender(groupEl){\r\n\t\tthis._rendered = true;\r\n\t\tthis._groupEl = groupEl\r\n\r\n\t\treturn this;\r\n\t} \t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._destroyHandles();\r\n\t\tif (this._selectionBars){\r\n\t\t\tthis._selectionBars.remove();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Destroys selection controls \r\n\t */\r\n\t_destroyHandles(){\r\n\t\tthis._handles.forEach(handle=>handle.destroy());\r\n\t\tthis._handles = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles click on handle\r\n\t * @param {Number} handleIndex\r\n\t * @param {Number} handleValue \r\n\t */\r\n\t_onHandleClick(handleIndex, handleValue){\r\n\t\t// call prompt handler if available\r\n\t\tif (this._options.promptHandler){\r\n\t\t\tthis._options.promptHandler(handleValue).then((promptResult)=>{\r\n\t\t\t\tpromptResult = parseFloat(promptResult);\r\n\t\t\t\t// must be within min max range\r\n\t\t\t\tvar minMax = this._histogramData.getMinMax();\r\n\t\t\t\tpromptResult = Math.min(minMax.max, promptResult);\r\n\t\t\t\tpromptResult = Math.max(minMax.min, promptResult);\r\n\r\n\t\t\t\tvar points = this._histogramSelection.getSelectionPoints();\r\n\t\t\t\tpoints[handleIndex] = {\r\n\t\t\t\t\tvalue:promptResult\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar positions = points\r\n\t\t\t\t\t.map(point=>this._histogramData.valueToPosition(point.value))\r\n\t\t\t\t\t.sort((p1,p2)=>p1-p2);\r\n\t\t\t\t\r\n\t\t\t\tthis._updateSelectionPositions(positions, points);\r\n\t\t\t\tthis._updateSelection();\r\n\r\n\t\t\t\t// TODO: update handles without destroying them\r\n\t\t\t\tthis._destroyHandles();\r\n\t\t\t\tthis._renderHandles();\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Toggles selection\r\n\t * @param {Number} selectionIndex \r\n\t */\r\n\t_toggleSelection(selectionIndex){\r\n\t\tvar selection = this._options.selection[selectionIndex];\r\n\t\tselection.disabled = !selection.disabled;\r\n\t\tvar enabled = !selection.disabled;\r\n\t\tthis._updateSelection();\r\n\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles click on chart\r\n\t */\r\n\t_onClick(){\r\n\t\tvar target = d3.select(d3.event.target);\r\n\t\tvar selectionIndex = target.attr(\"data-selection-index\");\r\n\t\tvar handleIndex = target.attr(\"data-handle-index\");\r\n\r\n\t\tif (selectionIndex != null && this._histogramSelection.allowsToggle()){\r\n\t\t\tthis._toggleSelection(selectionIndex)\r\n\t\t} else if (handleIndex != null){\r\n\t\t\tthis._onHandleClick(handleIndex, target.attr(\"data-handle-value\"));\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * Handles handle click \r\n\t */\r\n\t_handleClick(){\r\n\t\tthis._groupEl.on(\"click\", this._onClick.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Refreshes histogram data \r\n\t * @param {HistogramData}\r\n\t * @param {HistogramSelection}\r\n\t * @param {Object} options\r\n\t */\r\n\trefresh(histogramData, histogramSelection, options){\r\n\t\tthis._animate = options && options.animate;\r\n\t\tif (this._animate && this._histogramSelection && this._histogramSelection.getSelection().length == histogramSelection.getSelection().length){\r\n\t\t\tthis._prevSelection = this._histogramSelection.getSelection();\r\n\t\t\tthis._prevHistogramData = this._histogramSelection.getSelection();\r\n\t\t}\r\n\r\n\t\tif (this._animate && this._histogramData){\r\n\t\t\tthis._prevHistogramData = this._histogramData;\r\n\t\t}\r\n\r\n\t\tthis._histogramData = histogramData;\r\n\t\tthis._histogramSelection = histogramSelection;\r\n\t\t\r\n\t\tthis._clear();\r\n\t\tthis._renderSelection();\r\n\t\tthis._updateSelection();\r\n\r\n\t\tthis._handleHoverState();\r\n\t\tthis._handleClick();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Updates selection controls on hover\r\n\t * @param {Number} selectionIndex \r\n\t */\r\n\t_updateSelectionControlsHoverState(selectionIndex){\r\n\t\t// get all handles sorted by X position\r\n\t\tvar handles = this._handles.slice().sort((h1,h2)=>{\r\n\t\t\treturn h1.getXPosition() - h2.getXPosition();\r\n\t\t});\r\n\r\n\t\t// unset hover state on all handles\r\n\t\thandles.forEach(handle=>handle.unsetHoverState());\r\n\r\n\t\t// selection is active, active both handles for active selection\r\n\t\tif (selectionIndex != null){\r\n\t\t\tvar handle1 = handles[selectionIndex];\r\n\t\t\tvar handle2 = handles[selectionIndex+1];\r\n\r\n\t\t\thandle1.setHoverState();\r\n\t\t\thandle2.setHoverState();\r\n\r\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\r\n\r\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\r\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * \r\n\t * @private \r\n\t * Handles what happens when mouse is over selection\r\n\t * @param {String} type \r\n\t * @param {Number} i \r\n\t * @param {HTMLElement[]} array \r\n\t */\r\n\t_onSelectionMouseOver(d, i, nodes){\r\n\t\t// prevent selection when dragging handles\r\n\t\tif (this._draggingHandle){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\tvar selectionIndex = parseInt(d3.select(d3.event.target).attr(\"data-selection-index\"));\r\n\t\tif (this._overSelectionIndex != selectionIndex){\r\n\t\t\tthis._overSelectionIndex = selectionIndex;\r\n\t\t\tthis._updateSelection();\r\n\t\t\tthis._updateSelectionControlsHoverState(selectionIndex);\r\n\t\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @private \r\n\t * Handles what happens when mouse is out of selection\r\n\t * @param {String} type \r\n\t * @param {Number} i \r\n\t * @param {HTMLElement[]} array \r\n\t */\r\n\t_onSelectionMouseOut(d, i, nodes){\r\n\t\t// prevent selection when dragging handles\r\n\t\tif (this._draggingHandle){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0)\")\r\n\r\n\t\tthis._overSelectionIndex = null;\r\n\t\tthis._updateSelectionControlsHoverState(null);\r\n\t\tthis._updateSelection();\r\n\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Handles hover state\r\n\t */\r\n\t_handleHoverState(){\r\n\t\tvar g = this._groupEl;\r\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseout\", this._onSelectionMouseOut.bind(this));\r\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseover\", this._onSelectionMouseOver.bind(this));\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Handles when handle is dragged\r\n\t */\r\n\t_onHandleDrag(){\r\n\t\tvar positions = this._handles.map(handle=>handle.getXPosition()).sort((p1, p2)=>{\r\n\t\t\treturn p1-p2;\r\n\t\t});\r\n\r\n\t\tthis._updateSelectionPositions(positions);\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Updates selection with new positions\r\n\t* @param {Array} positions\r\n\t* @param {Array} points\r\n\t*/\r\n\t_updateSelectionPositions(positions, points){\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\t\tpositions.forEach((p, index)=>{\r\n\t\t\tif (index>selection.length-1){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar position = {\r\n\t\t\t\tfrom:p,\r\n\t\t\t\tto:positions[index+1]\r\n\t\t\t};\r\n\r\n\t\t\tvar value = {};\r\n\r\n\t\t\tif (points){\r\n\t\t\t\tvalue = {\r\n\t\t\t\t\tfrom:points[index].value,\r\n\t\t\t\t\tto:points[index+1].value\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\t[\"from\", \"to\"].forEach(pos=>{\r\n\t\t\t\tif (selection[index][\"position\"][pos] !== position[pos]){\r\n\t\t\t\t\tvar v = value[pos];\r\n\t\t\t\t\tif (typeof v == \"undefined\"){\r\n\t\t\t\t\t\tv = this._histogramData.positionToValue(position[pos]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tselection[index][pos] = v;\t\r\n\t\t\t\t\tselection[index][\"position\"][pos] = position[pos];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tthis._updateSelection();\r\n\t}\t\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders selection bars\r\n\t*/\r\n\t_renderSelection() {\r\n\t\tvar height = this._options.height;\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\r\n\t\t// hover selection bars\r\n\t\tthis._selectionBars = this._groupEl.selectAll(\".\"+style.selectionbar)\r\n\t\t\t.data(selection)\r\n\t\t\t.enter().append(\"rect\")\r\n\t\t\t.attr(\"class\", style.selectionbar)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\t\t.attr(\"height\", height);      \r\n\r\n\r\n\t\tthis._renderHandles();\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders selection controls\r\n\t*/\r\n\t_renderHandles(){\r\n\t\t// render selection controls\r\n\t\tthis._handles = this._histogramSelection.getSelectionPoints().map((point, index)=>{\r\n\t\t\tvar value = point.value;\r\n\r\n\t\t\tvar handle = new HistogramHandle(this._groupEl, value, index, this._histogramData, this._options);\r\n\r\n\t\t\tif(point.hidden){\r\n\t\t\t\thandle.hide();\r\n\t\t\t}\r\n\r\n\t\t\thandle.on(\"drag\", ()=>{\r\n\t\t\t\tthis._onHandleDrag();\r\n\t\t\t}, this);\r\n\r\n\t\t\tvar startSelectionSnapshot;\r\n\r\n\t\t\t// disable other handles when draggin starts\r\n\t\t\thandle.on(\"startDrag\", ()=>{\r\n\t\t\t\tstartSelectionSnapshot = JSON.stringify(this._options.selection);\r\n\t\t\t\t\r\n\t\t\t\tthis._draggingHandle = true;\r\n\t\t\t\tthis._handles.forEach(handle=>handle.disable());\r\n\t\t\t\thandle.enable();\r\n\t\t\t}, this);\r\n\r\n\t\t\t// enable all handles when draggin starts\r\n\t\t\thandle.on(\"endDrag\", ()=>{\r\n\t\t\t\tthis._draggingHandle = false;\r\n\t\t\t\tthis._handles.forEach(handle=>handle.enable());\r\n\r\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\r\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\r\n\t\t\r\n\t\t\treturn handle;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Returns bar color based on X position\r\n\r\n\t* @param {Number} barX\r\n\t* @param {Array} selection\r\n\t* @returns {Number} bar category index\r\n\t* @param {HistogramData} histogram data \r\n\t*/\r\n\t_getBarSelectionIndex(barX, selection, data){\r\n\t\tfor (var i=0;i<selection.length;i++){\r\n\t\t\tvar s = selection[i];\r\n\t\t\tvar isLast = i == selection.length-1;\r\n\t\t\tvar within = barX >= data.valueToPosition(s.from) && (barX < data.valueToPosition(s.to) || (isLast && barX <= data.valueToPosition(s.to)));\r\n\t\t\tif (within) return i;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns bar color for given bar position with given selection\r\n\t * @param {Number} barX \r\n\t * @param {Array} selection \r\n\t * @param {HistogramData} histogram data \r\n\t */\r\n\t_getBarColor (barX, selection, data){\r\n\t\tvar inactiveBarColor = this._options.inactiveBarColor;\r\n\t\tvar overSelectionColor = this._options.overSelectionColor;\r\n\t\t\r\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\r\n\t\tif (barSelectionIndex == null){\r\n\t\t\treturn inactiveBarColor;\r\n\t\t} else if (selection[barSelectionIndex].disabled){\r\n\t\t\treturn inactiveBarColor;\r\n\t\t} if (this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex){\r\n\t\t\treturn overSelectionColor;\r\n\t\t} else {\r\n\t\t\treturn selection[barSelectionIndex].color || this._options.selectionColor;                    \r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns bar color for given bar position with given selection\r\n\t * @param {Number} barX \r\n\t * @param {Array} selection \r\n\t * @param {HistogramData} histogram data \r\n\t */\r\n\t_getBarOpacity (barX, selection, data){\r\n\t\tvar defaultOpacity = 1;\r\n\r\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\r\n\t\tvar isOver = this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex;\r\n\t\tvar isDisabled = barSelectionIndex != null && selection[barSelectionIndex].disabled;\r\n\r\n\t\tif (isOver){\r\n\t\t\treturn this._options.overSelectionOpacity;\r\n\t\t}\r\n\r\n\t\tif (isDisabled){\r\n\t\t\treturn this._options.inactiveBarOpacity;\r\n\t\t}\r\n\t\t\r\n\t\t// otherwise use set opacity if \r\n\t\tif (barSelectionIndex != null && selection[barSelectionIndex].opacity != null){\r\n\t\t\treturn selection[barSelectionIndex].opacity;\r\n\t\t} \r\n\r\n\t\treturn defaultOpacity;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Runs onTransition as a transition between two selections\r\n\t * @param {Array} selection1 \r\n\t * @param {Array} selection2 \r\n\t * @param {Function} onTransition handler\r\n\t */\r\n\t_onSelectionTransition(selection1, selection2, data1, data2, onTransition, onComplete){\r\n\t\tselection1.forEach((s1,selectionIndex)=>{\r\n\t\t\tvar s2 = selection2[selectionIndex];\r\n\t\t\tvar width = this._options.width;\r\n\t\t\tif (selection1[selectionIndex]){\r\n\t\t\t\tvar transitions = [];\r\n\t\t\t\tvar frames = [];\r\n\r\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.from)), Math.round(data2.valueToPosition(s2.from))]);\r\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.to)), Math.round(data2.valueToPosition(s2.to))]);\r\n\r\n\t\t\t\t// make sure duration is calculated based on transitino length\r\n\t\t\t\tframes = [Math.abs((transitions[0][0] - transitions[0][1])/width), Math.abs((transitions[1][0] - transitions[1][1])/width)];\r\n\r\n\t\t\t\ttransitions.forEach((t, handleIndex)=>{\r\n\t\t\t\t\tvar duration = 0;\r\n\r\n\t\t\t\t\twhile(t[0] !== t[1]){\r\n\t\t\t\t\t\tsetTimeout(onTransition.bind(this, t[0], selectionIndex, handleIndex), duration);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tduration = duration+0.5/frames[handleIndex];\r\n\t\t\t\t\t\tt[0] = t[0]>t[1]?t[0]-1:t[0]+1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// call final complete fn only if duration is > 0, this prevents premature animation end\r\n\t\t\t\t\t// when one of the sides is in the same position\r\n\t\t\t\t\tif (duration>0){\r\n\t\t\t\t\t\tsetTimeout(function(p, si, hi){\r\n\t\t\t\t\t\t\tonTransition(p, si, hi)\r\n\t\t\t\t\t\t\tonComplete(p, si, hi);\r\n\t\t\t\t\t\t}.bind(this, t[1], selectionIndex, handleIndex), ++duration);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Updates selection\r\n\t*/\r\n\t_updateSelection(){\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\t\tvar bars = this._groupEl.selectAll(\".\"+style.bar);\r\n\r\n\t\t// fills bars with given selection\r\n\t\tvar fillBars = (s, data) => {\r\n\t\t\t// handle bar colors\r\n\t\t\tbars.attr(\"fill\", (d)=> {\r\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\r\n\t\t\t\treturn this._getBarColor(barX, s, data);\r\n\t\t\t})\r\n\r\n\t\t\t// handle bar opacity\r\n\t\t\tbars.attr(\"fill-opacity\", (d)=> {\r\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\r\n\t\t\t\treturn this._getBarOpacity(barX, s, data);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// handle animation if previous selection is set\r\n\t\tif (this._animate && this._prevSelection){\r\n\t\t\tvar prevSelection = this._prevSelection;\r\n\t\t\tvar prevData = this._prevHistogramData;\r\n\t\t\t\r\n\t\t\t// set prev selection\r\n\t\t\tfillBars(prevSelection, this._prevHistogramData);\r\n\r\n\t\t\t// set handle positions to prev selection\r\n\t\t\tprevSelection.forEach((s, i)=>{\r\n\t\t\t\tvar p1 = this._prevHistogramData.valueToPosition(s.from);\r\n\t\t\t\tvar p2 = this._prevHistogramData.valueToPosition(s.to);\r\n\r\n\t\t\t\tthis._handles[i].setHandleXPosition(p1).setLabelPosition(p1);\r\n\t\t\t\tthis._handles[i+1].setHandleXPosition(p2).setLabelPosition(p2)\r\n\t\t\t});\r\n\r\n\t\t\tthis._animating = true;\r\n\t\t\t//fill bars on selection transition and move handles\r\n\t\t\tthis._onSelectionTransition(prevSelection, selection, prevData, this._histogramData, \r\n\t\t\t\t// on transition callback\r\n\t\t\t\t(p, selectionIndex, handleIndex)=>{\r\n\t\t\t\t\tvar bar = d3.select(bars.nodes()[p]);\r\n\t\t\t\t\tvar barColor = this._getBarColor(p, selection, this._histogramData);\r\n\t\t\t\t\tbar.attr(\"fill\", barColor);\r\n\r\n\t\t\t\t\t//var handleText = this._options.format(this._histogramData.positionToValue(p));\r\n\t\t\t\t\t// move handles\r\n\t\t\t\t\t[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].setHandleXPosition(p).setLabelPosition(p)\r\n\r\n\t\t\t\t// on complete callback\t\t\r\n\t\t\t},()=>{\r\n\t\t\t\t\t// hide handles\r\n\t\t\t\t\t//[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].hideLabel();\r\n\t\t\t\t\tfillBars(selection, this._histogramData)\r\n\t\t\t\t\tthis._animating = false;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tthis._prevSelection = null;\r\n\t\t\tthis._prevHistogramData = null;\r\n\t\t\r\n\t\t} else {\r\n\t\t\tfillBars(selection, this._histogramData)\r\n\t\t}\r\n\t\t\r\n\t\t// selection rects\r\n\t\tthis._groupEl.selectAll(\".\"+style.selectionbar)\r\n\t\t\t.data(selection)\r\n\t\t\t.attr(\"data-selection-index\", function(d,i){\r\n\t\t\t\treturn i;\r\n\t\t\t})\r\n\t\t\t.attr(\"x\", (d) => { \r\n\t\t\t\treturn this._histogramData.valueToPosition(d.from);\r\n\t\t\t})\r\n\t\t\t.attr(\"width\", (d) => {\r\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\r\n\t\t\t})\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Shows selection labels\r\n\t */\r\n\tshowSelectionLabels(){\r\n\t\t// show label without calculating offsets when animating\r\n\t\tif (this._animating) {\r\n\t\t\treturn this._handles.forEach(handle=>handle.showLabel());\r\n\t\t}\r\n\r\n\t\tthis._histogramSelection.getSelection().forEach((s,i)=>{\r\n\t\t\tvar handle1 = this._handles[i];\r\n\t\t\tvar handle2 = this._handles[i+1];\r\n\r\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\r\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\r\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\r\n\t\t});\r\n\t\t\r\n\t\tthis._handles.forEach(handle=>handle.showLabel());\r\n\t}\r\n\r\n\t/**\r\n\t * Hides selection labels\r\n\t */\r\n\thideSelectionLabels(){\r\n\t\tthis._handles.forEach(handle=>handle.hideLabel());\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys histogram UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._observable.destroy();\r\n\t\tthis._clear();\r\n\r\n\t\treturn this;\r\n    }\t\t\r\n}","import style from \"./Histogram.css\";\r\nimport HistogramSelectionRenderer from \"./selection/HistogramSelectionRenderer\";\r\nimport * as Defaults from \"./HistogramDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Histogram renderer class\r\n * @param {Object} options\r\n */\r\nexport default class HistogramRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Histogram options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._historyData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = d3.scaleBand().range([0, options.width]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = d3.scaleLinear().range([options.height, 0]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous data for animation\r\n\t\t */\r\n\t\tthis._prevData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * selection renderer\r\n\t\t */\r\n\t\tthis._selectionRenderer = new HistogramSelectionRenderer(options);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * True if labels are visible\r\n\t\t */\r\n\t\tthis._labelsVisible = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a category\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is changed\r\n\t\t\t * @param {Array} selection\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\t\t\r\n\r\n\t\t// relay selection events\r\n\t\tthis._selectionRenderer.on(\"selectionOver\", (selectionIndex)=>{\r\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\r\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"selectionChanged\", (selection)=>{\r\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\r\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t\t});\t\t\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether histogram has been rendered or not\r\n\t * @returns {boolean} true if histogram has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\trender(selector){\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar margin = Defaults.MARGIN;\r\n\r\n\t\t// render SVG\r\n\t\tvar svg = this._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width + margin.left + margin.right)\r\n\t\t\t.attr(\"height\", height + margin.top + this._options.fontSize + margin.bottom);\r\n\r\n\t\t// render group element\r\n\t\tvar g = this._groupEl = this._svgEl.append(\"g\")\r\n\t\t\t.classed(style.inactive, true)\r\n\t\t\t.attr(\"transform\",\r\n\t\t\t\"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\t\t// handle hover over svg element\r\n\t\tsvg.on(\"mouseover.hover\", ()=>{\r\n\t\t\tg.classed(style.active, true)\r\n\t\t\tg.classed(style.inactive, false)\r\n\t\t})\r\n\r\n\t\tsvg.on(\"mouseout.hover\", ()=>{\r\n\t\t\tg.classed(style.inactive, true)\r\n\t\t\tg.classed(style.active, false)\r\n\t\t})\r\n\r\n\t\tthis._selectionRenderer.render(g);\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t} \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._groupEl.node().innerHTML = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Refreshes histogram data \r\n\t * @param {HistogramData}\r\n\t * @param {HistogramSelection}\r\n\t * @param {Object} options\r\n\t */\r\n\trefresh(histogramData, histogramSelection, options){\r\n\t\tthis._animate = options && options.animate;\r\n\r\n\t\tthis._histogramData = histogramData;\t\t\r\n\t\tthis._clear();\r\n\r\n\t\tthis._xAxis.domain(histogramData.getData().map(function (d) {return d.value; }));\r\n\t\tthis._yAxis.domain([0, d3.max(histogramData.getData(), function (d) { return d.volume; })]);\r\n\r\n\t\tthis._renderXAxis();\t\t\r\n\t\tthis._renderDataBars();\r\n\r\n\t\tthis._prevData = histogramData.getData();\t\t\t\r\n\r\n\t\tthis._selectionRenderer.refresh(histogramData, histogramSelection, options);\t\r\n\r\n\t\tif (this._labelsVisible){\r\n\t\t\tthis.showSelectionLabels()\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows selection labels\r\n\t */\r\n\tshowSelectionLabels(){\r\n\t\tthis._selectionRenderer.showSelectionLabels();\r\n\t\t// hide axis labels when selection labels are visible\r\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"none\");\r\n\t\tthis._labelsVisible = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides selection labels\r\n\t */\r\n\thideSelectionLabels(){\r\n\t\tthis._selectionRenderer.hideSelectionLabels();\r\n\t\t// show axis labels when selection labels are not visible\r\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"block\");\t\t\r\n\t\tthis._labelsVisible = false;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Renders data bars\r\n\t*/\r\n\t_renderDataBars() { \r\n\t\tvar data = this._histogramData.getData();\r\n\t\t// var prevData = this._prevData;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\tvar y = this._yAxis;\r\n\r\n\t\t// disable this for now as it's slow to animate all bars\r\n\t\t// animate from previous data if available\r\n\t\t// if (this._animate && prevData){\r\n\t\t// \tx.domain(prevData.map(function (d) {return d.value; }));\r\n\t\t// \ty.domain([0, d3.max(prevData, function (d) { return d.volume; })]);\r\n\r\n\t\t// \tthis._groupEl.selectAll(\".\"+style.bar)\r\n\t\t// \t\t.data(prevData)\r\n\t\t// \t\t.enter().append(\"rect\")\r\n\t\t// \t\t.attr(\"class\", style.bar)\r\n\t\t// \t\t.attr(\"x\", function (d) { return x(d.value); })\r\n\t\t// \t\t.attr(\"width\", x.bandwidth())\r\n\t\t// \t\t.attr(\"y\", function (d) { return Math.floor(y(d.volume)); })\r\n\t\t// \t\t.attr(\"height\", function (d) {return Math.ceil(height - y(d.volume)); })\r\n\r\n\t\t// \tx.domain(data.map(function (d) {return d.value; }));\r\n\t\t// \ty.domain([0, d3.max(data, function (d) { return d.volume; })]);\t\t\t\t\r\n\r\n\t\t// \tthis._groupEl.selectAll(\".\"+style.bar)\r\n\t\t// \t\t.data(data)\r\n\t\t// \t\t.transition()\r\n\t\t// \t\t.duration(250)\r\n\t\t// \t\t.attr(\"y\", function (d) { return Math.floor(y(d.volume)); })\r\n\t\t// \t\t.attr(\"height\", function (d) { return Math.ceil(height - y(d.volume)); })\r\n\t\t// } else {\r\n\t\t\t// append the rectangles for the bar chart\r\n\t\t\tthis._groupEl.selectAll(\".\"+style.bar)\r\n\t\t\t\t.data(data)\r\n\t\t\t\t.enter().append(\"rect\")\r\n\t\t\t\t.attr(\"class\", style.bar)\r\n\t\t\t\t.attr(\"x\", (d) => { return this._histogramData.valueToPosition(d.value); })\r\n\t\t\t\t.attr(\"width\", \"1\")\r\n\t\t\t\t.attr(\"y\", (d) => { return Math.floor(y(d.volume)); })\r\n\t\t\t\t.attr(\"height\", function (d) { return Math.ceil(height - y(d.volume)); })\r\n\t\t//}\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders X axis \r\n\t*/        \r\n\t_renderXAxis(){\r\n\t\tvar minMax = this._histogramData.getMinMax();\r\n\t\tvar format = this._options.format;\r\n\t\tvar height = this._options.height + this._options.fontSize + Defaults.LABEL_MARGIN;\r\n\r\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"])\r\n\t\t\t.data([minMax.min, minMax.max])\r\n\t\t\t.enter()\r\n\t\t\t.append(\"text\")\r\n\t\t\t.text((d)=>format(d))\r\n\t\t\t.attr(\"font-size\", this._options.fontSize)\r\n\t\t\t.attr(\"transform\", (d, i)=>{\r\n\t\t\t\treturn [\r\n\t\t\t\t\t\"translate(\"+0+\",\" + height + \")\",\r\n\t\t\t\t\t\"translate(\"+this._options.width+\",\" + height + \")\"\r\n\t\t\t\t][i]\r\n\t\t\t})\r\n\t\t\t.attr(\"text-anchor\", function(d, i){\r\n\t\t\t\treturn [\"start\", \"end\"][i];\r\n\t\t\t})\r\n\t\t\t.classed(style[\"x-axis\"], true)\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys histogram UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\t\tthis._selectionRenderer.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","/**\n * @abstract\n * abstract HistogramSelection class\n */\nexport default class HistogramSelection {\n\tconstructor(histogramData, selection){\n\t\tthis._selection = selection.map(s=>{\n\t\t\treturn Object.assign(s, {\n\t\t\t\tposition:{\n\t\t\t\t\tfrom:histogramData.valueToPosition(s.from),\n\t\t\t\t\tto:histogramData.valueToPosition(s.to)\n\t\t\t\t}\n\t\t\t});\n\t\t});\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelection()\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\treturn this._selection;\n\t}\n\n\t/**\n\t * @public\n\t * @abstract\n\t * @returns {Array} histogram selection\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\tthrow \"HistogramSelection.getOutputSelection() has to be implemented\";\n\t}\n\n\t/**\n\t * @public \n\t * @abstract\n\t * @returns {String}\n\t * Returns histogram selection type\n\t */\n\tgetSelectionType(){\n\t\tthrow \"HistogramSelection.getSelectionType() has to be implemented\";\n\t}\n\n\t/**\n\t * @abstract\n\t * @public \n\t * @returns {Boolean}\n\t * Returns true if toogle is allowed\n\t */\n\tallowsToggle(){\n\t\tthrow \"HistogramSelection.allowsToogle() has to be implemented\";\n\t}\t\n\n\t/**\n\t * @public\n\t * @abstract \n\t * @returns {Array}\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tthrow \"HistogramSelection.getSelection() has to be implemented\";\n\t}  \t\n}\n\nvar SelectionTypes = {\n\tMULTI:\"multi\",\n\tFILTER:\"filter\",\n\tINVERTED_FILTER:\"inverted-filter\"\n}\n\nexport {SelectionTypes} ","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class MultipleHistogramSelection extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.MULTI;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn true;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\t\t\t\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t \t\n}","import MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport * as Defaults from \"../HistogramDefaults\";\n\n/**\n * @class\n * DefaultHistogramSelectionImpl representing histogram selection\n */\nexport default class DefaultHistogramSelectionImpl extends MultipleHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData) {\n\t\tvar minMax = histogramData.getMinMax();\n\t\tvar colors = Defaults.DEFAULT_COLORS;\n\t\tvar start = minMax.min;\n\t\tvar step = (minMax.max - minMax.min) / colors.length;\n\t\tvar selection = colors.map(color=>{\n\t\t\tvar from = start;\n\t\t\tvar to = start + step;\n\t\t\tstart += step;\n\n\t\t\treturn {\n\t\t\t\tfrom:from, \n\t\t\t\tto:to,\n\t\t\t\tcolor:color\n\t\t\t}\n\t\t});\n\n\t\tsuper(histogramData, selection);\n    }\n}","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class FilterHistogramSelectionImpl extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tif (selection.length != 1){\n\t\t\tthrow \"Filter selection doesn't allow more than one selection\"\n\t\t}\n\t\tsuper(histogramData, selection);\n\t}\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.FILTER;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn false;\n\t}\t\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t\n}","import FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class InvertedFilterHistogramSelectionImpl extends FilterHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n\n\t\tthis._selection = this._getInvertedSelection(histogramData, selection);\n    }\n\n\n\t_getInvertedSelection(histogramData, selection){\n\t\tvar minMax = histogramData.getMinMax();\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:minMax.min,\n\t\t\t\tto:selection[0].from\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].from,\n\t\t\t\tdisabled:true,\n\t\t\t\tto:selection[0].to\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].to,\n\t\t\t\tto:minMax.max\n\t\t\t}\n\t\t];\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:this._selection[1].from,\n\t\t\t\tto:this._selection[1].to\n\t\t\t}\n\t\t];\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.INVERTED_FILTER;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = super.getSelectionPoints();\n\t\t\n\t\tresult[0].hidden = true;\n\t\tresult[result.length-1].hidden = true;\n\n\t\treturn result;\n\t}  \t\n}","import DefaultHistogramSelectionImpl from \"./DefaultHistogramSelectionImpl\";\nimport MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport InvertedFilterHistogramSelectionImpl from \"./InvertedFilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * HistogramSelection factory returns appropriate selection implementation\n */\nexport default class HistogramSelectionFactory {\n\t/**\n\t * @param {Object} options\n\t */\n\tconstructor(options) {\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * @param {HistogramData} histogramData\n\t * @returns {HistogramSelection} returns histogram selection\n\t * Returns histogram selection\n\t */\n\tgetHistogramSelection(selection, histogramData){\t\t\n\t\t// use default histogram selection if selection is not provided\n\t\tif (!selection){\n\t\t\treturn new DefaultHistogramSelectionImpl(histogramData, this._options.selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.FILTER){\n\t\t\treturn new FilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.INVERTED_FILTER){\n\t\t\treturn new InvertedFilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else {\n\t\t\treturn new MultipleHistogramSelectionImpl(histogramData, selection);\n\t\t}\n\t}  \t\n}","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default widget height\r\n */\r\nexport const HEIGHT = 200;\r\n\r\n/**\r\n * @public\r\n * Default line color\r\n */\r\nexport const LINE_COLOR = \"#7ed321\";\r\n\r\n/**\r\n * @public\r\n * Default line opacity\r\n */\r\nexport const LINE_OPACITY = 1;\r\n\r\n/**\r\n * @public\r\n * Default fill color\r\n */\r\nexport const FILL_COLOR = \"#7ed321\";\r\n\r\n/**\r\n * @public\r\n * Default fill opacity\r\n */\r\nexport const FILL_OPACITY = 0.1;\r\n\r\n/**\r\n * @public\r\n * Default line width\r\n */\r\nexport const LINE_WIDTH = 3;\r\n\r\n/**\r\n * @public\r\n * Default dot size\r\n */\r\nexport const DOT_SIZE = 6;\r\n\r\n/**\r\n * @public\r\n * Default margin \r\n */\r\nexport const MARGIN = {\r\n    bottom:28\r\n};\r\n\r\n/**\r\n * @public \r\n * Default axis color \r\n */\r\nexport const AXIS_COLOR = \"#f0f0f0\";\r\n\r\n\r\n/**\r\n * @public \r\n * Vertical label offset\r\n */\r\nexport const LABEL_OFFSET = 5;\r\n\r\n\r\n/**\r\n * @public \r\n * Zero line color\r\n */\r\nexport const ZERO_LINE_COLOR = \"#bababa\";","import * as d3 from \"d3\";\n\n/**\n * @class\n * LineData representing data for the line\n */\nexport default class LineData {\n\t/**\n\t * @param {data} data\n\t * @param {Object} options\n\t */\n\tconstructor(data, options) {\n\t\tthis._lineData = this._loadLineData(data, options);\n\t\tthis._minMax = this._calculateMinMax(this._lineData);\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns histogram data\n\t * @returns {Array} histogram data\n\t */\n\tgetData() {\n\t\treturn this._lineData;\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given LineData\n\t* @param {Array} LineData\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(lineData) {\n\t\tvar min = d3.min(lineData, function (d) { return d.value; });\n\t\tvar max = d3.max(lineData, function (d) { return d.value; });\n\n\t\tif (lineData.length==1){\n\t\t\tmin = Math.min(min, 0);\n\t\t\tmax = Math.max(max, 0);\n\t\t}\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.max;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/** \n\t* @private\n\t* @param {Array} data\n\t* @returns {Array} line data\n\t*/\n\t_loadLineData(data) {\n\t\t// no transofrmation at this stage\n\t\treturn data.slice();\n\t}\n}","import style from \"./Line.css\";\r\nimport * as Defaults from \"./LineDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\nvar gradientID = 0;\r\n\r\n/**\r\n * @class\r\n * Line renderer class\r\n * @param {Object} options\r\n */\r\nexport default class TooltipRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Line options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Line data \r\n\t\t */\r\n\t\tthis._lineData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Line has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a line point\r\n\t\t\t * @param {Array} [x,y] data\r\n\t\t\t */\r\n\t\t\t\"pointOver\"\r\n\t\t]);\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Line has been rendered or not\r\n\t * @returns {boolean} true if Line has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {LineHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Line} returns this widget instance\r\n\t */\r\n\trender(groupEl){\r\n\t\tthis._groupEl = groupEl;\r\n\t\tthis._rendered = true;\r\n\r\n\t\tthis._groupEl.on(\"mouseout\", this._onMouseOut.bind(this))\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t_onHoverAreaOver(d){\r\n\t\tvar duration = this._tooltipGroup.attr(\"visibility\") == \"visible\"?0:0;\r\n\t\tvar x = this._xAxis;\r\n\t\tvar y = this._yAxis;\r\n\t\tvar width = this._options.width;\r\n\t\tvar xPos = x(d.label);\r\n\r\n\t\t// update tooltip position\r\n\t\tthis._tooltipGroup\r\n\t\t\t.transition()\r\n\t\t\t.duration(duration)\r\n\t\t\t.attr(\"visibility\", \"visible\")\r\n\t\t\t.attr(\"transform\", \"translate(\"+xPos+\", 0)\")\r\n\r\n\t\t// update tooltip bottom label\r\n\t\tvar bottomLabelWidth = this._tooltipBottomLabel.node().getBBox().width;\r\n\t\tvar bottomMaskPadding = 25;\r\n\r\n\t\tthis._tooltipBottomLabel\r\n\t\t\t.text(d.label)\r\n\t\t\t.attr(\"text-anchor\", ()=>{\r\n\t\t\t\tvar xpos = xPos;\r\n\t\t\t\tif (xpos - bottomLabelWidth/2 < 0){\r\n\t\t\t\t\treturn \"start\"\r\n\t\t\t\t} else if (xpos + bottomLabelWidth/2 > width){\r\n\t\t\t\t\treturn \"end\"\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn \"middle\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\tvar textAnchor = this._tooltipBottomLabel.attr(\"text-anchor\");\r\n\t\tvar bottomMaskWidth = bottomMaskPadding*2 + bottomLabelWidth;\r\n\t\tthis._tooltipBottomLabelMask\r\n\t\t\t.attr(\"width\", bottomMaskWidth)\r\n\t\t\t.attr(\"x\", ()=>{\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\"start\":-bottomMaskPadding,\r\n\t\t\t\t\t\"middle\":-bottomMaskWidth/2,\r\n\t\t\t\t\t\"end\":-bottomMaskWidth+bottomMaskPadding,\r\n\t\t\t\t}[textAnchor]\r\n\t\t\t})\r\n\r\n\t\tthis._handleMaskGradientEl.attr(\"x1\", -bottomMaskWidth/2);\r\n\t\tthis._handleMaskGradientEl.attr(\"x2\", bottomMaskWidth/2);\t\t\t\r\n\r\n\t\t// update tooltip top label \r\n\t\tvar tooltipHtml = d.tooltip || this._options.format(d.value);\r\n\t\tthis._tooltipTopLabel.node().innerHTML = tooltipHtml;\r\n\t\tvar labelLeft = this._getLabelLeft(xPos);\r\n\r\n\t\tif (d.value){\r\n\t\t\tthis._tooltipTopLabel\r\n\t\t\t\t.style(\"left\", labelLeft+\"px\")\r\n\t\t\t\t.style(\"visibility\", \"visible\")\r\n\t\t\t\t.style(\"top\", y(d.value)-50+\"px\")\r\n\r\n\t\t\t// update line circle\r\n\t\t\tthis._tooltipLineCircle\r\n\t\t\t\t.transition()\r\n\t\t\t\t.duration(duration)\r\n\t\t\t\t.attr(\"cy\", y(d.value))\t\t\t\t\r\n\t\t} else {\r\n\t\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\");\r\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\t_getLabelLeft(xPos){\r\n\t\tvar labelWidth = this._tooltipTopLabel.node().offsetWidth;\r\n\t\tvar labelLeft = xPos-labelWidth/2;\r\n\t\t\r\n\t\tif (labelLeft<0){\r\n\t\t\tlabelLeft = 0;\r\n\t\t}\r\n\r\n\t\tif (labelLeft>this._options.width - labelWidth){\r\n\t\t\tlabelLeft = this._options.width - labelWidth;\r\n\t\t}\r\n\r\n\t\treturn labelLeft;\r\n\t}\r\n\r\n\t_onMouseOut(){\r\n\t\t// only hide when mouse is outside of widget\r\n\t\tif (!this._groupEl.node().parentNode.contains(d3.event.relatedTarget)){\r\n\t\t\tthis._hideTooltip();\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t_hideTooltip(){\r\n\t\tthis._tooltipGroup.attr(\"visibility\", \"hidden\")\r\n\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\")\r\n\t}\r\n\r\n\t_renderTooltip(){\r\n\t\tvar data = this._lineData.getData();\r\n\t\tvar hoverWidth;\r\n\t\tif (data.length>1){\r\n\t\t\thoverWidth = this._options.width / (data.length-1);\r\n\t\t} else {\r\n\t\t\thoverWidth = this._options.width;\r\n\t\t}\r\n\r\n\t\tthis._hoverAreas = this._groupEl\r\n\t\t\t.selectAll(\".\"+style[\"tooltip-hover-area\"])\r\n\t\t\t.data(data)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-hover-area\"])\r\n\t\t\t.attr(\"width\", hoverWidth)\r\n\t\t\t.attr(\"fill-opacity\", 0.00)\r\n\t\t\t.attr(\"x\", (d)=>{\r\n\t\t\t\treturn this._xAxis(d.label) - hoverWidth/2\r\n\t\t\t})\r\n\t\t\t.attr(\"height\", this._options.height)\r\n\t\t\t.on(\"mouseover\", this._onHoverAreaOver.bind(this))\r\n\r\n\t\tthis._tooltipGroup = this._groupEl\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"visibility\", \"hidden\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-group\"])\r\n\r\n\t\tthis._tooltipLineCircle = this._tooltipGroup\r\n\t\t\t.append(\"circle\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-line-circle\"])\r\n\t\t\t.attr(\"stroke-width\", this._options.lineWidth)\r\n\t\t\t.attr(\"stroke\", this._options.lineColor)\r\n\t\t\t.attr(\"stroke-opacity\", this._options.lineOpacity)\r\n\t\t\t.attr(\"r\", 2.5+this._options.lineWidth/2)\r\n\r\n\t\tthis._tooltipAxisCircle = this._tooltipGroup\r\n\t\t\t.append(\"circle\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-axis-circle\"])\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"cy\", this._options.height - Defaults.MARGIN.bottom)\r\n\t\t\t.attr(\"r\", 2.5 + 1/2)\r\n\r\n\t\tthis._tooltipBottomLabelMask = this._tooltipGroup\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"fill\", \"url(#\"+this._handleMaskGradientEl.attr(\"id\")+\")\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-label-mask\"])\r\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET-15)\r\n\t\t\t.attr(\"height\", 20)\r\n\r\n\t\tthis._tooltipBottomLabel = this._tooltipGroup\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-label\"])\r\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET)\r\n\t\t\t.attr(\"text-anchor\", \"start\")\r\n\t\t\t.text(data[0].label)\r\n\r\n\t\tthis._tooltipTopLabel = d3.select(this._groupEl.node().parentNode.parentNode)\r\n\t\t\t.insert(\"span\", \":first-child\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-top-label\"])\r\n\t\t\t.style(\"position\", \"absolute\")\r\n\t\t\t.style(\"visibility\", \"hidden\")\r\n\r\n\t\tthis._tooltipRendered = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates mask gradient element\r\n\t * @param {Number} handleIndex \r\n\t */\r\n\t_createMaskGradientElement(){\r\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\r\n\t\t\t.attr(\"id\", style[\"tooltip-label-mask\"]+\"-\"+(gradientID++)+\"-gradient\")\r\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\r\n\t\t\t.attr(\"y1\", \"0\").attr(\"x1\", \"0\")\r\n\t\t\t.attr(\"y2\", \"0\").attr(\"x2\", \"0\");\r\n\r\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\r\n\t\t\t.data([\r\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\r\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\r\n\t\t\t])\r\n\t\t\t.enter().append(\"stop\")\r\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\r\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\r\n\r\n\t\treturn this._handleMaskGradientEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tif (this._tooltipRendered){\r\n\t\t\tthis._hoverAreas.remove();\r\n\t\t\tthis._tooltipGroup.remove();\r\n\t\t\tthis._tooltipTopLabel.remove();\r\n\t\t\tthis._tooltipRendered = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Sets line data \r\n\t * @param {LineData}\r\n\t */\r\n\tupdate(lineData, x, y){\r\n\t\tthis._xAxis = x;\r\n\t\tthis._yAxis = y; \r\n\t\tthis._lineData = lineData;\r\n\r\n\t\tthis._createMaskGradientElement();\r\n\t\tthis._clear();\r\n\t\tthis._renderTooltip();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Line UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._clear();\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","import style from \"./Line.css\";\r\nimport * as Defaults from \"./LineDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport TooltipRenderer from \"./TooltipRenderer\";\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Line renderer class\r\n * @param {Object} options\r\n */\r\nexport default class LineRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Line options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Line data \r\n\t\t */\r\n\t\tthis._lineData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Line has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous data for animation\r\n\t\t */\r\n\t\tthis._prevData = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a line point\r\n\t\t\t * @param {Array} [x,y] data\r\n\t\t\t */\r\n\t\t\t\"pointOver\"\r\n\t\t]);\r\n\r\n\t\tthis._tooltipRenderer = new TooltipRenderer(options);\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Line has been rendered or not\r\n\t * @returns {boolean} true if Line has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {LineHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Line} returns this widget instance\r\n\t */\r\n\trender(selector){\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\t// force position relative so the toolip shows correctly\r\n\t\tct.style(\"position\", \"relative\");\r\n\r\n\t\t// render SVG\r\n\t\tthis._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"class\", style.svg)\r\n\t\t\t.attr(\"height\", height);\r\n\r\n\t\t// render group element\r\n\t\tthis._groupEl = this._svgEl.append(\"g\");\r\n\r\n\t\tthis._tooltipRenderer.render(this._groupEl);\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t} \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._groupEl.node().innerHTML = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Sets line data \r\n\t * @param {LineData}\r\n\t */\r\n\tupdate(lineData){\r\n\t\tthis._lineData = lineData;\t\t\r\n\t\tthis._clear();\r\n\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar verticalSpacing = this._options.verticalSpacing;\r\n\r\n\t\tvar data = lineData.getData();\r\n\t\tvar minMax = lineData.getMinMax();\r\n\r\n\t\tvar x = this._xAxis = d3.scalePoint().range([0, width]);\t\r\n\t\tvar y = this._yAxis = d3.scaleLinear().range([height-verticalSpacing, verticalSpacing]);\r\n\r\n\t\tx.domain(data.map(function (d) {return d.label; }));\r\n\t\ty.domain([minMax.min, minMax.max]);\r\n\r\n\t\tthis._renderDataLines(data);\r\n\t\tthis._renderZeroLine(data);\r\n\t\tthis._renderXAxis(data);\r\n\t\tthis._tooltipRenderer.update(lineData, x, y);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * Renders x axis\r\n\t*/\r\n\t_renderXAxis(data){\r\n\t\tthis._groupEl.append(\"line\")\r\n\t\t\t.attr(\"x1\", 0)\r\n\t\t\t.attr(\"x2\", this._options.width)\r\n\t\t\t.attr(\"y1\", this._options.height-Defaults.MARGIN.bottom)\r\n\t\t\t.attr(\"y2\", this._options.height-Defaults.MARGIN.bottom)\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"stroke\", this._options.axisColor)\r\n\r\n\t\t// render to labels on start and end sides if multiple items are available\r\n\t\tif (data.length>1){\r\n\t\t\tthis._groupEl\r\n\t\t\t\t.append(\"text\")\r\n\t\t\t\t.text(data[0].label)\r\n\t\t\t\t.attr(\"x\", 0)\r\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\r\n\r\n\t\t\tthis._groupEl\r\n\t\t\t\t.append(\"text\")\r\n\t\t\t\t.text(data[data.length-1].label)\r\n\t\t\t\t.attr(\"x\", this._options.width)\r\n\t\t\t\t.attr(\"text-anchor\", \"end\")\r\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\r\n\r\n\t\t// render single label in the middle if only one item is available\t\t\t\t\r\n\t\t} else if (data.length == 1){\r\n\t\t\tthis._groupEl\r\n\t\t\t\t.append(\"text\")\r\n\t\t\t\t.text(data[0].label)\r\n\t\t\t\t.attr(\"x\", this._options.width/2)\r\n\t\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\r\n\t\t}\t\r\n\t}\r\n\t/**\r\n\t * Returns true if graph should render zero line\r\n\t * @param {Array} data \r\n\t */\r\n\t_showZeroLine(){\r\n\t\tvar zeroLinePosition = this._yAxis(0);\r\n\t\tvar axisPosition = this._options.height-Defaults.MARGIN.bottom;\r\n\t\tvar treshold = 10;\r\n\t\treturn zeroLinePosition<axisPosition-treshold;\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * Renders zero line\r\n\t*/\r\n\t_renderZeroLine(){\r\n\t\tif (this._showZeroLine()){\r\n\t\t\tthis._groupEl.append(\"line\")\r\n\t\t\t\t.attr(\"x1\", 0)\r\n\t\t\t\t.attr(\"x2\", this._options.width)\r\n\t\t\t\t.attr(\"y1\", Math.round(this._yAxis(0)))\r\n\t\t\t\t.attr(\"y2\", Math.round(this._yAxis(0)))\r\n\t\t\t\t.attr(\"stroke-dasharray\",\"2 ,2\")\r\n\t\t\t\t.attr(\"stroke\", this._options.zeroLineColor)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * Renders data lines\r\n\t*/\r\n\t_renderDataLines(data) { \r\n\t\tvar x = this._xAxis;\r\n\t\tvar y = this._yAxis;\r\n\t\t\r\n\t\tvar options = this._options;\r\n\t\tvar minHeight = this._options.height-Defaults.MARGIN.bottom;\r\n\r\n\t\tvar areaZero = this._showZeroLine()?Math.min(minHeight, y(0)):minHeight;\r\n\r\n\t\t// define the area\r\n\t\tvar area = d3.area()\r\n\t\t\t.x(function(d) {return x(d.label); })\r\n\t\t\t.y0(areaZero)\r\n\t\t\t.y1(function(d) { return y(d.value); });\r\n\r\n\t\t// define the line\r\n\t\tvar line = d3.line()\r\n\t\t\t.x(function(d) { return x(d.label); })\r\n\t\t\t.y(function(d) { return y(d.value); });\t\t\r\n\r\n\t\t// apply grouping if needed (null or other splits)\r\n\t\tconst groupedData = this._getGroupedData(data);\r\n\r\n\t\tgroupedData.forEach(lineData=>{\r\n\t\t\t// add the area path\r\n\t\t\tthis._groupEl.append(\"path\")\r\n\t\t\t.data([lineData])\r\n\t\t\t.attr(\"class\", style[\"area\"])\r\n\t\t\t.attr(\"fill\", options.fillColor)\r\n\t\t\t.attr(\"fill-opacity\", options.fillOpacity)\r\n\t\t\t.attr(\"d\", area);\r\n\r\n\t\t\t// add the line path\r\n\t\t\tthis._groupEl.append(\"path\")\r\n\t\t\t\t.data([lineData])\r\n\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t.attr(\"stroke-linecap\", \"round\")\r\n\t\t\t\t.attr(\"stroke\", options.lineColor)\r\n\t\t\t\t.attr(\"stroke-opacity\", options.lineOpacity)\r\n\t\t\t\t// note that in case of a single item, dot is rendered with a different size\r\n\t\t\t\t.attr(\"stroke-width\", lineData.length>1?options.lineWidth:options.dotSize)\r\n\t\t\t\t.attr(\"class\", style[\"line\"])\r\n\t\t\t\t.attr(\"d\", line);\r\n\t\t});\r\n\t\t\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Splits given array into multiple in case there is null in value\r\n\t * @param {Array} data \r\n\t */\r\n\t_getGroupedData(data){\r\n\t\tlet group = [];\r\n\t\tconst result = [group];\r\n\t\t\r\n\t\tdata.forEach(item=>{\r\n\t\t\tif (item.value === null){\r\n\t\t\t\tgroup = [];\r\n\t\t\t\tresult.push(group);\r\n\t\t\t} else {\r\n\t\t\t\tgroup.push(item);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Line UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","import Bar from \"./bar/Bar\";\r\nimport Doughnut from \"./doughnut/Doughnut\";\r\nimport Histogram from \"./histogram/Histogram\";\r\nimport Line from \"./line/Line\";\r\n\r\nexport default {\r\n\tBar:Bar,\r\n    Doughnut:Doughnut,\r\n    Histogram:Histogram,\r\n    Line:Line\r\n}"],"names":["getOptionValue","optionValue","defaultOptionValue","getHandlePositionOffsets","handle1","handle2","maskPadding","width","label1Box","getLabelBox","label2Box","conflictDiff","x","posDiff1","posDiff2","xMax","Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","WIDTH","BAR_HEIGHT","INACTIVE_BAR_COLOR","OVER_BAR_COLOR","ACTIVE_BAR_COLOR","ENABLE_BAR_TOGGLE","ENABLE_BAR_HOVER","LABEL_FONT_SIZE","VALUE_FONT_SIZE","BarData","data","options","_barData","_loadBarData","_minMax","_calculateMinMax","_options","barData","d3","d","value","num","max","numParts","toString","split","slice","MASK_INDEX","BarRenderer","_containerEl","_groupEl","_svgEl","_xAxis","_yAxis","_rendered","_prevData","_observable","_maskIndex","eventName","on","selector","ct","height","append","attr","_clipPath","labelFontSize","node","innerHTML","_clear","getData","minMax","getMinMax","barHeight","range","domain","map","item","reverse","_renderDataBars","y","observable","barGroups","selectAll","style","bar","enter","Math","floor","classed","highlighted","enableBarHover","fire","enableBarToggle","disabled","text","label","tooltip","_this","format","valueFontSize","color","Defaults","removeChild","destroy","Bar","inactiveBarColor","overBarColor","activeBarColor","_barRenderer","barIndex","off","render","isRendered","getPrecision","setData","OUTER_RADIUS","INNER_RADIUS","VALUE","ACTIVE_COLOR","INACTIVE_COLOR","BACKGROUND_COLOR","ANIMATION_DURATION","tau","PI","DoughnutRenderer","offsetWidth","offsetHeight","_value","angle","_angle","innerRadius","_innerRadius","outerRadius","_outerRadius","arc","_arc","startAngle","g","_inactiveArc","datum","endAngle","inactiveColor","_activeArc","activeColor","_backgroundArc","backgroundColor","_hoverEl","opts","activeArcTransition","transition","duration","animationDuration","attrTween","_arcTween","_this2","interpolateOuterRadius","interpolateInnerRadius","interpolateAngle","t","_this3","Doughnut","renderTo","_doughnutRenderer","update","HEIGHT","MARGIN","INACTIVE_BAR_OPACITY","OVER_SELECTION_COLOR","OVER_SELECTION_OPACITY","SELECTION_COLOR","ENABLE_SELECTION_TOGGLE","FONT_SIZE","DEFAULT_COLORS","HistogramData","_histogramData","_loadHistogramData","histogramData","min","position","getValueRatio","valueRatio","round","numOfBarsPerBucket","forEach","bucket","step","content","frequency","gradientIndex","HistogramHandle","groupEl","_handleEl","_handleLineEl","_handleCircleEl","_handleMaskEl","_handleMaskGradientEl","_handleLabelEl","_isOver","_index","_initialValue","Number","_position","valueToPosition","_initialPosition","_labelSizeCache","_elements","_renderHandle","element","remove","_createHandleElement","_createHandleLineElement","_createHandleCircleElement","_createDragMaskElement","_createMaskGradientElement","_createDragLabelElement","_handleHoverState","_handleDrag","parseInt","_updateLabelPosition","getBBox","offset","setLabelOffset","setHoverState","unsetHoverState","xpos","positionToValue","_getLabelText","call","_onDrag","bind","_onStartDrag","_onEndDrag","getComputedTextLength","fontSize","textLength","_getComputedLabelTextLength","maskWidth","xPosition","HistogramSelectionRenderer","_histogramSelection","_overSelectionIndex","_handles","_draggingHandle","_prevSelection","_animating","_destroyHandles","_selectionBars","handle","handleIndex","handleValue","promptHandler","then","promptResult","parseFloat","points","getSelectionPoints","positions","point","sort","p1","p2","_updateSelectionPositions","_updateSelection","_renderHandles","selectionIndex","selection","enabled","target","allowsToggle","_toggleSelection","_onHandleClick","_onClick","histogramSelection","_animate","animate","getSelection","_prevHistogramData","_renderSelection","_handleClick","handles","h1","h2","getXPosition","labelOffsets","PositionUtils","nodes","_updateSelectionControlsHoverState","selectionbar","_onSelectionMouseOut","_onSelectionMouseOver","p","pos","v","hidden","hide","_onHandleDrag","startSelectionSnapshot","JSON","stringify","disable","enable","getOutputSelection","barX","s","isLast","from","to","overSelectionColor","barSelectionIndex","_getBarSelectionIndex","selectionColor","isOver","isDisabled","overSelectionOpacity","inactiveBarOpacity","opacity","selection1","selection2","data1","data2","onTransition","onComplete","s1","s2","_this4","transitions","frames","abs","si","hi","bars","fillBars","_this5","_getBarColor","_getBarOpacity","prevSelection","prevData","setHandleXPosition","setLabelPosition","_onSelectionTransition","barColor","showLabel","_this6","hideLabel","HistogramRenderer","_historyData","_selectionRenderer","_labelsVisible","margin","svg","left","right","top","bottom","inactive","active","volume","_renderXAxis","refresh","showSelectionLabels","hideSelectionLabels","ceil","HistogramSelection","_selection","Object","assign","SelectionTypes","MultipleHistogramSelection","MULTI","result","DefaultHistogramSelectionImpl","colors","start","MultipleHistogramSelectionImpl","FilterHistogramSelectionImpl","FILTER","InvertedFilterHistogramSelectionImpl","_getInvertedSelection","INVERTED_FILTER","HistogramSelectionFactory","selectionType","Histogram","enableSelectionToggle","_histogramRenderer","_selectionFactory","getHistogramSelection","String","setSelection","LineData","_lineData","_loadLineData","lineData","gradientID","TooltipRenderer","_onMouseOut","_tooltipGroup","xPos","bottomLabelWidth","_tooltipBottomLabel","textAnchor","bottomMaskWidth","bottomMaskPadding","_tooltipBottomLabelMask","tooltipHtml","_tooltipTopLabel","labelLeft","_getLabelLeft","_tooltipLineCircle","labelWidth","parentNode","contains","relatedTarget","_hideTooltip","hoverWidth","_hoverAreas","_onHoverAreaOver","lineWidth","lineColor","lineOpacity","_tooltipAxisCircle","insert","_tooltipRendered","_renderTooltip","LineRenderer","_tooltipRenderer","verticalSpacing","_renderDataLines","_renderZeroLine","axisColor","_showZeroLine","zeroLineColor","minHeight","areaZero","area","y0","y1","line","_getGroupedData","fillColor","fillOpacity","dotSize","group","_lineRenderer"],"mappings":"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"}