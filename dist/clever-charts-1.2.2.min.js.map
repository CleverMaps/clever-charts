{"version":3,"file":"clever-charts-1.2.2.min.js","sources":["../src/utils/Observable.js","../src/doughnut/DoughnutRenderer.js","../src/doughnut/Doughnut.js","../src/doughnut/DoughnutDefaults.js","../src/histogram/HistogramDefaults.js","../src/histogram/HistogramData.js","../src/histogram/selection/HistogramHandle.js","../src/histogram/utils/PositionUtils.js","../src/histogram/selection/HistogramSelectionRenderer.js","../src/histogram/HistogramRenderer.js","../src/histogram/selection/HistogramSelection.js","../src/histogram/selection/MultipleHistogramSelectionImpl.js","../src/histogram/selection/DefaultHistogramSelectionImpl.js","../src/histogram/selection/FilterHistogramSelectionImpl.js","../src/histogram/selection/InvertedFilterHistogramSelectionImpl.js","../src/histogram/selection/HistogramSelectionFactory.js","../src/histogram/Histogram.js","../src/line/LineDefaults.js","../src/line/LineData.js","../src/line/TooltipRenderer.js","../src/line/LineRenderer.js","../src/line/Line.js","../src/barchart/defaults/BarchartDefaults.js","../src/barchart/data/BarchartData.js","../src/barchart/data/DetailsData.js","../src/barchart/data/TooltipData.js","../src/barchart/data/BarData.js","../src/barchart/data/StripeData.js","../src/barchart/JsonDataConverter.js","../src/barchart/components/Component.js","../src/barchart/components/Tooltip.js","../src/barchart/components/Details.js","../src/barchart/components/Stripe.js","../src/barchart/components/Bar.js","../src/CleverCharts.js","../src/barchart/components/Barchart.js"],"sourcesContent":["/**\n * @class\n * Observable class, handles binding and firing events\n * @param {Array} events list of events for this observable\n */\nexport default class Observable {\n    /**\n     * @param {Array} events\n     */\n    constructor(events = []) {\n        // create a map of handlers where each event has an array of bound handlers\n        this._handlers = events.reduce((acc, cur)=>{\n            acc[cur] = [];\n            return acc;\n        },{});\n    }\n\n\t/**\n\t * @public\n\t * Bind event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t */\n    on(event, handler) {\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tthis._handlers[event].push(handler);\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Unbind event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler, optional\n\t */\n    off(event, handler) {\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tif (!handler) {\n\t\t\tthis._handlers[event] = [];\n\t\t} else {\n\t\t\tvar handlers = this._handlers[event];\n\t\t\tvar index = handlers.indexOf(handler);\n\t\t\tif (index != -1){\n\t\t\t\thandlers.splice(index, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Add new event to be handled\n\t * @param {String} event\n\t */\n\tadd(event) {\n\t\tif (!(event in this._handlers)) {\n\t\t\tthis._handlers[event] = [];\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Fire widget event\n\t * @param {String} event event name\n\t * @param {*} ...args event arguments\n\t */\n\tfire(event, ...args) {\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\n\t\tvar handlers = this._handlers[event];\n\t\tfor (var i = 0; i < handlers.length; i++) {\n\t\t\thandlers[i].apply(this, args);\n\t\t}\n\t\treturn this;\n    }\n\n\t/**\n\t * @public\n\t * Destorys this observable, removes events and so on \n\t */\n\tdestroy() {\n\t\tthis._handlers = null;\n\t\treturn this;\n    }\n\t\n}","import style from \"./Doughnut.css\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\nconst tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\n\n/**\n * @class\n * Doughnut renderer class\n * @param {Object} options\n */\nexport default class DoughnutRenderer {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Doughnut options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Doughnut has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over\n\t\t\t */\n\t\t\t\"mouseOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out\n\t\t\t */\n\t\t\t\"mouseOut\"\n\t\t]);\t\t\n\t}\n\n\t/**\n\t * @public\n\t * Returns whether Doughnut has been rendered or not\n\t * @returns {boolean} true if Doughnut has been rendered\n\t */\n\tisRendered() {\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Doughnut} returns this widget instance\n\t */\n\trender(selector) {\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._containerEl.node().offsetWidth;\n\t\tvar height = this._containerEl.node().offsetHeight;\n\t\tvar value = this._value = this._options.value;\n\t\tvar angle = this._angle = value / 100 * tau;\n\t\tvar innerRadius = this._innerRadius = this._options.innerRadius;\n\t\tvar outerRadius = this._outerRadius = this._options.outerRadius;\n\n\t\t// arc settings\n\t\tvar arc = this._arc = d3.arc()\n\t\t\t.innerRadius(innerRadius)\n\t\t\t.outerRadius(outerRadius)\n\t\t\t.startAngle(0);\n\n\t\t// render SVG\n\t\tthis._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.attr(\"class\", style[\"svg\"]);\n\n\t\t// render group\n\t\tvar g = this._groupEl = this._svgEl\n\t\t\t.append(\"g\")\n\t\t\t.attr(\"class\", style[\"doughnut\"])\n\t\t\t.attr(\"transform\", \"translate(\" + width / 2 + \", \" + height / 2 + \")\");\n\n\t\t// render inactive doughtnut\t\n\t\tthis._inactiveArc = g.append(\"path\")\n\t\t\t.datum({ endAngle: tau })\n\t\t\t.attr(\"fill\", this._options.inactiveColor)\n\t\t\t.attr(\"d\", arc);\n\n\t\t// render active doughtnut\t\n\t\tthis._activeArc = g.append(\"path\")\n\t\t\t.datum({ endAngle: angle })\n\t\t\t.attr(\"fill\", this._options.activeColor)\n\t\t\t.attr(\"d\", arc);\n\n\t\t// render background\t\n\t\tthis._backgroundArc = g.append(\"circle\")\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\n\t\t\t.attr(\"r\", innerRadius)\n\t\t\t.attr(\"cx\", 0)\n\t\t\t.attr(\"cy\", 0)\n\n\t\t// render background\t\n\t\tthis._backgroundArc = g.append(\"circle\")\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\n\t\t\t.attr(\"r\", innerRadius)\n\t\t\t.attr(\"cx\", 0)\n\t\t\t.attr(\"cy\", 0)\n\n\t\t// hover element, this needs to be rendered in order to have stable and animation\n\t\t// independent hover \n\t\tthis._hoverEl = g.append(\"rect\")\n\t\t\t.attr(\"fill\", \"transparent\")\n\t\t\t.attr(\"x\", -width/2)\n\t\t\t.attr(\"y\", -height/2)\n\t\t\t.attr(\"width\",width)\n\t\t\t.attr(\"height\",height)\n\n\t\tg.on(\"mouseover\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOver\");\n\t\t})\n\n\t\tg.on(\"mouseout\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOut\");\n\t\t})\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t\t * Bind widget event\n\t\t * @param {String} event event name\n\t\t * @param {Function} handler event handler\n\t\t * @returns {Doughnut} returns this widget instance\n\t\t */\n\t\ton(eventName, handler) {\n\t\t\tthis._observable.on(eventName, handler);\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Unbind widget event\n\t\t * @param {String} event event name\n\t\t * @param {Function} [handler] event handler\n\t\t * @returns {Doughnut} returns this widget instance\n\t\t */\n\t\toff(eventName, handler) {\n\t\t\tthis._observable.off(eventName, handler);\n\t\t\treturn this;\n\t\t}\t\n\t\n\n\t/**\n\t * @public\n\t * @param {opts} new options\n\t * Updates doughnut with new options\n\t */\n\tupdate(opts) {\n\t\tvar options = opts || {};\n\n\t\tif (typeof options.value == \"undefined\"){\n\t\t\toptions.value = this._value;\n\t\t} else {\n\t\t\tthis._value = options.value;\n\t\t}\n\n\t\t// first tween foreground, note that this is also changing this._arc radiuses \n\t\tvar activeArcTransition = this._activeArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"d\", this._arcTween(options, true))\n\n\t\t// se we only get new path on background as it uses radiuses saved in the previous call\n\t\tthis._inactiveArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"d\", () => {\n\t\t\t\treturn () => {\n\t\t\t\t\treturn this._arc({ endAngle: tau });\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis._backgroundArc.transition()\n\t\t\t.duration(this._options.animationDuration)\n\t\t\t.attrTween(\"r\", () => {\n\t\t\t\treturn () => {\n\t\t\t\t\treturn this._innerRadius;\n\t\t\t\t}\n\t\t\t});\n\n\t\tif (options.activeColor && options.activeColor !== this._options.activeColor){\n\t\t\tthis._options.activeColor = options.activeColor;\n\t\t\tactiveArcTransition.attr(\"fill\", options.activeColor)\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * @param {options} new options\n\t * returns tween function for arc \n\t */\n\t_arcTween(options) {\n\t\tvar angle = options.value / 100 * tau;\n\t\t// change angle if new value is provided \n\t\tif (typeof options.value != \"undefined\") {\n\t\t\tangle = options.value / 100 * tau;\n\t\t}\n\n\t\t// handle new radiuses\n\t\tvar innerRadius = this._innerRadius;\n\t\tvar outerRadius = this._outerRadius;\n\n\t\tif (typeof options.innerRadius != \"undefined\") {\n\t\t\tinnerRadius = options.innerRadius;\n\t\t}\n\n\t\tif (typeof options.outerRadius != \"undefined\") {\n\t\t\touterRadius = options.outerRadius;\n\t\t}\n\n\t\t// get interpolation fns between new radiuses and old ones\n\t\t// for simlicity, do this even if value doesn't change as we\n\t\t// likely generate new path anyway\n\t\tvar interpolateOuterRadius = d3.interpolate(this._outerRadius, outerRadius);\n\t\tvar interpolateInnerRadius = d3.interpolate(this._innerRadius, innerRadius);\n\n\t\treturn (d) => {\n\t\t\t// get angle interpolation fn \n\t\t\tvar interpolateAngle = d3.interpolate(d.endAngle, angle);\n\n\t\t\treturn (t) => {\n\t\t\t\t// on each cycle, set new radiuses and endAngle\n\t\t\t\tthis._arc.outerRadius(this._outerRadius = interpolateOuterRadius(t));\n\t\t\t\tthis._arc.innerRadius(this._innerRadius = interpolateInnerRadius(t));\n\n\t\t\t\td.endAngle = this._angle = interpolateAngle(t);\n\t\t\t\treturn this._arc(d);\n\t\t\t};\n\t\t};\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Doughnut UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered) {\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n\t}\n\n}","import Observable from \"../utils/Observable\";\nimport * as Defaults from \"./DoughnutDefaults\";\nimport DoughnutRenderer from \"./DoughnutRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main doughnut class\n * @param {Object} options\n */\nclass Doughnut {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.outerRadius = getOptionValue(options.outerRadius, Defaults.OUTER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.innerRadius = getOptionValue(options.innerRadius, Defaults.INNER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Active color\n\t\t */\n\t\tthis._options.activeColor = getOptionValue(options.activeColor, Defaults.ACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.inactiveColor = getOptionValue(options.inactiveColor, Defaults.INACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.backgroundColor = getOptionValue(options.backgroundColor, Defaults.BACKGROUND_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Value\n\t\t */\n\t\tthis._options.value = getOptionValue(options.value, Defaults.VALUE);\n\n\t\t/**\n\t\t * @public\n\t\t * Animation duration\n\t\t */\n\t\tthis._options.animationDuration = getOptionValue(options.animationDuration, Defaults.ANIMATION_DURATION);\n\n\t\t/**\n\t\t * @public\n\t\t * Render to container\n\t\t */\n\t\tthis._options.renderTo = getOptionValue(options.renderTo, null);\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over\n\t\t\t */\n\t\t\t\"mouseOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out\n\t\t\t */\n\t\t\t\"mouseOut\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * DoughnutRenderer\n\t\t */\n\t\tthis._doughnutRenderer = new DoughnutRenderer(this._options);\n\n\t\tthis._doughnutRenderer.on(\"mouseOver\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOver\")\n\t\t});\n\n\t\tthis._doughnutRenderer.on(\"mouseOut\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOut\")\n\t\t});\n\n\t\tif (options.renderTo){\n\t\t\tthis.render(options.renderTo);\n\t\t}\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._doughnutRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Doughnut} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._doughnutRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Object} options\n\t * @returns {Doughnut} returns this widget instance \n\t */\n\tupdate(options) {\n\t\tif (!this._doughnutRenderer.isRendered()) {\n\t\t\tthrow \"Can't call update() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tthis._doughnutRenderer.update(options);\n\n\t\treturn this;\n\t}\n}\n\nexport default Doughnut;\n","/**\n * @public\n * Default outer radius\n */\nexport const OUTER_RADIUS = 10;\n\n/**\n * @public\n * Default inner radius\n */\nexport const INNER_RADIUS = 10;\n\n/**\n * @public\n * Default value\n */\nexport const VALUE = 0;\n\n/**\n * @public\n * Default active color\n */\nexport const ACTIVE_COLOR = \"#49ace2\";\n\n/**\n * @public\n * Default inactive color\n */\nexport const INACTIVE_COLOR = \"#F0F0F0\";\n\n/**\n * @public\n * Default background color\n */\nexport const BACKGROUND_COLOR = \"transparent\";\n\n/**\n * @public\n * Default animation duration\n */\nexport const ANIMATION_DURATION = 250;","/**\n * @public\n * Default widget width\n */\nexport const WIDTH = 360;\n\n/**\n * @public\n * Default widget height\n */\nexport const HEIGHT = 150;\n\n/**\n * @public\n * Default widget margin\n */\nexport const MARGIN = {\n    top:0,\n    left:5,\n    right:5,\n    bottom:15\n};\n\n/**\n * Default label margin from x axis\n */\nexport const LABEL_MARGIN = 7;\n\n/**\n * @public\n * Default inactive bar color\n */\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\n\n/**\n * @public\n * Default inactive bar opacity\n */\nexport const INACTIVE_BAR_OPACITY = 1;\n\n/**\n * @public\n * Default over bar color\n */\nexport const OVER_SELECTION_COLOR = \"#ffea00\";\n\n/**\n * @public\n * Default over selection opacity\n */\nexport const OVER_SELECTION_OPACITY = 1;\n\n/**\n * @public\n * Default over bar color\n */\nexport const SELECTION_COLOR = \"#49ace2\";\n\n/**\n * @public\n * Enable selection toggle\n */\nexport const ENABLE_SELECTION_TOGGLE = true;\n\n/**\n * @public\n * Default font size\n */\nexport const FONT_SIZE = 11;\n\n/**\n * @public\n * Default colors \n */\nexport const DEFAULT_COLORS = [\"#e6f3fb\", \"#cbe7f6\", \"#b1dbf2\", \"#98cfee\", \"#7ec4ea\"];\n\n/**\n * @public\n * Default width of active handle area\n */\nexport const ACTIVE_HANDLE_AREA_WIDTH = 4;","import * as d3 from \"d3\";\n\n/**\n * @class\n * HistogramData representing data for the histogram view\n */\nexport default class HistogramData {\n\t/**\n\t * @param {data} data\n\t * @param {Object} options\n\t */\n\tconstructor(data, options) {\n\t\tthis._histogramData = this._loadHistogramData(data, options.width);\n\t\tthis._minMax = this._calculateMinMax(this._histogramData);\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns histogram data\n\t * @returns {Array} histogram data\n\t */\n\tgetData() {\n\t\treturn this._histogramData;\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given histogramData\n\t* @param {Array} histogramData\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(histogramData) {\n\t\tvar min = d3.min(histogramData, function (d) { return d.value; });\n\t\tvar max = d3.max(histogramData, function (d) { return d.value; });\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t* Returns value ratio between bars and data\n\t* @return {Number} value ratio \n\t*/\n\tgetValueRatio() {\n\t\tvar range = this._minMax.max - this._minMax.min;\n\t\treturn range / this._options.width;\n\t}\n\n\t/**\n\t * @public\n\t * Returns data value from given position \n\t * @param {Number} position\n\t */\n\tpositionToValue(position) {\n\t\tvar minMax = this.getMinMax();\n\t\t// return min if position is 0\n\t\tif (position === 0){\n\t\t\treturn minMax.min;\n\t\t}\n\n\t\t// return max if position is at the end\n\t\tif (position === this._options.width){\n\t\t\treturn minMax.max;\n\t\t}\n\n\t\t// else calculate based on value ratio and min/max\n\t\tvar valueRatio = this.getValueRatio();\n\t\treturn position * valueRatio + minMax.min;\n\t}\n\n\t/**\n\t * @public\n\t * Returns position from given data value \n\t * @param {Number} value\n\t */\n\tvalueToPosition(value) {\n\t\tvar valueRatio = this.getValueRatio();\n\t\tvar minMax = this.getMinMax();\n\t\tvar constrainedValue = Math.min(Math.max(value, minMax.min), minMax.max);\n\t\t\n\t\treturn Math.round(constrainedValue / valueRatio - minMax.min / valueRatio);\n\t}\n\n\t/** \n\t* @private\n\t* @param {Array} buckets\n\t* @param {int} numOfBarsPerBucket - number of bars per column\\\n\t* @returns {Array} data from given buckets \n\t*/\n\t_loadHistogramData(data, width) {\n\t\tvar histogramData = [];\n\t\t// calculate number of bars per bucket excluding last pixel for max value\n\t\tvar numOfBarsPerBucket = (width-1) / data.length;\n\n\t\tdata.forEach((bucket, i) => {\n\t\t\tvar step = (bucket.max - bucket.min) / numOfBarsPerBucket;\n\t\t\t// support array as well as single values\n\t\t\tconst volume = Array.isArray(bucket.volume)?bucket.volume:[bucket.volume];\n\n\t\t\td3.range(bucket.min, bucket.max, step).forEach((value) => {\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: value,\n\t\t\t\t\tvolume: volume\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// adding max value pixel as each non-last bucket ends one pixel before next bucket starts\n\t\t\tif (i == data.length-1){\n\t\t\t\thistogramData.push({\n\t\t\t\t\tvalue: bucket.max,\n\t\t\t\t\tvolume: volume\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn histogramData;\n\t}\n}","import * as d3 from \"d3\";\nimport style from \"../Histogram.css\";\nimport * as Defaults from \"../HistogramDefaults\";\nimport Observable from \"../../utils/Observable\";\n\n/**\n * Gradient index shared for all instances\n */\nvar gradientIndex = 0;\n\n/**\n * @class\n * HistogramHandle representing control handle for histogram\n */\nexport default class HistogramHandle {\n\t/**\n\t * @param {D3Selection} groupEl\n\t * @param {Number} value\n\t * @param {Number} index\n\t * @param {HistoryData} histogramData\n\t * @param {Object} options\n\t */\n\tconstructor(groupEl, value, index, histogramData, options) {\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"drag\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when drag on handle starts\n\t\t\t * @param {HistogramHandle} handle\n\t\t\t */\n\t\t\t\"startDrag\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when drag on handle ends\n\t\t\t * @param {HistogramHandle} handle\n\t\t\t */\n\t\t\t\"endDrag\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * handle element\n\t\t */\n\t\tthis._handleEl = null;\n\t\t\n\t\t/**\n\t\t * @private\n\t\t * handle line element\n\t\t */\n\t\tthis._handleLineEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle circle element\n\t\t */\n\t\tthis._handleCircleEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle mask element\n\t\t */\n\t\tthis._handleMaskEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * handle mask gradient element\n\t\t */\n\t\tthis._handleMaskGradientEl = null;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * handle label element\n\t\t */\n\t\tthis._handleLabelEl = null;\t\t\n\n\t\t/**\n\t\t * @private \n\t\t * True if handle is over\n\t\t */\n\t\tthis._isOver = false;\n\t\t\n\t\t/**\n\t\t * @private \n\t\t * Main group element\n\t\t */\t\t\n\t\tthis._groupEl = groupEl;\n\t\t/**\n\t\t * @private \n\t\t * handle index\n\t\t */\t\t\n\t\tthis._index = index;\n\t\t/**\n\t\t * @private \n\t\t * handle value\n\t\t */\t\t\n\t\tthis._value = value;\n\t\t/**\n\t\t * @private \n\t\t * initial handle value\n\t\t */\t\t\n\t\tthis._initialValue = new Number(value);\t\t\n\t\t/**\n\t\t * @private \n\t\t * handle position\n\t\t */\t\t\n\t\tthis._position = histogramData.valueToPosition(value);\n\t\t/**\n\t\t * @private \n\t\t * initial handle position\n\t\t */\t\t\n\t\tthis._initialPosition = new Number(this._position);\n\t\t/**\n\t\t * @private \n\t\t * bar options\n\t\t */\t\t\n\t\tthis._options = options;\n\t\t/**\n\t\t * @private \n\t\t * histogram data\n\t\t */\t\t\n\t\tthis._histogramData = histogramData;\n\t\t/**\n\t\t * @private \n\t\t * Cache for storing label size, enhances performance when animating\n\t\t */\t\t\n\t\tthis._labelSizeCache = {};\n\n\t\t/**\n\t\t * @private \n\t\t * elements\n\t\t */\t\t\n\t\tthis._elements = [];\t\t\n\t\t\n\t\tthis._renderHandle();\n\t}\n\n\t/**\n\t * @public\n\t * Destroys this handle\n\t */\n\tdestroy(){\n\t\tthis._elements.forEach(element=>element.remove());\n\t\tthis._elements = [];\n\t}\n\n\t/**\n\t * @private\n\t   * Renders drag handle\n\t   */\n\t_renderHandle() {\n\t\tthis._elements = [\n\t\t\tthis._createHandleElement(),\n\t\t\tthis._createHandleLineElement(),\n\t\t\tthis._createHandleCircleElement(),\n\t\t\tthis._createDragMaskElement(),\n\t\t\tthis._createMaskGradientElement(),\n\t\t\tthis._createDragLabelElement()\n\t\t];\n\n\t\tthis._handleHoverState();\n\t\tthis._handleDrag();\n\t}\t\n\n\thide(){\n\t\tthis._elements.forEach(element=>element.attr(\"visibility\", \"hidden\"));\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Returns X position of this handle\n\t * @returns {Number} X position handle\n\t */\n\tgetXPosition() {\n\t\treturn parseInt(this._handleEl.attr(\"x\"))+Defaults.ACTIVE_HANDLE_AREA_WIDTH/2;\n\t}\n\n\t/**\n\t * @public\n\t * Sets hover state\n\t */\n\tsetHoverState(){\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 3);\n\t\tthis._updateLabelPosition(this._position);\n\t}\n\t\n\t/**\n\t * @public \n\t * @returns {SVGRect} \n\t * Returns drag label box for this handle\n\t */\n\tgetLabelBox(){\n\t\treturn this._handleLabelEl.node().getBBox();\n\t}\n\n\t/**\n\t * @public \n\t * Shifts handle label by given offset so it can handle label position conflicts\n\t */\n\tsetLabelOffset(offset){\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\n\t\tthis._updateLabelPosition(this._position);\n\t}\n\n\t/**\n\t * @public \n\t * Sets handle position\n\t */\n\tsetHandleXPosition(position){\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\"+position+\", \"+this._options.height+\")\")\n\t\treturn this;\n\t}\n\n\tsetLabelText(text){\n\t\tthis._handleLabelEl.text(text);\n\t\treturn this;\n\t}\n\n\tshowLabel(){\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\n\t\treturn this;\n\t}\n\n\thideLabel(){\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\n\t\treturn this;\n\t}\t\n\n\tsetLabelPosition(position){\n\t\tthis.setLabelOffset(0);\n\t\tthis._updateLabelPosition(position);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Unsets hover state\n\t */\n\tunsetHoverState(){\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 1);\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(0, 0)\")\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(0, 0)\")\n\t}\n\n\t/**\n\t * @public\n\t * Enables this handle \n\t */\n\tenable(){\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"all\"));\n\t}\n\n\t/**\n\t * @public\n\t * Disables this handle \n\t */\n\tdisable(){\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"none\"));\n\t}\n\n\t/**\n\t * @private\n\t * Handle hover state\n\t */\n\t_handleHoverState(){\n\t\t// line hover effect\n\t\tthis._handleEl.on(\"mouseover\", () => {\n\t\t\tthis._isOver = true;\n\t\t\tthis.setHoverState();\n\t\t})\n\t\tthis._handleEl.on(\"mouseout\", () => {\n\t\t\tthis._isOver = false;\n\t\t\tthis.unsetHoverState();\n\t\t})\n\t}\n\n\t/**\n\t * @private\n\t * handles what happens when drag starts\n\t */\n\t_onStartDrag(){\n\t\tthis._groupEl.classed(style[\"dragging\"], true);\n\t\tthis._observable.fire(\"startDrag\", this);\n\t}\n\n\t/**\n\t * @private\n\t * handles what happens on drag\n\t */\n\t_onDrag(){\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar xpos = Math.round(Math.max(Math.min(d3.event.x, width), 0));\n\n\t\tthis._handleEl.attr(\"x\", xpos - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\n\t\tthis._handleLineEl.attr(\"x\", xpos - 2);\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\" + xpos + \",\" + height + \")\");\n\t\tthis._handleEl.attr(\"data-handle-value\", this._histogramData.positionToValue(xpos))\n\n\t\tthis.setHoverState();\n\n\t\tthis._position = xpos;\n\n\t\t// prevent recalculating value for the same position\n\t\tif (parseInt(this._position) !== parseInt(this._initialPosition)){\n\t\t\tthis._value = this._histogramData.positionToValue(xpos);\n\t\t} else {\n\t\t\tthis._value = this._initialValue;\n\t\t}\n\n\t\tthis._handleLabelEl.text(this._getLabelText())\n\n\t\tthis._updateLabelPosition(xpos);\n\t\tthis._observable.fire(\"drag\");\t\t\n\t}\n\n\t_getLabelText() {\n\t\treturn this._options.format(this._value);\n\t}\n\t/**\n\t * @private\n\t * handles what happens when drag ends\n\t */\n\t_onEndDrag(){\n\t\tthis._groupEl.classed(style[\"dragging\"], false);\n\t\tif (!this._isOver) {\n\t\t\tthis.unsetHoverState();\n\t\t}\n\n\t\tthis._observable.fire(\"endDrag\", this);\t\t\n\t}\n\n\t/**\n\t * @private\n\t * Handles handle drag \n\t */\n\t_handleDrag(){\n\t\tthis._handleEl.call(d3.drag()\n\t\t\t.on(\"drag\", this._onDrag.bind(this))\n\t\t\t.on(\"start\", this._onStartDrag.bind(this))\n\t\t\t.on(\"end\", this._onEndDrag.bind(this)));\n\t}\n\t/**\n\t * @private\n\t * Return computed or stored label length\n\t * @param {SVGElement}\n\t * @param {Number} length \n\t */\n\t_getComputedLabelTextLength(label){\n\t\tvar content = label.innerHTML;\n\t\tthis._labelSizeCache[content] = this._labelSizeCache[content] || label.getComputedTextLength();\n\t\treturn this._labelSizeCache[content];\n\t}\n\n\t/**\n\t * @private\n\t * Updates label position\n\t * @param {Number} position \n\t */\n\t_updateLabelPosition(position) {\n\t\tvar label = this._handleLabelEl.node();\n\t\tvar maskPadding = this._options.fontSize;\t\t\n\n\t\t// we need to calculate text length so we can create mask and center text\n\t\tvar textLength = this._getComputedLabelTextLength(label);\n\t\tvar maskWidth = textLength + maskPadding * 2;\n\t\tvar xPosition = position - textLength / 2;\n\n\t\t// handle when dragging towards left side\n\t\tif (xPosition < 0) {\n\t\t\txPosition = 0;\n\t\t}\n\n\t\t// handle when dragging towards right side\n\t\tif (xPosition + textLength > this._options.width) {\n\t\t\txPosition = this._options.width  - textLength;\n\t\t\tthis._handleLabelEl.attr(\"x\", this._options.width);\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"end\");\n\t\t} else {\n\t\t\tthis._handleLabelEl.attr(\"x\", xPosition);\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"start\");\n\t\t}\n\n\t\t// position mask\n\t\tthis._handleMaskEl.attr(\"x\", () => {\n\t\t\treturn parseInt(xPosition) - maskPadding;\n\t\t});\n\n\t\tthis._handleMaskGradientEl.attr(\"x1\", xPosition - maskPadding);\n\t\tthis._handleMaskGradientEl.attr(\"x2\", xPosition + maskWidth - maskPadding);\n\n\t\tthis._handleMaskEl.attr(\"width\", maskWidth);\n\t\tthis._handleMaskEl.attr(\"height\", this._options.fontSize);\n\t}\n\t\t\n\t/**\n\t * Creates mask gradient element\n\t * @param {Number} handleIndex \n\t */\n\t_createMaskGradientElement(){\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\n\t\t\t.attr(\"id\", \"brush-mask-gradient-\" + gradientIndex++)\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\n\t\t\t.attr(\"y1\", 0).attr(\"x1\", 50)\n\t\t\t.attr(\"y2\", 0).attr(\"x2\", 0);\n\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\n\t\t\t.data([\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\n\t\t\t])\n\t\t\t.enter().append(\"stop\")\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\n\n\t\treturn this._handleMaskGradientEl;\n\t}\n\n\t/**\n\t * @private \n\t * Renders main handle element \n\t * @returns {SVGElement}\n\t */\n\t_createHandleElement(){\n\t\tthis._handleEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"custom-handle\"])\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"data-handle-index\", this._index)\n\t\t\t.attr(\"data-handle-value\", this._value)\n\t\t\t.attr(\"cursor\", \"ew-resize\")\n\t\t\t.attr(\"width\", Defaults.ACTIVE_HANDLE_AREA_WIDTH)\n\t\t\t.attr(\"height\", this._options.height + 5)\n\t\t\t.attr(\"x\", this._position - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\n\n\t\treturn this._handleEl;\n\t}\n\n\t/**\n\t * @private \n\t * Renders handle line element \n\t * @returns {SVGElement} \n\t */\n\t_createHandleLineElement(){\n\t\tthis._handleLineEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"custom-handle-line\"])\n\t\t\t.attr(\"width\", 4)\n\t\t\t.attr(\"height\", this._options.height)\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"x\", this._position - 2);\n\n\t\treturn this._handleLineEl;\n\t}\t\n\n\t/**\n\t * @private \n\t * Renders handle circle element \n\t * @returns {SVGElement} \n\t */\n\t_createHandleCircleElement(){\n\t\tthis._handleCircleEl = this._groupEl.append(\"circle\")\n\t\t\t.attr(\"class\", style[\"custom-handle-circle\"])\n\t\t\t.attr(\"transform\", \"translate(\" + this._position + \",\" + this._options.height + \")\")\n\t\t\t.attr(\"fill\", \"#ffffff\")\n\t\t\t.attr(\"fill-opacity\", 1)\n\t\t\t.attr(\"stroke\", \"#000\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"cursor\", \"ew-resize\")\n\t\t\t.attr(\"r\", 3.5);\n\n\t\treturn this._handleCircleEl;\n\t}\t\t\n\n\t/**\n\t * @private \n\t * Renders drag mask element \n\t * @returns {SVGElement} \n\t */\n\t_createDragMaskElement(){\n\t\tthis._handleMaskEl = this._groupEl.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"drag-label-mask\"])\n\t\t\t.attr(\"fill\", \"url(#brush-mask-gradient-\" + gradientIndex+\")\")\n\t\t\t.attr(\"y\", this._options.height + Defaults.LABEL_MARGIN)\n\t\t\t.attr(\"display\", \"none\");\t\t\t\n\n\t\treturn this._handleMaskEl;\n\t}\n\t\n\t/**\n\t * @private \n\t * Renders handle label element \n\t * @returns {SVGElement}  \n\t */\n\t_createDragLabelElement(){\n\t\tvar format = this._options.format;\n\t\tvar height = this._options.height;\n\t\tthis._handleLabelEl = this._groupEl.append(\"text\")\n\t\t\t.attr(\"class\", style[\"drag-label\"])\n\t\t\t.attr(\"fill-opacity\", 0)\n\t\t\t.attr(\"font-size\", this._options.fontSize)\n\t\t\t.text(() => {\n\t\t\t\tvar formattedValue = format(this._initialValue);\n\t\t\t\treturn formattedValue;\n\t\t\t})\n\t\t\t.attr(\"y\", height + this._options.fontSize + Defaults.LABEL_MARGIN);\n\n\t\t\n\t\tthis._updateLabelPosition(this._position);\n\t\treturn this._handleLabelEl;\n\t}\n}","/**\n * @public\n * Returns handle positions offsets so that labels don't conflict visually\n * @param {HistogramData} histogramData \n * @returns {Array} label offsets\n */\nexport function getHandlePositionOffsets(handle1, handle2, maskPadding, width){\n    var label1Box = handle1.getLabelBox();\n    var label2Box = handle2.getLabelBox();\n\n    // calculate conflict number\n    var conflictDiff = label2Box.x - (label1Box.x + label1Box.width)-maskPadding;\n    // and handle if there is not enough space\n    if (conflictDiff<0){\n        // pos1 diff to the left\n        var posDiff1 = conflictDiff/2;\n        // pos2 diff to to right\n        var posDiff2 = conflictDiff/2;\n\n        // position left to 0 if position would be lower than 0\n        var xMin = label1Box.x+posDiff1;\n        if (xMin < 0){\n            posDiff1 = label1Box.x; \n            // also shift right label so we keep it visible\n            posDiff2 = posDiff2*2\n        }\n\n        // same with max value\n        var xMax = label2Box.x+label2Box.width-posDiff2;\n        if (xMax > width){\n            posDiff2 += xMax-width; \n            posDiff1 = posDiff1*2\n        }\n        return [posDiff1, -posDiff2];                  \n    }\n\n    return [0,0];\n}","import style from \"../Histogram.css\";\nimport HistogramHandle from \"./HistogramHandle\";\nimport Observable from \"../../utils/Observable\";\nimport * as PositionUtils from \"../utils/PositionUtils\"\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Histogram renderer class\n * @param {Object} options\n */\nexport default class HistogramSelectionRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Histogram options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Bar data \n\t\t */\n\t\tthis._histogramData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * history selection\n\t\t */\n\t\tthis._histogramSelection = null;\n\n\t\t/**\n\t\t * @private\n\t\t * index of over selection  \n\t\t */\n\t\tthis._overSelectionIndex = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * selection handles\n\t\t */\n\t\tthis._handles = [];\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * true if handle is dragged\n\t\t */\n\t\tthis._draggingHandle = false;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous selection for animation\n\t\t */\n\t\tthis._prevSelection = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * true if animation is run\n\t\t */\n\t\tthis._animating = false;\n\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a category\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is changed\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\t\t\n    }\n\n\t/**\n\t * @public\n\t * Returns whether histogram has been rendered or not\n\t * @returns {boolean} true if histogram has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * @param {DOMElement}  \n\t * @returns {HistogramSelectionRenderer} returns this widget instance\n\t */\n\trender(groupEl){\n\t\tthis._rendered = true;\n\t\tthis._groupEl = groupEl\n\n\t\treturn this;\n\t} \t\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._destroyHandles();\n\t\tif (this._selectionBars){\n\t\t\tthis._selectionBars.remove();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Destroys selection controls \n\t */\n\t_destroyHandles(){\n\t\tthis._handles.forEach(handle=>handle.destroy());\n\t\tthis._handles = [];\n\t}\n\n\t/**\n\t * @private\n\t * Handles click on handle\n\t * @param {Number} handleIndex\n\t * @param {Number} handleValue \n\t */\n\t_onHandleClick(handleIndex, handleValue){\n\t\t// call prompt handler if available\n\t\tif (this._options.promptHandler){\n\t\t\tthis._options.promptHandler(handleValue).then((promptResult)=>{\n\t\t\t\tvar startSelectionSnapshot = JSON.stringify(this._histogramSelection.getOutputSelection());\n\t\t\t\tpromptResult = parseFloat(promptResult);\n\t\t\t\t// must be within min max range\n\t\t\t\tvar minMax = this._histogramData.getMinMax();\n\t\t\t\tpromptResult = Math.min(minMax.max, promptResult);\n\t\t\t\tpromptResult = Math.max(minMax.min, promptResult);\n\n\t\t\t\tvar points = this._histogramSelection.getSelectionPoints();\n\t\t\t\tpoints[handleIndex] = {\n\t\t\t\t\tvalue:promptResult\n\t\t\t\t};\n\n\t\t\t\tvar positions = points\n\t\t\t\t\t.sort((p1,p2)=>p1.value-p2.value)\n\t\t\t\t\t.map(point=>this._histogramData.valueToPosition(point.value));\n\t\t\t\t\n\t\t\t\tthis._updateSelectionPositions(positions, points);\n\t\t\t\tthis._updateSelection();\n\n\t\t\t\t// TODO: update handles without destroying them\n\t\t\t\tthis._destroyHandles();\n\t\t\t\tthis._renderHandles();\n\n\t\t\t\t// fire selection change if selection is changed\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t}\n\n\t/**\n\t * @private\n\t * Toggles selection\n\t * @param {Number} selectionIndex \n\t */\n\t_toggleSelection(selectionIndex){\n\t\tvar selection = this._options.selection[selectionIndex];\n\t\tselection.disabled = !selection.disabled;\n\t\tvar enabled = !selection.disabled;\n\t\tthis._updateSelection();\n\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t}\t\n\n\t/**\n\t * @private\n\t * Handles click on chart\n\t */\n\t_onClick(){\n\t\tvar target = d3.select(d3.event.target);\n\t\tvar selectionIndex = target.attr(\"data-selection-index\");\n\t\tvar handleIndex = target.attr(\"data-handle-index\");\n\n\t\tif (selectionIndex != null && this._histogramSelection.allowsToggle()){\n\t\t\tthis._toggleSelection(selectionIndex)\n\t\t} else if (handleIndex != null){\n\t\t\tthis._onHandleClick(handleIndex, target.attr(\"data-handle-value\"));\n\t\t}\n\t}\n\t/**\n\t * @private\n\t * Handles handle click \n\t */\n\t_handleClick(){\n\t\tthis._groupEl.on(\"click\", this._onClick.bind(this));\n\t}\n\n\t/**\n\t * @private\n\t * Refreshes histogram data \n\t * @param {HistogramData}\n\t * @param {HistogramSelection}\n\t * @param {Object} options\n\t */\n\trefresh(histogramData, histogramSelection, options){\n\t\tthis._animate = options && options.animate;\n\t\tif (this._animate && this._histogramSelection && this._histogramSelection.getSelection().length == histogramSelection.getSelection().length){\n\t\t\tthis._prevSelection = this._histogramSelection.getSelection();\n\t\t\tthis._prevHistogramData = this._histogramSelection.getSelection();\n\t\t}\n\n\t\tif (this._animate && this._histogramData){\n\t\t\tthis._prevHistogramData = this._histogramData;\n\t\t}\n\n\t\tthis._histogramData = histogramData;\n\t\tthis._histogramSelection = histogramSelection;\n\t\t\n\t\tthis._clear();\n\t\tthis._renderSelection();\n\t\tthis._updateSelection();\n\n\t\tthis._handleHoverState();\n\t\tthis._handleClick();\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * Updates selection controls on hover\n\t * @param {Number} selectionIndex \n\t */\n\t_updateSelectionControlsHoverState(selectionIndex){\n\t\t// get all handles sorted by X position\n\t\tvar handles = this._handles.slice().sort((h1,h2)=>{\n\t\t\treturn h1.getXPosition() - h2.getXPosition();\n\t\t});\n\n\t\t// unset hover state on all handles\n\t\thandles.forEach(handle=>handle.unsetHoverState());\n\n\t\t// selection is active, active both handles for active selection\n\t\tif (selectionIndex != null){\n\t\t\tvar handle1 = handles[selectionIndex];\n\t\t\tvar handle2 = handles[selectionIndex+1];\n\n\t\t\thandle1.setHoverState();\n\t\t\thandle2.setHoverState();\n\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\n\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\n\t\t}\n\t}\t\n\n\t/**\n\t * \n\t * @private \n\t * Handles what happens when mouse is over selection\n\t * @param {String} type \n\t * @param {Number} i \n\t * @param {HTMLElement[]} array \n\t */\n\t_onSelectionMouseOver(d, i, nodes){\n\t\t// prevent selection when dragging handles\n\t\tif (this._draggingHandle){\n\t\t\treturn;\n\t\t}\n\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0.00)\")\n\t\tvar selectionIndex = parseInt(d3.select(d3.event.target).attr(\"data-selection-index\"));\n\t\tif (this._overSelectionIndex != selectionIndex){\n\t\t\tthis._overSelectionIndex = selectionIndex;\n\t\t\tthis._updateSelection();\n\t\t\tthis._updateSelectionControlsHoverState(selectionIndex);\n\t\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @private \n\t * Handles what happens when mouse is out of selection\n\t * @param {String} type \n\t * @param {Number} i \n\t * @param {HTMLElement[]} array \n\t */\n\t_onSelectionMouseOut(d, i, nodes){\n\t\t// prevent selection when dragging handles\n\t\tif (this._draggingHandle){\n\t\t\treturn;\n\t\t}\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0)\")\n\n\t\tthis._overSelectionIndex = null;\n\t\tthis._updateSelectionControlsHoverState(null);\n\t\tthis._updateSelection();\n\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\n\t\t\n\t}\n\n\t/**\n\t * @private \n\t * Handles hover state\n\t */\n\t_handleHoverState(){\n\t\tvar g = this._groupEl;\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseout\", this._onSelectionMouseOut.bind(this));\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseover\", this._onSelectionMouseOver.bind(this));\n\t}\t\n\n\t/**\n\t * @private \n\t * Handles when handle is dragged\n\t */\n\t_onHandleDrag(){\n\t\tvar positions = this._handles.map(handle=>handle.getXPosition()).sort((p1, p2)=>{\n\t\t\treturn p1-p2;\n\t\t});\n\n\t\tthis._updateSelectionPositions(positions);\n\t\tthis._updateSelection();\n\t}\n\n\t/**\n\t* @private\n\t* Updates selection with new positions\n\t* @param {Array} positions\n\t* @param {Array} points\n\t*/\n\t_updateSelectionPositions(positions, points){\n\t\tvar selection = this._histogramSelection.getSelection();\n\t\tpositions.forEach((p, index)=>{\n\t\t\tif (index>selection.length-1){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar position = {\n\t\t\t\tfrom:p,\n\t\t\t\tto:positions[index+1]\n\t\t\t};\n\n\t\t\tvar value = {\n\t\t\t\tfrom:points?points[index].value:this._histogramData.positionToValue(position.from),\n\t\t\t\tto:points?points[index+1].value:this._histogramData.positionToValue(position.to),\n\t\t\t};\n\n\t\t\t[\"from\", \"to\"].forEach(pos=>{\n\t\t\t\tconst selectionChanged = points?\n\t\t\t\t\t// if new points are given, we need to compare selection values\n\t\t\t\t\tselection[index][pos] !== value[pos]:\n\t\t\t\t\t// otherwise, we need to compare selection position\n\t\t\t\t\tselection[index][\"position\"][pos] !== position[pos];\n\n\t\t\t\t// update selection on change\n\t\t\t\tif (selectionChanged){\n\t\t\t\t\tselection[index][pos] = value[pos];\t\n\t\t\t\t\tselection[index][\"position\"][pos] = position[pos];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\t\n\n\t/**\n\t* @private\n\t* Renders selection bars\n\t*/\n\t_renderSelection() {\n\t\tvar height = this._options.height;\n\t\tvar selection = this._histogramSelection.getSelection();\n\n\t\t// hover selection bars\n\t\tthis._selectionBars = this._groupEl.selectAll(\".\"+style.selectionbar)\n\t\t\t.data(selection)\n\t\t\t.enter().append(\"rect\")\n\t\t\t.attr(\"class\", style.selectionbar)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\n\t\t\t.attr(\"height\", height);      \n\n\n\t\tthis._renderHandles();\n\t}\n\n\t/**\n\t* @private\n\t* Renders selection controls\n\t*/\n\t_renderHandles(){\n\t\t// render selection controls\n\t\tthis._handles = this._histogramSelection.getSelectionPoints().map((point, index)=>{\n\t\t\tvar value = point.value;\n\n\t\t\tvar handle = new HistogramHandle(this._groupEl, value, index, this._histogramData, this._options);\n\n\t\t\tif(point.hidden){\n\t\t\t\thandle.hide();\n\t\t\t}\n\n\t\t\thandle.on(\"drag\", ()=>{\n\t\t\t\tthis._onHandleDrag();\n\t\t\t}, this);\n\n\t\t\tvar startSelectionSnapshot;\n\n\t\t\t// disable other handles when draggin starts\n\t\t\thandle.on(\"startDrag\", ()=>{\n\t\t\t\tstartSelectionSnapshot = JSON.stringify(this._options.selection);\n\t\t\t\t\n\t\t\t\tthis._draggingHandle = true;\n\t\t\t\tthis._handles.forEach(handle=>handle.disable());\n\t\t\t\thandle.enable();\n\t\t\t}, this);\n\n\t\t\t// enable all handles when draggin starts\n\t\t\thandle.on(\"endDrag\", ()=>{\n\t\t\t\tthis._draggingHandle = false;\n\t\t\t\tthis._handles.forEach(handle=>handle.enable());\n\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\n\t\t\n\t\t\treturn handle;\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Returns bar color based on X position\n\n\t* @param {Number} barX\n\t* @param {Array} selection\n\t* @returns {Number} bar category index\n\t* @param {HistogramData} histogram data \n\t*/\n\t_getBarSelectionIndex(barX, selection, data){\n\t\tfor (var i=0;i<selection.length;i++){\n\t\t\tvar s = selection[i];\n\t\t\tvar isLast = i == selection.length-1;\n\t\t\tvar within = barX >= data.valueToPosition(s.from) && (barX < data.valueToPosition(s.to) || (isLast && barX <= data.valueToPosition(s.to)));\n\t\t\tif (within) return i;\n\t\t}\n\n\t\treturn null;\n\t}\t\n\n\t/**\n\t * @private\n\t * Returns selection color\n\t * @param {Object} selection\n\t * @param {Object} d datum\n\t */\n\t_getSelectionColor(selection, d){\n\t\tif (selection.colors){\n\t\t\treturn selection.colors[d.volumeIndex];\n\t\t}\n\n\t\tif (selection.color){\n\t\t\treturn selection.color\n\t\t}\n\n\t\treturn this._options.selectionColor;\n\t}\n\n\t/**\n\t * @private\n\t * Returns bar color for given bar position with given selection\n\t * @param {Number} barX \n\t * @param {Array} selection \n\t * @param {HistogramData} histogram data \n\t */\n\t_getBarColor (barX, selection, data, d){\n\t\tvar inactiveBarColor = this._options.inactiveBarColor;\n\t\tvar overSelectionColor = this._options.overSelectionColor;\n\t\t\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\n\t\tif (barSelectionIndex == null){\n\t\t\treturn inactiveBarColor;\n\t\t} else if (selection[barSelectionIndex].disabled){\n\t\t\treturn inactiveBarColor;\n\t\t} if (this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex){\n\t\t\treturn overSelectionColor;\n\t\t} else {\n\t\t\treturn this._getSelectionColor(selection[barSelectionIndex], d);\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Returns bar color for given bar position with given selection\n\t * @param {Number} barX \n\t * @param {Array} selection \n\t * @param {HistogramData} histogram data \n\t */\n\t_getBarOpacity (barX, selection, data){\n\t\tvar defaultOpacity = 1;\n\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\n\t\tvar isOver = this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex;\n\t\tvar isDisabled = barSelectionIndex != null && selection[barSelectionIndex].disabled;\n\n\t\tif (isOver){\n\t\t\treturn this._options.overSelectionOpacity;\n\t\t}\n\n\t\tif (isDisabled){\n\t\t\treturn this._options.inactiveBarOpacity;\n\t\t}\n\t\t\n\t\t// otherwise use set opacity if \n\t\tif (barSelectionIndex != null && selection[barSelectionIndex].opacity != null){\n\t\t\treturn selection[barSelectionIndex].opacity;\n\t\t} \n\n\t\treturn defaultOpacity;\n\t}\t\n\n\t/**\n\t * Runs onTransition as a transition between two selections\n\t * @param {Array} selection1 \n\t * @param {Array} selection2 \n\t * @param {Function} onTransition handler\n\t */\n\t_onSelectionTransition(selection1, selection2, data1, data2, onTransition, onComplete){\n\t\tselection1.forEach((s1,selectionIndex)=>{\n\t\t\tvar s2 = selection2[selectionIndex];\n\t\t\tvar width = this._options.width;\n\t\t\tif (selection1[selectionIndex]){\n\t\t\t\tvar transitions = [];\n\t\t\t\tvar frames = [];\n\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.from)), Math.round(data2.valueToPosition(s2.from))]);\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.to)), Math.round(data2.valueToPosition(s2.to))]);\n\n\t\t\t\t// make sure duration is calculated based on transition length\n\t\t\t\tframes = [Math.abs((transitions[0][0] - transitions[0][1])/width), Math.abs((transitions[1][0] - transitions[1][1])/width)];\n\n\t\t\t\ttransitions.forEach((t, handleIndex)=>{\n\t\t\t\t\tvar duration = 0;\n\n\t\t\t\t\twhile(t[0] !== t[1]){\n\t\t\t\t\t\tsetTimeout(onTransition.bind(this, t[0], selectionIndex, handleIndex), duration);\n\t\t\t\t\t\t\n\t\t\t\t\t\tduration = duration+0.5/frames[handleIndex];\n\t\t\t\t\t\tt[0] = t[0]>t[1]?t[0]-1:t[0]+1;\n\t\t\t\t\t}\n\n\t\t\t\t\t// call final complete fn only if duration is > 0, this prevents premature animation end\n\t\t\t\t\t// when one of the sides is in the same position\n\t\t\t\t\tif (duration>0){\n\t\t\t\t\t\tsetTimeout(function(p, si, hi){\n\t\t\t\t\t\t\tonTransition(p, si, hi)\n\t\t\t\t\t\t\tonComplete(p, si, hi);\n\t\t\t\t\t\t}.bind(this, t[1], selectionIndex, handleIndex), ++duration);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Updates selection\n\t*/\n\t_updateSelection(){\n\t\tvar selection = this._histogramSelection.getSelection();\n\t\tvar bars = this._groupEl.selectAll(\".\"+style.bar);\n\n\t\t// fills bars with given selection\n\t\tvar fillBars = (s, data) => {\n\t\t\t// handle bar colors\n\t\t\tbars.attr(\"fill\", (d)=> {\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\n\t\t\t\treturn this._getBarColor(barX, s, data, d);\n\t\t\t})\n\n\t\t\t// handle bar opacity\n\t\t\tbars.attr(\"fill-opacity\", (d)=> {\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\n\t\t\t\treturn this._getBarOpacity(barX, s, data, d);\n\t\t\t})\n\t\t}\n\n\t\t// handle animation if previous selection is set\n\t\tif (this._animate && this._prevSelection){\n\t\t\tvar prevSelection = this._prevSelection;\n\t\t\tvar prevData = this._prevHistogramData;\n\t\t\t\n\t\t\t// set prev selection\n\t\t\tfillBars(prevSelection, this._prevHistogramData);\n\n\t\t\t// set handle positions to prev selection\n\t\t\tprevSelection.forEach((s, i)=>{\n\t\t\t\tvar p1 = this._prevHistogramData.valueToPosition(s.from);\n\t\t\t\tvar p2 = this._prevHistogramData.valueToPosition(s.to);\n\n\t\t\t\tthis._handles[i].setHandleXPosition(p1).setLabelPosition(p1);\n\t\t\t\tthis._handles[i+1].setHandleXPosition(p2).setLabelPosition(p2)\n\t\t\t});\n\n\t\t\tthis._animating = true;\n\t\t\t//fill bars on selection transition and move handles\n\t\t\tthis._onSelectionTransition(prevSelection, selection, prevData, this._histogramData, \n\t\t\t\t// on transition callback\n\t\t\t\t(p, selectionIndex, handleIndex)=>{\n\t\t\t\t\tvar bar = d3.select(bars.nodes()[p]);\n\t\t\t\t\tbar.attr(\"fill\", d=>{\n\t\t\t\t\t\treturn this._getBarColor(p, selection, this._histogramData, d);\n\t\t\t\t\t});\n\n\t\t\t\t\t//var handleText = this._options.format(this._histogramData.positionToValue(p));\n\t\t\t\t\t// move handles\n\t\t\t\t\t[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].setHandleXPosition(p).setLabelPosition(p)\n\n\t\t\t\t// on complete callback\t\t\n\t\t\t},()=>{\n\t\t\t\t\t// hide handles\n\t\t\t\t\t//[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].hideLabel();\n\t\t\t\t\tfillBars(selection, this._histogramData)\n\t\t\t\t\tthis._animating = false;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tthis._prevSelection = null;\n\t\t\tthis._prevHistogramData = null;\n\t\t\n\t\t} else {\n\t\t\tfillBars(selection, this._histogramData)\n\t\t}\n\t\t\n\t\t// selection rects\n\t\tthis._groupEl.selectAll(\".\"+style.selectionbar)\n\t\t\t.data(selection)\n\t\t\t.attr(\"data-selection-index\", function(d,i){\n\t\t\t\treturn i;\n\t\t\t})\n\t\t\t.attr(\"x\", (d) => { \n\t\t\t\treturn this._histogramData.valueToPosition(d.from);\n\t\t\t})\n\t\t\t.attr(\"width\", (d) => {\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\n\t\t\t})\n\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\t// show label without calculating offsets when animating\n\t\tif (this._animating) {\n\t\t\treturn this._handles.forEach(handle=>handle.showLabel());\n\t\t}\n\n\t\tthis._histogramSelection.getSelection().forEach((s,i)=>{\n\t\t\tvar handle1 = this._handles[i];\n\t\t\tvar handle2 = this._handles[i+1];\n\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\n\t\t});\n\t\t\n\t\tthis._handles.forEach(handle=>handle.showLabel());\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._handles.forEach(handle=>handle.hideLabel());\n\t}\t\t\n\n\t/**\n\t * @public\n\t * Destorys histogram UI  \n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._clear();\n\n\t\treturn this;\n    }\t\t\n}","import style from \"./Histogram.css\";\nimport HistogramSelectionRenderer from \"./selection/HistogramSelectionRenderer\";\nimport * as Defaults from \"./HistogramDefaults\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Histogram renderer class\n * @param {Object} options\n */\nexport default class HistogramRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Histogram options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Bar data \n\t\t */\n\t\tthis._historyData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = d3.scaleBand().range([0, options.width]);\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = d3.scaleLinear().range([options.height, 0]);\n\n\t\t/**\n\t\t * @private\n\t\t * true if histogram has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous data for animation\n\t\t */\n\t\tthis._prevData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * selection renderer\n\t\t */\n\t\tthis._selectionRenderer = new HistogramSelectionRenderer(options);\n\n\t\t/**\n\t\t * @private\n\t\t * True if labels are visible\n\t\t */\n\t\tthis._labelsVisible = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a category\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is changed\n\t\t\t * @param {Array} selection\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\t\t\n\n\t\t// relay selection events\n\t\tthis._selectionRenderer.on(\"selectionOver\", (selectionIndex)=>{\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"selectionChanged\", (selection)=>{\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\n\t\t});\n\n\t\tthis._selectionRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t\t});\t\t\n    }\n\n\t/**\n\t * @public\n\t * Returns whether histogram has been rendered or not\n\t * @returns {boolean} true if histogram has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {HistogramHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector){\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar margin = Defaults.MARGIN;\n\n\t\t// render SVG\n\t\tvar svg = this._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width + margin.left + margin.right)\n\t\t\t.attr(\"height\", height + margin.top + this._options.fontSize + margin.bottom)\n\t\t\t.classed(style.histogram, true);\n\n\t\t// render group element\n\t\tvar g = this._groupEl = this._svgEl.append(\"g\")\n\t\t\t.classed(style.inactive, true)\n\t\t\t.attr(\"transform\",\n\t\t\t\"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\t\t// handle hover over svg element\n\t\tsvg.on(\"mouseover.hover\", ()=>{\n\t\t\tg.classed(style.active, true)\n\t\t\tg.classed(style.inactive, false)\n\t\t})\n\n\t\tsvg.on(\"mouseout.hover\", ()=>{\n\t\t\tg.classed(style.inactive, true)\n\t\t\tg.classed(style.active, false)\n\t\t})\n\n\t\tthis._selectionRenderer.render(g);\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t} \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._groupEl.node().innerHTML = \"\";\n\t}\n\n\t/**\n\t * @private\n\t * Refreshes histogram data \n\t * @param {HistogramData}\n\t * @param {HistogramSelection}\n\t * @param {Object} options\n\t */\n\trefresh(histogramData, histogramSelection, options){\n\t\tthis._animate = options && options.animate;\n\n\t\tthis._histogramData = histogramData;\t\t\n\t\tthis._clear();\n\n\t\tthis._xAxis.domain(histogramData.getData().map(function (d) {return d.value; }));\n\t\tthis._yAxis.domain([0, d3.max(histogramData.getData(), function (d) { return Math.max.apply(Math, d.volume); })]);\n\n\t\tthis._renderXAxis();\t\t\n\t\tthis._renderDataBars();\n\n\t\tthis._prevData = histogramData.getData();\t\t\t\n\n\t\tthis._selectionRenderer.refresh(histogramData, histogramSelection, options);\t\n\n\t\tif (this._labelsVisible){\n\t\t\tthis.showSelectionLabels()\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\tthis._selectionRenderer.showSelectionLabels();\n\t\t// hide axis labels when selection labels are visible\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"none\");\n\t\tthis._labelsVisible = true;\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._selectionRenderer.hideSelectionLabels();\n\t\t// show axis labels when selection labels are not visible\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"block\");\t\t\n\t\tthis._labelsVisible = false;\n\t}\t\n\n\t/**\n\t * @private\n\t * Renders data bars\n\t*/\n\t_renderDataBars() { \n\t\tvar data = this._histogramData.getData();\n\t\t// var prevData = this._prevData;\n\t\tvar height = this._options.height;\n\n\t\tvar y = this._yAxis;\n\n\t\tdata.forEach(d=>{\n\t\t\td.volume.forEach((v, i)=>{\n\t\t\t\tthis._groupEl\n\t\t\t\t\t.append(\"rect\")\n\t\t\t\t\t.datum({\n\t\t\t\t\t\tvalue:d.value,\n\t\t\t\t\t\tvolumeIndex:i\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"class\", style.bar)\n\t\t\t\t\t.attr(\"x\", this._histogramData.valueToPosition(d.value))\n\t\t\t\t\t.attr(\"width\", \"1\")\n\t\t\t\t\t.attr(\"y\", Math.floor(y(d.volume[i])))\n\t\t\t\t\t.attr(\"height\", Math.ceil(height - y(d.volume[i])))\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t* @private\n\t* Renders X axis \n\t*/        \n\t_renderXAxis(){\n\t\tvar minMax = this._histogramData.getMinMax();\n\t\tvar format = this._options.format;\n\t\tvar height = this._options.height + this._options.fontSize + Defaults.LABEL_MARGIN;\n\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"])\n\t\t\t.data([minMax.min, minMax.max])\n\t\t\t.enter()\n\t\t\t.append(\"text\")\n\t\t\t.text((d)=>format(d))\n\t\t\t.attr(\"font-size\", this._options.fontSize)\n\t\t\t.attr(\"transform\", (d, i)=>{\n\t\t\t\treturn [\n\t\t\t\t\t\"translate(\"+0+\",\" + height + \")\",\n\t\t\t\t\t\"translate(\"+this._options.width+\",\" + height + \")\"\n\t\t\t\t][i]\n\t\t\t})\n\t\t\t.attr(\"text-anchor\", function(d, i){\n\t\t\t\treturn [\"start\", \"end\"][i];\n\t\t\t})\n\t\t\t.classed(style[\"x-axis\"], true)\n\t}\n\n\t/**\n\t * @public\n\t * Destorys histogram UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\t\tthis._selectionRenderer.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","/**\n * @abstract\n * abstract HistogramSelection class\n */\nexport default class HistogramSelection {\n\tconstructor(histogramData, selection){\n\t\tthis._selection = this.getSelectionWithPositions(histogramData, selection);\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelection()\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\treturn this._selection;\n\t}\n\n\t/**\n\t * @public\n\t * @abstract\n\t * @returns {Array} histogram selection\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\tthrow \"HistogramSelection.getOutputSelection() has to be implemented\";\n\t}\n\n\t/**\n\t * @public \n\t * @abstract\n\t * @returns {String}\n\t * Returns histogram selection type\n\t */\n\tgetSelectionType(){\n\t\tthrow \"HistogramSelection.getSelectionType() has to be implemented\";\n\t}\n\n\t/**\n\t * @abstract\n\t * @public \n\t * @returns {Boolean}\n\t * Returns true if toogle is allowed\n\t */\n\tallowsToggle(){\n\t\tthrow \"HistogramSelection.allowsToggle() has to be implemented\";\n\t}\t\n\n\t/**\n\t * @public\n\t * @abstract \n\t * @returns {Array}\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tthrow \"HistogramSelection.getSelection() has to be implemented\";\n\t}  \t\n\n\t/**\n\t * @public\n\t * @param {Array} histogramData\n\t * @param {Array} selection\n\t * @returns {Array}\n\t * Returns modified selection with positions\n\t */\n\tgetSelectionWithPositions(histogramData, selection){\n\t\treturn selection.map(s=>{\n\t\t\treturn Object.assign(s, {\n\t\t\t\tposition:{\n\t\t\t\t\tfrom:histogramData.valueToPosition(s.from),\n\t\t\t\t\tto:histogramData.valueToPosition(s.to)\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n\nvar SelectionTypes = {\n\tMULTI:\"multi\",\n\tFILTER:\"filter\",\n\tINVERTED_FILTER:\"inverted-filter\"\n}\n\nexport {SelectionTypes} ","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class MultipleHistogramSelection extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.MULTI;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn true;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\t\t\t\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t \t\n}","import MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport * as Defaults from \"../HistogramDefaults\";\n\n/**\n * @class\n * DefaultHistogramSelectionImpl representing histogram selection\n */\nexport default class DefaultHistogramSelectionImpl extends MultipleHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData) {\n\t\tvar minMax = histogramData.getMinMax();\n\t\tvar colors = Defaults.DEFAULT_COLORS;\n\t\tvar start = minMax.min;\n\t\tvar step = (minMax.max - minMax.min) / colors.length;\n\t\tvar selection = colors.map(color=>{\n\t\t\tvar from = start;\n\t\t\tvar to = start + step;\n\t\t\tstart += step;\n\n\t\t\treturn {\n\t\t\t\tfrom:from, \n\t\t\t\tto:to,\n\t\t\t\tcolor:color\n\t\t\t}\n\t\t});\n\n\t\tsuper(histogramData, selection);\n    }\n}","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class FilterHistogramSelectionImpl extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tif (selection.length != 1){\n\t\t\tthrow \"Filter selection doesn't allow more than one selection\"\n\t\t}\n\t\tsuper(histogramData, selection);\n\t}\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.FILTER;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn false;\n\t}\t\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t\n}","import FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class InvertedFilterHistogramSelectionImpl extends FilterHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n\n\t\tthis._selection = this._getInvertedSelection(histogramData, selection);\n    }\n\n\n\t_getInvertedSelection(histogramData, selection){\n\t\tvar minMax = histogramData.getMinMax();\n\n\t\tvar invertedSelection = [\n\t\t\t{\n\t\t\t\tfrom:minMax.min,\n\t\t\t\tto:selection[0].from\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].from,\n\t\t\t\tdisabled:true,\n\t\t\t\tto:selection[0].to\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].to,\n\t\t\t\tto:minMax.max\n\t\t\t}\n\t\t];\n\n\t\treturn this.getSelectionWithPositions(histogramData, invertedSelection);\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:this._selection[1].from,\n\t\t\t\tto:this._selection[1].to\n\t\t\t}\n\t\t];\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.INVERTED_FILTER;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = super.getSelectionPoints();\n\t\t\n\t\tresult[0].hidden = true;\n\t\tresult[result.length-1].hidden = true;\n\n\t\treturn result;\n\t}  \t\n}","import DefaultHistogramSelectionImpl from \"./DefaultHistogramSelectionImpl\";\nimport MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport InvertedFilterHistogramSelectionImpl from \"./InvertedFilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * HistogramSelection factory returns appropriate selection implementation\n */\nexport default class HistogramSelectionFactory {\n\t/**\n\t * @param {Object} options\n\t */\n\tconstructor(options) {\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * @param {HistogramData} histogramData\n\t * @returns {HistogramSelection} returns histogram selection\n\t * Returns histogram selection\n\t */\n\tgetHistogramSelection(selection, histogramData){\t\t\n\t\t// use default histogram selection if selection is not provided\n\t\tif (!selection){\n\t\t\treturn new DefaultHistogramSelectionImpl(histogramData, this._options.selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.FILTER){\n\t\t\treturn new FilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.INVERTED_FILTER){\n\t\t\treturn new InvertedFilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else {\n\t\t\treturn new MultipleHistogramSelectionImpl(histogramData, selection);\n\t\t}\n\t}  \t\n}","import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./HistogramDefaults\";\nimport HistogramData from \"./HistogramData\";\nimport HistogramRenderer from \"./HistogramRenderer\";\nimport HistogramSelectionFactory from \"./selection/HistogramSelectionFactory\"\nimport {SelectionTypes} from \"./selection/HistogramSelection\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main histogram class\n * @param {Object} options\n */\nclass Histogram {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * prompt handler\n\t\t */\n\t\tthis._options.promptHandler = options.promptHandler || null;\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar color \n\t\t */\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar opacity \n\t\t */\n\t\tthis._options.inactiveBarOpacity = getOptionValue(options.inactiveBarOpacity, Defaults.INACTIVE_BAR_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Over bar color \n\t\t */\n\t\tthis._options.overSelectionColor = getOptionValue(options.overSelectionColor, Defaults.OVER_SELECTION_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Over selection opacity \n\t\t */\n\t\tthis._options.overSelectionOpacity = getOptionValue(options.overSelectionOpacity, Defaults.OVER_SELECTION_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.selectionColor = getOptionValue(options.selectionColor, Defaults.SELECTION_COLOR);\n\t\t\n\t\t/**\n\t\t * @public\n\t\t * Enable selection toggle \n\t\t */\n\t\tthis._options.enableSelectionToggle = getOptionValue(options.enableSelectionToggle, Defaults.ENABLE_SELECTION_TOGGLE);\n\n\t\t/**\n\t\t * @public\n\t\t * Font size\n\t\t */\n\t\tthis._options.fontSize = getOptionValue(options.fontSize, Defaults.FONT_SIZE);\n\n\t\t/**\n\t\t * @public\n\t\t * selection type\n\t\t */\n\t\tthis._options.selectionType = getOptionValue(options.selectionType, null);\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a selection\n\t\t\t * @param {int} selectionIndex\n\t\t\t */\n\t\t\t\"selectionOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t * @param {MouseEvent} browser event\n\t\t\t */\n\t\t\t\"toggleSelection\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when selection is toggled\n\t\t\t * @param {int} selectionIndex\n\t\t\t * @param {bool} enabled\n\t\t\t */\n\t\t\t\"selectionChanged\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when user clicks on a handle\n\t\t\t * @param {int} handleIndex\n\t\t\t * @param {Number} handleValue\n\t\t\t */\n\t\t\t\"handleClick\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * histogramRenderer\n\t\t */\n\t\tthis._histogramRenderer = new HistogramRenderer(this._options);\n\n\t\tthis._histogramRenderer.on(\"selectionOver\", selectionIndex=>{\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled, d3.event);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"selectionChanged\", (selection)=>{\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\n\t\t})\n\n\t\tthis._histogramRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\n\t\t});\n\t\t\n\t\tthis._selectionFactory = new HistogramSelectionFactory(this._options);\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Histogram} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Histogram} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._histogramRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Histogram} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._histogramRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Array} data\n\t * @param {Array} selection\n\t * @param {Object} set data options\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetData(data, selection, options) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar histogramData = this._histogramData = new HistogramData(data, this._options);\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, histogramData);\n\n\t\tthis._options.selection = histogramSelection.getSelection();\n\t\tthis._selection = selection;\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = (value => String(value));\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._histogramRenderer.refresh(histogramData, histogramSelection, options);\n\n\t\treturn this;\n\t}\n\t\n\t/**\n\t * @public\n\t * Sets selection type\n\t * @param {String} selectionType\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetSelectionType(selectionType){\n\t\tthis._options.selectionType = selectionType;\n\t\tthis.setSelection(this._selection);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Shows selection labels\n\t */\n\tshowSelectionLabels(){\n\t\tthis._histogramRenderer.showSelectionLabels();\n\t}\n\n\t/**\n\t * Hides selection labels\n\t */\n\thideSelectionLabels(){\n\t\tthis._histogramRenderer.hideSelectionLabels();\n\t}\n\t\n\t/**\n\t * @public\n\t * Sets selection\n\t * @param {Array} selection\n\t * @param {Object} options\n\t * @returns {Histogram} returns this widget instance \n\t */\n\tsetSelection(selection, options) {\n\t\tif (!this._histogramRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tif (!this._histogramData) {\n\t\t\tthrow \"Can't call setSelection() when no data is available.\"\n\t\t}\n\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, this._histogramData);\n\t\tthis._options.selection = histogramSelection.getSelection();\n\t\tthis._selection = selection;\n\t\tthis._histogramRenderer.refresh(this._histogramData, this._histogramSelection, options);\n\n\t\treturn this;\n\t}\n\n}\n\nHistogram.SelectionTypes = SelectionTypes;\nexport default Histogram;\n","/**\n * @public\n * Default widget width\n */\nexport const WIDTH = 360;\n\n/**\n * @public\n * Default widget height\n */\nexport const HEIGHT = 200;\n\n/**\n * @public\n * Default line color\n */\nexport const LINE_COLOR = \"#7ed321\";\n\n/**\n * @public\n * Default line colors\n */\nexport const LINE_COLORS = [];\n\n/**\n * @public\n * Default line opacity\n */\nexport const LINE_OPACITY = 1;\n\n/**\n * @public\n * Default fill color\n */\nexport const FILL_COLOR = \"#7ed321\";\n\n/**\n * @public\n * Default fill colors\n */\nexport const FILL_COLORS = [];\n\n/**\n * @public\n * Default fill opacity\n */\nexport const FILL_OPACITY = 0.1;\n\n/**\n * @public\n * Default line width\n */\nexport const LINE_WIDTH = 3;\n\n/**\n * @public\n * Default dot size\n */\nexport const DOT_SIZE = 6;\n\n/**\n * @public\n * Default margin \n */\nexport const MARGIN = {\n    bottom:28\n};\n\n/**\n * @public \n * Default axis color \n */\nexport const AXIS_COLOR = \"#f0f0f0\";\n\n\n/**\n * @public \n * Vertical label offset\n */\nexport const LABEL_OFFSET = 5;\n\n\n/**\n * @public \n * Zero line color\n */\nexport const ZERO_LINE_COLOR = \"#bababa\";","import * as d3 from \"d3\";\n\n/**\n * @class\n * series representing data for the line\n */\nexport default class LineData {\n\t/**\n\t * @param {Array} series\n\t * @param {Object} options\n\t */\n\tconstructor(series) {\n\t\tthis._series = series.slice();\n\t\tthis._minMax = this._calculateMinMax(this._series);\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns line series\n\t * @returns {Array} line series\n\t */\n\tgetSeries() {\n\t\treturn this._series;\n\t}\n\n\t/**\n\t * @public\n\t * Returns all data from all series merged into one array\n\t * @returns {Array}\n\t */\n\tgetAllData() {\n\t\treturn [].concat.apply([], this._series);\n\t}\n\n\t/**\n\t * Returns merged data where each unique label has an array of values\n\t */\n\tgetMergedData() {\n\t\tvar dataMap = {};\n\t\tthis.getAllData().forEach((item=>{\n\t\t\tconst result = dataMap[item.label] || {\n\t\t\t\tlabel:item.label,\n\t\t\t\tvalues:[],\n\t\t\t\ttooltips:[]\n\t\t\t};\n\t\t\tresult.values.push(item.value);\n\t\t\tresult.tooltips.push(item.tooltip);\n\t\t\tdataMap[item.label] = result;\n\t\t}));\n\n\t\treturn Object.values(dataMap);\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given series\n\t* @param {Array} series\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(series) {\n\t\tvar data = [].concat.apply([], series);\n\t\tvar min = d3.min(data, function (d) { return d.value; });\n\t\tvar max = d3.max(data, function (d) { return d.value; });\n\n\t\tif (data.length <= series.length) {\n\t\t\tmin = Math.min(min, 0);\n\t\t\tmax = Math.max(max, 0);\n\t\t}\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.max;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}","import style from \"./Line.css\";\nimport * as Defaults from \"./LineDefaults\";\nimport Observable from \"../utils/Observable\";\nimport * as d3 from \"d3\";\n\nvar gradientID = 0;\n\n/**\n * @class\n * Line renderer class\n * @param {Object} options\n */\nexport default class TooltipRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Line options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Line data \n\t\t */\n\t\tthis._lineData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Line has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n    }\n\n\t/**\n\t * @public\n\t * Returns whether Line has been rendered or not\n\t * @returns {boolean} true if Line has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {LineHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(groupEl){\n\t\tthis._groupEl = groupEl;\n\t\tthis._rendered = true;\n\n\t\tthis._groupEl.on(\"mouseout\", this._onMouseOut.bind(this))\n\n\t\treturn this;\n\t}\n\n\t_getTextAnchor(xPos, bottomLabelWidth, width){\n\t\tvar xpos = xPos;\n\t\tif (xpos - bottomLabelWidth/2 < 0){\n\t\t\treturn \"start\"\n\t\t} else if (xpos + bottomLabelWidth/2 > width){\n\t\t\treturn \"end\"\n\t\t} else {\n\t\t\treturn \"middle\";\n\t\t}\n\t}\n\n\t_getTooltipHTML(d){\n\t\treturn d.tooltips.filter((tooltip, index)=>{\n\t\t\treturn d.values[index] != null;\n\t\t}).map((tooltip, index)=>{\n\t\t\tconst value = tooltip || this._options.format(d.values[index]);\n\t\t\tvar color = this._options.lineColors[index] || this._options.lineColor;\n\t\t\tconst icon = `\n\t\t\t\t<span style=\"display:inline-block;position:relative;top:-1px;margin-right:5px;width:6px;height:6px;border-radius:50%;background-color:${color}\"></span>\n\t\t\t`;\n\n\t\t\tif (d.tooltips.length>1){\n\t\t\t\treturn icon + value;\n\t\t\t} else {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\t\n\t\t}).join(\"<br />\");\n\t}\n\n\t_onHoverAreaOver(d){\n\t\tvar duration = this._tooltipGroup.attr(\"visibility\") == \"visible\"?0:0;\n\t\tvar x = this._xAxis;\n\t\tvar y = this._yAxis;\n\t\tvar width = this._options.width;\n\t\tvar xPos = x(d.label);\n\n\t\t// update tooltip position\n\t\tthis._tooltipGroup\n\t\t\t.transition()\n\t\t\t.duration(duration)\n\t\t\t.attr(\"visibility\", \"visible\")\n\t\t\t.attr(\"transform\", \"translate(\"+xPos+\", 0)\")\n\n\t\t// update tooltip bottom label\n\t\tvar bottomLabelWidth = this._tooltipBottomLabel.node().getBBox().width;\n\t\tvar bottomMaskPadding = 25;\n\t\tvar textAnchor = this._getTextAnchor(xPos, bottomLabelWidth, width);\n\n\t\tthis._tooltipBottomLabel\n\t\t\t.text(d.label)\n\t\t\t.attr(\"text-anchor\", textAnchor);\n\n\t\tthis._tooltipBottomLabel.attr(\"transform\", ()=>{\n\t\t\treturn {\n\t\t\t\t\"start\":\"translate(\"+-xPos+\", 0)\",\n\t\t\t\t\"middle\":\"translate(0, 0)\",\n\t\t\t\t\"end\":\"translate(\"+(width-xPos)+\", 0)\"\n\t\t\t}[textAnchor]\n\t\t});\n\t\t\n\t\tvar bottomMaskWidth = bottomMaskPadding*2 + bottomLabelWidth;\n\t\tthis._tooltipBottomLabelMask\n\t\t\t.attr(\"width\", bottomMaskWidth)\n\t\t\t.attr(\"x\", ()=>{\n\t\t\t\treturn {\n\t\t\t\t\t\"start\":-xPos-bottomMaskPadding,\n\t\t\t\t\t\"middle\":-bottomMaskWidth/2,\n\t\t\t\t\t\"end\":width-xPos-bottomMaskWidth+bottomMaskPadding,\n\t\t\t\t}[textAnchor]\n\t\t\t})\n\n\t\tthis._handleMaskGradientEl.attr(\"x1\", -bottomMaskWidth/2);\n\t\tthis._handleMaskGradientEl.attr(\"x2\", bottomMaskWidth/2);\t\t\t\n\n\t\t// update tooltip top label \n\t\tvar tooltipHtml = this._getTooltipHTML(d);\n\t\tthis._tooltipTopLabel.node().innerHTML = tooltipHtml;\n\t\tvar labelLeft = this._getLabelLeft(xPos);\n\n\t\t// if value is not null or undefined\n\t\tif (d.values.some(d => d != null)){\n\t\t\tthis._tooltipTopLabel\n\t\t\t\t.style(\"left\", labelLeft+\"px\")\n\t\t\t\t.style(\"visibility\", \"visible\")\n\t\t\t\t.style(\"top\", y(Math.max.apply(Math,d.values))-50+\"px\")\n\n\t\t\t// update line circle\n\t\t\tthis._tooltipLineCircle\n\t\t\t\t.transition()\n\t\t\t\t.duration(duration)\n\t\t\t\t.style(\"visibility\", (circle, i)=>{\n\t\t\t\t\treturn d.values[i]?\"visible\":\"hidden\";\n\t\t\t\t})\n\t\t\t\t.attr(\"cy\", (circle, i)=>{\n\t\t\t\t\treturn d.values[i]?y(d.values[i]):0\n\t\t\t\t})\t\t\t\t\n\t\t} else {\n\t\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\");\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\n\t\t}\n\t\n\t}\n\n\t_getLabelLeft(xPos){\n\t\tvar labelWidth = this._tooltipTopLabel.node().offsetWidth;\n\t\tvar labelLeft = xPos-labelWidth/2;\n\t\t\n\t\tif (labelLeft<0){\n\t\t\tlabelLeft = 0;\n\t\t}\n\n\t\tif (labelLeft>this._options.width - labelWidth){\n\t\t\tlabelLeft = this._options.width - labelWidth;\n\t\t}\n\n\t\treturn labelLeft;\n\t}\n\n\t_onMouseOut(){\n\t\t// only hide when mouse is outside of widget\n\t\tif (!this._groupEl.node().parentNode.contains(d3.event.relatedTarget)){\n\t\t\tthis._hideTooltip();\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\n\t\t}\n\t\t\n\t}\n\n\t_hideTooltip(){\n\t\tthis._tooltipGroup.attr(\"visibility\", \"hidden\")\n\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\")\n\t}\n\n\t_renderTooltip(){\n\t\tvar data = this._lineData.getMergedData();\n\t\t\n\t\tvar series = this._lineData.getSeries();\n\t\tvar hoverWidth;\n\t\tif (data.length>series.length){\n\t\t\thoverWidth = this._options.width / (data.length-1);\n\t\t} else {\n\t\t\thoverWidth = this._options.width;\n\t\t}\n\n\t\tthis._hoverAreas = this._groupEl\n\t\t\t.selectAll(\".\"+style[\"tooltip-hover-area\"])\n\t\t\t.data(data)\n\t\t\t.enter()\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"tooltip-hover-area\"])\n\t\t\t.attr(\"width\", hoverWidth)\n\t\t\t.attr(\"fill-opacity\", 0.00)\n\t\t\t.attr(\"x\", (d)=>{\n\t\t\t\treturn this._xAxis(d.label) - hoverWidth/2\n\t\t\t})\n\t\t\t.attr(\"height\", this._options.height)\n\t\t\t.on(\"mouseover\", this._onHoverAreaOver.bind(this))\n\n\t\tthis._tooltipGroup = this._groupEl\n\t\t\t.append(\"g\")\n\t\t\t.attr(\"visibility\", \"hidden\")\n\t\t\t.attr(\"class\", style[\"tooltip-group\"])\n\n\n\t\tthis._tooltipLineCircle = this._tooltipGroup\n\t\t\t.selectAll(\".\"+style[\"tooltip-line-circle\"])\n\t\t\t.data(series)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"visibility\", \"hidden\")\n\t\t\t.attr(\"class\", style[\"tooltip-line-circle\"])\n\t\t\t.attr(\"stroke-width\", this._options.lineWidth)\n\t\t\t.attr(\"stroke\", (d, i)=>{\n\t\t\t\treturn this._options.lineColors[i] || this._options.lineColor;\n\t\t\t})\n\t\t\t.attr(\"stroke-opacity\", this._options.lineOpacity)\n\t\t\t.attr(\"r\", 2.5+this._options.lineWidth/2)\n\n\t\tthis._tooltipAxisCircle = this._tooltipGroup\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"class\", style[\"tooltip-axis-circle\"])\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"cy\", this._options.height - Defaults.MARGIN.bottom)\n\t\t\t.attr(\"r\", 2.5 + 1/2)\n\n\t\tthis._tooltipBottomLabelMask = this._tooltipGroup\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"fill\", \"url(#\"+this._handleMaskGradientEl.attr(\"id\")+\")\")\n\t\t\t.attr(\"class\", style[\"tooltip-label-mask\"])\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET-15)\n\t\t\t.attr(\"height\", 20)\n\n\t\tthis._tooltipBottomLabel = this._tooltipGroup\n\t\t\t.append(\"text\")\n\t\t\t.attr(\"class\", style[\"tooltip-label\"])\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET)\n\t\t\t.attr(\"text-anchor\", \"start\")\n\t\t\t.text(data[0].label)\n\n\t\tthis._tooltipTopLabel = d3.select(this._groupEl.node().parentNode.parentNode)\n\t\t\t.insert(\"span\", \":first-child\")\n\t\t\t.attr(\"class\", style[\"tooltip-top-label\"])\n\t\t\t.style(\"position\", \"absolute\")\n\t\t\t.style(\"visibility\", \"hidden\")\n\n\t\tthis._tooltipRendered = true;\n\t}\n\n\t/**\n\t * Creates mask gradient element\n\t * @param {Number} handleIndex \n\t */\n\t_createMaskGradientElement(){\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\n\t\t\t.attr(\"id\", style[\"tooltip-label-mask\"]+\"-\"+(gradientID++)+\"-gradient\")\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\n\t\t\t.attr(\"y1\", \"0\").attr(\"x1\", \"0\")\n\t\t\t.attr(\"y2\", \"0\").attr(\"x2\", \"0\");\n\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\n\t\t\t.data([\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\n\t\t\t])\n\t\t\t.enter().append(\"stop\")\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\n\n\t\treturn this._handleMaskGradientEl;\n\t}\n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tif (this._tooltipRendered){\n\t\t\tthis._hoverAreas.remove();\n\t\t\tthis._tooltipGroup.remove();\n\t\t\tthis._tooltipTopLabel.remove();\n\t\t\tthis._tooltipRendered = false;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * Sets line data \n\t * @param {LineData}\n\t */\n\tupdate(lineData, x, y){\n\t\tthis._xAxis = x;\n\t\tthis._yAxis = y; \n\t\tthis._lineData = lineData;\n\n\t\tthis._createMaskGradientElement();\n\t\tthis._clear();\n\t\tthis._renderTooltip();\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Line UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._clear();\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","import style from \"./Line.css\";\nimport * as Defaults from \"./LineDefaults\";\nimport Observable from \"../utils/Observable\";\nimport TooltipRenderer from \"./TooltipRenderer\";\nimport * as d3 from \"d3\";\n\n/**\n * @class\n * Line renderer class\n * @param {Object} options\n */\nexport default class LineRenderer {\n    constructor(options) {\n\t\t/**\n\t\t * @private \n\t\t * Line options\n\t\t */\n\t\tthis._options = options;\n\n\t\t/**\n\t\t * @private \n\t\t * DOM container of this widget\n\t\t */\n\t\tthis._containerEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main group element of this widget\n\t\t */\n\t\tthis._groupEl = null;\n\n\t\t/**\n\t\t * @private \n\t\t * Main SVG element of this widget\n\t\t */\n\t\tthis._svgEl = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Line data \n\t\t */\n\t\tthis._lineData = null;\n\n\t\t/**\n\t\t * @private\n\t\t * X axis\n\t\t */\n\t\tthis._xAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * Y axis\n\t\t */\n\t\tthis._yAxis = null;\n\n\t\t/**\n\t\t * @private\n\t\t * true if Line has been rendered\n\t\t */\n\t\tthis._rendered = false;\n\n\t\t/**\n\t\t * @private\n\t\t * stores previous data for animation\n\t\t */\n\t\tthis._prevData = null;\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n\n\t\tthis._tooltipRenderer = new TooltipRenderer(options);\n    }\n\n\t/**\n\t * @public\n\t * Returns whether Line has been rendered or not\n\t * @returns {boolean} true if Line has been rendered\n\t */\n\tisRendered(){\n\t\treturn this._rendered;\n\t}\n\n\t/**\n\t * @public\n\t * Bind handle event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {LineHandle} returns this handle instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * @public\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(selector){\n\t\t// get container element using selector or given element\n\t\tvar ct = this._containerEl = d3.select(selector);\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\n\t\t// force position relative so the toolip shows correctly\n\t\tct.style(\"position\", \"relative\");\n\n\t\t// render SVG\n\t\tthis._svgEl = ct.append(\"svg\")\n\t\t\t.attr(\"width\", width)\n\t\t\t.attr(\"height\", height)\n\t\t\t.classed(style.svg, true)\n\t\t\t.classed(style.line, true);\n\n\t\t// render group element\n\t\tthis._groupEl = this._svgEl.append(\"g\");\n\n\t\tthis._tooltipRenderer.render(this._groupEl);\n\n\t\tthis._rendered = true;\n\n\t\treturn this;\n\t} \n\n\t/**\n\t * @private\n\t * Clears selection controls and data \n\t */\n\t_clear(){\n\t\tthis._groupEl.node().innerHTML = \"\";\n\t}\n\n\t/**\n\t * @private\n\t * Sets line data \n\t * @param {LineData}\n\t */\n\tupdate(lineData){\n\t\tthis._lineData = lineData;\t\t\n\t\tthis._clear();\n\n\t\tvar width = this._options.width;\n\t\tvar height = this._options.height;\n\t\tvar verticalSpacing = this._options.verticalSpacing;\n\n\t\tvar series = lineData.getSeries();\n\t\tvar allData = lineData.getAllData()\n\t\tvar minMax = lineData.getMinMax();\n\n\t\tvar x = this._xAxis = d3.scalePoint().range([0, width]);\t\n\t\tvar y = this._yAxis = d3.scaleLinear().range([height-verticalSpacing, verticalSpacing]);\n\n\t\tx.domain(allData.map(function (d) {return d.label; }));\n\t\ty.domain([minMax.min, minMax.max]);\n\n\t\tthis._renderZeroLine(allData);\n\t\tseries.forEach((data, seriesIndex)=>{\n\t\t\tthis._renderDataLines(data, seriesIndex);\n\t\t});\n\t\tthis._renderXAxis(allData);\n\t\tthis._tooltipRenderer.update(lineData, x, y);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * Renders x axis\n\t*/\n\t_renderXAxis(data){\n\t\tthis._groupEl.append(\"line\")\n\t\t\t.attr(\"x1\", 0)\n\t\t\t.attr(\"x2\", this._options.width)\n\t\t\t.attr(\"y1\", this._options.height-Defaults.MARGIN.bottom)\n\t\t\t.attr(\"y2\", this._options.height-Defaults.MARGIN.bottom)\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke\", this._options.axisColor)\n\n\t\t// render to labels on start and end sides if multiple items are available\n\t\tif (data.length>1){\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[0].label)\n\t\t\t\t.attr(\"x\", 0)\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\n\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[data.length-1].label)\n\t\t\t\t.attr(\"x\", this._options.width)\n\t\t\t\t.attr(\"text-anchor\", \"end\")\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\n\n\t\t// render single label in the middle if only one item is available\t\t\t\t\n\t\t} else if (data.length == 1){\n\t\t\tthis._groupEl\n\t\t\t\t.append(\"text\")\n\t\t\t\t.text(data[0].label)\n\t\t\t\t.attr(\"x\", this._options.width/2)\n\t\t\t\t.attr(\"text-anchor\", \"middle\")\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\n\t\t}\t\n\t}\n\t/**\n\t * Returns true if graph should render zero line\n\t * @param {Array} data \n\t */\n\t_showZeroLine(){\n\t\tvar zeroLinePosition = this._yAxis(0);\n\t\tvar axisPosition = this._options.height-Defaults.MARGIN.bottom;\n\t\tvar treshold = 10;\n\t\treturn zeroLinePosition<axisPosition-treshold;\n\t}\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * Renders zero line\n\t*/\n\t_renderZeroLine(){\n\t\tif (this._showZeroLine()){\n\t\t\tthis._groupEl.append(\"line\")\n\t\t\t\t.attr(\"x1\", 0)\n\t\t\t\t.attr(\"x2\", this._options.width)\n\t\t\t\t.attr(\"y1\", Math.round(this._yAxis(0)))\n\t\t\t\t.attr(\"y2\", Math.round(this._yAxis(0)))\n\t\t\t\t.attr(\"stroke-dasharray\",\"2 ,2\")\n\t\t\t\t.attr(\"stroke\", this._options.zeroLineColor)\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t * @param {Array} data\n\t * @param {Number} seriesIndex\n\t * Renders data lines\n\t*/\n\t_renderDataLines(data, seriesIndex) { \n\t\tvar x = this._xAxis;\n\t\tvar y = this._yAxis;\n\t\t\n\t\tvar options = this._options;\n\t\tvar minHeight = this._options.height-Defaults.MARGIN.bottom;\n\t\tvar areaZero = this._showZeroLine()?Math.min(minHeight, y(0)):minHeight;\n\t\tvar lineColor = options.lineColors[seriesIndex] || options.lineColor;\n\t\tvar fillColor = options.fillColors[seriesIndex] || options.fillColor;\n\n\t\t// define the area\n\t\tvar area = d3.area()\n\t\t\t.x(function(d) {return x(d.label); })\n\t\t\t.y0(areaZero)\n\t\t\t.y1(function(d) { return y(d.value); });\n\n\t\t// define the line\n\t\tvar line = d3.line()\n\t\t\t.x(function(d) { return x(d.label); })\n\t\t\t.y(function(d) { return y(d.value); });\t\t\n\n\t\t// apply grouping if needed (null or other splits)\n\t\tconst groupedData = this._getGroupedData(data);\n\n\t\tgroupedData.forEach(lineData=>{\n\t\t\t// only add area if not rendering a dot\n\t\t\tif (lineData.length>1){\n\t\t\t\t// add the area path\n\t\t\t\tthis._groupEl.append(\"path\")\n\t\t\t\t.data([lineData])\n\t\t\t\t.attr(\"class\", style[\"area\"])\n\t\t\t\t.attr(\"fill\", fillColor)\n\t\t\t\t.attr(\"fill-opacity\", options.fillOpacity)\n\t\t\t\t.attr(\"d\", area);\n\t\t\t}\n\n\t\t\tif (lineData.length){\n\t\t\t\t// add the line path\n\t\t\t\tthis._groupEl.append(\"path\")\n\t\t\t\t\t.data([lineData])\n\t\t\t\t\t.attr(\"fill\", \"none\")\n\t\t\t\t\t.attr(\"stroke-linecap\", \"round\")\n\t\t\t\t\t.attr(\"stroke\", lineColor)\n\t\t\t\t\t.attr(\"stroke-opacity\", 1)\n\t\t\t\t\t// note that in case of a single item, dot is rendered with a different size\n\t\t\t\t\t.attr(\"stroke-width\", lineData.length>1?options.lineWidth:options.dotSize)\n\t\t\t\t\t.attr(\"class\", style[\"line\"])\n\t\t\t\t\t.attr(\"d\", (d)=>{\n\t\t\t\t\t\tvar path = line(d);\n\t\t\t\t\t\t// Fix issue in Chrome on Mac and Surface where\n\t\t\t\t\t\t// path points are not rendererd if it's a single point \n\t\t\t\t\t\tif (path && path.split(\",\").length == 2){\n\t\t\t\t\t\t\treturn path + \" \" + path;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn path;\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\t\n\n\t}\n\n\t/**\n\t * @private\n\t * Splits given array into multiple in case there is null in value\n\t * @param {Array} data \n\t */\n\t_getGroupedData(data){\n\t\tlet group = [];\n\t\tconst result = [group];\n\t\t\n\t\tdata.forEach(item=>{\n\t\t\tif (item.value === null){\n\t\t\t\tgroup = [];\n\t\t\t\tresult.push(group);\n\t\t\t} else {\n\t\t\t\tgroup.push(item);\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * @public\n\t * Destorys Line UI  \n\t */\n\tdestroy() {\n\t\tif (this._rendered){\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\n\t\t}\n\n\t\tthis._observable.destroy();\n\n\t\treturn this;\n    }\t\n\t\n}","import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./LineDefaults\";\nimport LineData from \"./LineData\";\nimport LineRenderer from \"./LineRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main Line class\n * @param {Object} options\n */\nclass Line {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Line width\n\t\t */\n\t\tthis._options.lineWidth = getOptionValue(options.lineWidth, Defaults.LINE_WIDTH);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Dot size\n\t\t */\n\t\tthis._options.dotSize = getOptionValue(options.dotSize, Defaults.DOT_SIZE);\t\t\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Line color \n\t\t */\n\t\tthis._options.lineColor = getOptionValue(options.lineColor, Defaults.LINE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Line colors \n\t\t */\n\t\tthis._options.lineColors = getOptionValue(options.lineColors, Defaults.LINE_COLORS);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Line opacity \n\t\t */\n\t\tthis._options.lineOpacity = getOptionValue(options.lineOpacity, Defaults.LINE_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill color \n\t\t */\n\t\tthis._options.fillColor = getOptionValue(options.fillColor, Defaults.FILL_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill colors\n\t\t */\n\t\tthis._options.fillColors = getOptionValue(options.fillColors, Defaults.FILL_COLORS);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Fill opacity\n\t\t */\n\t\tthis._options.fillOpacity = getOptionValue(options.fillOpacity, Defaults.FILL_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.axisColor = getOptionValue(options.axisColor, Defaults.AXIS_COLOR);\t\t\n\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.zeroLineColor = getOptionValue(options.zeroLineColor, Defaults.ZERO_LINE_COLOR);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Vertical spacing\n\t\t */\n\t\tthis._options.verticalSpacing = getOptionValue(options.verticalSpacing, this._options.height / 4);\t\t\n\t\t\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * LineRenderer\n\t\t */\n\t\tthis._lineRenderer = new LineRenderer(this._options);\n\n\t\tthis._lineRenderer.on(\"pointOver\", data=>{\n\t\t\tthis._observable.fire(\"pointOver\", data);\n\t\t})\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Line} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._lineRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._lineRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets multiple series of data\n\t * @param {Array[]} series\n\t * @returns {Line} returns this widget instance \n\t */\n\tsetSeries(series) {\n\t\treturn this.setData.apply(this, series);\n\t}\n\n\t/**\n\t * Sets line data\n\t * @param {...Array} series\n\t * @returns {Line} returns this widget instance \n\t */\n\tsetData(...series) {\n\t\tif (!this._lineRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar lineData = this._lineData = new LineData(series, this._options);\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + this._lineData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._lineRenderer.update(lineData);\n\n\t\treturn this;\n\t}\n}\n\nexport default Line;\n","\nexport const WIDTH = 360;\nexport const HEIGHT = 129;\nexport const LABEL_FONT_SIZE = 13;\nexport const TOOLTIP_FONT_SIZE = 11;\nexport const TOOLTIP_SYMBOL = '_circle';\nexport const ACTIVE_COLORS = [\"#49ace2\", \"#ca62dc\"];\nexport const DETAILS_HIDDEN = false;\nexport const MINMAX = \"sum\";\nexport const DUAL_VALUE = false;\nexport const ENABLE_BAR_HOVER = false;\nexport const ENABLE_BAR_TOGGLE = false;\nexport const FORMAT = \",f\";\nexport const BAR_HEIGHT = 43;\nexport const BAR_DISABLED = false;\nexport const HORIZONTAL_PADDING = 10;\nexport const STRIPE_HEIGHT = 5;\nexport const STRIPE_BACKGROUND_COLOR = \"#f0f0f0\";\nexport const TOOLTIP_SPACE = 7;\nexport const CORNER_ROUNDED = true;","export default class BarchartData {\n\n\tconstructor(\n\t\t_,\n\t\tdetailsData,\n\t\tbarsData\n\t) {\n\t\tif (typeof barsData === 'undefined') throw \"barsData is required parameter\";\n\n\t\tthis._detailsData = detailsData;\n\t\tthis._barsData = barsData;\n\t}\n\n\t/**\n\t * @param {BarchartData} barchartData\n\t */\n\tstatic copyAs(barchartData) {\n\t\treturn new BarchartData(\n\t\t\t{},\n\t\t\tbarchartData.details,\n\t\t\tbarchartData.bars\n\t\t);\n\t}\n\n\tget details() {\n\t\treturn this._detailsData;\n\t}\n\tset details(detailsData) {\n\t\tthis._detailsData = detailsData;\n\t}\n\n\tget bars() {\n\t\treturn this._barsData;\n\t}\n\tgetBar(index) {\n\t\treturn this._barsData[index];\n\t}\n\tsetBar(index, barData) {\n\t\tthis._barsData[index] = barData;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (minMax === \"sum\") {\n\n\t\t\tlet containsNegativeVal = false;\n\t\t\tlet containsPositiveVal = false;\n\t\t\tconst sum = this.bars.reduce((sum, bar) => {\n\t\t\t\tconst min = bar.calculateMinMax(minMax).min;\n\t\t\t\tconst max = bar.calculateMinMax(minMax).max;\n\t\t\t\tif (min < 0) containsNegativeVal = true;\n\t\t\t\tif (max > 0) containsPositiveVal = true;\n\t\t\t\treturn sum + Math.max(Math.abs(min), Math.abs(max));\n\t\t\t}, 0);\n\n\t\t\treturn {\n\t\t\t\tmin: containsNegativeVal ? -sum : 0,\n\t\t\t\tmax: containsPositiveVal ? sum : 0\n\t\t\t}\n\n\t\t} else if (minMax === \"auto\") {\n\n\t\t\treturn {\n\t\t\t\tmin: this.bars.reduce((min, bar) => Math.min(min, bar.calculateMinMax(minMax).min), 0),\n\t\t\t\tmax: this.bars.reduce((max, bar) => Math.max(max, bar.calculateMinMax(minMax).max), 0)\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn minMax;\n\t\t}\n\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\treturn this.bars.reduce((max, bar) => Math.max(max, bar.getPrecision(precision)), 0)\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n}","export default class DetailsData {\n\n\tconstructor(\n\t\t{\n\t\t\tlabel,\n\t\t\tdisabled\n\t\t},\n\t\ttooltips\n\t) {\n\t\tif (typeof label === 'undefined') throw \"label is required parameter\";\n\n\t\tthis._label = label;\n\t\tthis._disabled = disabled;\n\t\tthis._tooltips = tooltips;\n\t}\n\n\t/**\n\t * @param {DetailsData} detailsData\n\t */\n\tstatic copyAs(detailsData) {\n\t\treturn new DetailsData(\n\t\t\t{\n\t\t\t\tlabel: detailsData.label,\n\t\t\t\tdisabled: detailsData.disabled\n\t\t\t},\n\t\t\tdetailsData.tooltips,\n\t\t);\n\t}\n\n\tget label() {\n\t\treturn this._label;\n\t}\n\tset label(label) {\n\t\tthis._label = label;\n\t}\n\n\tget tooltips() {\n\t\treturn this._tooltips;\n\t}\n\tgetTooltip(index) {\n\t\treturn this._tooltips[index];\n\t}\n\taddTooltip(tooltipData) {\n\t\tif (typeof this._tooltips === 'undefined') {\n\t\t\tthis._tooltips = [];\n\t\t}\n\t\tthis._tooltips.push(tooltipData);\n\t}\n\tsetTooltip(index, tooltipData) {\n\t\tthis._tooltips[index] = tooltipData;\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\tset disabled(disabled) {\n\t\tthis._disabled = disabled;\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\tif (!this.tooltips) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn this.tooltips.reduce((max, tooltip) => Math.max(max, tooltip.getPrecision()), 0);\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n}","\nexport default class TooltipData {\n\n\tconstructor(\n\t\t{\n\t\t\ttext,\n\t\t\tsymbol,\n\t\t\tcolor\n\t\t}\n\t) {\n\t\tif (typeof text === 'undefined') throw \"text is required parameter\";\n\t\tthis._symbol = symbol;\n\t\tthis._color = color;\n\t\tthis._text = text;\n\t}\n\n\t/**\n\t * @param {TooltipData} tooltipData\n\t */\n\tstatic copyAs(tooltipData) {\n\t\treturn new TooltipData({\n\t\t\ttext: tooltipData.text,\n\t\t\tsymbol: tooltipData.symbol,\n\t\t\tcolor: tooltipData.color\n\t\t});\n\t}\n\n\tget symbol() {\n\t\treturn this._symbol;\n\t}\n\tset symbol(symbol) {\n\t\tthis._symbol = symbol;\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tget text() {\n\t\treturn this._text;\n\t}\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (precision === \"max\") {\n\t\t\tif (this.isNumber()) {\n\t\t\t\tconst str = this.text.toString();\n\t\t\t\tif (str.includes('.')) {\n\t\t\t\t\treturn str.split(\".\")[1].length;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn precision;\n\t\t}\n\t}\n\n\tisNumber() {\n\t\treturn !isNaN(parseFloat(this.text)) && isFinite(this.text);\n\t}\n\n}","\nexport default class BarData {\n\n\tconstructor(\n\t\t{\n\t\t\tdisabled,\n\t\t\thighlighted\n\t\t},\n\t\tdetailsData,\n\t\tstripesData\n\t) {\n\t\tif (typeof stripesData === 'undefined') throw \"stripesData is required parameter\";\n\n\t\tthis._disabled = disabled;\n\t\tthis._highlighted = highlighted;\n\t\tthis._detailsData = detailsData;\n\t\tthis._stripesData = stripesData;\n\t}\n\n\t/**\n\t * @param {BarData} barData\n\t */\n\tstatic copyAs(barData) {\n\t\treturn new BarData(\n\t\t\t{\n\t\t\t\tdisabled: barData.disabled,\n\t\t\t\thighlighted: barData.highlighted\n\t\t\t},\n\t\t\tbarData.details,\n\t\t\tbarData.stripes\n\t\t);\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\tset disabled(disabled) {\n\t\tthis._disabled = disabled;\n\t}\n\n\tget highlighted() {\n\t\treturn this._highlighted;\n\t}\n\tset highlighted(highlighted) {\n\t\tthis._highlighted = highlighted;\n\t}\n\n\tget details() {\n\t\treturn this._detailsData;\n\t}\n\tset details(detailsData) {\n\t\tthis._detailsData = detailsData;\n\t}\n\n\tget stripes() {\n\t\treturn this._stripesData;\n\t}\n\tgetStripe(index) {\n\t\treturn this._stripesData[index];\n\t}\n\tsetStripe(index, stripeData) {\n\t\tthis._stripesData[index] = stripeData;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (minMax === \"sum\") {\n\n\t\t\tlet containsNegativeVal = false;\n\t\t\tlet containsPositiveVal = false;\n\t\t\tconst absMax = this.stripes.reduce((sum, stripe) => {\n\t\t\t\tconst min = stripe.calculateMinMax(minMax).min;\n\t\t\t\tconst max = stripe.calculateMinMax(minMax).max;\n\t\t\t\tif (min < 0) containsNegativeVal = true;\n\t\t\t\tif (max > 0) containsPositiveVal = true;\n\t\t\t\treturn sum + Math.max(Math.abs(min), Math.abs(max))\n\t\t\t}, 0);\n\n\t\t\treturn {\n\t\t\t\tmin: containsNegativeVal ? -absMax : 0,\n\t\t\t\tmax: containsPositiveVal ? absMax : 0\n\t\t\t}\n\n\t\t} else if (minMax === \"auto\") {\n\n\t\t\treturn {\n\t\t\t\tmin: this.stripes.reduce((min, stripe) => Math.min(min, stripe.calculateMinMax(minMax).min), 0),\n\t\t\t\tmax: this.stripes.reduce((max, stripe) => Math.max(max, stripe.calculateMinMax(minMax).max), 0)\n\t\t\t}\n\n\t\t} else {\n\t\t\treturn minMax;\n\t\t}\n\n\t}\n\n\tgetPrecision(precision = \"max\") {\n\t\tif (typeof this.details === 'undefined') {\n\t\t\treturn 0;\n\t\t}\n\t\tif (this.details === null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.details.getPrecision(precision);\n\t}\n\n}","\nexport default class StripeData {\n\n\tconstructor(\n\t\t{\n\t\t\tvalue,\n\t\t\tcolor,\n\t\t\tright: {\n\t\t\t\tvalue: leftValue,\n\t\t\t\tcolor: leftColor\n\t\t\t} = {},\n\t\t\tleft: {\n\t\t\t\tvalue: rightValue,\n\t\t\t\tcolor: rightColor\n\t\t\t} = {}\n\t\t}\n\t) {\n\t\tif (typeof value === 'undefined') {\n\t\t\tif (typeof leftValue === 'undefined') throw \"value or leftValue is required parameter\";\n\t\t\tif (typeof rightValue === 'undefined') throw \"value or rightValue is required parameter\";\n\n\t\t\tthis._right = {\n\t\t\t\tvalue: leftValue,\n\t\t\t\tcolor: leftColor\n\t\t\t};\n\t\t\tthis._left = {\n\t\t\t\tvalue: rightValue,\n\t\t\t\tcolor: rightColor\n\t\t\t}\n\t\t} else {\n\t\t\tthis._value = value;\n\t\t\tthis._color = color;\n\t\t}\n\t}\n\n\t/**\n\t * @param {StripeData} stripeData\n\t */\n\tstatic copyAs(stripeData) {\n\t\tif (stripeData.dual) {\n\t\t\treturn new StripeData({\n\t\t\t\tright: stripeData.right,\n\t\t\t\tleft: stripeData.left\n\t\t\t});\n\t\t} else {\n\t\t\treturn new StripeData({\n\t\t\t\tvalue: stripeData.value,\n\t\t\t\tcolor: stripeData.color,\n\t\t\t});\n\t\t}\n\t}\n\n\tget dual() {\n\t\treturn (typeof this._value === 'undefined');\n\t}\n\n\tget value() {\n\t\treturn this._value;\n\t}\n\tset value(value) {\n\t\tthis._value = value;\n\t}\n\n\tget color() {\n\t\treturn this._color;\n\t}\n\tset color(color) {\n\t\tthis._color = color;\n\t}\n\n\tget left() {\n\t\treturn this._left;\n\t}\n\tset left(leftData) {\n\t\tthis._left = leftData;\n\t}\n\n\tget right() {\n\t\treturn this._right;\n\t}\n\tset right(rightData) {\n\t\tthis._right = rightData;\n\t}\n\n\tcalculateMinMax(minMax = \"sum\") {\n\n\t\tif (this.dual) {\n\t\t\tif (minMax === \"sum\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.left.value, this.right.value),\n\t\t\t\t\tmax: Math.max(0, this.left.value + this.right.value)\n\t\t\t\t}\n\t\t\t} else if (minMax === \"auto\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.left.value, this.right.value),\n\t\t\t\t\tmax: Math.max(0, this.left.value, this.right.value)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn minMax;\n\t\t\t}\n\n\t\t} else {\n\t\t\tif (minMax === \"sum\" || minMax === \"auto\") {\n\t\t\t\treturn {\n\t\t\t\t\tmin: Math.min(0, this.value),\n\t\t\t\t\tmax: Math.max(0, this.value)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn minMax;\n\t\t\t}\n\t\t}\n\t}\n\n}","import BarchartData from \"./data/BarchartData\";\nimport DetailsData from \"./data/DetailsData\";\nimport TooltipData from \"./data/TooltipData\";\nimport BarData from \"./data/BarData\";\nimport StripeData from \"./data/StripeData\";\n\nclass JsonDataConverter {\n\n\tconvert(barchartJsonData) {\n\n\t\tlet detailsData;\n\t\tif (typeof barchartJsonData.details !== 'undefined') {\n\t\t\tlet tooltipsData;\n\t\t\tif (typeof barchartJsonData.details.tooltips !== 'undefined') {\n\t\t\t\ttooltipsData = barchartJsonData.details.tooltips.map(\n\t\t\t\t\ttooltipJsonData => new TooltipData(tooltipJsonData)\n\t\t\t\t);\n\t\t\t}\n\t\t\tdetailsData = new DetailsData(barchartJsonData.details, tooltipsData);\n\t\t}\n\n\t\tconst barsData = barchartJsonData.bars.map(barJsonData => {\n\n\t\t\tlet detailsData;\n\t\t\tif (typeof barJsonData.details !== 'undefined') {\n\t\t\t\tlet tooltipsData;\n\t\t\t\tif (typeof barJsonData.details.tooltips !== 'undefined') {\n\t\t\t\t\ttooltipsData = barJsonData.details.tooltips.map(\n\t\t\t\t\t\ttooltipJsonData => new TooltipData(tooltipJsonData)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tdetailsData = new DetailsData(barJsonData.details, tooltipsData);\n\t\t\t}\n\n\t\t\tconst stripesData = barJsonData.stripes.map(stripeJsonData => new StripeData(stripeJsonData));\n\n\t\t\treturn new BarData(barJsonData, detailsData, stripesData);\n\t\t});\n\n\t\tconst barchartData = new BarchartData(barchartJsonData, detailsData, barsData);\n\n\t\treturn barchartData;\n\n\t}\n\n}\n\nexport default JsonDataConverter;\n","import style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport Observable from \"../../utils/Observable\";\nimport JsonDataConverter from \"../JsonDataConverter\";\n\nlet MASK_INDEX = 0;\n\nclass Component {\n\n\tconstructor(\n\t\twidth,\n\t\theight,\n\t\tclassName = \"component\",\n\t\talignRight = false,\n\t\talignBottom = false\n\t) {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tthis._container = null;\n\t\tthis._maskIndex = MASK_INDEX++;\n\t\tthis._className = className;\n\t\tthis._observable = new Observable([\n\t\t\t\"enter\",\n\t\t\t\"leave\",\n\t\t\t\"click\"\n\t\t]);\n\t\tthis._alignRight = alignRight;\n\t\tthis._alignBottom = alignBottom;\n\n\t\tthis._data = null;\n\t}\n\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\n\n\tget width() {\n\t\treturn this._width;\n\t}\n\n\tget height() {\n\t\treturn this._height;\n\t}\n\n\tget className() {\n\t\treturn this._className;\n\t}\n\n\tget container() {\n\t\treturn this._container;\n\t}\n\n\tget alignRight() {\n\t\treturn this._alignRight;\n\t}\n\n\tget alignBottom() {\n\t\treturn this._alignBottom;\n\t}\n\n\tget data() {\n\t\treturn this._data;\n\t}\n\n\tset width(value) {\n\t\tthis._width = value;\n\t\tif (this.isRendered()) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"width\", value);\n\t\t}\n\t\tif (this.alignRight) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"x\", -value);\n\t\t}\n\t}\n\n\tset height(value) {\n\t\tthis._height = value;\n\t\tif (this.isRendered()) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"height\", value);\n\t\t}\n\t\tif (this.alignBottom) {\n\t\t\tthis._container.select(`.${style[\"clickable-area\"]}`).attr(\"y\", -value);\n\t\t}\n\t}\n\n\t_renderContainer(selector, x = 0, y = 0){\n\n\t\treturn d3.select(selector).append(\"g\")\n\t\t\t.attr(\"class\", style[this.className])\n\t\t\t.attr(\"transform\", `translate(${x}, ${y})`)\n\n\t}\n\n\trender(selector, x = 0, y = 0, index = 0){\n\t\tthis.destroy();\n\n\t\tthis._container = this._renderContainer(selector, x, y);\n\n\t\tthis._container.datum(index);\n\n\t\tthis._container\n\t\t\t.on(\"click\", (index) => {\n\t\t\t\tthis._observable.fire(\"click\", index)\n\t\t\t})\n\t\t\t.on(\"mouseenter\", (index) => {\n\t\t\t\tthis._observable.fire(\"enter\", index)\n\t\t\t})\n\t\t\t.on(\"mouseleave\", (index) => {\n\t\t\t\tthis._observable.fire(\"leave\", index)\n\t\t\t});\n\n\t\tif (!this._container) {\n\t\t\tthrow `Component ${this._className} was not rendered. Check your selector: ${selector}`;\n\t\t}\n\n\t\t// clickable area\n\t\tconst clickableArea = this._container.append(\"rect\")\n\t\t\t.attr(\"class\", style[\"clickable-area\"])\n\t\t\t.attr(\"fill\", \"transparent\")\n\t\t\t.attr(\"width\", this.width)\n\t\t\t.attr(\"height\", this.height);\n\n\t\tif (this.alignBottom) {\n\t\t\tclickableArea.attr(\"y\", -this.height);\n\t\t}\n\t\tif (this.alignRight) {\n\t\t\tclickableArea.attr(\"x\", -this.width);\n\t\t}\n\n\t\tthis._render(index);\n\n\t\treturn this;\n\t}\n\n\t_render(index){\n\t\t// prepared to be implemented by subclasses\n\t}\n\n\tdestroy(){\n\t\tif (this.isRendered()) {\n\t\t\tthis.clearData();\n\t\t\tthis._container.datum(null);\n\t\t\tthis._container.remove();\n\t\t\tthis._container = null;\n\t\t}\n\t\treturn this;\n\t}\n\n\tisRendered(){\n\t\treturn this._container !== null;\n\t}\n\n\tsetData(data) {\n\t\tif (!this.isRendered()) {\n\t\t\tthrow \"Can't call setData() when component is not rendered, please call .render() first.\"\n\t\t}\n\n\t\t// Is plain object = not class => convert\n\t\tif (data.constructor.name === \"Object\") {\n\t\t\tdata = new JsonDataConverter().convert(data);\n\t\t}\n\n\t\tthis.clearData();\n\t\tthis._data = data;\n\t\tthis._setData(data);\n\t\treturn this;\n\t}\n\n\tclearData() {\n\t\tif (!this.isRendered()) {\n\t\t\tthrow \"Can't call clearData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\t\tthis._clearData();\n\t\tthis._data = null;\n\t\treturn this;\n\t}\n\n\t_setData(data) {\n\t\t// prepared to be implemented by subclasses\n\t}\n\n\t_clearData() {\n\t\t// prepared to be implemented by subclasses\n\t}\n}\n\nexport default Component;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\n\nclass Tooltip extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\tfontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\twidth = fontSize,\n\t\t\theight = fontSize,\n\t\t\tsymbol,\n\t\t\tactiveColor = Defaults.ACTIVE_COLORS[0],\n\t\t\tformat = Defaults.FORMAT,\n\t\t\tspace = Defaults.TOOLTIP_SPACE\n\t\t}\n\t) {\n\t\tsuper(width, height, \"tooltip\", true, true);\n\t\tthis._fontSize = fontSize;\n\t\tthis._symbol = symbol;\n\t\tthis._activeColor = activeColor;\n\t\tthis._format = format;\n\t\tthis._space = space;\n\n\t\tthis._canvas;\n\t}\n\n\t_render() {\n\n\t\tthis.container.append(\"text\")\n\t\t\t.text(\"-\")\n\t\t\t.attr(\"class\", style[\"tooltip-text\"])\n\t\t\t.attr(\"text-anchor\",\"end\")\n\t\t\t.attr(\"font-size\", this.fontSize);\n\n\t\tif (d3.select(\".text-width-helper\").empty()) {\n\t\t\tthis._canvas = d3.select(\"body\")\n\t\t\t\t.append('canvas')\n\t\t\t\t.attr(\"class\", \"text-width-helper\")\n\t\t\t\t.style(\"display\",\"none\")\n\t\t\t\t.text(\"Helper element for computing text width\");\n\t\t} else {\n\t\t\tthis._canvas = d3.select(\".text-width-helper\");\n\t\t}\n\n\t}\n\n\t/**\n\t * @param {TooltipData} data\n\t */\n\t_setData(data) {\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = data.getPrecision(\"max\");\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tlet text = data.text;\n\t\tif (data.isNumber()) {\n\t\t\ttext = d3.format(format)(data.text);\n\t\t}\n\n\t\tconst tooltipText = this.container.select(`.${style[\"tooltip-text\"]}`)\n\t\t\t.text(text);\n\n\t\tlet tooltipWidth = this._calculateTextWidth(tooltipText);\n\n\t\tif (data.symbol || this.symbol) {\n\n\t\t\tlet color;\n\t\t\tif (data.color instanceof Array) {\n\t\t\t\tthis._renderTwoColoredFill(data.color[0], data.color[1]);\n\t\t\t\tcolor = \"url(#two-colored-symbol-\"+this._maskIndex+\")\";\n\t\t\t} else if (this.activeColor instanceof Array) {\n\t\t\t\tthis._renderTwoColoredFill(this.activeColor[0], this.activeColor[1]);\n\t\t\t\tcolor = \"url(#two-colored-symbol-\"+this._maskIndex+\")\";\n\t\t\t} else {\n\t\t\t\tcolor = data.color ? data.color : this.activeColor;\n\t\t\t}\n\n\t\t\tconst symbol = data.symbol ? data.symbol : this.symbol;\n\n\t\t\tif (symbol === \"_circle\") {\n\n\t\t\t\tthis.container.append(\"circle\")\n\t\t\t\t\t.attr(\"r\", 3)\n\t\t\t\t\t.attr(\"fill\", color)\n\t\t\t\t\t.attr(\"cx\", -tooltipWidth - this.space)\n\t\t\t\t\t.attr(\"cy\", -this.fontSize/3);\n\n\t\t\t\ttooltipWidth += 6 + this.space;\n\n\t\t\t} else {\n\n\t\t\t\tconst tooltipSymbol = this.container.append(\"text\")\n\t\t\t\t\t.text(data.symbol ? data.symbol : this.symbol)\n\t\t\t\t\t.attr(\"class\", style[\"symbol\"])\n\t\t\t\t\t.attr(\"text-anchor\",\"end\")\n\t\t\t\t\t.attr(\"font-size\", this.fontSize)\n\t\t\t\t\t.attr(\"fill\", color)\n\t\t\t\t\t.attr(\"x\", -tooltipWidth - this.space);\n\n\t\t\t\ttooltipWidth += this._calculateTextWidth(tooltipSymbol) + this.space;\n\t\t\t}\n\n\t\t}\n\t\tthis.width = tooltipWidth;\n\t}\n\n\t_calculateTextWidth(element) {\n\n\t\tconst context = this._canvas.node().getContext(\"2d\");\n\n\t\tconst style = window.getComputedStyle(element.node());\n\t\tconst fontStyle = style.getPropertyValue(\"font-style\");\n\t\tconst fontVariant = style.getPropertyValue(\"font-variant\");\n\t\tconst fontWeight = style.getPropertyValue(\"font-weight\");\n\t\tconst fontStrech = style.getPropertyValue(\"font-strech\");\n\t\tconst fontSize = style.getPropertyValue(\"font-size\");\n\t\tconst fontFamily = style.getPropertyValue(\"font-family\");\n\t\tcontext.font = `${fontStyle} ${fontVariant} ${fontWeight} ${fontStrech} ${fontSize} ${fontFamily}`;\n\n\t\tvar metrics = context.measureText(element.text());\n\t\treturn metrics.width;\n\t}\n\n\t_renderTwoColoredFill(color1, color2) {\n\n\t\tconst twoColoredFill = this.container.append(\"pattern\")\n\t\t\t.attr(\"id\", \"two-colored-symbol-\"+this._maskIndex)\n\t\t\t.attr(\"width\", \"1\")\n\t\t\t.attr(\"height\", \"1\")\n\t\t\t.attr(\"patternContentUnits\", \"objectBoundingBox\");\n\n\t\ttwoColoredFill.append('rect')\n\t\t\t.attr('fill', color1)\n\t\t\t.attr(\"width\", \"1\")\n\t\t\t.attr(\"height\", \"1\");\n\n\t\ttwoColoredFill.append('path')\n\t\t\t.attr('fill', color2)\n\t\t\t.attr('d', 'M0,0 L1,0 L1,1 Z');\n\t}\n\n\t_clearData() {\n\t\tthis.container.select(`.${style[\"tooltip-text\"]}`)\n\t\t\t.text(\"-\");\n\n\t\tthis.container.select(`.${style[\"symbol\"]}`).remove()\n\t}\n\n\tget fontSize() {\n\t\treturn this._fontSize;\n\t}\n\n\tget symbol() {\n\t\treturn this._symbol;\n\t}\n\n\tget activeColor() {\n\t\treturn this._activeColor;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget space() {\n\t\treturn this._space;\n\t}\n}\n\nexport default Tooltip;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport Tooltip from \"./Tooltip\";\n\nclass Details extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = labelFontSize + 10,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tformat = Defaults.FORMAT,\n\t\t}\n\t) {\n\t\tsuper(width, height, \"details\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._format = format;\n\n\t\tthis._tooltips;\n\t\tthis._tooltipsBackground;\n\t\tthis._label;\n\n\t\tthis._tipWrapper;\n\t\tthis._tip;\n\t\tthis._canvas;\n\t}\n\n\t_render() {\n\n\t\tthis._label = this.container.append(\"text\")\n\t\t\t.text(\"\")\n\t\t\t.attr(\"class\", style[\"label\"])\n\t\t\t.attr(\"x\", Defaults.HORIZONTAL_PADDING)\n\t\t\t.attr(\"y\", this.labelFontSize)\n\t\t\t.attr(\"font-size\", this.labelFontSize);\n\n\t\tconst gradient = this.container.append(\"linearGradient\")\n\t\t\t.attr(\"id\", \"tooltips-background\");\n\n\t\tgradient.append(\"stop\")\n\t\t\t.attr(\"offset\", \"0%\")\n\t\t\t.attr(\"stop-color\", \"white\")\n\t\t\t.attr(\"stop-opacity\", \"0\");\n\t\tgradient.append(\"stop\")\n\t\t\t.attr(\"offset\", \"100%\")\n\t\t\t.attr(\"stop-color\", \"white\")\n\t\t\t.attr(\"stop-opacity\", \"1\");\n\n\t\tif (d3.select(\".text-width-helper\").empty()) {\n\t\t\tthis._canvas = d3.select(\"body\")\n\t\t\t\t.append('canvas')\n\t\t\t\t.attr(\"class\", \"text-width-helper\")\n\t\t\t\t.style(\"display\",\"none\")\n\t\t\t\t.text(\"Helper element for computing text width\");\n\t\t} else {\n\t\t\tthis._canvas = d3.select(\".text-width-helper\");\n\t\t}\n\n\t\tif (d3.select('.' + style[\"tip\"]).empty()) {\n\t\t\tthis._tipWrapper = d3.select(\"body\").append('span')\n\t\t\t\t.attr(\"class\", style['tip-wrapper']);\n\t\t\tthis._tip = this._tipWrapper.append('span')\n\t\t\t\t.attr(\"class\", style['tip']);\n\t\t} else {\n\t\t\tthis._tipWrapper = d3.select('.' + style[\"tip-wrapper\"]);\n\t\t\tthis._tip = d3.select('.' + style[\"tip\"]);\n\t\t}\n\t}\n\n\t/**\n\t * @param {DetailsData} data\n\t */\n\t_setData(data) {\n\t\tthis._clearData();\n\n\t\tthis._label.text(data.label);\n\n\t\tthis.container.classed(style['details-disabled'], data.disabled);\n\n\t\tif (data.tooltips) {\n\t\t\tthis._createTooltips(data);\n\t\t\tthis._renderAndSetTooltipsData(data.tooltips);\n\t\t}\n\t}\n\n\t/**\n\t * @param {DetailsData} detailsData\n\t */\n\t_createTooltips(detailsData) {\n\t\tconst tooltipsData = detailsData.tooltips;\n\t\tconst tooltipsReversed = tooltipsData.slice();\n\t\ttooltipsReversed.reverse();\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = detailsData.getPrecision(\"max\");\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tthis._tooltips = tooltipsData.map((_, index) => new Tooltip({\n\t\t\tfontSize: this.tooltipFontSize,\n\t\t\tsymbol: tooltipsData.length>1 ? this.tooltipSymbol : undefined,\n\t\t\tactiveColor: this.activeColors[index % this.activeColors.length],\n\t\t\tformat: format\n\t\t}));\n\t}\n\n\t/**\n\t * @param {TooltipData[]} tooltipsData\n\t */\n\t_renderAndSetTooltipsData(tooltipsData) {\n\t\tlet previousTooltipX = this.width - Defaults.HORIZONTAL_PADDING;\n\t\tthis._tooltips.forEach((_, index) => {\n\t\t\tconst reversedIndex = this._tooltips.length - 1 - index;\n\t\t\tconst tooltipReversed = this._tooltips[reversedIndex];\n\t\t\tconst tooltipData = tooltipsData[reversedIndex];\n\n\t\t\ttooltipReversed.render(this.container.node(), previousTooltipX, this.labelFontSize, reversedIndex);\n\t\t\ttooltipReversed.setData(tooltipData);\n\n\t\t\tpreviousTooltipX -= tooltipReversed.width + 24;\n\t\t});\n\n\t\tif (this._calculateTextWidth(this._label) > previousTooltipX + 12) {\n\t\t\tthis._handleLongLabel(previousTooltipX);\n\t\t}\n\t}\n\n\t_handleLongLabel(maxWidth) {\n\n\t\t// render white background under values\n\t\tthis._tooltipsBackground = this.container\n\t\t\t.insert(\"g\", \"g.\" + style[\"tooltip\"]);\n\n\t\tconst gradientWidth = 40;\n\t\tconst xOffset = -10;\n\t\tthis._tooltipsBackground\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"x\", maxWidth - xOffset)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", this.width - maxWidth + xOffset)\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.attr(\"fill\", \"white\");\n\t\tthis._tooltipsBackground\n\t\t\t.append(\"rect\")\n\t\t\t.attr(\"x\", maxWidth - xOffset - gradientWidth)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", gradientWidth + 1) // 1 px extra looks better\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.attr(\"fill\", \"url(#tooltips-background)\");\n\n\t\t// handle label tooltips\n\t\tthis._label.on(\"mouseenter\", () => {\n\t\t\tconst right = document.documentElement.getBoundingClientRect().width\n\t\t\t\t- this._getOffset(this._label.node()).left;\n\t\t\tthis._tipWrapper\n\t\t\t\t.style(\"right\", right + \"px\")\n\t\t\t\t.style(\"top\", this._getOffset(this._label.node()).top + \"px\");\n\t\t\tthis._tip\n\t\t\t\t.text(this._label.text())\n\t\t\t\t.style(\"transition-delay\", \".5s\")\n\t\t\t\t.style(\"transform\", \"scale(1)\")\n\t\t});\n\t\tthis._label.on(\"mouseleave\", () => {\n\t\t\tthis._tip\n\t\t\t\t.style(\"transition-delay\", \"0s\")\n\t\t\t\t.style(\"transform\", \"scale(0)\");\n\t\t});\n\t}\n\n\t_getOffset(el) {\n\t\tconst rect = el.getBoundingClientRect();\n\t\treturn {\n\t\t\tleft: rect.left + window.scrollX,\n\t\t\ttop: rect.top + window.scrollY\n\t\t};\n\t}\n\n\t_calculateTextWidth(element) {\n\n\t\tconst context = this._canvas.node().getContext(\"2d\");\n\n\t\tconst style = window.getComputedStyle(element.node());\n\t\tconst fontStyle = style.getPropertyValue(\"font-style\");\n\t\tconst fontVariant = style.getPropertyValue(\"font-variant\");\n\t\tconst fontWeight = style.getPropertyValue(\"font-weight\");\n\t\tconst fontStrech = style.getPropertyValue(\"font-strech\");\n\t\tconst fontSize = style.getPropertyValue(\"font-size\");\n\t\tconst fontFamily = style.getPropertyValue(\"font-family\");\n\t\tcontext.font = `${fontStyle} ${fontVariant} ${fontWeight} ${fontStrech} ${fontSize} ${fontFamily}`;\n\n\t\tvar metrics = context.measureText(element.text());\n\t\treturn metrics.width;\n\t}\n\n\t_clearData() {\n\t\tthis.container.select(`.${style[\"label\"]}`).text(\"-\");\n\t\tthis.container.selectAll(`.${style[\"tooltip\"]}`).remove();\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\tset activeColors(activeColors) {\n\t\tthis._activeColors = activeColors;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\tset format(format) {\n\t\tthis._format = format;\n\t}\n\n\tget tooltips() {\n\t\treturn this._tooltips;\n\t}\n}\n\nexport default Details;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport * as d3 from \"d3\";\nimport style from \"../Barchart.css\";\n\nlet COLOR_PATTERN_INDEX = 0;\n\nclass Stripe extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.STRIPE_HEIGHT,\n\t\t\tbackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\ttopCornerRounded = Defaults.CORNER_ROUNDED,\n\t\t\tbottomCornerRounded = Defaults.CORNER_ROUNDED,\n\t\t\tcondensed = Defaults.DETAILS_HIDDEN\n\t\t}) {\n\t\tsuper(width, height, \"stripe\");\n\t\tthis._backgroundColor = backgroundColor;\n\t\tthis._activeColors = activeColors;\n\t\tthis._dualValue = dualValue;\n\t\tthis._minMax = minMax;\n\t\tthis._topCornerRounded = topCornerRounded;\n\t\tthis._bottomCornerRounded = bottomCornerRounded;\n\t\tthis._condensed = condensed;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget backgroundColor() {\n\t\treturn this._backgroundColor;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget topCornerRounded() {\n\t\treturn this._topCornerRounded;\n\t}\n\n\tget bottomCornerRounded() {\n\t\treturn this._bottomCornerRounded;\n\t}\n\n\tget condensed() {\n\t\treturn this._condensed;\n\t}\n\n\t_render() {\n\n\t\tconst clipPath = this.container.append(\"clipPath\")\n\t\t\t.attr(\"id\", \"rounded-corners-\"+this._maskIndex);\n\n        if (this.topCornerRounded && this.bottomCornerRounded) {\n            clipPath\n                .append(\"rect\")\n                .attr(\"width\", this.width)\n                .attr(\"height\", this.height)\n                .attr(\"rx\", Math.min(this.width, this.height)/2)\n                .attr(\"ry\", Math.min(this.width, this.height)/2);\n        } else if (!this.topCornerRounded && !this.bottomCornerRounded) {\n            clipPath\n                .append(\"rect\")\n                .attr(\"width\", this.width)\n                .attr(\"height\", this.height);\n        } else {\n            clipPath\n                .append(\"rect\")\n                .attr(\"width\", this.width - 2*this.height)\n                .attr(\"height\", this.height)\n                .attr(\"x\", this.height);\n            if (this.topCornerRounded) {\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.height)\n                    .attr(\"cy\", this.height)\n                    .attr(\"r\", this.height);\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.width - this.height)\n                    .attr(\"cy\", this.height)\n                    .attr(\"r\", this.height);\n            }\n            if (this.bottomCornerRounded) {\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.height)\n                    .attr(\"cy\", 0)\n                    .attr(\"r\", this.height);\n                clipPath\n                    .append(\"circle\")\n                    .attr(\"cx\", this.width - this.height)\n                    .attr(\"cy\", 0)\n                    .attr(\"r\", this.height);\n            }\n        }\n\n\t\tthis._renderProgress(0, this.width, this.backgroundColor, \"stripe-background\");\n\t}\n\n\t/**\n\t * @param {StripeData} data\n\t */\n\t_setData(data) {\n\n\t\tif (this.dualValue) {\n\n\t\t\tthis._renderStripe(0, this.width/2-0.5,\n\t\t\t\tdata.left.value,\n\t\t\t\tdata.left.color ? data.left.color : this.activeColors[1] ? this.activeColors[1] : this.activeColors[0],\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tthis._renderStripe(this.width/2+0.5, this.width,\n\t\t\t\tdata.right.value,\n\t\t\t\tdata.right.color ? data.right.color : this.activeColors[0],\n\t\t\t\tfalse\n\t\t\t);\n\n\t\t} else {\n\t\t\tthis._renderStripe(0, this.width, data.value, data.color ? data.color : this.activeColors[0]);\n\t\t}\n\t}\n\n\t_clearData() {\n\t\tthis.container.selectAll(style[\"progress\"]).remove();\n\t}\n\n\n\t_renderXBase(x) {\n\n\t\tthis.container.append(\"line\")\n\t\t\t.attr(\"x1\", x)\n\t\t\t.attr(\"x2\", x)\n\t\t\t.attr(\"y1\", 0)\n\t\t\t.attr(\"y2\", this.condensed ? -4 : -7)\n\t\t\t.attr(\"stroke\", \"#C9C9C9\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke-dasharray\", [1,2]);\n\n\t\tthis.container.append(\"line\")\n\t\t\t.attr(\"x1\", x)\n\t\t\t.attr(\"x2\", x)\n\t\t\t.attr(\"y1\", this.height)\n\t\t\t.attr(\"y2\", this.height + (this.condensed ? 4 : 7))\n\t\t\t.attr(\"stroke\", \"#C9C9C9\")\n\t\t\t.attr(\"stroke-width\", 1)\n\t\t\t.attr(\"stroke-dasharray\", [1,2]);\n\t}\n\n\t_renderStripe(x1, x2, value, color, alignRight = false) {\n\n\t\tconst axis = d3.scaleLinear()\n\t\t\t.range([x1, x2]);\n\n\t\tif (alignRight) {\n\t\t\taxis.domain([this.minMax.max, this.minMax.min]);\n\t\t} else {\n\t\t\taxis.domain([this.minMax.min, this.minMax.max]);\n\t\t}\n\n\t\tconst xBase = axis(0);\n\n\t\tif (this.minMax.min < 0 && this.minMax.max > 0) {\n\t\t\tthis._renderXBase(xBase);\n\t\t}\n\n\t\tif (alignRight === value < 0) {\n\n\t\t\tthis._renderProgress(xBase, axis(value), color);\n\n\t\t} else {\n\n\t\t\tthis._renderProgress(axis(value), xBase, color);\n\n\t\t}\n\n\t}\n\n\t_renderProgress(x1, x2, color, className = \"progress\") {\n\n\t\tif (color instanceof Array) {\n\t\t\tthis._renderTwoColoredFill(color[0], color[1]);\n\t\t}\n\n\t\tthis.container.append(\"rect\")\n\t\t\t.attr(\"fill\", color instanceof Array ? \"url(#two-colored-\"+this._maskIndex+\"-\"+COLOR_PATTERN_INDEX+\")\" : color)\n\t\t\t.attr(\"class\", style[className])\n\t\t\t.attr(\"x\", x1)\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", x2-x1)\n\t\t\t.attr(\"height\", this.height)\n\t\t\t.attr(\"transform\", \"translate(\" + 0 + \", \" + 0 + \")\")\n\t\t\t.attr(\"clip-path\", \"url(#rounded-corners-\"+this._maskIndex+\")\");\n\n\t}\n\n\t_renderTwoColoredFill(color1, color2) {\n\n\t\tCOLOR_PATTERN_INDEX++;\n\n\t\tconst twoColoredFill = this.container.append(\"pattern\")\n\t\t\t.attr(\"id\", \"two-colored-\"+this._maskIndex+\"-\"+COLOR_PATTERN_INDEX)\n\t\t\t.attr(\"width\", \"20\")\n\t\t\t.attr(\"height\", \"20\")\n\t\t\t.attr(\"patternUnits\", \"userSpaceOnUse\");\n\n\t\ttwoColoredFill.append('rect')\n\t\t\t.attr('fill', color1)\n\t\t\t.attr(\"width\", \"20\")\n\t\t\t.attr(\"height\", \"20\");\n\n\t\ttwoColoredFill.append('path')\n\t\t\t.attr('fill', color2)\n\t\t\t.attr('d', 'M20,0 L10,0 L20,10 Z');\n\t\ttwoColoredFill.append('path')\n\t\t\t.attr('fill', color2)\n\t\t\t.attr('d', 'M0,0 L20,20 L10,20 L0,10 Z');\n\t}\n\n\n}\n\nexport default Stripe;\n","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport Details from \"./Details\";\nimport Stripe from \"./Stripe\";\nimport style from \"../Barchart.css\";\nimport DetailsData from \"../data/DetailsData\";\n\nclass Bar extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.BAR_HEIGHT,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\tdetailsHidden = Defaults.DETAILS_HIDDEN,\n\t\t\tdetailsHeight = labelFontSize + 10,\n\t\t\tenableHover = Defaults.ENABLE_BAR_HOVER,\n\t\t\tenableToggle = Defaults.ENABLE_BAR_TOGGLE,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tdisabled = Defaults.BAR_DISABLED,\n\t\t\tformat = Defaults.FORMAT,\n\t\t\tstripeBackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR\n\t\t}\n\t) {\n\t\tsuper(width, height, \"bar\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._minMax = minMax;\n\t\tthis._detailsHidden = detailsHidden;\n\t\tthis._detailsHeight = detailsHeight;\n\t\tthis._enableHover = enableHover;\n\t\tthis._enableToggle = enableToggle;\n\t\tthis._dualValue = dualValue;\n\t\tthis._disabled = disabled;\n\t\tthis._format = format;\n\t\tthis._stripeBackgroundColor = stripeBackgroundColor;\n\n\t\tthis._details;\n\t\tthis._stripes;\n\n\t\tthis._observable\n\t\t\t.add(\"disabled\");\n\t}\n\n\t_render() {\n\t\tif (!this.detailsHidden) {\n\t\t\tthis._createDetails();\n\t\t\tthis._renderDetails();\n\t\t}\n\n\t\tthis.container.classed(style['hover-enabled'], this.enableHover);\n\n\t\tif (this.enableToggle) {\n\t\t\tthis._doEnableToggle();\n\t\t}\n\t}\n\n\t/**\n\t * @param {BarData} data\n\t */\n\t_setData(data) {\n\t\tthis._disabled = data.disabled;\n\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\n\t\tthis.container.classed(style[\"bar-highlighted\"], data.highlighted);\n\n\t\tthis._setDetailsData(data.details);\n\n\t\tthis._createStripes(data);\n\t\tthis._renderStripes();\n\t\tthis._setStripesData(data);\n\t}\n\n\t_clearData() {\n\t\tif (!this.detailsHidden) {\n\t\t\tthis._details.clearData();\n\t\t}\n\t}\n\n\t_createDetails() {\n\t\tthis._details = new Details({\n\t\t\twidth: this.width,\n\t\t\theight: this.detailsHeight,\n\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\tactiveColors: this.activeColors,\n\t\t\tformat: this.format\n\t\t});\n\t}\n\n\t_renderDetails() {\n\t\tthis._details.render(this.container.node(), 0, 0);\n\t}\n\n\t_setDetailsData(detailsData) {\n\t\tif (this.details) {\n\t\t\tconst detailsDataDefault = DetailsData.copyAs(detailsData);\n\t\t\tthis.details.setData(detailsDataDefault);\n\t\t}\n\t}\n\n\t_createStripes(data) {\n\t\tconst minMax = data.calculateMinMax(this.minMax);\n\t\tthis._stripes = data.stripes.map((stripe, index) => {\n\t\t\tlet colors;\n\t\t\tif (data.stripes.length > 1) {\n\t\t\t\tcolors = [this.activeColors[index % this.activeColors.length]]\n\t\t\t} else {\n\t\t\t\tcolors = this.activeColors.slice();\n\t\t\t}\n\n\t\t\treturn new Stripe({\n\t\t\t\twidth: this.width,\n\t\t\t\tactiveColors: colors,\n\t\t\t\tdualValue: this.dualValue,\n\t\t\t\tminMax: minMax,\n\t\t\t\tbackgroundColor: this.stripeBackgroundColor,\n\t\t\t\ttopCornerRounded: index === 0,\n\t\t\t\tbottomCornerRounded: index === data.stripes.length-1,\n\t\t\t\tcondensed: this.detailsHidden\n\t\t\t})\n\t\t});\n\t}\n\n\t_renderStripes() {\n\t\tconst detailsHeight = this.detailsHidden ? 0 : this.detailsHeight;\n\t\tthis.stripes.forEach((stripe, index) => {\n\t\t\tstripe.render(this.container.node(), 0, detailsHeight + 5 * index, index);\n\t\t});\n\t}\n\n\t_setStripesData(data) {\n\t\tdata.stripes.forEach((stripeData, index) => this.stripes[index].setData(stripeData));\n\t}\n\n\t_doEnableToggle() {\n\t\tthis.container.attr(\"cursor\", \"pointer\");\n\t\tthis.on(\"click\", (index) => {\n\t\t\tthis._disabled = !this._disabled;\n\t\t\tthis.container.classed(style[\"bar-disabled\"], this.disabled);\n\t\t\tthis._observable.fire(\"disabled\", index, this._disabled);\n\t\t});\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget detailsHidden() {\n\t\treturn this._detailsHidden;\n\t}\n\n\tget detailsHeight() {\n\t\treturn this._detailsHeight;\n\t}\n\n\tget enableToggle() {\n\t\treturn this._enableToggle;\n\t}\n\n\tget enableHover() {\n\t\treturn this._enableHover;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget disabled() {\n\t\treturn this._disabled;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget stripeBackgroundColor() {\n\t\treturn this._stripeBackgroundColor;\n\t}\n\n\n\tget stripes() {\n\t\treturn this._stripes;\n\t}\n\n\tget details() {\n\t\treturn this._details;\n\t}\n\n}\n\nexport default Bar;\n","\nimport Doughnut from \"./doughnut/Doughnut\";\nimport Histogram from \"./histogram/Histogram\";\nimport Line from \"./line/Line\";\nimport Barchart from \"./barchart/components/Barchart\";\n\nexport default {\n\tBarchart:Barchart,\n\n    Doughnut:Doughnut,\n    Histogram:Histogram,\n    Line:Line\n}","import * as Defaults from \"../defaults/BarchartDefaults\";\nimport Component from \"./Component\";\nimport Bar from \"./Bar\";\nimport Details from \"./Details\";\nimport style from \"../Barchart.css\";\nimport * as d3 from \"d3\";\nimport BarData from \"../data/BarData\";\nimport TooltipData from \"../data/TooltipData\";\nimport DetailsData from \"../data/DetailsData\";\nimport BarchartData from \"../data/BarchartData\";\n\nclass Barchart extends Component {\n\n\tconstructor(\n\t\t{\n\t\t\twidth = Defaults.WIDTH,\n\t\t\theight = Defaults.HEIGHT,\n\t\t\tlabelFontSize = Defaults.LABEL_FONT_SIZE,\n\t\t\ttooltipFontSize = Defaults.TOOLTIP_FONT_SIZE,\n\t\t\ttooltipSymbol = Defaults.TOOLTIP_SYMBOL,\n\t\t\tactiveColors = Defaults.ACTIVE_COLORS,\n\t\t\tminMax = Defaults.MINMAX,\n\t\t\tdetailsVisible = Defaults.DETAILS_HIDDEN,\n\t\t\tdetailsHeight = labelFontSize + 10,\n\t\t\tdualValue = Defaults.DUAL_VALUE,\n\t\t\tbarHeight = Defaults.BAR_HEIGHT,\n\t\t\tenableBarHover = Defaults.ENABLE_BAR_HOVER,\n\t\t\tenableBarToggle = Defaults.ENABLE_BAR_TOGGLE,\n\t\t\tformat = Defaults.FORMAT,\n\t\t\tstripeBackgroundColor = Defaults.STRIPE_BACKGROUND_COLOR\n\t\t}\n\t) {\n\t\tsuper(width, height, \"barchart\");\n\t\tthis._labelFontSize = labelFontSize;\n\t\tthis._tooltipFontSize = tooltipFontSize;\n\t\tthis._tooltipSymbol = tooltipSymbol;\n\t\tthis._activeColors = activeColors;\n\t\tthis._minMax = minMax;\n\t\tthis._detailsVisible = detailsVisible;\n\t\tthis._detailsHeight = detailsHeight;\n\t\tthis._dualValue = dualValue;\n\t\tthis._barHeight = barHeight;\n\t\tthis._enableBarHover = enableBarHover;\n\t\tthis._enableBarToggle = enableBarToggle;\n\t\tthis._format = format;\n\t\tthis._stripeBackgroundColor = stripeBackgroundColor;\n\n\t\tthis._details;\n\t\tthis._bars;\n\n\t\tthis._observable\n\t\t\t.add(\"barEnter\")\n\t\t\t.add(\"barLeave\")\n\t\t\t.add(\"barClick\")\n\t\t\t.add(\"barDisabled\")\n\t\t\t.add(\"barsEnter\")\n\t\t\t.add(\"barsLeave\");\n\n\t}\n\n\tisBarDisabled(index) {\n\t\treturn this.bars[index].disabled;\n\t}\n\n\tupdateData(updateFunction) {\n\t\tthis.setData(updateFunction(this.data));\n\t}\n\n\tupdateDetailsData(updateFunction) {\n\t\tthis.setDetailsData(updateFunction(this.details.data));\n\t}\n\n\tupdateBarData(index, updateFunction) {\n\t\tthis.setBarData(index, updateFunction(this.bars[index].data));\n\t}\n\n\tsetDetailsData(detailsData) {\n\t\tconst detailsDataDefault = DetailsData.copyAs(detailsData);\n\t\tthis.details.setData(detailsDataDefault);\n\t}\n\n\tsetBarData(index, barData) {\n\t\tconst barDataDefault = BarData.copyAs(barData);\n\n\t\tthis._setDefaultBarDetails(barData);\n\n\t\tthis.bars[index].setData(barDataDefault);\n\t}\n\n\t_setDefaultBarDetails(barData) {\n\n\t\tif (!barData.details) {\n\t\t\tbarData.details = new DetailsData({\n\t\t\t\tlabel: this.data.details.label\n\t\t\t});\n\t\t}\n\n\t\tif (typeof barData.details.tooltips === 'undefined') {\n\n\t\t\tbarData.stripes.forEach((stripeData, index) => {\n\n\t\t\t\tlet colors;\n\t\t\t\tif (barData.stripes.length > 1) {\n\t\t\t\t\tcolors = [this.activeColors[index % this.activeColors.length]]\n\t\t\t\t} else {\n\t\t\t\t\tcolors = this.activeColors.slice();\n\t\t\t\t}\n\n\t\t\t\tif (this.dualValue) {\n\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\n\t\t\t\t\t\ttext: stripeData.left.value,\n\t\t\t\t\t\tsymbol: this.tooltipSymbol,\n\t\t\t\t\t\tcolor: stripeData.left.color ? stripeData.left.color : (colors[1] ? colors[1] : colors[0])\n\t\t\t\t\t}));\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\n\t\t\t\t\t\ttext: stripeData.right.value,\n\t\t\t\t\t\tsymbol: this.tooltipSymbol,\n\t\t\t\t\t\tcolor: stripeData.right.color ? stripeData.right.color : colors[0]\n\t\t\t\t\t}));\n\t\t\t\t} else {\n\n\t\t\t\t\tbarData.details.addTooltip(new TooltipData({\n\t\t\t\t\t\ttext: stripeData.value,\n\t\t\t\t\t\tsymbol: barData.stripes.length > 1 ? this.tooltipSymbol : undefined,\n\t\t\t\t\t\tcolor: stripeData.color ? stripeData.color : colors[0]\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t});\n\t\t}\n\n\t}\n\n\t_renderContainer(selector, x = 0, y = 0){\n\n\t\tthis._svgWrapper = d3.select(selector).append(\"svg\")\n\t\t\t.attr(\"class\", style[this.className])\n\t\t\t.attr(\"width\", this.width)\n\t\t\t.attr(\"height\", this.height);\n\n\t\tthis._svgWrapper.style({\n\t\t\t'position': 'relative',\n\t\t\t'left': x,\n\t\t\t'top': y\n\t\t});\n\n\t\treturn this._svgWrapper.append(\"g\")\n\t}\n\n\t_render() {\n\t\tif (this.detailsVisible) {\n\t\t\tthis._createDetails();\n\t\t\tthis._renderDetails();\n\t\t}\n\t}\n\n\t/**\n\t * @param {BarchartData} data\n\t */\n\t_setData(data) {\n\n\t\tdata.bars.forEach((barData) => this._setDefaultBarDetails(barData));\n\n\t\tif (this.detailsVisible) {\n\t\t\tthis._adjustDetails(data);\n\t\t\tthis.setDetailsData(data.details);\n\t\t}\n\n\t\tthis._adjustHeight(data);\n\n\t\tthis._createBars(data);\n\n\t\tthis._renderBars();\n\n\t\tdata.bars.forEach((barData, index) => this.setBarData(index, barData));\n\t}\n\n\t_clearData() {\n\t\tif (this.detailsVisible) {\n\t\t\tthis._details.clearData();\n\t\t}\n\t\tthis._container.selectAll(`.${style[\"bar\"]}`).remove();\n\t}\n\n\t_adjustDetails(data) {\n\t\tif (!this.details.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = data.getPrecision(\"max\");\n\t\t\tthis.details.format = spec.toString();\n\t\t}\n\n\t\tif (this.dualValue && data.details.tooltips && data.bars[0].stripes.length === 1) {\n\t\t\tthis.details.activeColors = this.details.activeColors.slice().reverse();\n\t\t}\n\t}\n\n\t_createDetails() {\n\n\t\tthis._details = new Details({\n\t\t\twidth: this.width,\n\t\t\theight: this.detailsHeight,\n\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\tactiveColors: this.activeColors,\n\t\t\tformat: this.format\n\t\t});\n\t}\n\n\t_renderDetails() {\n\t\tthis._details.render(this._container.node(), 0, 0);\n\t}\n\n\t_createBars(data) {\n\n\t\tlet format = this.format;\n\t\tif (!this.format.includes('.')) {\n\t\t\tconst spec = d3.formatSpecifier(this.format);\n\t\t\tspec.precision = data.getPrecision(\"max\");\n\t\t\tformat = spec.toString();\n\t\t}\n\n\t\tconst minMax = data.calculateMinMax(this.minMax);\n\n\t\tthis._bars = data.bars.map(() => new Bar({\n\t\t\twidth: this.width,\n\t\t\theight: this.barHeight,\n\t\t\tlabelFontSize: this.labelFontSize,\n\t\t\ttooltipFontSize: this.tooltipFontSize,\n\t\t\ttooltipSymbol: this.tooltipSymbol,\n\t\t\tactiveColors: this.activeColors,\n\t\t\tdetailsHidden: this.detailsVisible,\n\t\t\tdetailsHeight: this.detailsHeight,\n\t\t\tdualValue: this.dualValue,\n\t\t\tenableToggle: this.enableBarToggle,\n\t\t\tenableHover: this.enableBarHover,\n\t\t\tminMax: minMax,\n\t\t\tformat: format,\n\t\t\tstripeBackgroundColor: this.stripeBackgroundColor\n\t\t}));\n\t}\n\n\t_renderBars() {\n\n\t\tconst barsContainer = this._container.append(\"g\")\n\t\t\t.on(\"mouseenter\", () => {\n\t\t\t\tthis._observable.fire(\"barsEnter\");\n\t\t\t})\n\t\t\t.on(\"mouseleave\", () => {\n\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\tthis.details.setData(this.data.details);\n\t\t\t\t}\n\t\t\t\tthis._observable.fire(\"barsLeave\");\n\t\t\t});\n\n\t\tthis.bars.forEach((bar, index) => {\n\n\t\t\tconst topDetailsWidth = (this.detailsVisible ? this.detailsHeight : 0);\n\n\t\t\tbar.render(barsContainer.node(), 0, topDetailsWidth + this.barHeight*index, index)\n\t\t\t\t.on(\"click\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barClick\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"enter\", (index) => {\n\t\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\t\tthis.details.setData(this.bars[index].data.details);\n\t\t\t\t\t}\n\t\t\t\t\tthis._observable.fire(\"barEnter\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"leave\", (index) => {\n\t\t\t\t\tthis._observable.fire(\"barLeave\", index);\n\t\t\t\t})\n\t\t\t\t.on(\"disabled\", (index, disabled) => {\n\t\t\t\t\tif (this.detailsVisible && this.enableBarHover) {\n\t\t\t\t\t\tconst detailsData = this.details.data;\n\t\t\t\t\t\tdetailsData.disabled = disabled;\n\t\t\t\t\t\tthis.details.setData(detailsData);\n\t\t\t\t\t}\n\t\t\t\t\tthis._observable.fire(\"barDisabled\", index, disabled);\n\t\t\t\t});\n\t\t});\n\n\t}\n\n\t_adjustHeight(data) {\n\t\tlet height = data.bars.length * this.barHeight;\n\t\tif (this.detailsVisible) {\n\t\t\theight += this.detailsHeight;\n\t\t}\n\t\tthis.height = height;\n\t\tthis._svgWrapper.attr(\"height\", height);\n\t}\n\n\tget labelFontSize() {\n\t\treturn this._labelFontSize;\n\t}\n\n\tget tooltipFontSize() {\n\t\treturn this._tooltipFontSize;\n\t}\n\n\tget tooltipSymbol() {\n\t\treturn this._tooltipSymbol;\n\t}\n\n\tget activeColors() {\n\t\treturn this._activeColors;\n\t}\n\n\tget minMax() {\n\t\treturn this._minMax;\n\t}\n\n\tget detailsVisible() {\n\t\treturn this._detailsVisible;\n\t}\n\n\tget detailsHeight() {\n\t\treturn this._detailsHeight;\n\t}\n\n\tget dualValue() {\n\t\treturn this._dualValue;\n\t}\n\n\tget barHeight() {\n\t\treturn this._barHeight;\n\t}\n\n\tget enableBarHover() {\n\t\treturn this._enableBarHover;\n\t}\n\n\tget enableBarToggle() {\n\t\treturn this._enableBarToggle;\n\t}\n\n\tget format() {\n\t\treturn this._format;\n\t}\n\n\tget stripeBackgroundColor() {\n\t\treturn this._stripeBackgroundColor;\n\t}\n\n\n\tget details() {\n\t\treturn this._details;\n\t}\n\n\tget bars() {\n\t\treturn this._bars;\n\t}\n}\n\nexport default Barchart;\n"],"names":["Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","DoughnutRenderer","options","_options","_containerEl","_groupEl","_svgEl","_rendered","_observable","selector","ct","d3","width","node","offsetWidth","height","offsetHeight","value","_value","angle","_angle","tau","innerRadius","_innerRadius","outerRadius","_outerRadius","arc","_arc","startAngle","append","attr","style","g","_inactiveArc","datum","endAngle","inactiveColor","_activeArc","activeColor","_backgroundArc","backgroundColor","_hoverEl","on","fire","eventName","off","opts","activeArcTransition","transition","duration","animationDuration","attrTween","_arcTween","_this2","interpolateOuterRadius","interpolateInnerRadius","d","interpolateAngle","t","_this3","removeChild","destroy","getOptionValue","optionValue","defaultOptionValue","Doughnut","renderTo","_doughnutRenderer","render","isRendered","update","MARGIN","DEFAULT_COLORS","HistogramData","data","_histogramData","_loadHistogramData","_minMax","_calculateMinMax","histogramData","max","min","position","minMax","getMinMax","getValueRatio","valueRatio","constrainedValue","Math","round","numOfBarsPerBucket","forEach","bucket","step","volume","Array","isArray","gradientIndex","HistogramHandle","groupEl","_handleEl","_handleLineEl","_handleCircleEl","_handleMaskEl","_handleMaskGradientEl","_handleLabelEl","_isOver","_index","_initialValue","Number","_position","valueToPosition","_initialPosition","_labelSizeCache","_elements","_renderHandle","element","remove","_createHandleElement","_createHandleLineElement","_createHandleCircleElement","_createDragMaskElement","_createMaskGradientElement","_createDragLabelElement","_handleHoverState","_handleDrag","parseInt","Defaults","_updateLabelPosition","getBBox","offset","text","setLabelOffset","setHoverState","unsetHoverState","classed","xpos","x","positionToValue","_getLabelText","format","call","_onDrag","bind","_onStartDrag","_onEndDrag","label","content","innerHTML","getComputedTextLength","maskPadding","fontSize","textLength","_getComputedLabelTextLength","maskWidth","xPosition","selectAll","color","enter","getHandlePositionOffsets","handle1","handle2","label1Box","getLabelBox","label2Box","conflictDiff","posDiff1","posDiff2","xMax","HistogramSelectionRenderer","_histogramSelection","_overSelectionIndex","_handles","_draggingHandle","_prevSelection","_animating","_destroyHandles","_selectionBars","handle","handleIndex","handleValue","promptHandler","then","promptResult","startSelectionSnapshot","JSON","stringify","_this","getOutputSelection","parseFloat","points","getSelectionPoints","positions","sort","p1","p2","map","point","_updateSelectionPositions","_updateSelection","_renderHandles","selection","selectionIndex","disabled","enabled","target","allowsToggle","_toggleSelection","_onHandleClick","_onClick","histogramSelection","_animate","animate","getSelection","_prevHistogramData","_clear","_renderSelection","_handleClick","handles","slice","h1","h2","getXPosition","labelOffsets","PositionUtils","nodes","_updateSelectionControlsHoverState","selectionbar","_onSelectionMouseOut","_onSelectionMouseOver","p","from","to","pos","hidden","hide","_onHandleDrag","disable","enable","barX","s","isLast","colors","volumeIndex","selectionColor","inactiveBarColor","overSelectionColor","barSelectionIndex","_getBarSelectionIndex","_getSelectionColor","isOver","isDisabled","overSelectionOpacity","inactiveBarOpacity","opacity","selection1","selection2","data1","data2","onTransition","onComplete","s1","s2","_this4","frames","transitions","abs","si","hi","bars","bar","fillBars","_this5","_getBarColor","_getBarOpacity","prevSelection","prevData","setHandleXPosition","setLabelPosition","_onSelectionTransition","showLabel","_this6","hideLabel","HistogramRenderer","_historyData","_xAxis","range","_yAxis","_prevData","_selectionRenderer","_labelsVisible","margin","svg","left","right","top","bottom","histogram","inactive","active","domain","getData","_renderXAxis","_renderDataBars","refresh","showSelectionLabels","hideSelectionLabels","y","v","floor","ceil","HistogramSelection","_selection","getSelectionWithPositions","Object","assign","SelectionTypes","MultipleHistogramSelection","MULTI","result","DefaultHistogramSelectionImpl","start","MultipleHistogramSelectionImpl","FilterHistogramSelectionImpl","FILTER","InvertedFilterHistogramSelectionImpl","_getInvertedSelection","invertedSelection","INVERTED_FILTER","HistogramSelectionFactory","selectionType","Histogram","enableSelectionToggle","_histogramRenderer","_selectionFactory","getHistogramSelection","String","setSelection","LINE_COLORS","FILL_COLORS","LineData","series","_series","concat","dataMap","getAllData","item","values","tooltips","tooltip","numParts","toString","split","TooltipRenderer","_lineData","_onMouseOut","xPos","bottomLabelWidth","filter","icon","lineColors","lineColor","join","_tooltipGroup","_tooltipBottomLabel","textAnchor","_getTextAnchor","bottomMaskWidth","bottomMaskPadding","_tooltipBottomLabelMask","tooltipHtml","_getTooltipHTML","_tooltipTopLabel","labelLeft","_getLabelLeft","some","_tooltipLineCircle","circle","labelWidth","parentNode","contains","relatedTarget","_hideTooltip","hoverWidth","getMergedData","getSeries","_hoverAreas","_onHoverAreaOver","lineWidth","lineOpacity","_tooltipAxisCircle","insert","_tooltipRendered","gradientID","lineData","_renderTooltip","LineRenderer","_tooltipRenderer","line","verticalSpacing","allData","_renderZeroLine","seriesIndex","_renderDataLines","axisColor","_showZeroLine","zeroLineColor","minHeight","areaZero","fillColor","fillColors","area","y0","y1","_getGroupedData","fillOpacity","dotSize","path","group","Line","_lineRenderer","setData","getPrecision","TOOLTIP_SYMBOL","ACTIVE_COLORS","STRIPE_BACKGROUND_COLOR","BarchartData","_","detailsData","barsData","_detailsData","_barsData","barData","calculateMinMax","containsNegativeVal","containsPositiveVal","sum","precision","barchartData","details","DetailsData","_label","_disabled","_tooltips","tooltipData","TooltipData","symbol","_symbol","_color","_text","isNumber","str","includes","isNaN","isFinite","BarData","stripesData","highlighted","_highlighted","_stripesData","stripeData","stripes","stripe","absMax","StripeData","leftValue","leftColor","rightValue","rightColor","_right","_left","dual","leftData","rightData","JsonDataConverter","barchartJsonData","tooltipsData","tooltipJsonData","barJsonData","stripeJsonData","MASK_INDEX","Component","className","alignRight","alignBottom","_width","_height","_container","_maskIndex","_className","_alignRight","_alignBottom","_data","_renderContainer","clickableArea","_render","clearData","constructor","name","convert","_setData","_clearData","select","Tooltip","space","_fontSize","_activeColor","_format","_space","_canvas","container","empty","spec","tooltipText","tooltipWidth","_calculateTextWidth","_renderTwoColoredFill","tooltipSymbol","context","getContext","window","getComputedStyle","fontStyle","getPropertyValue","fontVariant","fontWeight","fontStrech","fontFamily","font","measureText","color1","color2","twoColoredFill","Details","labelFontSize","tooltipFontSize","activeColors","_labelFontSize","_tooltipFontSize","_tooltipSymbol","_activeColors","_tooltipsBackground","_tipWrapper","_tip","gradient","_createTooltips","_renderAndSetTooltipsData","reverse","undefined","previousTooltipX","reversedIndex","tooltipReversed","_handleLongLabel","maxWidth","gradientWidth","document","documentElement","getBoundingClientRect","_getOffset","el","rect","scrollX","scrollY","COLOR_PATTERN_INDEX","Stripe","dualValue","topCornerRounded","bottomCornerRounded","condensed","_backgroundColor","_dualValue","_topCornerRounded","_bottomCornerRounded","_condensed","clipPath","_renderProgress","_renderStripe","x1","x2","axis","xBase","_renderXBase","Bar","detailsHidden","detailsHeight","enableHover","enableToggle","stripeBackgroundColor","_detailsHidden","_detailsHeight","_enableHover","_enableToggle","_stripeBackgroundColor","_details","_stripes","add","_createDetails","_renderDetails","_doEnableToggle","_setDetailsData","_createStripes","_renderStripes","_setStripesData","detailsDataDefault","copyAs","detailsVisible","barHeight","enableBarHover","enableBarToggle","_detailsVisible","_barHeight","_enableBarHover","_enableBarToggle","_bars","updateFunction","setDetailsData","setBarData","barDataDefault","_setDefaultBarDetails","addTooltip","_svgWrapper","_adjustDetails","_adjustHeight","_createBars","_renderBars","barsContainer","topDetailsWidth"],"mappings":"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"}