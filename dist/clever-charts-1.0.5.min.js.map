{"version":3,"file":"clever-charts-1.0.5.min.js","sources":["../src/bar/Bar.js","../src/doughnut/Doughnut.js","../src/histogram/utils/PositionUtils.js","../src/histogram/Histogram.js","../src/line/Line.js","../src/utils/Observable.js","../src/bar/BarDefaults.js","../src/bar/BarData.js","../src/bar/BarRenderer.js","../src/doughnut/DoughnutDefaults.js","../src/doughnut/DoughnutRenderer.js","../src/histogram/HistogramDefaults.js","../src/histogram/HistogramData.js","../src/histogram/selection/HistogramHandle.js","../src/histogram/selection/HistogramSelectionRenderer.js","../src/histogram/HistogramRenderer.js","../src/histogram/selection/HistogramSelection.js","../src/histogram/selection/MultipleHistogramSelectionImpl.js","../src/histogram/selection/DefaultHistogramSelectionImpl.js","../src/histogram/selection/FilterHistogramSelectionImpl.js","../src/histogram/selection/InvertedFilterHistogramSelectionImpl.js","../src/histogram/selection/HistogramSelectionFactory.js","../src/line/LineDefaults.js","../src/line/LineData.js","../src/line/TooltipRenderer.js","../src/line/LineRenderer.js","../src/CleverCharts.js"],"sourcesContent":["import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./BarDefaults\";\nimport BarData from \"./BarData\";\nimport BarRenderer from \"./BarRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main Bar class\n * @param {Object} options\n */\nclass Bar {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.barHeight = getOptionValue(options.barHeight, Defaults.BAR_HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Label font size \n\t\t */\n\t\tthis._options.labelFontSize = getOptionValue(options.labelFontSize, Defaults.LABEL_FONT_SIZE);\n\n\t\t/**\n\t\t * @public\n\t\t * Label font size \n\t\t */\n\t\tthis._options.valueFontSize = getOptionValue(options.valueFontSize, Defaults.VALUE_FONT_SIZE);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar color \n\t\t */\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Over bar color \n\t\t */\n\t\tthis._options.overBarColor = getOptionValue(options.overBarColor, Defaults.OVER_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.activeBarColor = getOptionValue(options.activeBarColor, Defaults.ACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Enables bar toggle\n\t\t */\n\t\tthis._options.enableBarToggle = getOptionValue(options.enableBarToggle, Defaults.ENABLE_BAR_TOGGLE);\n\n\t\t/**\n\t\t * @public\n\t\t * Enables bar hover \n\t\t */\n\t\tthis._options.enableBarHover = getOptionValue(options.enableBarHover, Defaults.ENABLE_BAR_HOVER);\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a bar\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out of bar\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barOut\",\t\t\t\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when bar is clicked\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barClick\",\t\t\t\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when bar is disabled\n\t\t\t * @param {int} barIndex\n\t\t\t * @param {boolean} disabled\n\t\t\t */\n\t\t\t\"barDisabled\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * BarRenderer\n\t\t */\n\t\tthis._barRenderer = new BarRenderer(this._options);\n\n\t\tthis._barRenderer.on(\"barOver\", barIndex=>{\n\t\t\tthis._observable.fire(\"barOver\", barIndex);\n\t\t})\n\n\t\tthis._barRenderer.on(\"barOut\", barIndex=>{\n\t\t\tthis._observable.fire(\"barOut\", barIndex);\n\t\t})\n\n\t\tthis._barRenderer.on(\"barClick\", (barIndex)=>{\n\t\t\tthis._observable.fire(\"barClick\", barIndex);\n\t\t})\n\n\t\tthis._barRenderer.on(\"barDisabled\", (barIndex, disabled)=>{\n\t\t\tthis._observable.fire(\"barDisabled\", barIndex, disabled);\n\t\t})\t\t\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Bar} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Bar} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Bar} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._barRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Bar} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._barRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Array} data\n\t * @returns {Bar} returns this widget instance \n\t */\n\tsetData(data) {\n\t\tif (!this._barRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar barData = this._barData = new BarData(data, this._options);\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + this._barData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._barRenderer.setData(barData);\n\n\t\treturn this;\n\t}\n}\n\nexport default Bar;\n","import Observable from \"../utils/Observable\";\nimport * as Defaults from \"./DoughnutDefaults\";\nimport DoughnutRenderer from \"./DoughnutRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main doughnut class\n * @param {Object} options\n */\nclass Doughnut {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.outerRadius = getOptionValue(options.outerRadius, Defaults.OUTER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.innerRadius = getOptionValue(options.innerRadius, Defaults.INNER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Active color\n\t\t */\n\t\tthis._options.activeColor = getOptionValue(options.activeColor, Defaults.ACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.inactiveColor = getOptionValue(options.inactiveColor, Defaults.INACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.backgroundColor = getOptionValue(options.backgroundColor, Defaults.BACKGROUND_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Value\n\t\t */\n\t\tthis._options.value = getOptionValue(options.value, Defaults.VALUE);\n\n\t\t/**\n\t\t * @public\n\t\t * Animation duration\n\t\t */\n\t\tthis._options.animationDuration = getOptionValue(options.animationDuration, Defaults.ANIMATION_DURATION);\n\n\t\t/**\n\t\t * @public\n\t\t * Render to container\n\t\t */\n\t\tthis._options.renderTo = getOptionValue(options.renderTo, null);\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over\n\t\t\t */\n\t\t\t\"mouseOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out\n\t\t\t */\n\t\t\t\"mouseOut\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * DoughnutRenderer\n\t\t */\n\t\tthis._doughnutRenderer = new DoughnutRenderer(this._options);\n\n\t\tthis._doughnutRenderer.on(\"mouseOver\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOver\")\n\t\t});\n\n\t\tthis._doughnutRenderer.on(\"mouseOut\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOut\")\n\t\t});\n\n\t\tif (options.renderTo){\n\t\t\tthis.render(options.renderTo);\n\t\t}\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._doughnutRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Doughnut} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._doughnutRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Object} options\n\t * @returns {Doughnut} returns this widget instance \n\t */\n\tupdate(options) {\n\t\tif (!this._doughnutRenderer.isRendered()) {\n\t\t\tthrow \"Can't call update() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tthis._doughnutRenderer.update(options);\n\n\t\treturn this;\n\t}\n}\n\nexport default Doughnut;\n","/**\n * @public\n * Returns handle positions offsets so that labels don't conflict visually\n * @param {HistogramData} histogramData \n * @returns {Array} label offsets\n */\nexport function getHandlePositionOffsets(handle1, handle2, maskPadding, width){\n    var label1Box = handle1.getLabelBox();\n    var label2Box = handle2.getLabelBox();\n\n    // calculate conflict number\n    var conflictDiff = label2Box.x - (label1Box.x + label1Box.width)-maskPadding;\n    // and handle if there is not enough space\n    if (conflictDiff<0){\n        // pos1 diff to the left\n        var posDiff1 = conflictDiff/2;\n        // pos2 diff to to right\n        var posDiff2 = conflictDiff/2;\n\n        // position left to 0 if position would be lower than 0\n        var xMin = label1Box.x+posDiff1;\n        if (xMin < 0){\n            posDiff1 = label1Box.x; \n            // also shift right label so we keep it visible\n            posDiff2 = posDiff2*2\n        }\n\n        // same with max value\n        var xMax = label2Box.x+label2Box.width-posDiff2;\n        if (xMax > width){\n            posDiff2 += xMax-width; \n            posDiff1 = posDiff1*2\n        }\n        return [posDiff1, -posDiff2];                  \n    }\n\n    return [0,0];\n}","import * as d3 from \"d3\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as Defaults from \"./HistogramDefaults\";\r\nimport HistogramData from \"./HistogramData\";\r\nimport HistogramRenderer from \"./HistogramRenderer\";\r\nimport HistogramSelectionFactory from \"./selection/HistogramSelectionFactory\"\r\nimport {SelectionTypes} from \"./selection/HistogramSelection\";\r\n\r\n/**\r\n * @private \r\n * @param {*} optionValue option value \r\n * @param {*} defaultOptionValue default option value \r\n * @returns option or default option value \r\n */\r\nfunction getOptionValue(optionValue, defaultOptionValue) {\r\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\r\n}\r\n\r\n/**\r\n * @class\r\n * Main histogram class\r\n * @param {Object} options\r\n */\r\nclass Histogram {\r\n\tconstructor(options) {\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Options property exposing widget's options\r\n\t\t */\r\n\t\tthis._options = {};\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * prompt handler\r\n\t\t */\r\n\t\tthis._options.promptHandler = options.promptHandler || null;\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Width of the widget\r\n\t\t */\r\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Height of the widget\r\n\t\t */\r\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Format for widget labels \r\n\t\t */\r\n\t\tthis._options.format = getOptionValue(options.format, null);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Inactive bar color \r\n\t\t */\r\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Inactive bar opacity \r\n\t\t */\r\n\t\tthis._options.inactiveBarOpacity = getOptionValue(options.inactiveBarOpacity, Defaults.INACTIVE_BAR_OPACITY);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Over bar color \r\n\t\t */\r\n\t\tthis._options.overSelectionColor = getOptionValue(options.overSelectionColor, Defaults.OVER_SELECTION_COLOR);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Over selection opacity \r\n\t\t */\r\n\t\tthis._options.overSelectionOpacity = getOptionValue(options.overSelectionOpacity, Defaults.OVER_SELECTION_OPACITY);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Selection color \r\n\t\t */\r\n\t\tthis._options.selectionColor = getOptionValue(options.selectionColor, Defaults.SELECTION_COLOR);\r\n\t\t\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Enable selection toggle \r\n\t\t */\r\n\t\tthis._options.enableSelectionToggle = getOptionValue(options.enableSelectionToggle, Defaults.ENABLE_SELECTION_TOGGLE);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Font size\r\n\t\t */\r\n\t\tthis._options.fontSize = getOptionValue(options.fontSize, Defaults.FONT_SIZE);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * selection type\r\n\t\t */\r\n\t\tthis._options.selectionType = getOptionValue(options.selectionType, null);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a selection\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t * @param {MouseEvent} browser event\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * histogramRenderer\r\n\t\t */\r\n\t\tthis._histogramRenderer = new HistogramRenderer(this._options);\r\n\r\n\t\tthis._histogramRenderer.on(\"selectionOver\", selectionIndex=>{\r\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\r\n\t\t})\r\n\r\n\t\tthis._histogramRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\r\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled, d3.event);\r\n\t\t})\r\n\r\n\t\tthis._histogramRenderer.on(\"selectionChanged\", (selection)=>{\r\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\r\n\t\t})\r\n\r\n\t\tthis._histogramRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\r\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t\t});\r\n\t\t\r\n\t\tthis._selectionFactory = new HistogramSelectionFactory(this._options);\r\n\t}\r\n\r\n\t/**\r\n\t * Bind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Unbind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler\r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\toff(eventName, handler) {\r\n\t\tthis._observable.off(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Destroys widget\r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\tdestroy() {\r\n\t\tthis._observable.destroy();\r\n\t\tthis._histogramRenderer.destroy();\r\n\t\tthis._options = null;\r\n\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\trender(selector) {\r\n\t\tthis._histogramRenderer.render(selector);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets widget data\r\n\t * @param {Array} data\r\n\t * @param {Array} selection\r\n\t * @param {Object} set data options\r\n\t * @returns {Histogram} returns this widget instance \r\n\t */\r\n\tsetData(data, selection, options) {\r\n\t\tif (!this._histogramRenderer.isRendered()) {\r\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\r\n\t\t}\r\n\r\n\t\tvar histogramData = this._histogramData = new HistogramData(data, this._options);\r\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, histogramData);\r\n\r\n\t\tthis._options.selection = histogramSelection.getSelection();\r\n\t\tthis._selection = selection;\r\n\r\n\t\tif (!this._options.format) {\r\n\t\t\tthis._options.format = (value => String(value));\r\n\t\t} else if (typeof this._options.format == \"string\"){\r\n\t\t\tthis._options.format = d3.format(this._options.format);\r\n\t\t}\r\n\r\n\t\tthis._histogramRenderer.refresh(histogramData, histogramSelection, options);\r\n\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public\r\n\t * Sets selection type\r\n\t * @param {String} selectionType\r\n\t * @returns {Histogram} returns this widget instance \r\n\t */\r\n\tsetSelectionType(selectionType){\r\n\t\tthis._options.selectionType = selectionType;\r\n\t\tthis.setSelection(this._selection);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows selection labels\r\n\t */\r\n\tshowSelectionLabels(){\r\n\t\tthis._histogramRenderer.showSelectionLabels();\r\n\t}\r\n\r\n\t/**\r\n\t * Hides selection labels\r\n\t */\r\n\thideSelectionLabels(){\r\n\t\tthis._histogramRenderer.hideSelectionLabels();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public\r\n\t * Sets selection\r\n\t * @param {Array} selection\r\n\t * @param {Object} options\r\n\t * @returns {Histogram} returns this widget instance \r\n\t */\r\n\tsetSelection(selection, options) {\r\n\t\tif (!this._histogramRenderer.isRendered()) {\r\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\r\n\t\t}\r\n\r\n\t\tif (!this._histogramData) {\r\n\t\t\tthrow \"Can't call setSelection() when no data is available.\"\r\n\t\t}\r\n\r\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, this._histogramData);\r\n\t\tthis._options.selection = histogramSelection.getSelection();\r\n\t\tthis._selection = selection;\r\n\t\tthis._histogramRenderer.refresh(this._histogramData, this._histogramSelection, options);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\nHistogram.SelectionTypes = SelectionTypes;\r\nexport default Histogram;\r\n","import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./LineDefaults\";\nimport LineData from \"./LineData\";\nimport LineRenderer from \"./LineRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main Line class\n * @param {Object} options\n */\nclass Line {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Line width\n\t\t */\n\t\tthis._options.lineWidth = getOptionValue(options.lineWidth, Defaults.LINE_WIDTH);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Dot size\n\t\t */\n\t\tthis._options.dotSize = getOptionValue(options.dotSize, Defaults.DOT_SIZE);\t\t\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Line color \n\t\t */\n\t\tthis._options.lineColor = getOptionValue(options.lineColor, Defaults.LINE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Line opacity \n\t\t */\n\t\tthis._options.lineOpacity = getOptionValue(options.lineOpacity, Defaults.LINE_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill color \n\t\t */\n\t\tthis._options.fillColor = getOptionValue(options.fillColor, Defaults.FILL_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill opacity\n\t\t */\n\t\tthis._options.fillOpacity = getOptionValue(options.fillOpacity, Defaults.FILL_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.axisColor = getOptionValue(options.axisColor, Defaults.AXIS_COLOR);\t\t\n\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.zeroLineColor = getOptionValue(options.zeroLineColor, Defaults.ZERO_LINE_COLOR);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Vertical spacing\n\t\t */\n\t\tthis._options.verticalSpacing = getOptionValue(options.verticalSpacing, this._options.height / 4);\t\t\n\t\t\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * LineRenderer\n\t\t */\n\t\tthis._lineRenderer = new LineRenderer(this._options);\n\n\t\tthis._lineRenderer.on(\"pointOver\", data=>{\n\t\t\tthis._observable.fire(\"pointOver\", data);\n\t\t})\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Line} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._lineRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._lineRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Array} data\n\t * @returns {Line} returns this widget instance \n\t */\n\tsetData(data) {\n\t\tif (!this._lineRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar lineData = this._lineData = new LineData(data, this._options);\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + this._lineData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._lineRenderer.update(lineData);\n\n\t\treturn this;\n\t}\n}\n\nexport default Line;\n","/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nexport default class Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tthis._handlers[event].push(handler);\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unbind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler, optional\r\n\t */\r\n    off(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tif (!handler) {\r\n\t\t\tthis._handlers[event] = [];\r\n\t\t} else {\r\n\t\t\tvar handlers = this._handlers[event];\r\n\t\t\tvar index = handlers.indexOf(handler);\r\n\t\t\tif (index != -1){\r\n\t\t\t\thandlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Fire widget event\r\n\t * @param {String} event event name\r\n\t * @param {*} ...args event arguments\r\n\t */\r\n\tfire(event, ...args) {\r\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tvar handlers = this._handlers[event];\r\n\t\tfor (var i = 0; i < handlers.length; i++) {\r\n\t\t\thandlers[i].apply(this, args);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys this observable, removes events and so on \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._handlers = null;\r\n\t\treturn this;\r\n    }\r\n\t\r\n}","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default bar height\r\n */\r\nexport const BAR_HEIGHT = 43;\r\n\r\n/**\r\n * @public\r\n * Default inactive bar color\r\n */\r\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const OVER_BAR_COLOR = \"#ffea00\";\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const ACTIVE_BAR_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Enables bar toggle\r\n */\r\nexport const ENABLE_BAR_TOGGLE = false;\r\n\r\n/**\r\n * @public\r\n * Enables bar hover \r\n */\r\nexport const ENABLE_BAR_HOVER = false;\r\n\r\n/**\r\n * @public\r\n * Label font size\r\n */\r\nexport const LABEL_FONT_SIZE = 13;\r\n\r\n/**\r\n * @public\r\n * Value font size\r\n */\r\nexport const VALUE_FONT_SIZE = 11;","import * as d3 from \"d3\";\n\n/**\n * @class\n * BarData representing data for the bar\n */\nexport default class BarData {\n\t/**\n\t * @param {data} data\n\t * @param {Object} options\n\t */\n\tconstructor(data, options) {\n\t\tthis._barData = this._loadBarData(data, options);\n\t\tthis._minMax = this._calculateMinMax(this._barData);\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns histogram data\n\t * @returns {Array} histogram data\n\t */\n\tgetData() {\n\t\treturn this._barData;\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given BarData\n\t* @param {Array} BarData\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(barData) {\n\t\tvar max = d3.sum(barData, function (d) { return d.value; });\n\n\t\treturn {\n\t\t\tmin: 0,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.max;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/** \n\t* @private\n\t* @param {Array} data\n\t* @returns {Array} bar data\n\t*/\n\t_loadBarData(data) {\n\t\t// no transofrmation at this stage\n\t\treturn data.slice();\n\t}\n}","import style from \"./Bar.css\";\r\nimport * as Defaults from \"./BarDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\nvar MASK_INDEX = 0;\r\n\r\n/**\r\n * @class\r\n * Bar renderer class\r\n * @param {Object} options\r\n */\r\nexport default class BarRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Bar options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._barData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Bar has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous data for animation\r\n\t\t */\r\n\t\tthis._prevData = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a bar\r\n\t\t\t * @param {int} barIndex\r\n\t\t\t */\r\n\t\t\t\"barOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is out of a bar\r\n\t\t\t * @param {int} barIndex\r\n\t\t\t */\r\n\t\t\t\"barOut\",\t\t\t\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when bar is clicked\r\n\t\t\t * @param {int} barIndex\r\n\t\t\t */\r\n\t\t\t\"barClick\",\t\t\t\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when bar is disabled\r\n\t\t\t * @param {int} barIndex\r\n\t\t\t * @param {boolean} disabled\r\n\t\t\t */\r\n\t\t\t\"barDisabled\"\r\n\t\t]);\r\n\r\n\t\tthis._maskIndex = MASK_INDEX++;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Bar has been rendered or not\r\n\t * @returns {boolean} true if Bar has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {BarHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Bar} returns this widget instance\r\n\t */\r\n\trender(selector){\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\t// render SVG\r\n\t\tthis._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"class\", style.bar)\r\n\t\t\t.attr(\"height\", height);\r\n\r\n\t\t// render group element\r\n\t\tthis._groupEl = this._svgEl.append(\"g\");\r\n\r\n\r\n\t\tthis._clipPath = this._svgEl.append(\"clipPath\")\r\n\t\t\t.attr(\"id\", \"rounded-corners-\"+this._maskIndex)\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"y\", this._options.labelFontSize + 10)\r\n\t\t\t.attr(\"rx\", 2.5)\r\n\t\t\t.attr(\"ry\", 2.5)\r\n\t\t\t.attr(\"width\",this._options.width)\r\n\t\t\t.attr(\"height\", 5);\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t} \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._groupEl.node().innerHTML = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Sets bar data \r\n\t * @param {BarData}\r\n\t */\r\n\tsetData(barData){\r\n\t\tthis._barData = barData;\t\t\r\n\t\tthis._clear();\r\n\r\n\t\tvar data = barData.getData();\r\n\t\tvar minMax = barData.getMinMax();\r\n\r\n\t\tvar barHeight = this._options.barHeight;\r\n\t\tvar height = data.length * barHeight;\r\n\r\n\t\tthis._xAxis = d3.scaleLinear().range([0, this._options.width]);\r\n\t\tthis._yAxis = d3.scaleBand().range([height, 0]);\t\r\n\r\n\t\tthis._svgEl.attr(\"height\", height);\t\r\n\r\n\t\tthis._xAxis.domain([0, minMax.max]);\r\n\t\tthis._yAxis.domain(data.map((item, i)=>i).reverse());\r\n\r\n\t\tthis._renderDataBars(data);\r\n\t\tthis._prevData = barData.getData();\t\t\t\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * Renders data bars\r\n\t*/\r\n\t_renderDataBars(data) { \r\n\t\tvar x = this._xAxis;\r\n\t\tvar y = this._yAxis;\r\n\t\tvar horizontalPadding = 10;\r\n\t\tvar barHeight = 5;\r\n\t\tvar observable = this._observable;\r\n\t\tvar options = this._options;\r\n\r\n\t\t// create bar groups\r\n\t\tvar barGroups = this._groupEl.selectAll(\".\"+style.bar).data(data).enter().append(\"g\").attr(\"class\", style[\"bar\"]);\r\n\t\tbarGroups\r\n\t\t\t.attr(\"transform\", function (d, i) {return \"translate(0,\"+ (Math.floor(y(i)))+\")\"})\r\n\t\t\t.classed(style[\"bar-over\"], (d)=>{\r\n\t\t\t\treturn d.highlighted;\r\n\t\t\t})\r\n\r\n\t\t\t.on(\"mouseover\", function(d, i){\r\n\t\t\t\tif (options.enableBarHover){\r\n\t\t\t\t\td3.select(this).classed(style[\"bar-over\"], true);\r\n\t\t\t\t\tobservable.fire(\"barOver\", i);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.on(\"mouseout\", function(d, i){\r\n\t\t\t\tif (options.enableBarHover){\r\n\t\t\t\t\td3.select(this).classed(style[\"bar-over\"], false);\r\n\t\t\t\t\tobservable.fire(\"barOut\", i);\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.on(\"click\", function(d, i){\r\n\t\t\t\tif (options.enableBarToggle){\r\n\t\t\t\t\tvar disabled = !d3.select(this).classed(style[\"bar-disabled\"]);\r\n\t\t\t\t\td3.select(this).classed(style[\"bar-disabled\"], disabled);\r\n\t\t\t\t\tobservable.fire(\"barDisabled\", i, disabled);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobservable.fire(\"barClick\", i);\r\n\t\t\t})\r\n\r\n\t\tbarGroups.classed(style[\"bar-disabled\"], (d)=>{\r\n\t\t\treturn d.disabled;\r\n\t\t})\r\n\r\n\t\t// label\r\n\t\tbarGroups.append(\"text\")\r\n\t\t\t.text(d=>d.label)\r\n\t\t\t.attr(\"class\", style[\"bar-label\"])\r\n\t\t\t.attr(\"x\", horizontalPadding)\r\n\t\t\t.attr(\"font-size\", this._options.labelFontSize)\r\n\t\t\t.attr(\"y\", this._options.labelFontSize)\r\n\r\n\t\t// tooltip\r\n\t\tbarGroups.append(\"text\")\r\n\t\t\t.text(d=>{\r\n\t\t\t\t//var pcValue = Math.round(x(d.value)/this._options.width*100);\r\n\t\t\t\treturn d.tooltip || this._options.format(d.value)\r\n\t\t\t})\r\n\t\t\t.attr(\"class\", style[\"bar-tooltip\"])\r\n\t\t\t.attr(\"x\", this._options.width-horizontalPadding)\r\n\t\t\t.attr(\"text-anchor\",\"end\")\r\n\t\t\t.attr(\"font-size\", this._options.valueFontSize)\r\n\t\t\t.attr(\"y\", this._options.labelFontSize)\r\n\t\t\r\n\t\t// active bar\r\n\t\tbarGroups.append(\"rect\")\r\n\t\t\t.attr(\"fill\",(d)=>{\r\n\t\t\t\treturn d.color || Defaults.ACTIVE_BAR_COLOR;\r\n\t\t\t})\r\n\t\t\t.attr(\"class\", style[\"bar-active\"])\r\n\t\t\t.attr(\"x\", 0)\r\n\t\t\t.attr(\"clip-path\", \"url(#rounded-corners-\"+this._maskIndex+\")\")\r\n\t\t\t.attr(\"width\", function (d) { return Math.floor(x(d.value)); })\r\n\t\t\t.attr(\"y\", this._options.labelFontSize + 10)\r\n\t\t\t.attr(\"height\", barHeight);\r\n\r\n\t\t// inactive bar\r\n\t\tbarGroups.append(\"rect\")\r\n\t\t\t.attr(\"fill\",Defaults.INACTIVE_BAR_COLOR)\r\n\t\t\t.attr(\"class\", style[\"bar-inactive\"])\r\n\t\t\t.attr(\"clip-path\", \"url(#rounded-corners-\"+MASK_INDEX+\")\")\r\n\t\t\t.attr(\"x\", (d) => {\r\n\t\t\t\treturn Math.floor(x(d.value));\r\n\t\t\t})\r\n\t\t\t.attr(\"width\", (d)=> { return this._options.width - Math.floor(x(d.value)); })\r\n\t\t\t.attr(\"y\", this._options.labelFontSize + 10)\r\n\t\t\t.attr(\"height\", barHeight)\r\n\r\n\t\t// hover\r\n\t\tbarGroups.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"bar-hover\"])\r\n\t\t\t.attr(\"fill\", \"transparent\")\r\n\t\t\t.attr(\"x\", 0)\r\n\t\t\t.attr(\"text-anchor\",\"end\")\r\n\t\t\t.attr(\"cursor\",()=>this._options.enableBarHover?\"pointer\":\"default\")\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"height\", this._options.barHeight)\t\t\t\t\t\r\n\t\t\t.attr(\"width\", this._options.width)\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Bar UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","/**\r\n * @public\r\n * Default outer radius\r\n */\r\nexport const OUTER_RADIUS = 10;\r\n\r\n/**\r\n * @public\r\n * Default inner radius\r\n */\r\nexport const INNER_RADIUS = 10;\r\n\r\n/**\r\n * @public\r\n * Default value\r\n */\r\nexport const VALUE = 0;\r\n\r\n/**\r\n * @public\r\n * Default active color\r\n */\r\nexport const ACTIVE_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Default inactive color\r\n */\r\nexport const INACTIVE_COLOR = \"#F0F0F0\";\r\n\r\n/**\r\n * @public\r\n * Default background color\r\n */\r\nexport const BACKGROUND_COLOR = \"transparent\";\r\n\r\n/**\r\n * @public\r\n * Default animation duration\r\n */\r\nexport const ANIMATION_DURATION = 250;","import style from \"./Doughnut.css\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\r\n\r\n/**\r\n * @class\r\n * Doughnut renderer class\r\n * @param {Object} options\r\n */\r\nexport default class DoughnutRenderer {\r\n\tconstructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Doughnut options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Doughnut has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over\r\n\t\t\t */\r\n\t\t\t\"mouseOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is out\r\n\t\t\t */\r\n\t\t\t\"mouseOut\"\r\n\t\t]);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Doughnut has been rendered or not\r\n\t * @returns {boolean} true if Doughnut has been rendered\r\n\t */\r\n\tisRendered() {\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Doughnut} returns this widget instance\r\n\t */\r\n\trender(selector) {\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._containerEl.node().offsetWidth;\r\n\t\tvar height = this._containerEl.node().offsetHeight;\r\n\t\tvar value = this._value = this._options.value;\r\n\t\tvar angle = this._angle = value / 100 * tau;\r\n\t\tvar innerRadius = this._innerRadius = this._options.innerRadius;\r\n\t\tvar outerRadius = this._outerRadius = this._options.outerRadius;\r\n\r\n\t\t// arc settings\r\n\t\tvar arc = this._arc = d3.arc()\r\n\t\t\t.innerRadius(innerRadius)\r\n\t\t\t.outerRadius(outerRadius)\r\n\t\t\t.startAngle(0);\r\n\r\n\t\t// render SVG\r\n\t\tthis._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height)\r\n\t\t\t.attr(\"class\", style[\"svg\"]);\r\n\r\n\t\t// render group\r\n\t\tvar g = this._groupEl = this._svgEl\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"class\", style[\"doughnut\"])\r\n\t\t\t.attr(\"transform\", \"translate(\" + width / 2 + \", \" + height / 2 + \")\");\r\n\r\n\t\t// render inactive doughtnut\t\r\n\t\tthis._inactiveArc = g.append(\"path\")\r\n\t\t\t.datum({ endAngle: tau })\r\n\t\t\t.attr(\"fill\", this._options.inactiveColor)\r\n\t\t\t.attr(\"d\", arc);\r\n\r\n\t\t// render active doughtnut\t\r\n\t\tthis._activeArc = g.append(\"path\")\r\n\t\t\t.datum({ endAngle: angle })\r\n\t\t\t.attr(\"fill\", this._options.activeColor)\r\n\t\t\t.attr(\"d\", arc);\r\n\r\n\t\t// render background\t\r\n\t\tthis._backgroundArc = g.append(\"circle\")\r\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\r\n\t\t\t.attr(\"r\", innerRadius)\r\n\t\t\t.attr(\"cx\", 0)\r\n\t\t\t.attr(\"cy\", 0)\r\n\r\n\t\t// render background\t\r\n\t\tthis._backgroundArc = g.append(\"circle\")\r\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\r\n\t\t\t.attr(\"r\", innerRadius)\r\n\t\t\t.attr(\"cx\", 0)\r\n\t\t\t.attr(\"cy\", 0)\r\n\r\n\t\t// hover element, this needs to be rendered in order to have stable and animation\r\n\t\t// independent hover \r\n\t\tthis._hoverEl = g.append(\"rect\")\r\n\t\t\t.attr(\"fill\", \"transparent\")\r\n\t\t\t.attr(\"x\", -width/2)\r\n\t\t\t.attr(\"y\", -height/2)\r\n\t\t\t.attr(\"width\",width)\r\n\t\t\t.attr(\"height\",height)\r\n\r\n\t\tg.on(\"mouseover\", ()=>{\r\n\t\t\tthis._observable.fire(\"mouseOver\");\r\n\t\t})\r\n\r\n\t\tg.on(\"mouseout\", ()=>{\r\n\t\t\tthis._observable.fire(\"mouseOut\");\r\n\t\t})\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t\t * Bind widget event\r\n\t\t * @param {String} event event name\r\n\t\t * @param {Function} handler event handler\r\n\t\t * @returns {Doughnut} returns this widget instance\r\n\t\t */\r\n\t\ton(eventName, handler) {\r\n\t\t\tthis._observable.on(eventName, handler);\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Unbind widget event\r\n\t\t * @param {String} event event name\r\n\t\t * @param {Function} [handler] event handler\r\n\t\t * @returns {Doughnut} returns this widget instance\r\n\t\t */\r\n\t\toff(eventName, handler) {\r\n\t\t\tthis._observable.off(eventName, handler);\r\n\t\t\treturn this;\r\n\t\t}\t\r\n\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * @param {opts} new options\r\n\t * Updates doughnut with new options\r\n\t */\r\n\tupdate(opts) {\r\n\t\tvar options = opts || {};\r\n\r\n\t\tif (typeof options.value == \"undefined\"){\r\n\t\t\toptions.value = this._value;\r\n\t\t} else {\r\n\t\t\tthis._value = options.value;\r\n\t\t}\r\n\r\n\t\t// first tween foreground, note that this is also changing this._arc radiuses \r\n\t\tvar activeArcTransition = this._activeArc.transition()\r\n\t\t\t.duration(this._options.animationDuration)\r\n\t\t\t.attrTween(\"d\", this._arcTween(options, true))\r\n\r\n\t\t// se we only get new path on background as it uses radiuses saved in the previous call\r\n\t\tthis._inactiveArc.transition()\r\n\t\t\t.duration(this._options.animationDuration)\r\n\t\t\t.attrTween(\"d\", () => {\r\n\t\t\t\treturn () => {\r\n\t\t\t\t\treturn this._arc({ endAngle: tau });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\tthis._backgroundArc.transition()\r\n\t\t\t.duration(this._options.animationDuration)\r\n\t\t\t.attrTween(\"r\", () => {\r\n\t\t\t\treturn () => {\r\n\t\t\t\t\treturn this._innerRadius;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\tif (options.activeColor && options.activeColor !== this._options.activeColor){\r\n\t\t\tthis._options.activeColor = options.activeColor;\r\n\t\t\tactiveArcTransition.attr(\"fill\", options.activeColor)\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {options} new options\r\n\t * returns tween function for arc \r\n\t */\r\n\t_arcTween(options) {\r\n\t\tvar angle = options.value / 100 * tau;\r\n\t\t// change angle if new value is provided \r\n\t\tif (typeof options.value != \"undefined\") {\r\n\t\t\tangle = options.value / 100 * tau;\r\n\t\t}\r\n\r\n\t\t// handle new radiuses\r\n\t\tvar innerRadius = this._innerRadius;\r\n\t\tvar outerRadius = this._outerRadius;\r\n\r\n\t\tif (typeof options.innerRadius != \"undefined\") {\r\n\t\t\tinnerRadius = options.innerRadius;\r\n\t\t}\r\n\r\n\t\tif (typeof options.outerRadius != \"undefined\") {\r\n\t\t\touterRadius = options.outerRadius;\r\n\t\t}\r\n\r\n\t\t// get interpolation fns between new radiuses and old ones\r\n\t\t// for simlicity, do this even if value doesn't change as we\r\n\t\t// likely generate new path anyway\r\n\t\tvar interpolateOuterRadius = d3.interpolate(this._outerRadius, outerRadius);\r\n\t\tvar interpolateInnerRadius = d3.interpolate(this._innerRadius, innerRadius);\r\n\r\n\t\treturn (d) => {\r\n\t\t\t// get angle interpolation fn \r\n\t\t\tvar interpolateAngle = d3.interpolate(d.endAngle, angle);\r\n\r\n\t\t\treturn (t) => {\r\n\t\t\t\t// on each cycle, set new radiuses and endAngle\r\n\t\t\t\tthis._arc.outerRadius(this._outerRadius = interpolateOuterRadius(t));\r\n\t\t\t\tthis._arc.innerRadius(this._innerRadius = interpolateInnerRadius(t));\r\n\r\n\t\t\t\td.endAngle = this._angle = interpolateAngle(t);\r\n\t\t\t\treturn this._arc(d);\r\n\t\t\t};\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Doughnut UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered) {\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default widget height\r\n */\r\nexport const HEIGHT = 150;\r\n\r\n/**\r\n * @public\r\n * Default widget margin\r\n */\r\nexport const MARGIN = {\r\n    top:0,\r\n    left:5,\r\n    right:5,\r\n    bottom:15\r\n};\r\n\r\n/**\r\n * Default label margin from x axis\r\n */\r\nexport const LABEL_MARGIN = 7;\r\n\r\n/**\r\n * @public\r\n * Default inactive bar color\r\n */\r\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\r\n\r\n/**\r\n * @public\r\n * Default inactive bar opacity\r\n */\r\nexport const INACTIVE_BAR_OPACITY = 1;\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const OVER_SELECTION_COLOR = \"#ffea00\";\r\n\r\n/**\r\n * @public\r\n * Default over selection opacity\r\n */\r\nexport const OVER_SELECTION_OPACITY = 1;\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const SELECTION_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Enable selection toggle\r\n */\r\nexport const ENABLE_SELECTION_TOGGLE = true;\r\n\r\n/**\r\n * @public\r\n * Default font size\r\n */\r\nexport const FONT_SIZE = 11;\r\n\r\n/**\r\n * @public\r\n * Default colors \r\n */\r\nexport const DEFAULT_COLORS = [\"#e6f3fb\", \"#cbe7f6\", \"#b1dbf2\", \"#98cfee\", \"#7ec4ea\"];\r\n\r\n/**\r\n * @public\r\n * Default width of active handle area\r\n */\r\nexport const ACTIVE_HANDLE_AREA_WIDTH = 4;","import * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * HistogramData representing data for the histogram view\r\n */\r\nexport default class HistogramData {\r\n\t/**\r\n\t * @param {data} data\r\n\t * @param {Object} options\r\n\t */\r\n\tconstructor(data, options) {\r\n\t\tthis._histogramData = this._loadHistogramData(data, options.width);\r\n\t\tthis._minMax = this._calculateMinMax(this._histogramData);\r\n\t\tthis._options = options;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns min max of history data\r\n\t * @returns {Object} minMax\r\n\t * @returns {Number} minMax.min\r\n\t * @returns {Number} minMax.max\r\n\t */\r\n\tgetMinMax() {\r\n\t\treturn this._minMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns histogram data\r\n\t * @returns {Array} histogram data\r\n\t */\r\n\tgetData() {\r\n\t\treturn this._histogramData;\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Returns min max values for given histogramData\r\n\t* @param {Array} histogramData\r\n\t* @returns {Object} minMax.min\r\n\t* @returns {Object} minMax.max\r\n\t*/\r\n\t_calculateMinMax(histogramData) {\r\n\t\tvar min = d3.min(histogramData, function (d) { return d.value; });\r\n\t\tvar max = d3.max(histogramData, function (d) { return d.value; });\r\n\r\n\t\treturn {\r\n\t\t\tmin: min,\r\n\t\t\tmax: max\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t* Returns value ratio between bars and data\r\n\t* @return {Number} value ratio \r\n\t*/\r\n\tgetValueRatio() {\r\n\t\tvar range = this._minMax.max - this._minMax.min;\r\n\t\treturn range / this._options.width;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns data value from given position \r\n\t * @param {Number} position\r\n\t */\r\n\tpositionToValue(position) {\r\n\t\tvar minMax = this.getMinMax();\r\n\t\t// return min if position is 0\r\n\t\tif (position === 0){\r\n\t\t\treturn minMax.min;\r\n\t\t}\r\n\r\n\t\t// return max if position is at the end\r\n\t\tif (position === this._options.width){\r\n\t\t\treturn minMax.max;\r\n\t\t}\r\n\r\n\t\t// else calculate based on value ratio and min/max\r\n\t\tvar valueRatio = this.getValueRatio();\r\n\t\treturn position * valueRatio + minMax.min;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns position from given data value \r\n\t * @param {Number} value\r\n\t */\r\n\tvalueToPosition(value) {\r\n\t\tvar valueRatio = this.getValueRatio();\r\n\t\tvar minMax = this.getMinMax();\r\n\t\tvar constrainedValue = Math.min(Math.max(value, minMax.min), minMax.max);\r\n\t\t\r\n\t\treturn Math.round(constrainedValue / valueRatio - minMax.min / valueRatio);\r\n\t}\r\n\r\n\t/** \r\n\t* @private\r\n\t* @param {Array} buckets\r\n\t* @param {int} numOfBarsPerBucket - number of bars per column\\\r\n\t* @returns {Array} data from given buckets \r\n\t*/\r\n\t_loadHistogramData(data, width) {\r\n\t\tvar histogramData = [];\r\n\t\t// calculate number of bars per bucket excluding last pixel for max value\r\n\t\tvar numOfBarsPerBucket = (width-1) / data.length;\r\n\r\n\t\tdata.forEach((bucket, i) => {\r\n\t\t\tvar step = (bucket.max - bucket.min) / numOfBarsPerBucket;\r\n\t\t\t// support array as well as single values\r\n\t\t\tconst volume = Array.isArray(bucket.volume)?bucket.volume:[bucket.volume];\r\n\r\n\t\t\td3.range(bucket.min, bucket.max, step).forEach((value) => {\r\n\t\t\t\thistogramData.push({\r\n\t\t\t\t\tvalue: value,\r\n\t\t\t\t\tvolume: volume\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\t// adding max value pixel as each non-last bucket ends one pixel before next bucket starts\r\n\t\t\tif (i == data.length-1){\r\n\t\t\t\thistogramData.push({\r\n\t\t\t\t\tvalue: bucket.max,\r\n\t\t\t\t\tvolume: volume\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn histogramData;\r\n\t}\r\n}","import * as d3 from \"d3\";\r\nimport style from \"../Histogram.css\";\r\nimport * as Defaults from \"../HistogramDefaults\";\r\nimport Observable from \"../../utils/Observable\";\r\n\r\n/**\r\n * Gradient index shared for all instances\r\n */\r\nvar gradientIndex = 0;\r\n\r\n/**\r\n * @class\r\n * HistogramHandle representing control handle for histogram\r\n */\r\nexport default class HistogramHandle {\r\n\t/**\r\n\t * @param {D3Selection} groupEl\r\n\t * @param {Number} value\r\n\t * @param {Number} index\r\n\t * @param {HistoryData} histogramData\r\n\t * @param {Object} options\r\n\t */\r\n\tconstructor(groupEl, value, index, histogramData, options) {\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a selection\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"drag\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when drag on handle starts\r\n\t\t\t * @param {HistogramHandle} handle\r\n\t\t\t */\r\n\t\t\t\"startDrag\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when drag on handle ends\r\n\t\t\t * @param {HistogramHandle} handle\r\n\t\t\t */\r\n\t\t\t\"endDrag\"\r\n\t\t]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle element\r\n\t\t */\r\n\t\tthis._handleEl = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle line element\r\n\t\t */\r\n\t\tthis._handleLineEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle circle element\r\n\t\t */\r\n\t\tthis._handleCircleEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle mask element\r\n\t\t */\r\n\t\tthis._handleMaskEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle mask gradient element\r\n\t\t */\r\n\t\tthis._handleMaskGradientEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle label element\r\n\t\t */\r\n\t\tthis._handleLabelEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * True if handle is over\r\n\t\t */\r\n\t\tthis._isOver = false;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element\r\n\t\t */\t\t\r\n\t\tthis._groupEl = groupEl;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle index\r\n\t\t */\t\t\r\n\t\tthis._index = index;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle value\r\n\t\t */\t\t\r\n\t\tthis._value = value;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * initial handle value\r\n\t\t */\t\t\r\n\t\tthis._initialValue = new Number(value);\t\t\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle position\r\n\t\t */\t\t\r\n\t\tthis._position = histogramData.valueToPosition(value);\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * initial handle position\r\n\t\t */\t\t\r\n\t\tthis._initialPosition = new Number(this._position);\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * bar options\r\n\t\t */\t\t\r\n\t\tthis._options = options;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * histogram data\r\n\t\t */\t\t\r\n\t\tthis._histogramData = histogramData;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Cache for storing label size, enhances performance when animating\r\n\t\t */\t\t\r\n\t\tthis._labelSizeCache = {};\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * elements\r\n\t\t */\t\t\r\n\t\tthis._elements = [];\t\t\r\n\t\t\r\n\t\tthis._renderHandle();\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destroys this handle\r\n\t */\r\n\tdestroy(){\r\n\t\tthis._elements.forEach(element=>element.remove());\r\n\t\tthis._elements = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t   * Renders drag handle\r\n\t   */\r\n\t_renderHandle() {\r\n\t\tthis._elements = [\r\n\t\t\tthis._createHandleElement(),\r\n\t\t\tthis._createHandleLineElement(),\r\n\t\t\tthis._createHandleCircleElement(),\r\n\t\t\tthis._createDragMaskElement(),\r\n\t\t\tthis._createMaskGradientElement(),\r\n\t\t\tthis._createDragLabelElement()\r\n\t\t];\r\n\r\n\t\tthis._handleHoverState();\r\n\t\tthis._handleDrag();\r\n\t}\t\r\n\r\n\thide(){\r\n\t\tthis._elements.forEach(element=>element.attr(\"visibility\", \"hidden\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns X position of this handle\r\n\t * @returns {Number} X position handle\r\n\t */\r\n\tgetXPosition() {\r\n\t\treturn parseInt(this._handleEl.attr(\"x\"))+Defaults.ACTIVE_HANDLE_AREA_WIDTH/2;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Sets hover state\r\n\t */\r\n\tsetHoverState(){\r\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\r\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 3);\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public \r\n\t * @returns {SVGRect} \r\n\t * Returns drag label box for this handle\r\n\t */\r\n\tgetLabelBox(){\r\n\t\treturn this._handleLabelEl.node().getBBox();\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * Shifts handle label by given offset so it can handle label position conflicts\r\n\t */\r\n\tsetLabelOffset(offset){\r\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\r\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * Sets handle position\r\n\t */\r\n\tsetHandleXPosition(position){\r\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\"+position+\", \"+this._options.height+\")\")\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsetLabelText(text){\r\n\t\tthis._handleLabelEl.text(text);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tshowLabel(){\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\r\n\t\treturn this;\r\n\t}\r\n\r\n\thideLabel(){\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\tsetLabelPosition(position){\r\n\t\tthis.setLabelOffset(0);\r\n\t\tthis._updateLabelPosition(position);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unsets hover state\r\n\t */\r\n\tunsetHoverState(){\r\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\r\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 1);\r\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(0, 0)\")\r\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(0, 0)\")\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Enables this handle \r\n\t */\r\n\tenable(){\r\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"all\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Disables this handle \r\n\t */\r\n\tdisable(){\r\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"none\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handle hover state\r\n\t */\r\n\t_handleHoverState(){\r\n\t\t// line hover effect\r\n\t\tthis._handleEl.on(\"mouseover\", () => {\r\n\t\t\tthis._isOver = true;\r\n\t\t\tthis.setHoverState();\r\n\t\t})\r\n\t\tthis._handleEl.on(\"mouseout\", () => {\r\n\t\t\tthis._isOver = false;\r\n\t\t\tthis.unsetHoverState();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens when drag starts\r\n\t */\r\n\t_onStartDrag(){\r\n\t\tthis._groupEl.classed(style[\"dragging\"], true);\r\n\t\tthis._observable.fire(\"startDrag\", this);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens on drag\r\n\t */\r\n\t_onDrag(){\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar xpos = Math.round(Math.max(Math.min(d3.event.x, width), 0));\r\n\r\n\t\tthis._handleEl.attr(\"x\", xpos - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\r\n\t\tthis._handleLineEl.attr(\"x\", xpos - 2);\r\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\" + xpos + \",\" + height + \")\");\r\n\t\tthis._handleEl.attr(\"data-handle-value\", this._histogramData.positionToValue(xpos))\r\n\r\n\t\tthis.setHoverState();\r\n\r\n\t\tthis._position = xpos;\r\n\r\n\t\t// prevent recalculating value for the same position\r\n\t\tif (parseInt(this._position) !== parseInt(this._initialPosition)){\r\n\t\t\tthis._value = this._histogramData.positionToValue(xpos);\r\n\t\t} else {\r\n\t\t\tthis._value = this._initialValue;\r\n\t\t}\r\n\r\n\t\tthis._handleLabelEl.text(this._getLabelText())\r\n\r\n\t\tthis._updateLabelPosition(xpos);\r\n\t\tthis._observable.fire(\"drag\");\t\t\r\n\t}\r\n\r\n\t_getLabelText() {\r\n\t\treturn this._options.format(this._value);\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * handles what happens when drag ends\r\n\t */\r\n\t_onEndDrag(){\r\n\t\tthis._groupEl.classed(style[\"dragging\"], false);\r\n\t\tif (!this._isOver) {\r\n\t\t\tthis.unsetHoverState();\r\n\t\t}\r\n\r\n\t\tthis._observable.fire(\"endDrag\", this);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles handle drag \r\n\t */\r\n\t_handleDrag(){\r\n\t\tthis._handleEl.call(d3.drag()\r\n\t\t\t.on(\"drag\", this._onDrag.bind(this))\r\n\t\t\t.on(\"start\", this._onStartDrag.bind(this))\r\n\t\t\t.on(\"end\", this._onEndDrag.bind(this)));\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * Return computed or stored label length\r\n\t * @param {SVGElement}\r\n\t * @param {Number} length \r\n\t */\r\n\t_getComputedLabelTextLength(label){\r\n\t\tvar content = label.innerHTML;\r\n\t\tthis._labelSizeCache[content] = this._labelSizeCache[content] || label.getComputedTextLength();\r\n\t\treturn this._labelSizeCache[content];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Updates label position\r\n\t * @param {Number} position \r\n\t */\r\n\t_updateLabelPosition(position) {\r\n\t\tvar label = this._handleLabelEl.node();\r\n\t\tvar maskPadding = this._options.fontSize;\t\t\r\n\r\n\t\t// we need to calculate text length so we can create mask and center text\r\n\t\tvar textLength = this._getComputedLabelTextLength(label);\r\n\t\tvar maskWidth = textLength + maskPadding * 2;\r\n\t\tvar xPosition = position - textLength / 2;\r\n\r\n\t\t// handle when dragging towards left side\r\n\t\tif (xPosition < 0) {\r\n\t\t\txPosition = 0;\r\n\t\t}\r\n\r\n\t\t// handle when dragging towards right side\r\n\t\tif (xPosition + textLength > this._options.width) {\r\n\t\t\txPosition = this._options.width  - textLength;\r\n\t\t\tthis._handleLabelEl.attr(\"x\", this._options.width);\r\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"end\");\r\n\t\t} else {\r\n\t\t\tthis._handleLabelEl.attr(\"x\", xPosition);\r\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"start\");\r\n\t\t}\r\n\r\n\t\t// position mask\r\n\t\tthis._handleMaskEl.attr(\"x\", () => {\r\n\t\t\treturn parseInt(xPosition) - maskPadding;\r\n\t\t});\r\n\r\n\t\tthis._handleMaskGradientEl.attr(\"x1\", xPosition - maskPadding);\r\n\t\tthis._handleMaskGradientEl.attr(\"x2\", xPosition + maskWidth - maskPadding);\r\n\r\n\t\tthis._handleMaskEl.attr(\"width\", maskWidth);\r\n\t\tthis._handleMaskEl.attr(\"height\", this._options.fontSize);\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * Creates mask gradient element\r\n\t * @param {Number} handleIndex \r\n\t */\r\n\t_createMaskGradientElement(){\r\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\r\n\t\t\t.attr(\"id\", \"brush-mask-gradient-\" + gradientIndex++)\r\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\r\n\t\t\t.attr(\"y1\", 0).attr(\"x1\", 50)\r\n\t\t\t.attr(\"y2\", 0).attr(\"x2\", 0);\r\n\r\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\r\n\t\t\t.data([\r\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\r\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\r\n\t\t\t])\r\n\t\t\t.enter().append(\"stop\")\r\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\r\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\r\n\r\n\t\treturn this._handleMaskGradientEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders main handle element \r\n\t * @returns {SVGElement}\r\n\t */\r\n\t_createHandleElement(){\r\n\t\tthis._handleEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle\"])\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"data-handle-index\", this._index)\r\n\t\t\t.attr(\"data-handle-value\", this._value)\r\n\t\t\t.attr(\"cursor\", \"ew-resize\")\r\n\t\t\t.attr(\"width\", Defaults.ACTIVE_HANDLE_AREA_WIDTH)\r\n\t\t\t.attr(\"height\", this._options.height + 5)\r\n\t\t\t.attr(\"x\", this._position - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\r\n\r\n\t\treturn this._handleEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders handle line element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createHandleLineElement(){\r\n\t\tthis._handleLineEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle-line\"])\r\n\t\t\t.attr(\"width\", 4)\r\n\t\t\t.attr(\"height\", this._options.height)\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"x\", this._position - 2);\r\n\r\n\t\treturn this._handleLineEl;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders handle circle element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createHandleCircleElement(){\r\n\t\tthis._handleCircleEl = this._groupEl.append(\"circle\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle-circle\"])\r\n\t\t\t.attr(\"transform\", \"translate(\" + this._position + \",\" + this._options.height + \")\")\r\n\t\t\t.attr(\"fill\", \"#ffffff\")\r\n\t\t\t.attr(\"fill-opacity\", 1)\r\n\t\t\t.attr(\"stroke\", \"#000\")\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"cursor\", \"ew-resize\")\r\n\t\t\t.attr(\"r\", 3.5);\r\n\r\n\t\treturn this._handleCircleEl;\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders drag mask element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createDragMaskElement(){\r\n\t\tthis._handleMaskEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"drag-label-mask\"])\r\n\t\t\t.attr(\"fill\", \"url(#brush-mask-gradient-\" + gradientIndex+\")\")\r\n\t\t\t.attr(\"y\", this._options.height + Defaults.LABEL_MARGIN)\r\n\t\t\t.attr(\"display\", \"none\");\t\t\t\r\n\r\n\t\treturn this._handleMaskEl;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @private \r\n\t * Renders handle label element \r\n\t * @returns {SVGElement}  \r\n\t */\r\n\t_createDragLabelElement(){\r\n\t\tvar format = this._options.format;\r\n\t\tvar height = this._options.height;\r\n\t\tthis._handleLabelEl = this._groupEl.append(\"text\")\r\n\t\t\t.attr(\"class\", style[\"drag-label\"])\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"font-size\", this._options.fontSize)\r\n\t\t\t.text(() => {\r\n\t\t\t\tvar formattedValue = format(this._initialValue);\r\n\t\t\t\treturn formattedValue;\r\n\t\t\t})\r\n\t\t\t.attr(\"y\", height + this._options.fontSize + Defaults.LABEL_MARGIN);\r\n\r\n\t\t\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t\treturn this._handleLabelEl;\r\n\t}\r\n}","import style from \"../Histogram.css\";\r\nimport HistogramHandle from \"./HistogramHandle\";\r\nimport Observable from \"../../utils/Observable\";\r\nimport * as PositionUtils from \"../utils/PositionUtils\"\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Histogram renderer class\r\n * @param {Object} options\r\n */\r\nexport default class HistogramSelectionRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Histogram options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._histogramData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * history selection\r\n\t\t */\r\n\t\tthis._histogramSelection = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * index of over selection  \r\n\t\t */\r\n\t\tthis._overSelectionIndex = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * selection handles\r\n\t\t */\r\n\t\tthis._handles = [];\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if handle is dragged\r\n\t\t */\r\n\t\tthis._draggingHandle = false;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous selection for animation\r\n\t\t */\r\n\t\tthis._prevSelection = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if animation is run\r\n\t\t */\r\n\t\tthis._animating = false;\r\n\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a category\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is changed\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\t\t\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether histogram has been rendered or not\r\n\t * @returns {boolean} true if histogram has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @param {DOMElement}  \r\n\t * @returns {HistogramSelectionRenderer} returns this widget instance\r\n\t */\r\n\trender(groupEl){\r\n\t\tthis._rendered = true;\r\n\t\tthis._groupEl = groupEl\r\n\r\n\t\treturn this;\r\n\t} \t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._destroyHandles();\r\n\t\tif (this._selectionBars){\r\n\t\t\tthis._selectionBars.remove();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Destroys selection controls \r\n\t */\r\n\t_destroyHandles(){\r\n\t\tthis._handles.forEach(handle=>handle.destroy());\r\n\t\tthis._handles = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles click on handle\r\n\t * @param {Number} handleIndex\r\n\t * @param {Number} handleValue \r\n\t */\r\n\t_onHandleClick(handleIndex, handleValue){\r\n\t\t// call prompt handler if available\r\n\t\tif (this._options.promptHandler){\r\n\t\t\tthis._options.promptHandler(handleValue).then((promptResult)=>{\r\n\t\t\t\tvar startSelectionSnapshot = JSON.stringify(this._histogramSelection.getOutputSelection());\r\n\t\t\t\tpromptResult = parseFloat(promptResult);\r\n\t\t\t\t// must be within min max range\r\n\t\t\t\tvar minMax = this._histogramData.getMinMax();\r\n\t\t\t\tpromptResult = Math.min(minMax.max, promptResult);\r\n\t\t\t\tpromptResult = Math.max(minMax.min, promptResult);\r\n\r\n\t\t\t\tvar points = this._histogramSelection.getSelectionPoints();\r\n\t\t\t\tpoints[handleIndex] = {\r\n\t\t\t\t\tvalue:promptResult\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar positions = points\r\n\t\t\t\t\t.sort((p1,p2)=>p1.value-p2.value)\r\n\t\t\t\t\t.map(point=>this._histogramData.valueToPosition(point.value));\r\n\t\t\t\t\r\n\t\t\t\tthis._updateSelectionPositions(positions, points);\r\n\t\t\t\tthis._updateSelection();\r\n\r\n\t\t\t\t// TODO: update handles without destroying them\r\n\t\t\t\tthis._destroyHandles();\r\n\t\t\t\tthis._renderHandles();\r\n\r\n\t\t\t\t// fire selection change if selection is changed\r\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\r\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Toggles selection\r\n\t * @param {Number} selectionIndex \r\n\t */\r\n\t_toggleSelection(selectionIndex){\r\n\t\tvar selection = this._options.selection[selectionIndex];\r\n\t\tselection.disabled = !selection.disabled;\r\n\t\tvar enabled = !selection.disabled;\r\n\t\tthis._updateSelection();\r\n\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles click on chart\r\n\t */\r\n\t_onClick(){\r\n\t\tvar target = d3.select(d3.event.target);\r\n\t\tvar selectionIndex = target.attr(\"data-selection-index\");\r\n\t\tvar handleIndex = target.attr(\"data-handle-index\");\r\n\r\n\t\tif (selectionIndex != null && this._histogramSelection.allowsToggle()){\r\n\t\t\tthis._toggleSelection(selectionIndex)\r\n\t\t} else if (handleIndex != null){\r\n\t\t\tthis._onHandleClick(handleIndex, target.attr(\"data-handle-value\"));\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * Handles handle click \r\n\t */\r\n\t_handleClick(){\r\n\t\tthis._groupEl.on(\"click\", this._onClick.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Refreshes histogram data \r\n\t * @param {HistogramData}\r\n\t * @param {HistogramSelection}\r\n\t * @param {Object} options\r\n\t */\r\n\trefresh(histogramData, histogramSelection, options){\r\n\t\tthis._animate = options && options.animate;\r\n\t\tif (this._animate && this._histogramSelection && this._histogramSelection.getSelection().length == histogramSelection.getSelection().length){\r\n\t\t\tthis._prevSelection = this._histogramSelection.getSelection();\r\n\t\t\tthis._prevHistogramData = this._histogramSelection.getSelection();\r\n\t\t}\r\n\r\n\t\tif (this._animate && this._histogramData){\r\n\t\t\tthis._prevHistogramData = this._histogramData;\r\n\t\t}\r\n\r\n\t\tthis._histogramData = histogramData;\r\n\t\tthis._histogramSelection = histogramSelection;\r\n\t\t\r\n\t\tthis._clear();\r\n\t\tthis._renderSelection();\r\n\t\tthis._updateSelection();\r\n\r\n\t\tthis._handleHoverState();\r\n\t\tthis._handleClick();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Updates selection controls on hover\r\n\t * @param {Number} selectionIndex \r\n\t */\r\n\t_updateSelectionControlsHoverState(selectionIndex){\r\n\t\t// get all handles sorted by X position\r\n\t\tvar handles = this._handles.slice().sort((h1,h2)=>{\r\n\t\t\treturn h1.getXPosition() - h2.getXPosition();\r\n\t\t});\r\n\r\n\t\t// unset hover state on all handles\r\n\t\thandles.forEach(handle=>handle.unsetHoverState());\r\n\r\n\t\t// selection is active, active both handles for active selection\r\n\t\tif (selectionIndex != null){\r\n\t\t\tvar handle1 = handles[selectionIndex];\r\n\t\t\tvar handle2 = handles[selectionIndex+1];\r\n\r\n\t\t\thandle1.setHoverState();\r\n\t\t\thandle2.setHoverState();\r\n\r\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\r\n\r\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\r\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * \r\n\t * @private \r\n\t * Handles what happens when mouse is over selection\r\n\t * @param {String} type \r\n\t * @param {Number} i \r\n\t * @param {HTMLElement[]} array \r\n\t */\r\n\t_onSelectionMouseOver(d, i, nodes){\r\n\t\t// prevent selection when dragging handles\r\n\t\tif (this._draggingHandle){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\tvar selectionIndex = parseInt(d3.select(d3.event.target).attr(\"data-selection-index\"));\r\n\t\tif (this._overSelectionIndex != selectionIndex){\r\n\t\t\tthis._overSelectionIndex = selectionIndex;\r\n\t\t\tthis._updateSelection();\r\n\t\t\tthis._updateSelectionControlsHoverState(selectionIndex);\r\n\t\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @private \r\n\t * Handles what happens when mouse is out of selection\r\n\t * @param {String} type \r\n\t * @param {Number} i \r\n\t * @param {HTMLElement[]} array \r\n\t */\r\n\t_onSelectionMouseOut(d, i, nodes){\r\n\t\t// prevent selection when dragging handles\r\n\t\tif (this._draggingHandle){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0)\")\r\n\r\n\t\tthis._overSelectionIndex = null;\r\n\t\tthis._updateSelectionControlsHoverState(null);\r\n\t\tthis._updateSelection();\r\n\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Handles hover state\r\n\t */\r\n\t_handleHoverState(){\r\n\t\tvar g = this._groupEl;\r\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseout\", this._onSelectionMouseOut.bind(this));\r\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseover\", this._onSelectionMouseOver.bind(this));\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Handles when handle is dragged\r\n\t */\r\n\t_onHandleDrag(){\r\n\t\tvar positions = this._handles.map(handle=>handle.getXPosition()).sort((p1, p2)=>{\r\n\t\t\treturn p1-p2;\r\n\t\t});\r\n\r\n\t\tthis._updateSelectionPositions(positions);\r\n\t\tthis._updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Updates selection with new positions\r\n\t* @param {Array} positions\r\n\t* @param {Array} points\r\n\t*/\r\n\t_updateSelectionPositions(positions, points){\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\t\tpositions.forEach((p, index)=>{\r\n\t\t\tif (index>selection.length-1){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar position = {\r\n\t\t\t\tfrom:p,\r\n\t\t\t\tto:positions[index+1]\r\n\t\t\t};\r\n\r\n\t\t\tvar value = {\r\n\t\t\t\tfrom:points?points[index].value:this._histogramData.positionToValue(position.from),\r\n\t\t\t\tto:points?points[index+1].value:this._histogramData.positionToValue(position.to),\r\n\t\t\t};\r\n\r\n\t\t\t[\"from\", \"to\"].forEach(pos=>{\r\n\t\t\t\tconst selectionChanged = points?\r\n\t\t\t\t\t// if new points are given, we need to compare selection values\r\n\t\t\t\t\tselection[index][pos] !== value[pos]:\r\n\t\t\t\t\t// otherwise, we need to compare selection position\r\n\t\t\t\t\tselection[index][\"position\"][pos] !== position[pos];\r\n\r\n\t\t\t\t// update selection on change\r\n\t\t\t\tif (selectionChanged){\r\n\t\t\t\t\tselection[index][pos] = value[pos];\t\r\n\t\t\t\t\tselection[index][\"position\"][pos] = position[pos];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\t\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders selection bars\r\n\t*/\r\n\t_renderSelection() {\r\n\t\tvar height = this._options.height;\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\r\n\t\t// hover selection bars\r\n\t\tthis._selectionBars = this._groupEl.selectAll(\".\"+style.selectionbar)\r\n\t\t\t.data(selection)\r\n\t\t\t.enter().append(\"rect\")\r\n\t\t\t.attr(\"class\", style.selectionbar)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\t\t.attr(\"height\", height);      \r\n\r\n\r\n\t\tthis._renderHandles();\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders selection controls\r\n\t*/\r\n\t_renderHandles(){\r\n\t\t// render selection controls\r\n\t\tthis._handles = this._histogramSelection.getSelectionPoints().map((point, index)=>{\r\n\t\t\tvar value = point.value;\r\n\r\n\t\t\tvar handle = new HistogramHandle(this._groupEl, value, index, this._histogramData, this._options);\r\n\r\n\t\t\tif(point.hidden){\r\n\t\t\t\thandle.hide();\r\n\t\t\t}\r\n\r\n\t\t\thandle.on(\"drag\", ()=>{\r\n\t\t\t\tthis._onHandleDrag();\r\n\t\t\t}, this);\r\n\r\n\t\t\tvar startSelectionSnapshot;\r\n\r\n\t\t\t// disable other handles when draggin starts\r\n\t\t\thandle.on(\"startDrag\", ()=>{\r\n\t\t\t\tstartSelectionSnapshot = JSON.stringify(this._options.selection);\r\n\t\t\t\t\r\n\t\t\t\tthis._draggingHandle = true;\r\n\t\t\t\tthis._handles.forEach(handle=>handle.disable());\r\n\t\t\t\thandle.enable();\r\n\t\t\t}, this);\r\n\r\n\t\t\t// enable all handles when draggin starts\r\n\t\t\thandle.on(\"endDrag\", ()=>{\r\n\t\t\t\tthis._draggingHandle = false;\r\n\t\t\t\tthis._handles.forEach(handle=>handle.enable());\r\n\r\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\r\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\r\n\t\t\r\n\t\t\treturn handle;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Returns bar color based on X position\r\n\r\n\t* @param {Number} barX\r\n\t* @param {Array} selection\r\n\t* @returns {Number} bar category index\r\n\t* @param {HistogramData} histogram data \r\n\t*/\r\n\t_getBarSelectionIndex(barX, selection, data){\r\n\t\tfor (var i=0;i<selection.length;i++){\r\n\t\t\tvar s = selection[i];\r\n\t\t\tvar isLast = i == selection.length-1;\r\n\t\t\tvar within = barX >= data.valueToPosition(s.from) && (barX < data.valueToPosition(s.to) || (isLast && barX <= data.valueToPosition(s.to)));\r\n\t\t\tif (within) return i;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns selection color\r\n\t * @param {Object} selection\r\n\t * @param {Object} d datum\r\n\t */\r\n\t_getSelectionColor(selection, d){\r\n\t\tif (selection.colors){\r\n\t\t\treturn selection.colors[d.volumeIndex];\r\n\t\t}\r\n\r\n\t\tif (selection.color){\r\n\t\t\treturn selection.color\r\n\t\t}\r\n\r\n\t\treturn this._options.selectionColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns bar color for given bar position with given selection\r\n\t * @param {Number} barX \r\n\t * @param {Array} selection \r\n\t * @param {HistogramData} histogram data \r\n\t */\r\n\t_getBarColor (barX, selection, data, d){\r\n\t\tvar inactiveBarColor = this._options.inactiveBarColor;\r\n\t\tvar overSelectionColor = this._options.overSelectionColor;\r\n\t\t\r\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\r\n\t\tif (barSelectionIndex == null){\r\n\t\t\treturn inactiveBarColor;\r\n\t\t} else if (selection[barSelectionIndex].disabled){\r\n\t\t\treturn inactiveBarColor;\r\n\t\t} if (this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex){\r\n\t\t\treturn overSelectionColor;\r\n\t\t} else {\r\n\t\t\treturn this._getSelectionColor(selection[barSelectionIndex], d);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns bar color for given bar position with given selection\r\n\t * @param {Number} barX \r\n\t * @param {Array} selection \r\n\t * @param {HistogramData} histogram data \r\n\t */\r\n\t_getBarOpacity (barX, selection, data){\r\n\t\tvar defaultOpacity = 1;\r\n\r\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\r\n\t\tvar isOver = this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex;\r\n\t\tvar isDisabled = barSelectionIndex != null && selection[barSelectionIndex].disabled;\r\n\r\n\t\tif (isOver){\r\n\t\t\treturn this._options.overSelectionOpacity;\r\n\t\t}\r\n\r\n\t\tif (isDisabled){\r\n\t\t\treturn this._options.inactiveBarOpacity;\r\n\t\t}\r\n\t\t\r\n\t\t// otherwise use set opacity if \r\n\t\tif (barSelectionIndex != null && selection[barSelectionIndex].opacity != null){\r\n\t\t\treturn selection[barSelectionIndex].opacity;\r\n\t\t} \r\n\r\n\t\treturn defaultOpacity;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Runs onTransition as a transition between two selections\r\n\t * @param {Array} selection1 \r\n\t * @param {Array} selection2 \r\n\t * @param {Function} onTransition handler\r\n\t */\r\n\t_onSelectionTransition(selection1, selection2, data1, data2, onTransition, onComplete){\r\n\t\tselection1.forEach((s1,selectionIndex)=>{\r\n\t\t\tvar s2 = selection2[selectionIndex];\r\n\t\t\tvar width = this._options.width;\r\n\t\t\tif (selection1[selectionIndex]){\r\n\t\t\t\tvar transitions = [];\r\n\t\t\t\tvar frames = [];\r\n\r\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.from)), Math.round(data2.valueToPosition(s2.from))]);\r\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.to)), Math.round(data2.valueToPosition(s2.to))]);\r\n\r\n\t\t\t\t// make sure duration is calculated based on transition length\r\n\t\t\t\tframes = [Math.abs((transitions[0][0] - transitions[0][1])/width), Math.abs((transitions[1][0] - transitions[1][1])/width)];\r\n\r\n\t\t\t\ttransitions.forEach((t, handleIndex)=>{\r\n\t\t\t\t\tvar duration = 0;\r\n\r\n\t\t\t\t\twhile(t[0] !== t[1]){\r\n\t\t\t\t\t\tsetTimeout(onTransition.bind(this, t[0], selectionIndex, handleIndex), duration);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tduration = duration+0.5/frames[handleIndex];\r\n\t\t\t\t\t\tt[0] = t[0]>t[1]?t[0]-1:t[0]+1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// call final complete fn only if duration is > 0, this prevents premature animation end\r\n\t\t\t\t\t// when one of the sides is in the same position\r\n\t\t\t\t\tif (duration>0){\r\n\t\t\t\t\t\tsetTimeout(function(p, si, hi){\r\n\t\t\t\t\t\t\tonTransition(p, si, hi)\r\n\t\t\t\t\t\t\tonComplete(p, si, hi);\r\n\t\t\t\t\t\t}.bind(this, t[1], selectionIndex, handleIndex), ++duration);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Updates selection\r\n\t*/\r\n\t_updateSelection(){\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\t\tvar bars = this._groupEl.selectAll(\".\"+style.bar);\r\n\r\n\t\t// fills bars with given selection\r\n\t\tvar fillBars = (s, data) => {\r\n\t\t\t// handle bar colors\r\n\t\t\tbars.attr(\"fill\", (d)=> {\r\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\r\n\t\t\t\treturn this._getBarColor(barX, s, data, d);\r\n\t\t\t})\r\n\r\n\t\t\t// handle bar opacity\r\n\t\t\tbars.attr(\"fill-opacity\", (d)=> {\r\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\r\n\t\t\t\treturn this._getBarOpacity(barX, s, data, d);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// handle animation if previous selection is set\r\n\t\tif (this._animate && this._prevSelection){\r\n\t\t\tvar prevSelection = this._prevSelection;\r\n\t\t\tvar prevData = this._prevHistogramData;\r\n\t\t\t\r\n\t\t\t// set prev selection\r\n\t\t\tfillBars(prevSelection, this._prevHistogramData);\r\n\r\n\t\t\t// set handle positions to prev selection\r\n\t\t\tprevSelection.forEach((s, i)=>{\r\n\t\t\t\tvar p1 = this._prevHistogramData.valueToPosition(s.from);\r\n\t\t\t\tvar p2 = this._prevHistogramData.valueToPosition(s.to);\r\n\r\n\t\t\t\tthis._handles[i].setHandleXPosition(p1).setLabelPosition(p1);\r\n\t\t\t\tthis._handles[i+1].setHandleXPosition(p2).setLabelPosition(p2)\r\n\t\t\t});\r\n\r\n\t\t\tthis._animating = true;\r\n\t\t\t//fill bars on selection transition and move handles\r\n\t\t\tthis._onSelectionTransition(prevSelection, selection, prevData, this._histogramData, \r\n\t\t\t\t// on transition callback\r\n\t\t\t\t(p, selectionIndex, handleIndex)=>{\r\n\t\t\t\t\tvar bar = d3.select(bars.nodes()[p]);\r\n\t\t\t\t\tbar.attr(\"fill\", d=>{\r\n\t\t\t\t\t\treturn this._getBarColor(p, selection, this._histogramData, d);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t//var handleText = this._options.format(this._histogramData.positionToValue(p));\r\n\t\t\t\t\t// move handles\r\n\t\t\t\t\t[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].setHandleXPosition(p).setLabelPosition(p)\r\n\r\n\t\t\t\t// on complete callback\t\t\r\n\t\t\t},()=>{\r\n\t\t\t\t\t// hide handles\r\n\t\t\t\t\t//[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].hideLabel();\r\n\t\t\t\t\tfillBars(selection, this._histogramData)\r\n\t\t\t\t\tthis._animating = false;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tthis._prevSelection = null;\r\n\t\t\tthis._prevHistogramData = null;\r\n\t\t\r\n\t\t} else {\r\n\t\t\tfillBars(selection, this._histogramData)\r\n\t\t}\r\n\t\t\r\n\t\t// selection rects\r\n\t\tthis._groupEl.selectAll(\".\"+style.selectionbar)\r\n\t\t\t.data(selection)\r\n\t\t\t.attr(\"data-selection-index\", function(d,i){\r\n\t\t\t\treturn i;\r\n\t\t\t})\r\n\t\t\t.attr(\"x\", (d) => { \r\n\t\t\t\treturn this._histogramData.valueToPosition(d.from);\r\n\t\t\t})\r\n\t\t\t.attr(\"width\", (d) => {\r\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\r\n\t\t\t})\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Shows selection labels\r\n\t */\r\n\tshowSelectionLabels(){\r\n\t\t// show label without calculating offsets when animating\r\n\t\tif (this._animating) {\r\n\t\t\treturn this._handles.forEach(handle=>handle.showLabel());\r\n\t\t}\r\n\r\n\t\tthis._histogramSelection.getSelection().forEach((s,i)=>{\r\n\t\t\tvar handle1 = this._handles[i];\r\n\t\t\tvar handle2 = this._handles[i+1];\r\n\r\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\r\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\r\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\r\n\t\t});\r\n\t\t\r\n\t\tthis._handles.forEach(handle=>handle.showLabel());\r\n\t}\r\n\r\n\t/**\r\n\t * Hides selection labels\r\n\t */\r\n\thideSelectionLabels(){\r\n\t\tthis._handles.forEach(handle=>handle.hideLabel());\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys histogram UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._observable.destroy();\r\n\t\tthis._clear();\r\n\r\n\t\treturn this;\r\n    }\t\t\r\n}","import style from \"./Histogram.css\";\r\nimport HistogramSelectionRenderer from \"./selection/HistogramSelectionRenderer\";\r\nimport * as Defaults from \"./HistogramDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Histogram renderer class\r\n * @param {Object} options\r\n */\r\nexport default class HistogramRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Histogram options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._historyData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = d3.scaleBand().range([0, options.width]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = d3.scaleLinear().range([options.height, 0]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous data for animation\r\n\t\t */\r\n\t\tthis._prevData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * selection renderer\r\n\t\t */\r\n\t\tthis._selectionRenderer = new HistogramSelectionRenderer(options);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * True if labels are visible\r\n\t\t */\r\n\t\tthis._labelsVisible = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a category\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is changed\r\n\t\t\t * @param {Array} selection\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\t\t\r\n\r\n\t\t// relay selection events\r\n\t\tthis._selectionRenderer.on(\"selectionOver\", (selectionIndex)=>{\r\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\r\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"selectionChanged\", (selection)=>{\r\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\r\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t\t});\t\t\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether histogram has been rendered or not\r\n\t * @returns {boolean} true if histogram has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\trender(selector){\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar margin = Defaults.MARGIN;\r\n\r\n\t\t// render SVG\r\n\t\tvar svg = this._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width + margin.left + margin.right)\r\n\t\t\t.attr(\"height\", height + margin.top + this._options.fontSize + margin.bottom)\r\n\t\t\t.classed(style.histogram, true);\r\n\r\n\t\t// render group element\r\n\t\tvar g = this._groupEl = this._svgEl.append(\"g\")\r\n\t\t\t.classed(style.inactive, true)\r\n\t\t\t.attr(\"transform\",\r\n\t\t\t\"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\t\t// handle hover over svg element\r\n\t\tsvg.on(\"mouseover.hover\", ()=>{\r\n\t\t\tg.classed(style.active, true)\r\n\t\t\tg.classed(style.inactive, false)\r\n\t\t})\r\n\r\n\t\tsvg.on(\"mouseout.hover\", ()=>{\r\n\t\t\tg.classed(style.inactive, true)\r\n\t\t\tg.classed(style.active, false)\r\n\t\t})\r\n\r\n\t\tthis._selectionRenderer.render(g);\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t} \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._groupEl.node().innerHTML = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Refreshes histogram data \r\n\t * @param {HistogramData}\r\n\t * @param {HistogramSelection}\r\n\t * @param {Object} options\r\n\t */\r\n\trefresh(histogramData, histogramSelection, options){\r\n\t\tthis._animate = options && options.animate;\r\n\r\n\t\tthis._histogramData = histogramData;\t\t\r\n\t\tthis._clear();\r\n\r\n\t\tthis._xAxis.domain(histogramData.getData().map(function (d) {return d.value; }));\r\n\t\tthis._yAxis.domain([0, d3.max(histogramData.getData(), function (d) { return Math.max.apply(Math, d.volume); })]);\r\n\r\n\t\tthis._renderXAxis();\t\t\r\n\t\tthis._renderDataBars();\r\n\r\n\t\tthis._prevData = histogramData.getData();\t\t\t\r\n\r\n\t\tthis._selectionRenderer.refresh(histogramData, histogramSelection, options);\t\r\n\r\n\t\tif (this._labelsVisible){\r\n\t\t\tthis.showSelectionLabels()\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows selection labels\r\n\t */\r\n\tshowSelectionLabels(){\r\n\t\tthis._selectionRenderer.showSelectionLabels();\r\n\t\t// hide axis labels when selection labels are visible\r\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"none\");\r\n\t\tthis._labelsVisible = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides selection labels\r\n\t */\r\n\thideSelectionLabels(){\r\n\t\tthis._selectionRenderer.hideSelectionLabels();\r\n\t\t// show axis labels when selection labels are not visible\r\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"block\");\t\t\r\n\t\tthis._labelsVisible = false;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Renders data bars\r\n\t*/\r\n\t_renderDataBars() { \r\n\t\tvar data = this._histogramData.getData();\r\n\t\t// var prevData = this._prevData;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\tvar y = this._yAxis;\r\n\r\n\t\tdata.forEach(d=>{\r\n\t\t\td.volume.forEach((v, i)=>{\r\n\t\t\t\tthis._groupEl\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.datum({\r\n\t\t\t\t\t\tvalue:d.value,\r\n\t\t\t\t\t\tvolumeIndex:i\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.attr(\"class\", style.bar)\r\n\t\t\t\t\t.attr(\"x\", this._histogramData.valueToPosition(d.value))\r\n\t\t\t\t\t.attr(\"width\", \"1\")\r\n\t\t\t\t\t.attr(\"y\", Math.floor(y(d.volume[i])))\r\n\t\t\t\t\t.attr(\"height\", Math.ceil(height - y(d.volume[i])))\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders X axis \r\n\t*/        \r\n\t_renderXAxis(){\r\n\t\tvar minMax = this._histogramData.getMinMax();\r\n\t\tvar format = this._options.format;\r\n\t\tvar height = this._options.height + this._options.fontSize + Defaults.LABEL_MARGIN;\r\n\r\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"])\r\n\t\t\t.data([minMax.min, minMax.max])\r\n\t\t\t.enter()\r\n\t\t\t.append(\"text\")\r\n\t\t\t.text((d)=>format(d))\r\n\t\t\t.attr(\"font-size\", this._options.fontSize)\r\n\t\t\t.attr(\"transform\", (d, i)=>{\r\n\t\t\t\treturn [\r\n\t\t\t\t\t\"translate(\"+0+\",\" + height + \")\",\r\n\t\t\t\t\t\"translate(\"+this._options.width+\",\" + height + \")\"\r\n\t\t\t\t][i]\r\n\t\t\t})\r\n\t\t\t.attr(\"text-anchor\", function(d, i){\r\n\t\t\t\treturn [\"start\", \"end\"][i];\r\n\t\t\t})\r\n\t\t\t.classed(style[\"x-axis\"], true)\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys histogram UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\t\tthis._selectionRenderer.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","/**\n * @abstract\n * abstract HistogramSelection class\n */\nexport default class HistogramSelection {\n\tconstructor(histogramData, selection){\n\t\tthis._selection = selection.map(s=>{\n\t\t\treturn Object.assign(s, {\n\t\t\t\tposition:{\n\t\t\t\t\tfrom:histogramData.valueToPosition(s.from),\n\t\t\t\t\tto:histogramData.valueToPosition(s.to)\n\t\t\t\t}\n\t\t\t});\n\t\t});\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelection()\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\treturn this._selection;\n\t}\n\n\t/**\n\t * @public\n\t * @abstract\n\t * @returns {Array} histogram selection\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\tthrow \"HistogramSelection.getOutputSelection() has to be implemented\";\n\t}\n\n\t/**\n\t * @public \n\t * @abstract\n\t * @returns {String}\n\t * Returns histogram selection type\n\t */\n\tgetSelectionType(){\n\t\tthrow \"HistogramSelection.getSelectionType() has to be implemented\";\n\t}\n\n\t/**\n\t * @abstract\n\t * @public \n\t * @returns {Boolean}\n\t * Returns true if toogle is allowed\n\t */\n\tallowsToggle(){\n\t\tthrow \"HistogramSelection.allowsToogle() has to be implemented\";\n\t}\t\n\n\t/**\n\t * @public\n\t * @abstract \n\t * @returns {Array}\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tthrow \"HistogramSelection.getSelection() has to be implemented\";\n\t}  \t\n}\n\nvar SelectionTypes = {\n\tMULTI:\"multi\",\n\tFILTER:\"filter\",\n\tINVERTED_FILTER:\"inverted-filter\"\n}\n\nexport {SelectionTypes} ","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class MultipleHistogramSelection extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.MULTI;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn true;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\t\t\t\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t \t\n}","import MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport * as Defaults from \"../HistogramDefaults\";\n\n/**\n * @class\n * DefaultHistogramSelectionImpl representing histogram selection\n */\nexport default class DefaultHistogramSelectionImpl extends MultipleHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData) {\n\t\tvar minMax = histogramData.getMinMax();\n\t\tvar colors = Defaults.DEFAULT_COLORS;\n\t\tvar start = minMax.min;\n\t\tvar step = (minMax.max - minMax.min) / colors.length;\n\t\tvar selection = colors.map(color=>{\n\t\t\tvar from = start;\n\t\t\tvar to = start + step;\n\t\t\tstart += step;\n\n\t\t\treturn {\n\t\t\t\tfrom:from, \n\t\t\t\tto:to,\n\t\t\t\tcolor:color\n\t\t\t}\n\t\t});\n\n\t\tsuper(histogramData, selection);\n    }\n}","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class FilterHistogramSelectionImpl extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tif (selection.length != 1){\n\t\t\tthrow \"Filter selection doesn't allow more than one selection\"\n\t\t}\n\t\tsuper(histogramData, selection);\n\t}\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.FILTER;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn false;\n\t}\t\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t\n}","import FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class InvertedFilterHistogramSelectionImpl extends FilterHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n\n\t\tthis._selection = this._getInvertedSelection(histogramData, selection);\n    }\n\n\n\t_getInvertedSelection(histogramData, selection){\n\t\tvar minMax = histogramData.getMinMax();\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:minMax.min,\n\t\t\t\tto:selection[0].from\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].from,\n\t\t\t\tdisabled:true,\n\t\t\t\tto:selection[0].to\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].to,\n\t\t\t\tto:minMax.max\n\t\t\t}\n\t\t];\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:this._selection[1].from,\n\t\t\t\tto:this._selection[1].to\n\t\t\t}\n\t\t];\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.INVERTED_FILTER;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = super.getSelectionPoints();\n\t\t\n\t\tresult[0].hidden = true;\n\t\tresult[result.length-1].hidden = true;\n\n\t\treturn result;\n\t}  \t\n}","import DefaultHistogramSelectionImpl from \"./DefaultHistogramSelectionImpl\";\nimport MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport InvertedFilterHistogramSelectionImpl from \"./InvertedFilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * HistogramSelection factory returns appropriate selection implementation\n */\nexport default class HistogramSelectionFactory {\n\t/**\n\t * @param {Object} options\n\t */\n\tconstructor(options) {\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * @param {HistogramData} histogramData\n\t * @returns {HistogramSelection} returns histogram selection\n\t * Returns histogram selection\n\t */\n\tgetHistogramSelection(selection, histogramData){\t\t\n\t\t// use default histogram selection if selection is not provided\n\t\tif (!selection){\n\t\t\treturn new DefaultHistogramSelectionImpl(histogramData, this._options.selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.FILTER){\n\t\t\treturn new FilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.INVERTED_FILTER){\n\t\t\treturn new InvertedFilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else {\n\t\t\treturn new MultipleHistogramSelectionImpl(histogramData, selection);\n\t\t}\n\t}  \t\n}","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default widget height\r\n */\r\nexport const HEIGHT = 200;\r\n\r\n/**\r\n * @public\r\n * Default line color\r\n */\r\nexport const LINE_COLOR = \"#7ed321\";\r\n\r\n/**\r\n * @public\r\n * Default line opacity\r\n */\r\nexport const LINE_OPACITY = 1;\r\n\r\n/**\r\n * @public\r\n * Default fill color\r\n */\r\nexport const FILL_COLOR = \"#7ed321\";\r\n\r\n/**\r\n * @public\r\n * Default fill opacity\r\n */\r\nexport const FILL_OPACITY = 0.1;\r\n\r\n/**\r\n * @public\r\n * Default line width\r\n */\r\nexport const LINE_WIDTH = 3;\r\n\r\n/**\r\n * @public\r\n * Default dot size\r\n */\r\nexport const DOT_SIZE = 6;\r\n\r\n/**\r\n * @public\r\n * Default margin \r\n */\r\nexport const MARGIN = {\r\n    bottom:28\r\n};\r\n\r\n/**\r\n * @public \r\n * Default axis color \r\n */\r\nexport const AXIS_COLOR = \"#f0f0f0\";\r\n\r\n\r\n/**\r\n * @public \r\n * Vertical label offset\r\n */\r\nexport const LABEL_OFFSET = 5;\r\n\r\n\r\n/**\r\n * @public \r\n * Zero line color\r\n */\r\nexport const ZERO_LINE_COLOR = \"#bababa\";","import * as d3 from \"d3\";\n\n/**\n * @class\n * LineData representing data for the line\n */\nexport default class LineData {\n\t/**\n\t * @param {data} data\n\t * @param {Object} options\n\t */\n\tconstructor(data, options) {\n\t\tthis._lineData = this._loadLineData(data, options);\n\t\tthis._minMax = this._calculateMinMax(this._lineData);\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns histogram data\n\t * @returns {Array} histogram data\n\t */\n\tgetData() {\n\t\treturn this._lineData;\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given LineData\n\t* @param {Array} LineData\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(lineData) {\n\t\tvar min = d3.min(lineData, function (d) { return d.value; });\n\t\tvar max = d3.max(lineData, function (d) { return d.value; });\n\n\t\tif (lineData.length==1){\n\t\t\tmin = Math.min(min, 0);\n\t\t\tmax = Math.max(max, 0);\n\t\t}\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.max;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/** \n\t* @private\n\t* @param {Array} data\n\t* @returns {Array} line data\n\t*/\n\t_loadLineData(data) {\n\t\t// no transofrmation at this stage\n\t\treturn data.slice();\n\t}\n}","import style from \"./Line.css\";\r\nimport * as Defaults from \"./LineDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\nvar gradientID = 0;\r\n\r\n/**\r\n * @class\r\n * Line renderer class\r\n * @param {Object} options\r\n */\r\nexport default class TooltipRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Line options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Line data \r\n\t\t */\r\n\t\tthis._lineData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Line has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a line point\r\n\t\t\t * @param {Array} [x,y] data\r\n\t\t\t */\r\n\t\t\t\"pointOver\"\r\n\t\t]);\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Line has been rendered or not\r\n\t * @returns {boolean} true if Line has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {LineHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Line} returns this widget instance\r\n\t */\r\n\trender(groupEl){\r\n\t\tthis._groupEl = groupEl;\r\n\t\tthis._rendered = true;\r\n\r\n\t\tthis._groupEl.on(\"mouseout\", this._onMouseOut.bind(this))\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t_getTextAnchor(xPos, bottomLabelWidth, width){\r\n\t\tvar xpos = xPos;\r\n\t\tif (xpos - bottomLabelWidth/2 < 0){\r\n\t\t\treturn \"start\"\r\n\t\t} else if (xpos + bottomLabelWidth/2 > width){\r\n\t\t\treturn \"end\"\r\n\t\t} else {\r\n\t\t\treturn \"middle\";\r\n\t\t}\r\n\t}\r\n\r\n\t_onHoverAreaOver(d){\r\n\t\tvar duration = this._tooltipGroup.attr(\"visibility\") == \"visible\"?0:0;\r\n\t\tvar x = this._xAxis;\r\n\t\tvar y = this._yAxis;\r\n\t\tvar width = this._options.width;\r\n\t\tvar xPos = x(d.label);\r\n\r\n\t\t// update tooltip position\r\n\t\tthis._tooltipGroup\r\n\t\t\t.transition()\r\n\t\t\t.duration(duration)\r\n\t\t\t.attr(\"visibility\", \"visible\")\r\n\t\t\t.attr(\"transform\", \"translate(\"+xPos+\", 0)\")\r\n\r\n\t\t// update tooltip bottom label\r\n\t\tvar bottomLabelWidth = this._tooltipBottomLabel.node().getBBox().width;\r\n\t\tvar bottomMaskPadding = 25;\r\n\t\tvar textAnchor = this._getTextAnchor(xPos, bottomLabelWidth, width);\r\n\r\n\t\tthis._tooltipBottomLabel\r\n\t\t\t.text(d.label)\r\n\t\t\t.attr(\"text-anchor\", textAnchor);\r\n\r\n\t\tthis._tooltipBottomLabel.attr(\"transform\", ()=>{\r\n\t\t\treturn {\r\n\t\t\t\t\"start\":\"translate(\"+-xPos+\", 0)\",\r\n\t\t\t\t\"middle\":\"translate(0, 0)\",\r\n\t\t\t\t\"end\":\"translate(\"+(width-xPos)+\", 0)\"\r\n\t\t\t}[textAnchor]\r\n\t\t});\r\n\t\t\r\n\t\tvar bottomMaskWidth = bottomMaskPadding*2 + bottomLabelWidth;\r\n\t\tthis._tooltipBottomLabelMask\r\n\t\t\t.attr(\"width\", bottomMaskWidth)\r\n\t\t\t.attr(\"x\", ()=>{\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\"start\":-xPos-bottomMaskPadding,\r\n\t\t\t\t\t\"middle\":-bottomMaskWidth/2,\r\n\t\t\t\t\t\"end\":width-xPos-bottomMaskWidth+bottomMaskPadding,\r\n\t\t\t\t}[textAnchor]\r\n\t\t\t})\r\n\r\n\t\tthis._handleMaskGradientEl.attr(\"x1\", -bottomMaskWidth/2);\r\n\t\tthis._handleMaskGradientEl.attr(\"x2\", bottomMaskWidth/2);\t\t\t\r\n\r\n\t\t// update tooltip top label \r\n\t\tvar tooltipHtml = d.tooltip || this._options.format(d.value);\r\n\t\tthis._tooltipTopLabel.node().innerHTML = tooltipHtml;\r\n\t\tvar labelLeft = this._getLabelLeft(xPos);\r\n\r\n\t\tif (d.value){\r\n\t\t\tthis._tooltipTopLabel\r\n\t\t\t\t.style(\"left\", labelLeft+\"px\")\r\n\t\t\t\t.style(\"visibility\", \"visible\")\r\n\t\t\t\t.style(\"top\", y(d.value)-50+\"px\")\r\n\r\n\t\t\t// update line circle\r\n\t\t\tthis._tooltipLineCircle\r\n\t\t\t\t.transition()\r\n\t\t\t\t.duration(duration)\r\n\t\t\t\t.style(\"visibility\", \"visible\")\r\n\t\t\t\t.attr(\"cy\", y(d.value))\t\t\t\t\r\n\t\t} else {\r\n\t\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\");\r\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\t_getLabelLeft(xPos){\r\n\t\tvar labelWidth = this._tooltipTopLabel.node().offsetWidth;\r\n\t\tvar labelLeft = xPos-labelWidth/2;\r\n\t\t\r\n\t\tif (labelLeft<0){\r\n\t\t\tlabelLeft = 0;\r\n\t\t}\r\n\r\n\t\tif (labelLeft>this._options.width - labelWidth){\r\n\t\t\tlabelLeft = this._options.width - labelWidth;\r\n\t\t}\r\n\r\n\t\treturn labelLeft;\r\n\t}\r\n\r\n\t_onMouseOut(){\r\n\t\t// only hide when mouse is outside of widget\r\n\t\tif (!this._groupEl.node().parentNode.contains(d3.event.relatedTarget)){\r\n\t\t\tthis._hideTooltip();\r\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t_hideTooltip(){\r\n\t\tthis._tooltipGroup.attr(\"visibility\", \"hidden\")\r\n\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\")\r\n\t}\r\n\r\n\t_renderTooltip(){\r\n\t\tvar data = this._lineData.getData();\r\n\t\tvar hoverWidth;\r\n\t\tif (data.length>1){\r\n\t\t\thoverWidth = this._options.width / (data.length-1);\r\n\t\t} else {\r\n\t\t\thoverWidth = this._options.width;\r\n\t\t}\r\n\r\n\t\tthis._hoverAreas = this._groupEl\r\n\t\t\t.selectAll(\".\"+style[\"tooltip-hover-area\"])\r\n\t\t\t.data(data)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-hover-area\"])\r\n\t\t\t.attr(\"width\", hoverWidth)\r\n\t\t\t.attr(\"fill-opacity\", 0.00)\r\n\t\t\t.attr(\"x\", (d)=>{\r\n\t\t\t\treturn this._xAxis(d.label) - hoverWidth/2\r\n\t\t\t})\r\n\t\t\t.attr(\"height\", this._options.height)\r\n\t\t\t.on(\"mouseover\", this._onHoverAreaOver.bind(this))\r\n\r\n\t\tthis._tooltipGroup = this._groupEl\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"visibility\", \"hidden\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-group\"])\r\n\r\n\t\tthis._tooltipLineCircle = this._tooltipGroup\r\n\t\t\t.append(\"circle\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-line-circle\"])\r\n\t\t\t.attr(\"stroke-width\", this._options.lineWidth)\r\n\t\t\t.attr(\"stroke\", this._options.lineColor)\r\n\t\t\t.attr(\"stroke-opacity\", this._options.lineOpacity)\r\n\t\t\t.attr(\"r\", 2.5+this._options.lineWidth/2)\r\n\r\n\t\tthis._tooltipAxisCircle = this._tooltipGroup\r\n\t\t\t.append(\"circle\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-axis-circle\"])\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"cy\", this._options.height - Defaults.MARGIN.bottom)\r\n\t\t\t.attr(\"r\", 2.5 + 1/2)\r\n\r\n\t\tthis._tooltipBottomLabelMask = this._tooltipGroup\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"fill\", \"url(#\"+this._handleMaskGradientEl.attr(\"id\")+\")\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-label-mask\"])\r\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET-15)\r\n\t\t\t.attr(\"height\", 20)\r\n\r\n\t\tthis._tooltipBottomLabel = this._tooltipGroup\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-label\"])\r\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET)\r\n\t\t\t.attr(\"text-anchor\", \"start\")\r\n\t\t\t.text(data[0].label)\r\n\r\n\t\tthis._tooltipTopLabel = d3.select(this._groupEl.node().parentNode.parentNode)\r\n\t\t\t.insert(\"span\", \":first-child\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-top-label\"])\r\n\t\t\t.style(\"position\", \"absolute\")\r\n\t\t\t.style(\"visibility\", \"hidden\")\r\n\r\n\t\tthis._tooltipRendered = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates mask gradient element\r\n\t * @param {Number} handleIndex \r\n\t */\r\n\t_createMaskGradientElement(){\r\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\r\n\t\t\t.attr(\"id\", style[\"tooltip-label-mask\"]+\"-\"+(gradientID++)+\"-gradient\")\r\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\r\n\t\t\t.attr(\"y1\", \"0\").attr(\"x1\", \"0\")\r\n\t\t\t.attr(\"y2\", \"0\").attr(\"x2\", \"0\");\r\n\r\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\r\n\t\t\t.data([\r\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\r\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\r\n\t\t\t])\r\n\t\t\t.enter().append(\"stop\")\r\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\r\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\r\n\r\n\t\treturn this._handleMaskGradientEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tif (this._tooltipRendered){\r\n\t\t\tthis._hoverAreas.remove();\r\n\t\t\tthis._tooltipGroup.remove();\r\n\t\t\tthis._tooltipTopLabel.remove();\r\n\t\t\tthis._tooltipRendered = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Sets line data \r\n\t * @param {LineData}\r\n\t */\r\n\tupdate(lineData, x, y){\r\n\t\tthis._xAxis = x;\r\n\t\tthis._yAxis = y; \r\n\t\tthis._lineData = lineData;\r\n\r\n\t\tthis._createMaskGradientElement();\r\n\t\tthis._clear();\r\n\t\tthis._renderTooltip();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Line UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._clear();\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","import style from \"./Line.css\";\r\nimport * as Defaults from \"./LineDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport TooltipRenderer from \"./TooltipRenderer\";\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Line renderer class\r\n * @param {Object} options\r\n */\r\nexport default class LineRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Line options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Line data \r\n\t\t */\r\n\t\tthis._lineData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Line has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous data for animation\r\n\t\t */\r\n\t\tthis._prevData = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a line point\r\n\t\t\t * @param {Array} [x,y] data\r\n\t\t\t */\r\n\t\t\t\"pointOver\"\r\n\t\t]);\r\n\r\n\t\tthis._tooltipRenderer = new TooltipRenderer(options);\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Line has been rendered or not\r\n\t * @returns {boolean} true if Line has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {LineHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Line} returns this widget instance\r\n\t */\r\n\trender(selector){\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\t// force position relative so the toolip shows correctly\r\n\t\tct.style(\"position\", \"relative\");\r\n\r\n\t\t// render SVG\r\n\t\tthis._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height)\r\n\t\t\t.classed(style.svg, true)\r\n\t\t\t.classed(style.line, true);\r\n\r\n\t\t// render group element\r\n\t\tthis._groupEl = this._svgEl.append(\"g\");\r\n\r\n\t\tthis._tooltipRenderer.render(this._groupEl);\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t} \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._groupEl.node().innerHTML = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Sets line data \r\n\t * @param {LineData}\r\n\t */\r\n\tupdate(lineData){\r\n\t\tthis._lineData = lineData;\t\t\r\n\t\tthis._clear();\r\n\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar verticalSpacing = this._options.verticalSpacing;\r\n\r\n\t\tvar data = lineData.getData();\r\n\t\tvar minMax = lineData.getMinMax();\r\n\r\n\t\tvar x = this._xAxis = d3.scalePoint().range([0, width]);\t\r\n\t\tvar y = this._yAxis = d3.scaleLinear().range([height-verticalSpacing, verticalSpacing]);\r\n\r\n\t\tx.domain(data.map(function (d) {return d.label; }));\r\n\t\ty.domain([minMax.min, minMax.max]);\r\n\r\n\t\tthis._renderZeroLine(data);\r\n\t\tthis._renderDataLines(data);\r\n\t\tthis._renderXAxis(data);\r\n\t\tthis._tooltipRenderer.update(lineData, x, y);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * Renders x axis\r\n\t*/\r\n\t_renderXAxis(data){\r\n\t\tthis._groupEl.append(\"line\")\r\n\t\t\t.attr(\"x1\", 0)\r\n\t\t\t.attr(\"x2\", this._options.width)\r\n\t\t\t.attr(\"y1\", this._options.height-Defaults.MARGIN.bottom)\r\n\t\t\t.attr(\"y2\", this._options.height-Defaults.MARGIN.bottom)\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"stroke\", this._options.axisColor)\r\n\r\n\t\t// render to labels on start and end sides if multiple items are available\r\n\t\tif (data.length>1){\r\n\t\t\tthis._groupEl\r\n\t\t\t\t.append(\"text\")\r\n\t\t\t\t.text(data[0].label)\r\n\t\t\t\t.attr(\"x\", 0)\r\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\r\n\r\n\t\t\tthis._groupEl\r\n\t\t\t\t.append(\"text\")\r\n\t\t\t\t.text(data[data.length-1].label)\r\n\t\t\t\t.attr(\"x\", this._options.width)\r\n\t\t\t\t.attr(\"text-anchor\", \"end\")\r\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\r\n\r\n\t\t// render single label in the middle if only one item is available\t\t\t\t\r\n\t\t} else if (data.length == 1){\r\n\t\t\tthis._groupEl\r\n\t\t\t\t.append(\"text\")\r\n\t\t\t\t.text(data[0].label)\r\n\t\t\t\t.attr(\"x\", this._options.width/2)\r\n\t\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\r\n\t\t}\t\r\n\t}\r\n\t/**\r\n\t * Returns true if graph should render zero line\r\n\t * @param {Array} data \r\n\t */\r\n\t_showZeroLine(){\r\n\t\tvar zeroLinePosition = this._yAxis(0);\r\n\t\tvar axisPosition = this._options.height-Defaults.MARGIN.bottom;\r\n\t\tvar treshold = 10;\r\n\t\treturn zeroLinePosition<axisPosition-treshold;\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * Renders zero line\r\n\t*/\r\n\t_renderZeroLine(){\r\n\t\tif (this._showZeroLine()){\r\n\t\t\tthis._groupEl.append(\"line\")\r\n\t\t\t\t.attr(\"x1\", 0)\r\n\t\t\t\t.attr(\"x2\", this._options.width)\r\n\t\t\t\t.attr(\"y1\", Math.round(this._yAxis(0)))\r\n\t\t\t\t.attr(\"y2\", Math.round(this._yAxis(0)))\r\n\t\t\t\t.attr(\"stroke-dasharray\",\"2 ,2\")\r\n\t\t\t\t.attr(\"stroke\", this._options.zeroLineColor)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * Renders data lines\r\n\t*/\r\n\t_renderDataLines(data) { \r\n\t\tvar x = this._xAxis;\r\n\t\tvar y = this._yAxis;\r\n\t\t\r\n\t\tvar options = this._options;\r\n\t\tvar minHeight = this._options.height-Defaults.MARGIN.bottom;\r\n\r\n\t\tvar areaZero = this._showZeroLine()?Math.min(minHeight, y(0)):minHeight;\r\n\r\n\t\t// define the area\r\n\t\tvar area = d3.area()\r\n\t\t\t.x(function(d) {return x(d.label); })\r\n\t\t\t.y0(areaZero)\r\n\t\t\t.y1(function(d) { return y(d.value); });\r\n\r\n\t\t// define the line\r\n\t\tvar line = d3.line()\r\n\t\t\t.x(function(d) { return x(d.label); })\r\n\t\t\t.y(function(d) { return y(d.value); });\t\t\r\n\r\n\t\t// apply grouping if needed (null or other splits)\r\n\t\tconst groupedData = this._getGroupedData(data);\r\n\r\n\t\tgroupedData.forEach(lineData=>{\r\n\t\t\t// only add area if not rendering a dot\r\n\t\t\tif (lineData.length>1){\r\n\t\t\t\t// add the area path\r\n\t\t\t\tthis._groupEl.append(\"path\")\r\n\t\t\t\t.data([lineData])\r\n\t\t\t\t.attr(\"class\", style[\"area\"])\r\n\t\t\t\t.attr(\"fill\", options.fillColor)\r\n\t\t\t\t.attr(\"fill-opacity\", options.fillOpacity)\r\n\t\t\t\t.attr(\"d\", area);\r\n\t\t\t}\r\n\r\n\t\t\tif (lineData.length){\r\n\t\t\t\t// add the line path\r\n\t\t\t\tthis._groupEl.append(\"path\")\r\n\t\t\t\t\t.data([lineData])\r\n\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t.attr(\"stroke-linecap\", \"round\")\r\n\t\t\t\t\t.attr(\"stroke\", options.lineColor)\r\n\t\t\t\t\t.attr(\"stroke-opacity\", 1)\r\n\t\t\t\t\t// note that in case of a single item, dot is rendered with a different size\r\n\t\t\t\t\t.attr(\"stroke-width\", lineData.length>1?options.lineWidth:options.dotSize)\r\n\t\t\t\t\t.attr(\"class\", style[\"line\"])\r\n\t\t\t\t\t.attr(\"d\", (d)=>{\r\n\t\t\t\t\t\tvar path = line(d);\r\n\t\t\t\t\t\t// Fix issue in Chrome on Mac and Surface where\r\n\t\t\t\t\t\t// path points are not rendererd if it's a single point \r\n\t\t\t\t\t\tif (path && path.split(\",\").length == 2){\r\n\t\t\t\t\t\t\treturn path + \" \" + path;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn path;\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Splits given array into multiple in case there is null in value\r\n\t * @param {Array} data \r\n\t */\r\n\t_getGroupedData(data){\r\n\t\tlet group = [];\r\n\t\tconst result = [group];\r\n\t\t\r\n\t\tdata.forEach(item=>{\r\n\t\t\tif (item.value === null){\r\n\t\t\t\tgroup = [];\r\n\t\t\t\tresult.push(group);\r\n\t\t\t} else {\r\n\t\t\t\tgroup.push(item);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Line UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","import Bar from \"./bar/Bar\";\r\nimport Doughnut from \"./doughnut/Doughnut\";\r\nimport Histogram from \"./histogram/Histogram\";\r\nimport Line from \"./line/Line\";\r\n\r\nexport default {\r\n\tBar:Bar,\r\n    Doughnut:Doughnut,\r\n    Histogram:Histogram,\r\n    Line:Line\r\n}"],"names":["getOptionValue","optionValue","defaultOptionValue","getHandlePositionOffsets","handle1","handle2","maskPadding","width","label1Box","getLabelBox","label2Box","conflictDiff","x","posDiff1","posDiff2","xMax","Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","WIDTH","BAR_HEIGHT","INACTIVE_BAR_COLOR","OVER_BAR_COLOR","ACTIVE_BAR_COLOR","ENABLE_BAR_TOGGLE","ENABLE_BAR_HOVER","LABEL_FONT_SIZE","VALUE_FONT_SIZE","BarData","data","options","_barData","_loadBarData","_minMax","_calculateMinMax","_options","barData","d3","d","value","numParts","max","toString","split","slice","BarRenderer","_containerEl","_groupEl","_svgEl","_xAxis","_yAxis","_rendered","_prevData","_observable","_maskIndex","MASK_INDEX","eventName","on","selector","ct","height","append","attr","style","bar","_clipPath","labelFontSize","node","innerHTML","_clear","getData","minMax","getMinMax","barHeight","range","domain","map","item","reverse","_renderDataBars","y","observable","barGroups","selectAll","enter","Math","floor","classed","highlighted","enableBarHover","fire","enableBarToggle","disabled","text","label","tooltip","_this","format","valueFontSize","color","Defaults","removeChild","destroy","Bar","inactiveBarColor","overBarColor","activeBarColor","_barRenderer","barIndex","off","render","isRendered","getPrecision","setData","OUTER_RADIUS","INNER_RADIUS","VALUE","ACTIVE_COLOR","INACTIVE_COLOR","BACKGROUND_COLOR","ANIMATION_DURATION","DoughnutRenderer","offsetWidth","offsetHeight","_value","angle","_angle","tau","innerRadius","_innerRadius","outerRadius","_outerRadius","arc","_arc","startAngle","g","_inactiveArc","datum","endAngle","inactiveColor","_activeArc","activeColor","_backgroundArc","backgroundColor","_hoverEl","opts","activeArcTransition","transition","duration","animationDuration","attrTween","_arcTween","_this2","interpolateOuterRadius","interpolateInnerRadius","interpolateAngle","t","_this3","Doughnut","renderTo","_doughnutRenderer","update","HEIGHT","MARGIN","INACTIVE_BAR_OPACITY","OVER_SELECTION_COLOR","OVER_SELECTION_OPACITY","SELECTION_COLOR","ENABLE_SELECTION_TOGGLE","FONT_SIZE","DEFAULT_COLORS","HistogramData","_histogramData","_loadHistogramData","histogramData","min","position","getValueRatio","valueRatio","constrainedValue","round","numOfBarsPerBucket","forEach","bucket","step","volume","Array","isArray","HistogramHandle","groupEl","_handleEl","_handleLineEl","_handleCircleEl","_handleMaskEl","_handleMaskGradientEl","_handleLabelEl","_isOver","_index","_initialValue","Number","_position","valueToPosition","_initialPosition","_labelSizeCache","_elements","_renderHandle","element","remove","_createHandleElement","_createHandleLineElement","_createHandleCircleElement","_createDragMaskElement","_createMaskGradientElement","_createDragLabelElement","_handleHoverState","_handleDrag","parseInt","_updateLabelPosition","getBBox","offset","setLabelOffset","setHoverState","unsetHoverState","xpos","positionToValue","_getLabelText","call","_onDrag","bind","_onStartDrag","_onEndDrag","content","getComputedTextLength","fontSize","textLength","_getComputedLabelTextLength","maskWidth","xPosition","gradientIndex","HistogramSelectionRenderer","_histogramSelection","_overSelectionIndex","_handles","_draggingHandle","_prevSelection","_animating","_destroyHandles","_selectionBars","handle","handleIndex","handleValue","promptHandler","then","promptResult","startSelectionSnapshot","JSON","stringify","getOutputSelection","parseFloat","points","getSelectionPoints","positions","sort","p1","p2","point","_updateSelectionPositions","_updateSelection","_renderHandles","selection","selectionIndex","enabled","target","allowsToggle","_toggleSelection","_onHandleClick","_onClick","histogramSelection","_animate","animate","getSelection","_prevHistogramData","_renderSelection","_handleClick","handles","h1","h2","getXPosition","labelOffsets","PositionUtils","nodes","_updateSelectionControlsHoverState","selectionbar","_onSelectionMouseOut","_onSelectionMouseOver","p","from","to","pos","hidden","hide","_onHandleDrag","disable","enable","barX","s","isLast","colors","volumeIndex","selectionColor","overSelectionColor","barSelectionIndex","_getBarSelectionIndex","_getSelectionColor","isOver","isDisabled","overSelectionOpacity","inactiveBarOpacity","opacity","selection1","selection2","data1","data2","onTransition","onComplete","s1","s2","_this4","transitions","frames","abs","si","hi","bars","fillBars","_this5","_getBarColor","_getBarOpacity","prevSelection","prevData","setHandleXPosition","setLabelPosition","_onSelectionTransition","showLabel","_this6","hideLabel","HistogramRenderer","_historyData","_selectionRenderer","_labelsVisible","margin","svg","left","right","top","bottom","histogram","inactive","active","_renderXAxis","refresh","showSelectionLabels","hideSelectionLabels","v","ceil","HistogramSelection","_selection","Object","assign","SelectionTypes","MultipleHistogramSelection","MULTI","result","DefaultHistogramSelectionImpl","start","MultipleHistogramSelectionImpl","FilterHistogramSelectionImpl","FILTER","InvertedFilterHistogramSelectionImpl","_getInvertedSelection","INVERTED_FILTER","HistogramSelectionFactory","selectionType","Histogram","enableSelectionToggle","_histogramRenderer","_selectionFactory","getHistogramSelection","String","setSelection","LINE_COLOR","LINE_OPACITY","FILL_COLOR","FILL_OPACITY","LINE_WIDTH","DOT_SIZE","AXIS_COLOR","ZERO_LINE_COLOR","LineData","_lineData","_loadLineData","lineData","TooltipRenderer","_onMouseOut","xPos","bottomLabelWidth","_tooltipGroup","_tooltipBottomLabel","textAnchor","_getTextAnchor","bottomMaskWidth","bottomMaskPadding","_tooltipBottomLabelMask","tooltipHtml","_tooltipTopLabel","labelLeft","_getLabelLeft","_tooltipLineCircle","labelWidth","parentNode","contains","relatedTarget","_hideTooltip","hoverWidth","_hoverAreas","_onHoverAreaOver","lineWidth","lineColor","lineOpacity","_tooltipAxisCircle","insert","_tooltipRendered","gradientID","_renderTooltip","LineRenderer","_tooltipRenderer","line","verticalSpacing","_renderZeroLine","_renderDataLines","axisColor","_showZeroLine","zeroLineColor","minHeight","areaZero","area","y0","y1","_getGroupedData","fillColor","fillOpacity","dotSize","path","group","_lineRenderer"],"mappings":"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"}