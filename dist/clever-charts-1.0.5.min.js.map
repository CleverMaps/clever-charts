{"version":3,"file":"clever-charts-1.0.5.min.js","sources":["../src/bar/Bar.js","../src/doughnut/Doughnut.js","../src/histogram/utils/PositionUtils.js","../src/histogram/Histogram.js","../src/line/Line.js","../src/utils/Observable.js","../src/bar/BarDefaults.js","../src/bar/BarData.js","../src/bar/BarRenderer.js","../src/doughnut/DoughnutDefaults.js","../src/doughnut/DoughnutRenderer.js","../src/histogram/HistogramDefaults.js","../src/histogram/HistogramData.js","../src/histogram/selection/HistogramHandle.js","../src/histogram/selection/HistogramSelectionRenderer.js","../src/histogram/HistogramRenderer.js","../src/histogram/selection/HistogramSelection.js","../src/histogram/selection/MultipleHistogramSelectionImpl.js","../src/histogram/selection/DefaultHistogramSelectionImpl.js","../src/histogram/selection/FilterHistogramSelectionImpl.js","../src/histogram/selection/InvertedFilterHistogramSelectionImpl.js","../src/histogram/selection/HistogramSelectionFactory.js","../src/line/LineDefaults.js","../src/line/LineData.js","../src/line/TooltipRenderer.js","../src/line/LineRenderer.js","../src/CleverCharts.js"],"sourcesContent":["import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./BarDefaults\";\nimport BarData from \"./BarData\";\nimport BarRenderer from \"./BarRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main Bar class\n * @param {Object} options\n */\nclass Bar {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.barHeight = getOptionValue(options.barHeight, Defaults.BAR_HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Label font size \n\t\t */\n\t\tthis._options.labelFontSize = getOptionValue(options.labelFontSize, Defaults.LABEL_FONT_SIZE);\n\n\t\t/**\n\t\t * @public\n\t\t * Label font size \n\t\t */\n\t\tthis._options.valueFontSize = getOptionValue(options.valueFontSize, Defaults.VALUE_FONT_SIZE);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive bar color \n\t\t */\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Over bar color \n\t\t */\n\t\tthis._options.overBarColor = getOptionValue(options.overBarColor, Defaults.OVER_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.activeBarColor = getOptionValue(options.activeBarColor, Defaults.ACTIVE_BAR_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Selection color \n\t\t */\n\t\tthis._options.activeBarColors = getOptionValue(options.activeBarColors, Defaults.ACTIVE_BAR_COLORS);\n\n\t\t/**\n\t\t * @public\n\t\t * Enables bar toggle\n\t\t */\n\t\tthis._options.enableBarToggle = getOptionValue(options.enableBarToggle, Defaults.ENABLE_BAR_TOGGLE);\n\n\t\t/**\n\t\t * @public\n\t\t * Enables bar hover \n\t\t */\n\t\tthis._options.enableBarHover = getOptionValue(options.enableBarHover, Defaults.ENABLE_BAR_HOVER);\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a bar\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out of bar\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barOut\",\t\t\t\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when bar is clicked\n\t\t\t * @param {int} barIndex\n\t\t\t */\n\t\t\t\"barClick\",\t\t\t\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when bar is disabled\n\t\t\t * @param {int} barIndex\n\t\t\t * @param {boolean} disabled\n\t\t\t */\n\t\t\t\"barDisabled\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * BarRenderer\n\t\t */\n\t\tthis._barRenderer = new BarRenderer(this._options);\n\n\t\tthis._barRenderer.on(\"barOver\", barIndex=>{\n\t\t\tthis._observable.fire(\"barOver\", barIndex);\n\t\t})\n\n\t\tthis._barRenderer.on(\"barOut\", barIndex=>{\n\t\t\tthis._observable.fire(\"barOut\", barIndex);\n\t\t})\n\n\t\tthis._barRenderer.on(\"barClick\", (barIndex)=>{\n\t\t\tthis._observable.fire(\"barClick\", barIndex);\n\t\t})\n\n\t\tthis._barRenderer.on(\"barDisabled\", (barIndex, disabled)=>{\n\t\t\tthis._observable.fire(\"barDisabled\", barIndex, disabled);\n\t\t})\t\t\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Bar} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Bar} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Bar} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._barRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Bar} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._barRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {...Array} series\n\t * @returns {Bar} returns this widget instance \n\t */\n\tsetData(...series) {\n\t\tif (!this._barRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar barData = this._barData = new BarData(series, this._options);\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + this._barData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._barRenderer.setData(barData);\n\n\t\treturn this;\n\t}\n}\n\nexport default Bar;\n","import Observable from \"../utils/Observable\";\nimport * as Defaults from \"./DoughnutDefaults\";\nimport DoughnutRenderer from \"./DoughnutRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main doughnut class\n * @param {Object} options\n */\nclass Doughnut {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.outerRadius = getOptionValue(options.outerRadius, Defaults.OUTER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.innerRadius = getOptionValue(options.innerRadius, Defaults.INNER_RADIUS);\n\n\t\t/**\n\t\t * @public\n\t\t * Active color\n\t\t */\n\t\tthis._options.activeColor = getOptionValue(options.activeColor, Defaults.ACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.inactiveColor = getOptionValue(options.inactiveColor, Defaults.INACTIVE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Inactive color\n\t\t */\n\t\tthis._options.backgroundColor = getOptionValue(options.backgroundColor, Defaults.BACKGROUND_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Value\n\t\t */\n\t\tthis._options.value = getOptionValue(options.value, Defaults.VALUE);\n\n\t\t/**\n\t\t * @public\n\t\t * Animation duration\n\t\t */\n\t\tthis._options.animationDuration = getOptionValue(options.animationDuration, Defaults.ANIMATION_DURATION);\n\n\t\t/**\n\t\t * @public\n\t\t * Render to container\n\t\t */\n\t\tthis._options.renderTo = getOptionValue(options.renderTo, null);\t\t\n\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over\n\t\t\t */\n\t\t\t\"mouseOver\",\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is out\n\t\t\t */\n\t\t\t\"mouseOut\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * DoughnutRenderer\n\t\t */\n\t\tthis._doughnutRenderer = new DoughnutRenderer(this._options);\n\n\t\tthis._doughnutRenderer.on(\"mouseOver\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOver\")\n\t\t});\n\n\t\tthis._doughnutRenderer.on(\"mouseOut\", ()=>{\n\t\t\tthis._observable.fire(\"mouseOut\")\n\t\t});\n\n\t\tif (options.renderTo){\n\t\t\tthis.render(options.renderTo);\n\t\t}\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Doughnut} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._doughnutRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Doughnut} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._doughnutRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets widget data\n\t * @param {Object} options\n\t * @returns {Doughnut} returns this widget instance \n\t */\n\tupdate(options) {\n\t\tif (!this._doughnutRenderer.isRendered()) {\n\t\t\tthrow \"Can't call update() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tthis._doughnutRenderer.update(options);\n\n\t\treturn this;\n\t}\n}\n\nexport default Doughnut;\n","/**\n * @public\n * Returns handle positions offsets so that labels don't conflict visually\n * @param {HistogramData} histogramData \n * @returns {Array} label offsets\n */\nexport function getHandlePositionOffsets(handle1, handle2, maskPadding, width){\n    var label1Box = handle1.getLabelBox();\n    var label2Box = handle2.getLabelBox();\n\n    // calculate conflict number\n    var conflictDiff = label2Box.x - (label1Box.x + label1Box.width)-maskPadding;\n    // and handle if there is not enough space\n    if (conflictDiff<0){\n        // pos1 diff to the left\n        var posDiff1 = conflictDiff/2;\n        // pos2 diff to to right\n        var posDiff2 = conflictDiff/2;\n\n        // position left to 0 if position would be lower than 0\n        var xMin = label1Box.x+posDiff1;\n        if (xMin < 0){\n            posDiff1 = label1Box.x; \n            // also shift right label so we keep it visible\n            posDiff2 = posDiff2*2\n        }\n\n        // same with max value\n        var xMax = label2Box.x+label2Box.width-posDiff2;\n        if (xMax > width){\n            posDiff2 += xMax-width; \n            posDiff1 = posDiff1*2\n        }\n        return [posDiff1, -posDiff2];                  \n    }\n\n    return [0,0];\n}","import * as d3 from \"d3\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as Defaults from \"./HistogramDefaults\";\r\nimport HistogramData from \"./HistogramData\";\r\nimport HistogramRenderer from \"./HistogramRenderer\";\r\nimport HistogramSelectionFactory from \"./selection/HistogramSelectionFactory\"\r\nimport {SelectionTypes} from \"./selection/HistogramSelection\";\r\n\r\n/**\r\n * @private \r\n * @param {*} optionValue option value \r\n * @param {*} defaultOptionValue default option value \r\n * @returns option or default option value \r\n */\r\nfunction getOptionValue(optionValue, defaultOptionValue) {\r\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\r\n}\r\n\r\n/**\r\n * @class\r\n * Main histogram class\r\n * @param {Object} options\r\n */\r\nclass Histogram {\r\n\tconstructor(options) {\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Options property exposing widget's options\r\n\t\t */\r\n\t\tthis._options = {};\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * prompt handler\r\n\t\t */\r\n\t\tthis._options.promptHandler = options.promptHandler || null;\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Width of the widget\r\n\t\t */\r\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Height of the widget\r\n\t\t */\r\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Format for widget labels \r\n\t\t */\r\n\t\tthis._options.format = getOptionValue(options.format, null);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Inactive bar color \r\n\t\t */\r\n\t\tthis._options.inactiveBarColor = getOptionValue(options.inactiveBarColor, Defaults.INACTIVE_BAR_COLOR);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Inactive bar opacity \r\n\t\t */\r\n\t\tthis._options.inactiveBarOpacity = getOptionValue(options.inactiveBarOpacity, Defaults.INACTIVE_BAR_OPACITY);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Over bar color \r\n\t\t */\r\n\t\tthis._options.overSelectionColor = getOptionValue(options.overSelectionColor, Defaults.OVER_SELECTION_COLOR);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Over selection opacity \r\n\t\t */\r\n\t\tthis._options.overSelectionOpacity = getOptionValue(options.overSelectionOpacity, Defaults.OVER_SELECTION_OPACITY);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Selection color \r\n\t\t */\r\n\t\tthis._options.selectionColor = getOptionValue(options.selectionColor, Defaults.SELECTION_COLOR);\r\n\t\t\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Enable selection toggle \r\n\t\t */\r\n\t\tthis._options.enableSelectionToggle = getOptionValue(options.enableSelectionToggle, Defaults.ENABLE_SELECTION_TOGGLE);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * Font size\r\n\t\t */\r\n\t\tthis._options.fontSize = getOptionValue(options.fontSize, Defaults.FONT_SIZE);\r\n\r\n\t\t/**\r\n\t\t * @public\r\n\t\t * selection type\r\n\t\t */\r\n\t\tthis._options.selectionType = getOptionValue(options.selectionType, null);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a selection\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t * @param {MouseEvent} browser event\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * histogramRenderer\r\n\t\t */\r\n\t\tthis._histogramRenderer = new HistogramRenderer(this._options);\r\n\r\n\t\tthis._histogramRenderer.on(\"selectionOver\", selectionIndex=>{\r\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\r\n\t\t})\r\n\r\n\t\tthis._histogramRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\r\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled, d3.event);\r\n\t\t})\r\n\r\n\t\tthis._histogramRenderer.on(\"selectionChanged\", (selection)=>{\r\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\r\n\t\t})\r\n\r\n\t\tthis._histogramRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\r\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t\t});\r\n\t\t\r\n\t\tthis._selectionFactory = new HistogramSelectionFactory(this._options);\r\n\t}\r\n\r\n\t/**\r\n\t * Bind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Unbind widget event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler\r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\toff(eventName, handler) {\r\n\t\tthis._observable.off(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Destroys widget\r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\tdestroy() {\r\n\t\tthis._observable.destroy();\r\n\t\tthis._histogramRenderer.destroy();\r\n\t\tthis._options = null;\r\n\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\trender(selector) {\r\n\t\tthis._histogramRenderer.render(selector);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Sets widget data\r\n\t * @param {Array} data\r\n\t * @param {Array} selection\r\n\t * @param {Object} set data options\r\n\t * @returns {Histogram} returns this widget instance \r\n\t */\r\n\tsetData(data, selection, options) {\r\n\t\tif (!this._histogramRenderer.isRendered()) {\r\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\r\n\t\t}\r\n\r\n\t\tvar histogramData = this._histogramData = new HistogramData(data, this._options);\r\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, histogramData);\r\n\r\n\t\tthis._options.selection = histogramSelection.getSelection();\r\n\t\tthis._selection = selection;\r\n\r\n\t\tif (!this._options.format) {\r\n\t\t\tthis._options.format = (value => String(value));\r\n\t\t} else if (typeof this._options.format == \"string\"){\r\n\t\t\tthis._options.format = d3.format(this._options.format);\r\n\t\t}\r\n\r\n\t\tthis._histogramRenderer.refresh(histogramData, histogramSelection, options);\r\n\r\n\t\treturn this;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public\r\n\t * Sets selection type\r\n\t * @param {String} selectionType\r\n\t * @returns {Histogram} returns this widget instance \r\n\t */\r\n\tsetSelectionType(selectionType){\r\n\t\tthis._options.selectionType = selectionType;\r\n\t\tthis.setSelection(this._selection);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows selection labels\r\n\t */\r\n\tshowSelectionLabels(){\r\n\t\tthis._histogramRenderer.showSelectionLabels();\r\n\t}\r\n\r\n\t/**\r\n\t * Hides selection labels\r\n\t */\r\n\thideSelectionLabels(){\r\n\t\tthis._histogramRenderer.hideSelectionLabels();\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public\r\n\t * Sets selection\r\n\t * @param {Array} selection\r\n\t * @param {Object} options\r\n\t * @returns {Histogram} returns this widget instance \r\n\t */\r\n\tsetSelection(selection, options) {\r\n\t\tif (!this._histogramRenderer.isRendered()) {\r\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\r\n\t\t}\r\n\r\n\t\tif (!this._histogramData) {\r\n\t\t\tthrow \"Can't call setSelection() when no data is available.\"\r\n\t\t}\r\n\r\n\t\tvar histogramSelection = this._histogramSelection = this._selectionFactory.getHistogramSelection(selection, this._histogramData);\r\n\t\tthis._options.selection = histogramSelection.getSelection();\r\n\t\tthis._selection = selection;\r\n\t\tthis._histogramRenderer.refresh(this._histogramData, this._histogramSelection, options);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}\r\n\r\nHistogram.SelectionTypes = SelectionTypes;\r\nexport default Histogram;\r\n","import * as d3 from \"d3\";\nimport Observable from \"../utils/Observable\";\nimport * as Defaults from \"./LineDefaults\";\nimport LineData from \"./LineData\";\nimport LineRenderer from \"./LineRenderer\";\n\n/**\n * @private \n * @param {*} optionValue option value \n * @param {*} defaultOptionValue default option value \n * @returns option or default option value \n */\nfunction getOptionValue(optionValue, defaultOptionValue) {\n\treturn typeof optionValue == \"undefined\" ? defaultOptionValue : optionValue;\n}\n\n/**\n * @class\n * Main Line class\n * @param {Object} options\n */\nclass Line {\n\tconstructor(options) {\n\t\t/**\n\t\t * @private\n\t\t * Options property exposing widget's options\n\t\t */\n\t\tthis._options = {};\n\n\t\t/**\n\t\t * @public\n\t\t * Width of the widget\n\t\t */\n\t\tthis._options.width = getOptionValue(options.width, Defaults.WIDTH);\n\t\t/**\n\t\t * @public\n\t\t * Height of the widget\n\t\t */\n\t\tthis._options.height = getOptionValue(options.height, Defaults.HEIGHT);\n\n\t\t/**\n\t\t * @public\n\t\t * Line width\n\t\t */\n\t\tthis._options.lineWidth = getOptionValue(options.lineWidth, Defaults.LINE_WIDTH);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Dot size\n\t\t */\n\t\tthis._options.dotSize = getOptionValue(options.dotSize, Defaults.DOT_SIZE);\t\t\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Format for widget labels \n\t\t */\n\t\tthis._options.format = getOptionValue(options.format, null);\n\n\t\t/**\n\t\t * @public\n\t\t * Line color \n\t\t */\n\t\tthis._options.lineColor = getOptionValue(options.lineColor, Defaults.LINE_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Line colors \n\t\t */\n\t\tthis._options.lineColors = getOptionValue(options.lineColors, Defaults.LINE_COLORS);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Line opacity \n\t\t */\n\t\tthis._options.lineOpacity = getOptionValue(options.lineOpacity, Defaults.LINE_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill color \n\t\t */\n\t\tthis._options.fillColor = getOptionValue(options.fillColor, Defaults.FILL_COLOR);\n\n\t\t/**\n\t\t * @public\n\t\t * Fill colors\n\t\t */\n\t\tthis._options.fillColors = getOptionValue(options.fillColors, Defaults.FILL_COLORS);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Fill opacity\n\t\t */\n\t\tthis._options.fillOpacity = getOptionValue(options.fillOpacity, Defaults.FILL_OPACITY);\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.axisColor = getOptionValue(options.axisColor, Defaults.AXIS_COLOR);\t\t\n\n\n\t\t/**\n\t\t * @public\n\t\t * Axis color\n\t\t */\n\t\tthis._options.zeroLineColor = getOptionValue(options.zeroLineColor, Defaults.ZERO_LINE_COLOR);\t\t\n\n\t\t/**\n\t\t * @public\n\t\t * Vertical spacing\n\t\t */\n\t\tthis._options.verticalSpacing = getOptionValue(options.verticalSpacing, this._options.height / 4);\t\t\n\t\t\n\t\t/**\n\t\t * @private\n\t\t * observable handler\n\t\t */\n\t\tthis._observable = new Observable([\n\t\t\t/**\n\t\t\t * @event \n\t\t\t * Fires when mouse is over a line point\n\t\t\t * @param {Array} [x,y] data\n\t\t\t */\n\t\t\t\"pointOver\"\n\t\t]);\n\n\t\t/**\n\t\t * @private\n\t\t * LineRenderer\n\t\t */\n\t\tthis._lineRenderer = new LineRenderer(this._options);\n\n\t\tthis._lineRenderer.on(\"pointOver\", data=>{\n\t\t\tthis._observable.fire(\"pointOver\", data);\n\t\t})\n\t}\n\n\t/**\n\t * Bind widget event\n\t * @param {String} event event name\n\t * @param {Function} handler event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\ton(eventName, handler) {\n\t\tthis._observable.on(eventName, handler);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unbind widget event\n\t * @param {String} event event name\n\t * @param {Function} [handler] event handler\n\t * @returns {Line} returns this widget instance\n\t */\n\toff(eventName, handler) {\n\t\tthis._observable.off(eventName, handler);\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Destroys widget\n\t * @returns {Line} returns this widget instance\n\t */\n\tdestroy() {\n\t\tthis._observable.destroy();\n\t\tthis._lineRenderer.destroy();\n\t\tthis._options = null;\n\n\t\treturn this;\n\t}\t\n\n\t/**\n\t * Render logic of this widget\n\t * @param {String|DOMElement} selector selector or DOM element \n\t * @returns {Line} returns this widget instance\n\t */\n\trender(selector) {\n\t\tthis._lineRenderer.render(selector);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets multiple series of data\n\t * @param {Array[]} series\n\t * @returns {Line} returns this widget instance \n\t */\n\tsetSeries(series) {\n\t\treturn this.setData.apply(this, series);\n\t}\n\n\t/**\n\t * Sets line data\n\t * @param {...Array} series\n\t * @returns {Line} returns this widget instance \n\t */\n\tsetData(...series) {\n\t\tif (!this._lineRenderer.isRendered()) {\n\t\t\tthrow \"Can't call setData() when widget is not rendered, please call .render() first.\"\n\t\t}\n\n\t\tvar lineData = this._lineData = new LineData(series, this._options);\n\n\t\tif (!this._options.format) {\n\t\t\tthis._options.format = d3.format(\",.\" + this._lineData.getPrecision() + \"f\")\n\t\t} else if (typeof this._options.format == \"string\"){\n\t\t\tthis._options.format = d3.format(this._options.format);\n\t\t}\n\n\t\tthis._lineRenderer.update(lineData);\n\n\t\treturn this;\n\t}\n}\n\nexport default Line;\n","/**\r\n * @class\r\n * Observable class, handles binding and firing events\r\n * @param {Array} events list of events for this observable\r\n */\r\nexport default class Observable {\r\n    /**\r\n     * @param {Array} events\r\n     */\r\n    constructor(events = []) {\r\n        // create a map of handlers where each event has an array of bound handlers\r\n        this._handlers = events.reduce((acc, cur)=>{\r\n            acc[cur] = [];\r\n            return acc;\r\n        },{});\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t */\r\n    on(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tthis._handlers[event].push(handler);\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unbind event\r\n\t * @param {String} event event name\r\n\t * @param {Function} [handler] event handler, optional\r\n\t */\r\n    off(event, handler) {\r\n        if (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tif (!handler) {\r\n\t\t\tthis._handlers[event] = [];\r\n\t\t} else {\r\n\t\t\tvar handlers = this._handlers[event];\r\n\t\t\tvar index = handlers.indexOf(handler);\r\n\t\t\tif (index != -1){\r\n\t\t\t\thandlers.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Fire widget event\r\n\t * @param {String} event event name\r\n\t * @param {*} ...args event arguments\r\n\t */\r\n\tfire(event, ...args) {\r\n\t\tif (!(event in this._handlers)) throw \"No such event: \" + event;\r\n\t\tvar handlers = this._handlers[event];\r\n\t\tfor (var i = 0; i < handlers.length; i++) {\r\n\t\t\thandlers[i].apply(this, args);\r\n\t\t}\r\n\t\treturn this;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys this observable, removes events and so on \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._handlers = null;\r\n\t\treturn this;\r\n    }\r\n\t\r\n}","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default bar height\r\n */\r\nexport const BAR_HEIGHT = 43;\r\n\r\n/**\r\n * @public\r\n * Default inactive bar color\r\n */\r\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const OVER_BAR_COLOR = \"#ffea00\";\r\n\r\n/**\r\n * @public\r\n * Default active bar color\r\n */\r\nexport const ACTIVE_BAR_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Default active bar colors\r\n */\r\nexport const ACTIVE_BAR_COLORS = [];\r\n\r\n/**\r\n * @public\r\n * Enables bar toggle\r\n */\r\nexport const ENABLE_BAR_TOGGLE = false;\r\n\r\n/**\r\n * @public\r\n * Enables bar hover \r\n */\r\nexport const ENABLE_BAR_HOVER = false;\r\n\r\n/**\r\n * @public\r\n * Label font size\r\n */\r\nexport const LABEL_FONT_SIZE = 13;\r\n\r\n/**\r\n * @public\r\n * Value font size\r\n */\r\nexport const VALUE_FONT_SIZE = 11;","import * as d3 from \"d3\";\n\n/**\n * @class\n * series representing data for the line\n */\nexport default class BarData {\n\t/**\n\t * @param {Array} series\n\t * @param {Object} options\n\t */\n\tconstructor(series) {\n\t\tthis._series = series.slice();\n\t\tthis._minMax = this._calculateMinMax(this._series);\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns line series\n\t * @returns {Array} line series\n\t */\n\tgetSeries() {\n\t\treturn this._series;\n\t}\n\n\t/**\n\t * @public\n\t * Returns all data from all series merged into one array\n\t * @returns {Array}\n\t */\n\tgetAllData() {\n\t\treturn [].concat.apply([], this._series);\n\t}\n\n\t/**\n\t * Returns merged data where each unique label has an array of values\n\t */\n\tgetMergedData() {\n\t\tvar dataMap = {};\n\t\tthis.getAllData().forEach((item=>{\n\t\t\tconst result = dataMap[item.label] || {\n\t\t\t\tlabel:item.label,\n\t\t\t\tvalues:[],\n\t\t\t\tdisabled:item.disabled,\n\t\t\t\thighlighted:item.highlighted,\n\t\t\t\tcolors:[],\n\t\t\t\ttooltips:[]\n\t\t\t};\n\t\t\tresult.values.push(item.value);\n\t\t\tresult.tooltips.push(item.tooltip);\n\t\t\tresult.colors.push(item.color);\n\t\t\tdataMap[item.label] = result;\n\t\t}));\n\n\t\treturn Object.values(dataMap);\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given series\n\t* @param {Array} series\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(series) {\n\t\tvar data = [].concat.apply([], series);\n\t\tvar min = d3.min(data, function (d) { return d.value; });\n\t\tvar max = d3.max(data, function (d) { return d.value; });\n\n\t\tif (data.length <= series.length) {\n\t\t\tmin = Math.min(min, 0);\n\t\t\tmax = Math.max(max, 0);\n\t\t}\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.max;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}","import style from \"./Bar.css\";\r\nimport * as Defaults from \"./BarDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\nvar MASK_INDEX = 0;\r\n\r\n/**\r\n * @class\r\n * Bar renderer class\r\n * @param {Object} options\r\n */\r\nexport default class BarRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Bar options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._barData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Bar has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a bar\r\n\t\t\t * @param {int} barIndex\r\n\t\t\t */\r\n\t\t\t\"barOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is out of a bar\r\n\t\t\t * @param {int} barIndex\r\n\t\t\t */\r\n\t\t\t\"barOut\",\t\t\t\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when bar is clicked\r\n\t\t\t * @param {int} barIndex\r\n\t\t\t */\r\n\t\t\t\"barClick\",\t\t\t\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when bar is disabled\r\n\t\t\t * @param {int} barIndex\r\n\t\t\t * @param {boolean} disabled\r\n\t\t\t */\r\n\t\t\t\"barDisabled\"\r\n\t\t]);\r\n\r\n\t\tthis._maskIndex = MASK_INDEX++;\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Bar has been rendered or not\r\n\t * @returns {boolean} true if Bar has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {BarHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Bar} returns this widget instance\r\n\t */\r\n\trender(selector){\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\t// render SVG\r\n\t\tthis._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"class\", style.bar)\r\n\t\t\t.attr(\"height\", height);\r\n\r\n\t\t// render group element\r\n\t\tthis._groupEl = this._svgEl.append(\"g\");\r\n\r\n\r\n\t\tthis._clipPath = this._svgEl.append(\"clipPath\")\r\n\t\t\t.attr(\"id\", \"rounded-corners-\"+this._maskIndex)\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"y\", this._options.labelFontSize + 10)\r\n\t\t\t.attr(\"rx\", 2.5)\r\n\t\t\t.attr(\"ry\", 2.5)\r\n\t\t\t.attr(\"width\",this._options.width)\r\n\t\t\t.attr(\"height\", 5);\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t} \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._groupEl.node().innerHTML = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Sets bar data \r\n\t * @param {BarData}\r\n\t */\r\n\tsetData(barData){\r\n\t\tthis._barData = barData;\t\t\r\n\t\tthis._clear();\r\n\r\n\t\tvar data = barData.getMergedData();\r\n\t\tvar minMax = barData.getMinMax();\r\n\r\n\t\tvar barHeight = this._options.barHeight;\r\n\t\tvar height = data.length * barHeight;\r\n\r\n\t\tthis._xAxis = d3.scaleLinear().range([0, this._options.width]);\r\n\t\tthis._yAxis = d3.scaleBand().range([height, 0]);\t\r\n\r\n\t\tthis._svgEl.attr(\"height\", height);\t\r\n\r\n\t\tthis._xAxis.domain([0, minMax.max]);\r\n\t\tthis._yAxis.domain(data.map((item, i)=>i).reverse());\r\n\r\n\t\tthis._renderDataBars(data);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * Renders data bars\r\n\t*/\r\n\t_renderDataBars(data) { \r\n\t\tvar x = this._xAxis;\r\n\t\tvar y = this._yAxis;\r\n\t\tvar horizontalPadding = 10;\r\n\t\tvar barHeight = 5;\r\n\t\tvar observable = this._observable;\r\n\t\tvar options = this._options;\r\n\t\t\r\n\t\tdata.forEach((d, i)=>{\r\n\t\t\tconst barGroup = this._groupEl\r\n\t\t\t\t.datum(d)\r\n\t\t\t\t.append(\"g\")\r\n\t\t\t\t.attr(\"class\", style[\"bar\"])\r\n\t\t\t\t.attr(\"transform\", ()=> {\r\n\t\t\t\t\treturn \"translate(0,\"+ (Math.floor(y(i)))+\")\"\r\n\t\t\t\t})\r\n\t\t\t\t.classed(style[\"bar-over\"], (d)=>{\r\n\t\t\t\t\treturn d.highlighted;\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"mouseover\", function(d, i){\r\n\t\t\t\t\tif (options.enableBarHover){\r\n\t\t\t\t\t\td3.select(this).classed(style[\"bar-over\"], true);\r\n\t\t\t\t\t\tobservable.fire(\"barOver\", i);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"mouseout\", function(d, i){\r\n\t\t\t\t\tif (options.enableBarHover){\r\n\t\t\t\t\t\td3.select(this).classed(style[\"bar-over\"], false);\r\n\t\t\t\t\t\tobservable.fire(\"barOut\", i);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"click\", function(d, i){\r\n\t\t\t\t\tif (options.enableBarToggle){\r\n\t\t\t\t\t\tvar disabled = !d3.select(this).classed(style[\"bar-disabled\"]);\r\n\t\t\t\t\t\td3.select(this).classed(style[\"bar-disabled\"], disabled);\r\n\t\t\t\t\t\tobservable.fire(\"barDisabled\", i, disabled);\r\n\t\t\t\t\t}\r\n\t\r\n\t\t\t\t\tobservable.fire(\"barClick\", i);\r\n\t\t\t\t})\r\n\t\t\t\t.classed(style[\"bar-disabled\"], (d)=>{\r\n\t\t\t\t\treturn d.disabled;\r\n\t\t\t\t});\r\n\r\n\t\t\t\t// label\r\n\t\t\t\tbarGroup.append(\"text\")\r\n\t\t\t\t\t.text(d=>d.label)\r\n\t\t\t\t\t.attr(\"class\", style[\"bar-label\"])\r\n\t\t\t\t\t.attr(\"x\", horizontalPadding)\r\n\t\t\t\t\t.attr(\"font-size\", this._options.labelFontSize)\r\n\t\t\t\t\t.attr(\"y\", this._options.labelFontSize)\r\n\r\n\t\t\t\t// tooltip\r\n\t\t\t\tlet tooltipX = horizontalPadding;\r\n\t\t\t\td.values.forEach((value, valueIndex)=>{\r\n\t\t\t\t\tconst tooltipEl = barGroup.append(\"text\")\r\n\t\t\t\t\t\t.text(()=>{\r\n\t\t\t\t\t\t\t// generating tooltip in reversed order as it goes from right -> left\r\n\t\t\t\t\t\t\tconst reversedIndex = d.values.length - 1 - valueIndex;\r\n\t\t\t\t\t\t\treturn d.tooltips[reversedIndex] || this._options.format(d.values[reversedIndex])\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.attr(\"class\", style[\"bar-tooltip\"])\r\n\t\t\t\t\t\t.attr(\"x\", this._options.width-tooltipX)\r\n\t\t\t\t\t\t.attr(\"text-anchor\",\"end\")\r\n\t\t\t\t\t\t.attr(\"font-size\", this._options.valueFontSize)\r\n\t\t\t\t\t\t.attr(\"y\", this._options.labelFontSize)\r\n\r\n\t\t\t\t\ttooltipX+= tooltipEl.node().getComputedTextLength()+20;\r\n\r\n\t\t\t\t\tif (d.values.length>1){\r\n\t\t\t\t\t\tbarGroup\r\n\t\t\t\t\t\t\t.append(\"circle\")\r\n\t\t\t\t\t\t\t.attr(\"r\", 3)\r\n\t\t\t\t\t\t\t.attr(\"fill\", ()=>{\r\n\t\t\t\t\t\t\t\t// generating in reversed order as it goes from right -> left\r\n\t\t\t\t\t\t\t\tconst reversedIndex = d.values.length - 1 - valueIndex;\r\n\t\t\t\t\t\t\t\treturn d.colors[reversedIndex] || options.activeBarColors[reversedIndex] || options.activeBarColor\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.attr(\"cx\", this._options.width-tooltipX-this._options.labelFontSize+25)\r\n\t\t\t\t\t\t\t.attr(\"cy\", this._options.labelFontSize/1.5)\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconst barOffset = valueIndex*(barHeight+1);\r\n\t\t\t\t\t// active bar\r\n\t\t\t\t\tbarGroup.append(\"rect\")\r\n\t\t\t\t\t\t.attr(\"transform\", \"translate(0,\"+ barOffset + \")\")\t\t\t\t\t\t\r\n\t\t\t\t\t\t.attr(\"fill\",()=>{\r\n\t\t\t\t\t\t\treturn d.colors[valueIndex] || options.activeBarColors[valueIndex] || options.activeBarColor;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.attr(\"class\", style[\"bar-active\"])\r\n\t\t\t\t\t\t.attr(\"x\", 0)\r\n\t\t\t\t\t\t.attr(\"clip-path\", \"url(#rounded-corners-\"+this._maskIndex+\")\")\r\n\t\t\t\t\t\t.attr(\"width\", function () { return Math.floor(x(value)); })\r\n\t\t\t\t\t\t.attr(\"y\", this._options.labelFontSize + 10)\r\n\t\t\t\t\t\t.attr(\"height\", barHeight);\r\n\r\n\t\t\t\t\t// inactive bar\r\n\t\t\t\t\tbarGroup.append(\"rect\")\r\n\t\t\t\t\t\t.attr(\"transform\", \"translate(0,\"+ barOffset + \")\")\t\t\t\t\t\t\r\n\t\t\t\t\t\t.attr(\"fill\",Defaults.INACTIVE_BAR_COLOR)\r\n\t\t\t\t\t\t.attr(\"class\", style[\"bar-inactive\"])\r\n\t\t\t\t\t\t.attr(\"clip-path\", \"url(#rounded-corners-\"+MASK_INDEX+\")\")\r\n\t\t\t\t\t\t.attr(\"x\", () => {\r\n\t\t\t\t\t\t\treturn Math.floor(x(value));\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.attr(\"width\", ()=> { return this._options.width - Math.floor(x(value)); })\r\n\t\t\t\t\t\t.attr(\"y\", this._options.labelFontSize + 10)\r\n\t\t\t\t\t\t.attr(\"height\", barHeight)\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t// hover\r\n\t\t\t\tbarGroup.append(\"rect\")\r\n\t\t\t\t\t.attr(\"class\", style[\"bar-hover\"])\r\n\t\t\t\t\t.attr(\"fill\", \"transparent\")\r\n\t\t\t\t\t.attr(\"x\", 0)\r\n\t\t\t\t\t.attr(\"text-anchor\",\"end\")\r\n\t\t\t\t\t.attr(\"cursor\",()=>this._options.enableBarHover?\"pointer\":\"default\")\r\n\t\t\t\t\t.attr(\"y\", 0)\r\n\t\t\t\t\t.attr(\"height\", this._options.barHeight)\t\t\t\t\t\r\n\t\t\t\t\t.attr(\"width\", this._options.width)\r\n\r\n\t\t});\r\n\t\t\r\n\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Bar UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","/**\r\n * @public\r\n * Default outer radius\r\n */\r\nexport const OUTER_RADIUS = 10;\r\n\r\n/**\r\n * @public\r\n * Default inner radius\r\n */\r\nexport const INNER_RADIUS = 10;\r\n\r\n/**\r\n * @public\r\n * Default value\r\n */\r\nexport const VALUE = 0;\r\n\r\n/**\r\n * @public\r\n * Default active color\r\n */\r\nexport const ACTIVE_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Default inactive color\r\n */\r\nexport const INACTIVE_COLOR = \"#F0F0F0\";\r\n\r\n/**\r\n * @public\r\n * Default background color\r\n */\r\nexport const BACKGROUND_COLOR = \"transparent\";\r\n\r\n/**\r\n * @public\r\n * Default animation duration\r\n */\r\nexport const ANIMATION_DURATION = 250;","import style from \"./Doughnut.css\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst tau = 2 * Math.PI; // http://tauday.com/tau-manifesto\r\n\r\n/**\r\n * @class\r\n * Doughnut renderer class\r\n * @param {Object} options\r\n */\r\nexport default class DoughnutRenderer {\r\n\tconstructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Doughnut options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Doughnut has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over\r\n\t\t\t */\r\n\t\t\t\"mouseOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is out\r\n\t\t\t */\r\n\t\t\t\"mouseOut\"\r\n\t\t]);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Doughnut has been rendered or not\r\n\t * @returns {boolean} true if Doughnut has been rendered\r\n\t */\r\n\tisRendered() {\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Doughnut} returns this widget instance\r\n\t */\r\n\trender(selector) {\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._containerEl.node().offsetWidth;\r\n\t\tvar height = this._containerEl.node().offsetHeight;\r\n\t\tvar value = this._value = this._options.value;\r\n\t\tvar angle = this._angle = value / 100 * tau;\r\n\t\tvar innerRadius = this._innerRadius = this._options.innerRadius;\r\n\t\tvar outerRadius = this._outerRadius = this._options.outerRadius;\r\n\r\n\t\t// arc settings\r\n\t\tvar arc = this._arc = d3.arc()\r\n\t\t\t.innerRadius(innerRadius)\r\n\t\t\t.outerRadius(outerRadius)\r\n\t\t\t.startAngle(0);\r\n\r\n\t\t// render SVG\r\n\t\tthis._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height)\r\n\t\t\t.attr(\"class\", style[\"svg\"]);\r\n\r\n\t\t// render group\r\n\t\tvar g = this._groupEl = this._svgEl\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"class\", style[\"doughnut\"])\r\n\t\t\t.attr(\"transform\", \"translate(\" + width / 2 + \", \" + height / 2 + \")\");\r\n\r\n\t\t// render inactive doughtnut\t\r\n\t\tthis._inactiveArc = g.append(\"path\")\r\n\t\t\t.datum({ endAngle: tau })\r\n\t\t\t.attr(\"fill\", this._options.inactiveColor)\r\n\t\t\t.attr(\"d\", arc);\r\n\r\n\t\t// render active doughtnut\t\r\n\t\tthis._activeArc = g.append(\"path\")\r\n\t\t\t.datum({ endAngle: angle })\r\n\t\t\t.attr(\"fill\", this._options.activeColor)\r\n\t\t\t.attr(\"d\", arc);\r\n\r\n\t\t// render background\t\r\n\t\tthis._backgroundArc = g.append(\"circle\")\r\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\r\n\t\t\t.attr(\"r\", innerRadius)\r\n\t\t\t.attr(\"cx\", 0)\r\n\t\t\t.attr(\"cy\", 0)\r\n\r\n\t\t// render background\t\r\n\t\tthis._backgroundArc = g.append(\"circle\")\r\n\t\t\t.attr(\"fill\", this._options.backgroundColor)\r\n\t\t\t.attr(\"r\", innerRadius)\r\n\t\t\t.attr(\"cx\", 0)\r\n\t\t\t.attr(\"cy\", 0)\r\n\r\n\t\t// hover element, this needs to be rendered in order to have stable and animation\r\n\t\t// independent hover \r\n\t\tthis._hoverEl = g.append(\"rect\")\r\n\t\t\t.attr(\"fill\", \"transparent\")\r\n\t\t\t.attr(\"x\", -width/2)\r\n\t\t\t.attr(\"y\", -height/2)\r\n\t\t\t.attr(\"width\",width)\r\n\t\t\t.attr(\"height\",height)\r\n\r\n\t\tg.on(\"mouseover\", ()=>{\r\n\t\t\tthis._observable.fire(\"mouseOver\");\r\n\t\t})\r\n\r\n\t\tg.on(\"mouseout\", ()=>{\r\n\t\t\tthis._observable.fire(\"mouseOut\");\r\n\t\t})\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t\t * Bind widget event\r\n\t\t * @param {String} event event name\r\n\t\t * @param {Function} handler event handler\r\n\t\t * @returns {Doughnut} returns this widget instance\r\n\t\t */\r\n\t\ton(eventName, handler) {\r\n\t\t\tthis._observable.on(eventName, handler);\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Unbind widget event\r\n\t\t * @param {String} event event name\r\n\t\t * @param {Function} [handler] event handler\r\n\t\t * @returns {Doughnut} returns this widget instance\r\n\t\t */\r\n\t\toff(eventName, handler) {\r\n\t\t\tthis._observable.off(eventName, handler);\r\n\t\t\treturn this;\r\n\t\t}\t\r\n\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * @param {opts} new options\r\n\t * Updates doughnut with new options\r\n\t */\r\n\tupdate(opts) {\r\n\t\tvar options = opts || {};\r\n\r\n\t\tif (typeof options.value == \"undefined\"){\r\n\t\t\toptions.value = this._value;\r\n\t\t} else {\r\n\t\t\tthis._value = options.value;\r\n\t\t}\r\n\r\n\t\t// first tween foreground, note that this is also changing this._arc radiuses \r\n\t\tvar activeArcTransition = this._activeArc.transition()\r\n\t\t\t.duration(this._options.animationDuration)\r\n\t\t\t.attrTween(\"d\", this._arcTween(options, true))\r\n\r\n\t\t// se we only get new path on background as it uses radiuses saved in the previous call\r\n\t\tthis._inactiveArc.transition()\r\n\t\t\t.duration(this._options.animationDuration)\r\n\t\t\t.attrTween(\"d\", () => {\r\n\t\t\t\treturn () => {\r\n\t\t\t\t\treturn this._arc({ endAngle: tau });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\tthis._backgroundArc.transition()\r\n\t\t\t.duration(this._options.animationDuration)\r\n\t\t\t.attrTween(\"r\", () => {\r\n\t\t\t\treturn () => {\r\n\t\t\t\t\treturn this._innerRadius;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\tif (options.activeColor && options.activeColor !== this._options.activeColor){\r\n\t\t\tthis._options.activeColor = options.activeColor;\r\n\t\t\tactiveArcTransition.attr(\"fill\", options.activeColor)\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {options} new options\r\n\t * returns tween function for arc \r\n\t */\r\n\t_arcTween(options) {\r\n\t\tvar angle = options.value / 100 * tau;\r\n\t\t// change angle if new value is provided \r\n\t\tif (typeof options.value != \"undefined\") {\r\n\t\t\tangle = options.value / 100 * tau;\r\n\t\t}\r\n\r\n\t\t// handle new radiuses\r\n\t\tvar innerRadius = this._innerRadius;\r\n\t\tvar outerRadius = this._outerRadius;\r\n\r\n\t\tif (typeof options.innerRadius != \"undefined\") {\r\n\t\t\tinnerRadius = options.innerRadius;\r\n\t\t}\r\n\r\n\t\tif (typeof options.outerRadius != \"undefined\") {\r\n\t\t\touterRadius = options.outerRadius;\r\n\t\t}\r\n\r\n\t\t// get interpolation fns between new radiuses and old ones\r\n\t\t// for simlicity, do this even if value doesn't change as we\r\n\t\t// likely generate new path anyway\r\n\t\tvar interpolateOuterRadius = d3.interpolate(this._outerRadius, outerRadius);\r\n\t\tvar interpolateInnerRadius = d3.interpolate(this._innerRadius, innerRadius);\r\n\r\n\t\treturn (d) => {\r\n\t\t\t// get angle interpolation fn \r\n\t\t\tvar interpolateAngle = d3.interpolate(d.endAngle, angle);\r\n\r\n\t\t\treturn (t) => {\r\n\t\t\t\t// on each cycle, set new radiuses and endAngle\r\n\t\t\t\tthis._arc.outerRadius(this._outerRadius = interpolateOuterRadius(t));\r\n\t\t\t\tthis._arc.innerRadius(this._innerRadius = interpolateInnerRadius(t));\r\n\r\n\t\t\t\td.endAngle = this._angle = interpolateAngle(t);\r\n\t\t\t\treturn this._arc(d);\r\n\t\t\t};\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Doughnut UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered) {\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n}","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default widget height\r\n */\r\nexport const HEIGHT = 150;\r\n\r\n/**\r\n * @public\r\n * Default widget margin\r\n */\r\nexport const MARGIN = {\r\n    top:0,\r\n    left:5,\r\n    right:5,\r\n    bottom:15\r\n};\r\n\r\n/**\r\n * Default label margin from x axis\r\n */\r\nexport const LABEL_MARGIN = 7;\r\n\r\n/**\r\n * @public\r\n * Default inactive bar color\r\n */\r\nexport const INACTIVE_BAR_COLOR = \"#f0f0f0\";\r\n\r\n/**\r\n * @public\r\n * Default inactive bar opacity\r\n */\r\nexport const INACTIVE_BAR_OPACITY = 1;\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const OVER_SELECTION_COLOR = \"#ffea00\";\r\n\r\n/**\r\n * @public\r\n * Default over selection opacity\r\n */\r\nexport const OVER_SELECTION_OPACITY = 1;\r\n\r\n/**\r\n * @public\r\n * Default over bar color\r\n */\r\nexport const SELECTION_COLOR = \"#49ace2\";\r\n\r\n/**\r\n * @public\r\n * Enable selection toggle\r\n */\r\nexport const ENABLE_SELECTION_TOGGLE = true;\r\n\r\n/**\r\n * @public\r\n * Default font size\r\n */\r\nexport const FONT_SIZE = 11;\r\n\r\n/**\r\n * @public\r\n * Default colors \r\n */\r\nexport const DEFAULT_COLORS = [\"#e6f3fb\", \"#cbe7f6\", \"#b1dbf2\", \"#98cfee\", \"#7ec4ea\"];\r\n\r\n/**\r\n * @public\r\n * Default width of active handle area\r\n */\r\nexport const ACTIVE_HANDLE_AREA_WIDTH = 4;","import * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * HistogramData representing data for the histogram view\r\n */\r\nexport default class HistogramData {\r\n\t/**\r\n\t * @param {data} data\r\n\t * @param {Object} options\r\n\t */\r\n\tconstructor(data, options) {\r\n\t\tthis._histogramData = this._loadHistogramData(data, options.width);\r\n\t\tthis._minMax = this._calculateMinMax(this._histogramData);\r\n\t\tthis._options = options;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns min max of history data\r\n\t * @returns {Object} minMax\r\n\t * @returns {Number} minMax.min\r\n\t * @returns {Number} minMax.max\r\n\t */\r\n\tgetMinMax() {\r\n\t\treturn this._minMax;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns histogram data\r\n\t * @returns {Array} histogram data\r\n\t */\r\n\tgetData() {\r\n\t\treturn this._histogramData;\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Returns min max values for given histogramData\r\n\t* @param {Array} histogramData\r\n\t* @returns {Object} minMax.min\r\n\t* @returns {Object} minMax.max\r\n\t*/\r\n\t_calculateMinMax(histogramData) {\r\n\t\tvar min = d3.min(histogramData, function (d) { return d.value; });\r\n\t\tvar max = d3.max(histogramData, function (d) { return d.value; });\r\n\r\n\t\treturn {\r\n\t\t\tmin: min,\r\n\t\t\tmax: max\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t* Returns value ratio between bars and data\r\n\t* @return {Number} value ratio \r\n\t*/\r\n\tgetValueRatio() {\r\n\t\tvar range = this._minMax.max - this._minMax.min;\r\n\t\treturn range / this._options.width;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns data value from given position \r\n\t * @param {Number} position\r\n\t */\r\n\tpositionToValue(position) {\r\n\t\tvar minMax = this.getMinMax();\r\n\t\t// return min if position is 0\r\n\t\tif (position === 0){\r\n\t\t\treturn minMax.min;\r\n\t\t}\r\n\r\n\t\t// return max if position is at the end\r\n\t\tif (position === this._options.width){\r\n\t\t\treturn minMax.max;\r\n\t\t}\r\n\r\n\t\t// else calculate based on value ratio and min/max\r\n\t\tvar valueRatio = this.getValueRatio();\r\n\t\treturn position * valueRatio + minMax.min;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns position from given data value \r\n\t * @param {Number} value\r\n\t */\r\n\tvalueToPosition(value) {\r\n\t\tvar valueRatio = this.getValueRatio();\r\n\t\tvar minMax = this.getMinMax();\r\n\t\tvar constrainedValue = Math.min(Math.max(value, minMax.min), minMax.max);\r\n\t\t\r\n\t\treturn Math.round(constrainedValue / valueRatio - minMax.min / valueRatio);\r\n\t}\r\n\r\n\t/** \r\n\t* @private\r\n\t* @param {Array} buckets\r\n\t* @param {int} numOfBarsPerBucket - number of bars per column\\\r\n\t* @returns {Array} data from given buckets \r\n\t*/\r\n\t_loadHistogramData(data, width) {\r\n\t\tvar histogramData = [];\r\n\t\t// calculate number of bars per bucket excluding last pixel for max value\r\n\t\tvar numOfBarsPerBucket = (width-1) / data.length;\r\n\r\n\t\tdata.forEach((bucket, i) => {\r\n\t\t\tvar step = (bucket.max - bucket.min) / numOfBarsPerBucket;\r\n\t\t\t// support array as well as single values\r\n\t\t\tconst volume = Array.isArray(bucket.volume)?bucket.volume:[bucket.volume];\r\n\r\n\t\t\td3.range(bucket.min, bucket.max, step).forEach((value) => {\r\n\t\t\t\thistogramData.push({\r\n\t\t\t\t\tvalue: value,\r\n\t\t\t\t\tvolume: volume\r\n\t\t\t\t});\r\n\t\t\t});\r\n\r\n\t\t\t// adding max value pixel as each non-last bucket ends one pixel before next bucket starts\r\n\t\t\tif (i == data.length-1){\r\n\t\t\t\thistogramData.push({\r\n\t\t\t\t\tvalue: bucket.max,\r\n\t\t\t\t\tvolume: volume\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn histogramData;\r\n\t}\r\n}","import * as d3 from \"d3\";\r\nimport style from \"../Histogram.css\";\r\nimport * as Defaults from \"../HistogramDefaults\";\r\nimport Observable from \"../../utils/Observable\";\r\n\r\n/**\r\n * Gradient index shared for all instances\r\n */\r\nvar gradientIndex = 0;\r\n\r\n/**\r\n * @class\r\n * HistogramHandle representing control handle for histogram\r\n */\r\nexport default class HistogramHandle {\r\n\t/**\r\n\t * @param {D3Selection} groupEl\r\n\t * @param {Number} value\r\n\t * @param {Number} index\r\n\t * @param {HistoryData} histogramData\r\n\t * @param {Object} options\r\n\t */\r\n\tconstructor(groupEl, value, index, histogramData, options) {\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a selection\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"drag\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when drag on handle starts\r\n\t\t\t * @param {HistogramHandle} handle\r\n\t\t\t */\r\n\t\t\t\"startDrag\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when drag on handle ends\r\n\t\t\t * @param {HistogramHandle} handle\r\n\t\t\t */\r\n\t\t\t\"endDrag\"\r\n\t\t]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle element\r\n\t\t */\r\n\t\tthis._handleEl = null;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle line element\r\n\t\t */\r\n\t\tthis._handleLineEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle circle element\r\n\t\t */\r\n\t\tthis._handleCircleEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle mask element\r\n\t\t */\r\n\t\tthis._handleMaskEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle mask gradient element\r\n\t\t */\r\n\t\tthis._handleMaskGradientEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * handle label element\r\n\t\t */\r\n\t\tthis._handleLabelEl = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * True if handle is over\r\n\t\t */\r\n\t\tthis._isOver = false;\r\n\t\t\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element\r\n\t\t */\t\t\r\n\t\tthis._groupEl = groupEl;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle index\r\n\t\t */\t\t\r\n\t\tthis._index = index;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle value\r\n\t\t */\t\t\r\n\t\tthis._value = value;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * initial handle value\r\n\t\t */\t\t\r\n\t\tthis._initialValue = new Number(value);\t\t\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * handle position\r\n\t\t */\t\t\r\n\t\tthis._position = histogramData.valueToPosition(value);\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * initial handle position\r\n\t\t */\t\t\r\n\t\tthis._initialPosition = new Number(this._position);\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * bar options\r\n\t\t */\t\t\r\n\t\tthis._options = options;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * histogram data\r\n\t\t */\t\t\r\n\t\tthis._histogramData = histogramData;\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Cache for storing label size, enhances performance when animating\r\n\t\t */\t\t\r\n\t\tthis._labelSizeCache = {};\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * elements\r\n\t\t */\t\t\r\n\t\tthis._elements = [];\t\t\r\n\t\t\r\n\t\tthis._renderHandle();\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destroys this handle\r\n\t */\r\n\tdestroy(){\r\n\t\tthis._elements.forEach(element=>element.remove());\r\n\t\tthis._elements = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t   * Renders drag handle\r\n\t   */\r\n\t_renderHandle() {\r\n\t\tthis._elements = [\r\n\t\t\tthis._createHandleElement(),\r\n\t\t\tthis._createHandleLineElement(),\r\n\t\t\tthis._createHandleCircleElement(),\r\n\t\t\tthis._createDragMaskElement(),\r\n\t\t\tthis._createMaskGradientElement(),\r\n\t\t\tthis._createDragLabelElement()\r\n\t\t];\r\n\r\n\t\tthis._handleHoverState();\r\n\t\tthis._handleDrag();\r\n\t}\t\r\n\r\n\thide(){\r\n\t\tthis._elements.forEach(element=>element.attr(\"visibility\", \"hidden\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns X position of this handle\r\n\t * @returns {Number} X position handle\r\n\t */\r\n\tgetXPosition() {\r\n\t\treturn parseInt(this._handleEl.attr(\"x\"))+Defaults.ACTIVE_HANDLE_AREA_WIDTH/2;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Sets hover state\r\n\t */\r\n\tsetHoverState(){\r\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\r\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 3);\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t}\r\n\t\r\n\t/**\r\n\t * @public \r\n\t * @returns {SVGRect} \r\n\t * Returns drag label box for this handle\r\n\t */\r\n\tgetLabelBox(){\r\n\t\treturn this._handleLabelEl.node().getBBox();\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * Shifts handle label by given offset so it can handle label position conflicts\r\n\t */\r\n\tsetLabelOffset(offset){\r\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\r\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(\"+offset+\", 0)\");\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t}\r\n\r\n\t/**\r\n\t * @public \r\n\t * Sets handle position\r\n\t */\r\n\tsetHandleXPosition(position){\r\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\"+position+\", \"+this._options.height+\")\")\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsetLabelText(text){\r\n\t\tthis._handleLabelEl.text(text);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tshowLabel(){\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 1);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"block\");\r\n\t\treturn this;\r\n\t}\r\n\r\n\thideLabel(){\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\tsetLabelPosition(position){\r\n\t\tthis.setLabelOffset(0);\r\n\t\tthis._updateLabelPosition(position);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Unsets hover state\r\n\t */\r\n\tunsetHoverState(){\r\n\t\tthis._handleLineEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleLabelEl.attr(\"fill-opacity\", 0);\r\n\t\tthis._handleMaskEl.attr(\"display\", \"none\");\r\n\t\tthis._handleCircleEl.attr(\"stroke-width\", 1);\r\n\t\tthis._handleLabelEl.attr(\"transform\", \"translate(0, 0)\")\r\n\t\tthis._handleMaskEl.attr(\"transform\", \"translate(0, 0)\")\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Enables this handle \r\n\t */\r\n\tenable(){\r\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"all\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Disables this handle \r\n\t */\r\n\tdisable(){\r\n\t\tthis._elements.forEach(element => element.attr(\"pointer-events\", \"none\"));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handle hover state\r\n\t */\r\n\t_handleHoverState(){\r\n\t\t// line hover effect\r\n\t\tthis._handleEl.on(\"mouseover\", () => {\r\n\t\t\tthis._isOver = true;\r\n\t\t\tthis.setHoverState();\r\n\t\t})\r\n\t\tthis._handleEl.on(\"mouseout\", () => {\r\n\t\t\tthis._isOver = false;\r\n\t\t\tthis.unsetHoverState();\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens when drag starts\r\n\t */\r\n\t_onStartDrag(){\r\n\t\tthis._groupEl.classed(style[\"dragging\"], true);\r\n\t\tthis._observable.fire(\"startDrag\", this);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * handles what happens on drag\r\n\t */\r\n\t_onDrag(){\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar xpos = Math.round(Math.max(Math.min(d3.event.x, width), 0));\r\n\r\n\t\tthis._handleEl.attr(\"x\", xpos - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\r\n\t\tthis._handleLineEl.attr(\"x\", xpos - 2);\r\n\t\tthis._handleCircleEl.attr(\"transform\", \"translate(\" + xpos + \",\" + height + \")\");\r\n\t\tthis._handleEl.attr(\"data-handle-value\", this._histogramData.positionToValue(xpos))\r\n\r\n\t\tthis.setHoverState();\r\n\r\n\t\tthis._position = xpos;\r\n\r\n\t\t// prevent recalculating value for the same position\r\n\t\tif (parseInt(this._position) !== parseInt(this._initialPosition)){\r\n\t\t\tthis._value = this._histogramData.positionToValue(xpos);\r\n\t\t} else {\r\n\t\t\tthis._value = this._initialValue;\r\n\t\t}\r\n\r\n\t\tthis._handleLabelEl.text(this._getLabelText())\r\n\r\n\t\tthis._updateLabelPosition(xpos);\r\n\t\tthis._observable.fire(\"drag\");\t\t\r\n\t}\r\n\r\n\t_getLabelText() {\r\n\t\treturn this._options.format(this._value);\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * handles what happens when drag ends\r\n\t */\r\n\t_onEndDrag(){\r\n\t\tthis._groupEl.classed(style[\"dragging\"], false);\r\n\t\tif (!this._isOver) {\r\n\t\t\tthis.unsetHoverState();\r\n\t\t}\r\n\r\n\t\tthis._observable.fire(\"endDrag\", this);\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles handle drag \r\n\t */\r\n\t_handleDrag(){\r\n\t\tthis._handleEl.call(d3.drag()\r\n\t\t\t.on(\"drag\", this._onDrag.bind(this))\r\n\t\t\t.on(\"start\", this._onStartDrag.bind(this))\r\n\t\t\t.on(\"end\", this._onEndDrag.bind(this)));\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * Return computed or stored label length\r\n\t * @param {SVGElement}\r\n\t * @param {Number} length \r\n\t */\r\n\t_getComputedLabelTextLength(label){\r\n\t\tvar content = label.innerHTML;\r\n\t\tthis._labelSizeCache[content] = this._labelSizeCache[content] || label.getComputedTextLength();\r\n\t\treturn this._labelSizeCache[content];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Updates label position\r\n\t * @param {Number} position \r\n\t */\r\n\t_updateLabelPosition(position) {\r\n\t\tvar label = this._handleLabelEl.node();\r\n\t\tvar maskPadding = this._options.fontSize;\t\t\r\n\r\n\t\t// we need to calculate text length so we can create mask and center text\r\n\t\tvar textLength = this._getComputedLabelTextLength(label);\r\n\t\tvar maskWidth = textLength + maskPadding * 2;\r\n\t\tvar xPosition = position - textLength / 2;\r\n\r\n\t\t// handle when dragging towards left side\r\n\t\tif (xPosition < 0) {\r\n\t\t\txPosition = 0;\r\n\t\t}\r\n\r\n\t\t// handle when dragging towards right side\r\n\t\tif (xPosition + textLength > this._options.width) {\r\n\t\t\txPosition = this._options.width  - textLength;\r\n\t\t\tthis._handleLabelEl.attr(\"x\", this._options.width);\r\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"end\");\r\n\t\t} else {\r\n\t\t\tthis._handleLabelEl.attr(\"x\", xPosition);\r\n\t\t\tthis._handleLabelEl.attr(\"text-anchor\", \"start\");\r\n\t\t}\r\n\r\n\t\t// position mask\r\n\t\tthis._handleMaskEl.attr(\"x\", () => {\r\n\t\t\treturn parseInt(xPosition) - maskPadding;\r\n\t\t});\r\n\r\n\t\tthis._handleMaskGradientEl.attr(\"x1\", xPosition - maskPadding);\r\n\t\tthis._handleMaskGradientEl.attr(\"x2\", xPosition + maskWidth - maskPadding);\r\n\r\n\t\tthis._handleMaskEl.attr(\"width\", maskWidth);\r\n\t\tthis._handleMaskEl.attr(\"height\", this._options.fontSize);\r\n\t}\r\n\t\t\r\n\t/**\r\n\t * Creates mask gradient element\r\n\t * @param {Number} handleIndex \r\n\t */\r\n\t_createMaskGradientElement(){\r\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\r\n\t\t\t.attr(\"id\", \"brush-mask-gradient-\" + gradientIndex++)\r\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\r\n\t\t\t.attr(\"y1\", 0).attr(\"x1\", 50)\r\n\t\t\t.attr(\"y2\", 0).attr(\"x2\", 0);\r\n\r\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\r\n\t\t\t.data([\r\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\r\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\r\n\t\t\t])\r\n\t\t\t.enter().append(\"stop\")\r\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\r\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\r\n\r\n\t\treturn this._handleMaskGradientEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders main handle element \r\n\t * @returns {SVGElement}\r\n\t */\r\n\t_createHandleElement(){\r\n\t\tthis._handleEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle\"])\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"data-handle-index\", this._index)\r\n\t\t\t.attr(\"data-handle-value\", this._value)\r\n\t\t\t.attr(\"cursor\", \"ew-resize\")\r\n\t\t\t.attr(\"width\", Defaults.ACTIVE_HANDLE_AREA_WIDTH)\r\n\t\t\t.attr(\"height\", this._options.height + 5)\r\n\t\t\t.attr(\"x\", this._position - Defaults.ACTIVE_HANDLE_AREA_WIDTH/2);\r\n\r\n\t\treturn this._handleEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders handle line element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createHandleLineElement(){\r\n\t\tthis._handleLineEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle-line\"])\r\n\t\t\t.attr(\"width\", 4)\r\n\t\t\t.attr(\"height\", this._options.height)\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"x\", this._position - 2);\r\n\r\n\t\treturn this._handleLineEl;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders handle circle element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createHandleCircleElement(){\r\n\t\tthis._handleCircleEl = this._groupEl.append(\"circle\")\r\n\t\t\t.attr(\"class\", style[\"custom-handle-circle\"])\r\n\t\t\t.attr(\"transform\", \"translate(\" + this._position + \",\" + this._options.height + \")\")\r\n\t\t\t.attr(\"fill\", \"#ffffff\")\r\n\t\t\t.attr(\"fill-opacity\", 1)\r\n\t\t\t.attr(\"stroke\", \"#000\")\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"cursor\", \"ew-resize\")\r\n\t\t\t.attr(\"r\", 3.5);\r\n\r\n\t\treturn this._handleCircleEl;\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Renders drag mask element \r\n\t * @returns {SVGElement} \r\n\t */\r\n\t_createDragMaskElement(){\r\n\t\tthis._handleMaskEl = this._groupEl.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"drag-label-mask\"])\r\n\t\t\t.attr(\"fill\", \"url(#brush-mask-gradient-\" + gradientIndex+\")\")\r\n\t\t\t.attr(\"y\", this._options.height + Defaults.LABEL_MARGIN)\r\n\t\t\t.attr(\"display\", \"none\");\t\t\t\r\n\r\n\t\treturn this._handleMaskEl;\r\n\t}\r\n\t\r\n\t/**\r\n\t * @private \r\n\t * Renders handle label element \r\n\t * @returns {SVGElement}  \r\n\t */\r\n\t_createDragLabelElement(){\r\n\t\tvar format = this._options.format;\r\n\t\tvar height = this._options.height;\r\n\t\tthis._handleLabelEl = this._groupEl.append(\"text\")\r\n\t\t\t.attr(\"class\", style[\"drag-label\"])\r\n\t\t\t.attr(\"fill-opacity\", 0)\r\n\t\t\t.attr(\"font-size\", this._options.fontSize)\r\n\t\t\t.text(() => {\r\n\t\t\t\tvar formattedValue = format(this._initialValue);\r\n\t\t\t\treturn formattedValue;\r\n\t\t\t})\r\n\t\t\t.attr(\"y\", height + this._options.fontSize + Defaults.LABEL_MARGIN);\r\n\r\n\t\t\r\n\t\tthis._updateLabelPosition(this._position);\r\n\t\treturn this._handleLabelEl;\r\n\t}\r\n}","import style from \"../Histogram.css\";\r\nimport HistogramHandle from \"./HistogramHandle\";\r\nimport Observable from \"../../utils/Observable\";\r\nimport * as PositionUtils from \"../utils/PositionUtils\"\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Histogram renderer class\r\n * @param {Object} options\r\n */\r\nexport default class HistogramSelectionRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Histogram options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._histogramData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * history selection\r\n\t\t */\r\n\t\tthis._histogramSelection = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * index of over selection  \r\n\t\t */\r\n\t\tthis._overSelectionIndex = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * selection handles\r\n\t\t */\r\n\t\tthis._handles = [];\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if handle is dragged\r\n\t\t */\r\n\t\tthis._draggingHandle = false;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous selection for animation\r\n\t\t */\r\n\t\tthis._prevSelection = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if animation is run\r\n\t\t */\r\n\t\tthis._animating = false;\r\n\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a category\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is changed\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\t\t\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether histogram has been rendered or not\r\n\t * @returns {boolean} true if histogram has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * @param {DOMElement}  \r\n\t * @returns {HistogramSelectionRenderer} returns this widget instance\r\n\t */\r\n\trender(groupEl){\r\n\t\tthis._rendered = true;\r\n\t\tthis._groupEl = groupEl\r\n\r\n\t\treturn this;\r\n\t} \t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._destroyHandles();\r\n\t\tif (this._selectionBars){\r\n\t\t\tthis._selectionBars.remove();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Destroys selection controls \r\n\t */\r\n\t_destroyHandles(){\r\n\t\tthis._handles.forEach(handle=>handle.destroy());\r\n\t\tthis._handles = [];\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles click on handle\r\n\t * @param {Number} handleIndex\r\n\t * @param {Number} handleValue \r\n\t */\r\n\t_onHandleClick(handleIndex, handleValue){\r\n\t\t// call prompt handler if available\r\n\t\tif (this._options.promptHandler){\r\n\t\t\tthis._options.promptHandler(handleValue).then((promptResult)=>{\r\n\t\t\t\tvar startSelectionSnapshot = JSON.stringify(this._histogramSelection.getOutputSelection());\r\n\t\t\t\tpromptResult = parseFloat(promptResult);\r\n\t\t\t\t// must be within min max range\r\n\t\t\t\tvar minMax = this._histogramData.getMinMax();\r\n\t\t\t\tpromptResult = Math.min(minMax.max, promptResult);\r\n\t\t\t\tpromptResult = Math.max(minMax.min, promptResult);\r\n\r\n\t\t\t\tvar points = this._histogramSelection.getSelectionPoints();\r\n\t\t\t\tpoints[handleIndex] = {\r\n\t\t\t\t\tvalue:promptResult\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar positions = points\r\n\t\t\t\t\t.sort((p1,p2)=>p1.value-p2.value)\r\n\t\t\t\t\t.map(point=>this._histogramData.valueToPosition(point.value));\r\n\t\t\t\t\r\n\t\t\t\tthis._updateSelectionPositions(positions, points);\r\n\t\t\t\tthis._updateSelection();\r\n\r\n\t\t\t\t// TODO: update handles without destroying them\r\n\t\t\t\tthis._destroyHandles();\r\n\t\t\t\tthis._renderHandles();\r\n\r\n\t\t\t\t// fire selection change if selection is changed\r\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\r\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Toggles selection\r\n\t * @param {Number} selectionIndex \r\n\t */\r\n\t_toggleSelection(selectionIndex){\r\n\t\tvar selection = this._options.selection[selectionIndex];\r\n\t\tselection.disabled = !selection.disabled;\r\n\t\tvar enabled = !selection.disabled;\r\n\t\tthis._updateSelection();\r\n\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Handles click on chart\r\n\t */\r\n\t_onClick(){\r\n\t\tvar target = d3.select(d3.event.target);\r\n\t\tvar selectionIndex = target.attr(\"data-selection-index\");\r\n\t\tvar handleIndex = target.attr(\"data-handle-index\");\r\n\r\n\t\tif (selectionIndex != null && this._histogramSelection.allowsToggle()){\r\n\t\t\tthis._toggleSelection(selectionIndex)\r\n\t\t} else if (handleIndex != null){\r\n\t\t\tthis._onHandleClick(handleIndex, target.attr(\"data-handle-value\"));\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * Handles handle click \r\n\t */\r\n\t_handleClick(){\r\n\t\tthis._groupEl.on(\"click\", this._onClick.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Refreshes histogram data \r\n\t * @param {HistogramData}\r\n\t * @param {HistogramSelection}\r\n\t * @param {Object} options\r\n\t */\r\n\trefresh(histogramData, histogramSelection, options){\r\n\t\tthis._animate = options && options.animate;\r\n\t\tif (this._animate && this._histogramSelection && this._histogramSelection.getSelection().length == histogramSelection.getSelection().length){\r\n\t\t\tthis._prevSelection = this._histogramSelection.getSelection();\r\n\t\t\tthis._prevHistogramData = this._histogramSelection.getSelection();\r\n\t\t}\r\n\r\n\t\tif (this._animate && this._histogramData){\r\n\t\t\tthis._prevHistogramData = this._histogramData;\r\n\t\t}\r\n\r\n\t\tthis._histogramData = histogramData;\r\n\t\tthis._histogramSelection = histogramSelection;\r\n\t\t\r\n\t\tthis._clear();\r\n\t\tthis._renderSelection();\r\n\t\tthis._updateSelection();\r\n\r\n\t\tthis._handleHoverState();\r\n\t\tthis._handleClick();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Updates selection controls on hover\r\n\t * @param {Number} selectionIndex \r\n\t */\r\n\t_updateSelectionControlsHoverState(selectionIndex){\r\n\t\t// get all handles sorted by X position\r\n\t\tvar handles = this._handles.slice().sort((h1,h2)=>{\r\n\t\t\treturn h1.getXPosition() - h2.getXPosition();\r\n\t\t});\r\n\r\n\t\t// unset hover state on all handles\r\n\t\thandles.forEach(handle=>handle.unsetHoverState());\r\n\r\n\t\t// selection is active, active both handles for active selection\r\n\t\tif (selectionIndex != null){\r\n\t\t\tvar handle1 = handles[selectionIndex];\r\n\t\t\tvar handle2 = handles[selectionIndex+1];\r\n\r\n\t\t\thandle1.setHoverState();\r\n\t\t\thandle2.setHoverState();\r\n\r\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\r\n\r\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\r\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\r\n\t\t}\r\n\t}\t\r\n\r\n\t/**\r\n\t * \r\n\t * @private \r\n\t * Handles what happens when mouse is over selection\r\n\t * @param {String} type \r\n\t * @param {Number} i \r\n\t * @param {HTMLElement[]} array \r\n\t */\r\n\t_onSelectionMouseOver(d, i, nodes){\r\n\t\t// prevent selection when dragging handles\r\n\t\tif (this._draggingHandle){\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\tvar selectionIndex = parseInt(d3.select(d3.event.target).attr(\"data-selection-index\"));\r\n\t\tif (this._overSelectionIndex != selectionIndex){\r\n\t\t\tthis._overSelectionIndex = selectionIndex;\r\n\t\t\tthis._updateSelection();\r\n\t\t\tthis._updateSelectionControlsHoverState(selectionIndex);\r\n\t\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * \r\n\t * @private \r\n\t * Handles what happens when mouse is out of selection\r\n\t * @param {String} type \r\n\t * @param {Number} i \r\n\t * @param {HTMLElement[]} array \r\n\t */\r\n\t_onSelectionMouseOut(d, i, nodes){\r\n\t\t// prevent selection when dragging handles\r\n\t\tif (this._draggingHandle){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\td3.select(nodes[i]).attr(\"fill\", \"rgba(0,0,0,0)\")\r\n\r\n\t\tthis._overSelectionIndex = null;\r\n\t\tthis._updateSelectionControlsHoverState(null);\r\n\t\tthis._updateSelection();\r\n\t\tthis._observable.fire(\"selectionOver\", this._overSelectionIndex);\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * @private \r\n\t * Handles hover state\r\n\t */\r\n\t_handleHoverState(){\r\n\t\tvar g = this._groupEl;\r\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseout\", this._onSelectionMouseOut.bind(this));\r\n\t\tg.selectAll(\".\"+style.selectionbar).on(\"mouseover\", this._onSelectionMouseOver.bind(this));\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private \r\n\t * Handles when handle is dragged\r\n\t */\r\n\t_onHandleDrag(){\r\n\t\tvar positions = this._handles.map(handle=>handle.getXPosition()).sort((p1, p2)=>{\r\n\t\t\treturn p1-p2;\r\n\t\t});\r\n\r\n\t\tthis._updateSelectionPositions(positions);\r\n\t\tthis._updateSelection();\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Updates selection with new positions\r\n\t* @param {Array} positions\r\n\t* @param {Array} points\r\n\t*/\r\n\t_updateSelectionPositions(positions, points){\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\t\tpositions.forEach((p, index)=>{\r\n\t\t\tif (index>selection.length-1){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar position = {\r\n\t\t\t\tfrom:p,\r\n\t\t\t\tto:positions[index+1]\r\n\t\t\t};\r\n\r\n\t\t\tvar value = {\r\n\t\t\t\tfrom:points?points[index].value:this._histogramData.positionToValue(position.from),\r\n\t\t\t\tto:points?points[index+1].value:this._histogramData.positionToValue(position.to),\r\n\t\t\t};\r\n\r\n\t\t\t[\"from\", \"to\"].forEach(pos=>{\r\n\t\t\t\tconst selectionChanged = points?\r\n\t\t\t\t\t// if new points are given, we need to compare selection values\r\n\t\t\t\t\tselection[index][pos] !== value[pos]:\r\n\t\t\t\t\t// otherwise, we need to compare selection position\r\n\t\t\t\t\tselection[index][\"position\"][pos] !== position[pos];\r\n\r\n\t\t\t\t// update selection on change\r\n\t\t\t\tif (selectionChanged){\r\n\t\t\t\t\tselection[index][pos] = value[pos];\t\r\n\t\t\t\t\tselection[index][\"position\"][pos] = position[pos];\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\t\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders selection bars\r\n\t*/\r\n\t_renderSelection() {\r\n\t\tvar height = this._options.height;\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\r\n\t\t// hover selection bars\r\n\t\tthis._selectionBars = this._groupEl.selectAll(\".\"+style.selectionbar)\r\n\t\t\t.data(selection)\r\n\t\t\t.enter().append(\"rect\")\r\n\t\t\t.attr(\"class\", style.selectionbar)\r\n\t\t\t.attr(\"y\", 0)\r\n\t\t\t.attr(\"fill\", \"rgba(0,0,0,0.00)\")\r\n\t\t\t.attr(\"height\", height);      \r\n\r\n\r\n\t\tthis._renderHandles();\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders selection controls\r\n\t*/\r\n\t_renderHandles(){\r\n\t\t// render selection controls\r\n\t\tthis._handles = this._histogramSelection.getSelectionPoints().map((point, index)=>{\r\n\t\t\tvar value = point.value;\r\n\r\n\t\t\tvar handle = new HistogramHandle(this._groupEl, value, index, this._histogramData, this._options);\r\n\r\n\t\t\tif(point.hidden){\r\n\t\t\t\thandle.hide();\r\n\t\t\t}\r\n\r\n\t\t\thandle.on(\"drag\", ()=>{\r\n\t\t\t\tthis._onHandleDrag();\r\n\t\t\t}, this);\r\n\r\n\t\t\tvar startSelectionSnapshot;\r\n\r\n\t\t\t// disable other handles when draggin starts\r\n\t\t\thandle.on(\"startDrag\", ()=>{\r\n\t\t\t\tstartSelectionSnapshot = JSON.stringify(this._options.selection);\r\n\t\t\t\t\r\n\t\t\t\tthis._draggingHandle = true;\r\n\t\t\t\tthis._handles.forEach(handle=>handle.disable());\r\n\t\t\t\thandle.enable();\r\n\t\t\t}, this);\r\n\r\n\t\t\t// enable all handles when draggin starts\r\n\t\t\thandle.on(\"endDrag\", ()=>{\r\n\t\t\t\tthis._draggingHandle = false;\r\n\t\t\t\tthis._handles.forEach(handle=>handle.enable());\r\n\r\n\t\t\t\tif (JSON.stringify(this._options.selection) != startSelectionSnapshot){\r\n\t\t\t\t\tthis._observable.fire(\"selectionChanged\", this._histogramSelection.getOutputSelection());\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\r\n\t\t\r\n\t\t\treturn handle;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Returns bar color based on X position\r\n\r\n\t* @param {Number} barX\r\n\t* @param {Array} selection\r\n\t* @returns {Number} bar category index\r\n\t* @param {HistogramData} histogram data \r\n\t*/\r\n\t_getBarSelectionIndex(barX, selection, data){\r\n\t\tfor (var i=0;i<selection.length;i++){\r\n\t\t\tvar s = selection[i];\r\n\t\t\tvar isLast = i == selection.length-1;\r\n\t\t\tvar within = barX >= data.valueToPosition(s.from) && (barX < data.valueToPosition(s.to) || (isLast && barX <= data.valueToPosition(s.to)));\r\n\t\t\tif (within) return i;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns selection color\r\n\t * @param {Object} selection\r\n\t * @param {Object} d datum\r\n\t */\r\n\t_getSelectionColor(selection, d){\r\n\t\tif (selection.colors){\r\n\t\t\treturn selection.colors[d.volumeIndex];\r\n\t\t}\r\n\r\n\t\tif (selection.color){\r\n\t\t\treturn selection.color\r\n\t\t}\r\n\r\n\t\treturn this._options.selectionColor;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns bar color for given bar position with given selection\r\n\t * @param {Number} barX \r\n\t * @param {Array} selection \r\n\t * @param {HistogramData} histogram data \r\n\t */\r\n\t_getBarColor (barX, selection, data, d){\r\n\t\tvar inactiveBarColor = this._options.inactiveBarColor;\r\n\t\tvar overSelectionColor = this._options.overSelectionColor;\r\n\t\t\r\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\r\n\t\tif (barSelectionIndex == null){\r\n\t\t\treturn inactiveBarColor;\r\n\t\t} else if (selection[barSelectionIndex].disabled){\r\n\t\t\treturn inactiveBarColor;\r\n\t\t} if (this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex){\r\n\t\t\treturn overSelectionColor;\r\n\t\t} else {\r\n\t\t\treturn this._getSelectionColor(selection[barSelectionIndex], d);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Returns bar color for given bar position with given selection\r\n\t * @param {Number} barX \r\n\t * @param {Array} selection \r\n\t * @param {HistogramData} histogram data \r\n\t */\r\n\t_getBarOpacity (barX, selection, data){\r\n\t\tvar defaultOpacity = 1;\r\n\r\n\t\tvar barSelectionIndex = this._getBarSelectionIndex(barX, selection, data);\r\n\t\tvar isOver = this._histogramSelection.allowsToggle() && this._overSelectionIndex == barSelectionIndex;\r\n\t\tvar isDisabled = barSelectionIndex != null && selection[barSelectionIndex].disabled;\r\n\r\n\t\tif (isOver){\r\n\t\t\treturn this._options.overSelectionOpacity;\r\n\t\t}\r\n\r\n\t\tif (isDisabled){\r\n\t\t\treturn this._options.inactiveBarOpacity;\r\n\t\t}\r\n\t\t\r\n\t\t// otherwise use set opacity if \r\n\t\tif (barSelectionIndex != null && selection[barSelectionIndex].opacity != null){\r\n\t\t\treturn selection[barSelectionIndex].opacity;\r\n\t\t} \r\n\r\n\t\treturn defaultOpacity;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Runs onTransition as a transition between two selections\r\n\t * @param {Array} selection1 \r\n\t * @param {Array} selection2 \r\n\t * @param {Function} onTransition handler\r\n\t */\r\n\t_onSelectionTransition(selection1, selection2, data1, data2, onTransition, onComplete){\r\n\t\tselection1.forEach((s1,selectionIndex)=>{\r\n\t\t\tvar s2 = selection2[selectionIndex];\r\n\t\t\tvar width = this._options.width;\r\n\t\t\tif (selection1[selectionIndex]){\r\n\t\t\t\tvar transitions = [];\r\n\t\t\t\tvar frames = [];\r\n\r\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.from)), Math.round(data2.valueToPosition(s2.from))]);\r\n\t\t\t\ttransitions.push([Math.round(data1.valueToPosition(s1.to)), Math.round(data2.valueToPosition(s2.to))]);\r\n\r\n\t\t\t\t// make sure duration is calculated based on transition length\r\n\t\t\t\tframes = [Math.abs((transitions[0][0] - transitions[0][1])/width), Math.abs((transitions[1][0] - transitions[1][1])/width)];\r\n\r\n\t\t\t\ttransitions.forEach((t, handleIndex)=>{\r\n\t\t\t\t\tvar duration = 0;\r\n\r\n\t\t\t\t\twhile(t[0] !== t[1]){\r\n\t\t\t\t\t\tsetTimeout(onTransition.bind(this, t[0], selectionIndex, handleIndex), duration);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tduration = duration+0.5/frames[handleIndex];\r\n\t\t\t\t\t\tt[0] = t[0]>t[1]?t[0]-1:t[0]+1;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// call final complete fn only if duration is > 0, this prevents premature animation end\r\n\t\t\t\t\t// when one of the sides is in the same position\r\n\t\t\t\t\tif (duration>0){\r\n\t\t\t\t\t\tsetTimeout(function(p, si, hi){\r\n\t\t\t\t\t\t\tonTransition(p, si, hi)\r\n\t\t\t\t\t\t\tonComplete(p, si, hi);\r\n\t\t\t\t\t\t}.bind(this, t[1], selectionIndex, handleIndex), ++duration);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Updates selection\r\n\t*/\r\n\t_updateSelection(){\r\n\t\tvar selection = this._histogramSelection.getSelection();\r\n\t\tvar bars = this._groupEl.selectAll(\".\"+style.bar);\r\n\r\n\t\t// fills bars with given selection\r\n\t\tvar fillBars = (s, data) => {\r\n\t\t\t// handle bar colors\r\n\t\t\tbars.attr(\"fill\", (d)=> {\r\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\r\n\t\t\t\treturn this._getBarColor(barX, s, data, d);\r\n\t\t\t})\r\n\r\n\t\t\t// handle bar opacity\r\n\t\t\tbars.attr(\"fill-opacity\", (d)=> {\r\n\t\t\t\tvar barX = this._histogramData.valueToPosition(d.value);\r\n\t\t\t\treturn this._getBarOpacity(barX, s, data, d);\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// handle animation if previous selection is set\r\n\t\tif (this._animate && this._prevSelection){\r\n\t\t\tvar prevSelection = this._prevSelection;\r\n\t\t\tvar prevData = this._prevHistogramData;\r\n\t\t\t\r\n\t\t\t// set prev selection\r\n\t\t\tfillBars(prevSelection, this._prevHistogramData);\r\n\r\n\t\t\t// set handle positions to prev selection\r\n\t\t\tprevSelection.forEach((s, i)=>{\r\n\t\t\t\tvar p1 = this._prevHistogramData.valueToPosition(s.from);\r\n\t\t\t\tvar p2 = this._prevHistogramData.valueToPosition(s.to);\r\n\r\n\t\t\t\tthis._handles[i].setHandleXPosition(p1).setLabelPosition(p1);\r\n\t\t\t\tthis._handles[i+1].setHandleXPosition(p2).setLabelPosition(p2)\r\n\t\t\t});\r\n\r\n\t\t\tthis._animating = true;\r\n\t\t\t//fill bars on selection transition and move handles\r\n\t\t\tthis._onSelectionTransition(prevSelection, selection, prevData, this._histogramData, \r\n\t\t\t\t// on transition callback\r\n\t\t\t\t(p, selectionIndex, handleIndex)=>{\r\n\t\t\t\t\tvar bar = d3.select(bars.nodes()[p]);\r\n\t\t\t\t\tbar.attr(\"fill\", d=>{\r\n\t\t\t\t\t\treturn this._getBarColor(p, selection, this._histogramData, d);\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t//var handleText = this._options.format(this._histogramData.positionToValue(p));\r\n\t\t\t\t\t// move handles\r\n\t\t\t\t\t[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].setHandleXPosition(p).setLabelPosition(p)\r\n\r\n\t\t\t\t// on complete callback\t\t\r\n\t\t\t},()=>{\r\n\t\t\t\t\t// hide handles\r\n\t\t\t\t\t//[this._handles[selectionIndex], this._handles[selectionIndex+1]][handleIndex].hideLabel();\r\n\t\t\t\t\tfillBars(selection, this._histogramData)\r\n\t\t\t\t\tthis._animating = false;\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\tthis._prevSelection = null;\r\n\t\t\tthis._prevHistogramData = null;\r\n\t\t\r\n\t\t} else {\r\n\t\t\tfillBars(selection, this._histogramData)\r\n\t\t}\r\n\t\t\r\n\t\t// selection rects\r\n\t\tthis._groupEl.selectAll(\".\"+style.selectionbar)\r\n\t\t\t.data(selection)\r\n\t\t\t.attr(\"data-selection-index\", function(d,i){\r\n\t\t\t\treturn i;\r\n\t\t\t})\r\n\t\t\t.attr(\"x\", (d) => { \r\n\t\t\t\treturn this._histogramData.valueToPosition(d.from);\r\n\t\t\t})\r\n\t\t\t.attr(\"width\", (d) => {\r\n\t\t\t\treturn this._histogramData.valueToPosition(d.to) - this._histogramData.valueToPosition(d.from);\r\n\t\t\t})\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Shows selection labels\r\n\t */\r\n\tshowSelectionLabels(){\r\n\t\t// show label without calculating offsets when animating\r\n\t\tif (this._animating) {\r\n\t\t\treturn this._handles.forEach(handle=>handle.showLabel());\r\n\t\t}\r\n\r\n\t\tthis._histogramSelection.getSelection().forEach((s,i)=>{\r\n\t\t\tvar handle1 = this._handles[i];\r\n\t\t\tvar handle2 = this._handles[i+1];\r\n\r\n\t\t\tvar labelOffsets = PositionUtils.getHandlePositionOffsets(handle1, handle2, this._options.fontSize, this._options.width);\r\n\t\t\thandle1.setLabelOffset(labelOffsets[0]);\r\n\t\t\thandle2.setLabelOffset(labelOffsets[1]);\r\n\t\t});\r\n\t\t\r\n\t\tthis._handles.forEach(handle=>handle.showLabel());\r\n\t}\r\n\r\n\t/**\r\n\t * Hides selection labels\r\n\t */\r\n\thideSelectionLabels(){\r\n\t\tthis._handles.forEach(handle=>handle.hideLabel());\r\n\t}\t\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys histogram UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tthis._observable.destroy();\r\n\t\tthis._clear();\r\n\r\n\t\treturn this;\r\n    }\t\t\r\n}","import style from \"./Histogram.css\";\r\nimport HistogramSelectionRenderer from \"./selection/HistogramSelectionRenderer\";\r\nimport * as Defaults from \"./HistogramDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Histogram renderer class\r\n * @param {Object} options\r\n */\r\nexport default class HistogramRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Histogram options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Bar data \r\n\t\t */\r\n\t\tthis._historyData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = d3.scaleBand().range([0, options.width]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = d3.scaleLinear().range([options.height, 0]);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if histogram has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous data for animation\r\n\t\t */\r\n\t\tthis._prevData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * selection renderer\r\n\t\t */\r\n\t\tthis._selectionRenderer = new HistogramSelectionRenderer(options);\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * True if labels are visible\r\n\t\t */\r\n\t\tthis._labelsVisible = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a category\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t */\r\n\t\t\t\"selectionOver\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is toggled\r\n\t\t\t * @param {int} selectionIndex\r\n\t\t\t * @param {bool} enabled\r\n\t\t\t */\r\n\t\t\t\"toggleSelection\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when selection is changed\r\n\t\t\t * @param {Array} selection\r\n\t\t\t */\r\n\t\t\t\"selectionChanged\",\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when user clicks on a handle\r\n\t\t\t * @param {int} handleIndex\r\n\t\t\t * @param {Number} handleValue\r\n\t\t\t */\r\n\t\t\t\"handleClick\"\r\n\t\t]);\t\t\r\n\r\n\t\t// relay selection events\r\n\t\tthis._selectionRenderer.on(\"selectionOver\", (selectionIndex)=>{\r\n\t\t\tthis._observable.fire(\"selectionOver\", selectionIndex);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"toggleSelection\", (selectionIndex, enabled)=>{\r\n\t\t\tthis._observable.fire(\"toggleSelection\", selectionIndex, enabled);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"selectionChanged\", (selection)=>{\r\n\t\t\tthis._observable.fire(\"selectionChanged\", selection);\r\n\t\t});\r\n\r\n\t\tthis._selectionRenderer.on(\"handleClick\", (handleIndex, handleValue)=>{\r\n\t\t\tthis._observable.fire(\"handleClick\", handleIndex, handleValue);\r\n\t\t});\t\t\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether histogram has been rendered or not\r\n\t * @returns {boolean} true if histogram has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {HistogramHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Histogram} returns this widget instance\r\n\t */\r\n\trender(selector){\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar margin = Defaults.MARGIN;\r\n\r\n\t\t// render SVG\r\n\t\tvar svg = this._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width + margin.left + margin.right)\r\n\t\t\t.attr(\"height\", height + margin.top + this._options.fontSize + margin.bottom)\r\n\t\t\t.classed(style.histogram, true);\r\n\r\n\t\t// render group element\r\n\t\tvar g = this._groupEl = this._svgEl.append(\"g\")\r\n\t\t\t.classed(style.inactive, true)\r\n\t\t\t.attr(\"transform\",\r\n\t\t\t\"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n\t\t// handle hover over svg element\r\n\t\tsvg.on(\"mouseover.hover\", ()=>{\r\n\t\t\tg.classed(style.active, true)\r\n\t\t\tg.classed(style.inactive, false)\r\n\t\t})\r\n\r\n\t\tsvg.on(\"mouseout.hover\", ()=>{\r\n\t\t\tg.classed(style.inactive, true)\r\n\t\t\tg.classed(style.active, false)\r\n\t\t})\r\n\r\n\t\tthis._selectionRenderer.render(g);\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t} \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._groupEl.node().innerHTML = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Refreshes histogram data \r\n\t * @param {HistogramData}\r\n\t * @param {HistogramSelection}\r\n\t * @param {Object} options\r\n\t */\r\n\trefresh(histogramData, histogramSelection, options){\r\n\t\tthis._animate = options && options.animate;\r\n\r\n\t\tthis._histogramData = histogramData;\t\t\r\n\t\tthis._clear();\r\n\r\n\t\tthis._xAxis.domain(histogramData.getData().map(function (d) {return d.value; }));\r\n\t\tthis._yAxis.domain([0, d3.max(histogramData.getData(), function (d) { return Math.max.apply(Math, d.volume); })]);\r\n\r\n\t\tthis._renderXAxis();\t\t\r\n\t\tthis._renderDataBars();\r\n\r\n\t\tthis._prevData = histogramData.getData();\t\t\t\r\n\r\n\t\tthis._selectionRenderer.refresh(histogramData, histogramSelection, options);\t\r\n\r\n\t\tif (this._labelsVisible){\r\n\t\t\tthis.showSelectionLabels()\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Shows selection labels\r\n\t */\r\n\tshowSelectionLabels(){\r\n\t\tthis._selectionRenderer.showSelectionLabels();\r\n\t\t// hide axis labels when selection labels are visible\r\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"none\");\r\n\t\tthis._labelsVisible = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Hides selection labels\r\n\t */\r\n\thideSelectionLabels(){\r\n\t\tthis._selectionRenderer.hideSelectionLabels();\r\n\t\t// show axis labels when selection labels are not visible\r\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"]).attr(\"display\", \"block\");\t\t\r\n\t\tthis._labelsVisible = false;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @private\r\n\t * Renders data bars\r\n\t*/\r\n\t_renderDataBars() { \r\n\t\tvar data = this._histogramData.getData();\r\n\t\t// var prevData = this._prevData;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\tvar y = this._yAxis;\r\n\r\n\t\tdata.forEach(d=>{\r\n\t\t\td.volume.forEach((v, i)=>{\r\n\t\t\t\tthis._groupEl\r\n\t\t\t\t\t.append(\"rect\")\r\n\t\t\t\t\t.datum({\r\n\t\t\t\t\t\tvalue:d.value,\r\n\t\t\t\t\t\tvolumeIndex:i\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.attr(\"class\", style.bar)\r\n\t\t\t\t\t.attr(\"x\", this._histogramData.valueToPosition(d.value))\r\n\t\t\t\t\t.attr(\"width\", \"1\")\r\n\t\t\t\t\t.attr(\"y\", Math.floor(y(d.volume[i])))\r\n\t\t\t\t\t.attr(\"height\", Math.ceil(height - y(d.volume[i])))\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t* @private\r\n\t* Renders X axis \r\n\t*/        \r\n\t_renderXAxis(){\r\n\t\tvar minMax = this._histogramData.getMinMax();\r\n\t\tvar format = this._options.format;\r\n\t\tvar height = this._options.height + this._options.fontSize + Defaults.LABEL_MARGIN;\r\n\r\n\t\tthis._groupEl.selectAll(\".\"+style[\"x-axis\"])\r\n\t\t\t.data([minMax.min, minMax.max])\r\n\t\t\t.enter()\r\n\t\t\t.append(\"text\")\r\n\t\t\t.text((d)=>format(d))\r\n\t\t\t.attr(\"font-size\", this._options.fontSize)\r\n\t\t\t.attr(\"transform\", (d, i)=>{\r\n\t\t\t\treturn [\r\n\t\t\t\t\t\"translate(\"+0+\",\" + height + \")\",\r\n\t\t\t\t\t\"translate(\"+this._options.width+\",\" + height + \")\"\r\n\t\t\t\t][i]\r\n\t\t\t})\r\n\t\t\t.attr(\"text-anchor\", function(d, i){\r\n\t\t\t\treturn [\"start\", \"end\"][i];\r\n\t\t\t})\r\n\t\t\t.classed(style[\"x-axis\"], true)\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys histogram UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\t\tthis._selectionRenderer.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","/**\n * @abstract\n * abstract HistogramSelection class\n */\nexport default class HistogramSelection {\n\tconstructor(histogramData, selection){\n\t\tthis._selection = selection.map(s=>{\n\t\t\treturn Object.assign(s, {\n\t\t\t\tposition:{\n\t\t\t\t\tfrom:histogramData.valueToPosition(s.from),\n\t\t\t\t\tto:histogramData.valueToPosition(s.to)\n\t\t\t\t}\n\t\t\t});\n\t\t});\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelection()\n\t * Returns histogram selection\n\t */\n\tgetSelection(){\n\t\treturn this._selection;\n\t}\n\n\t/**\n\t * @public\n\t * @abstract\n\t * @returns {Array} histogram selection\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\tthrow \"HistogramSelection.getOutputSelection() has to be implemented\";\n\t}\n\n\t/**\n\t * @public \n\t * @abstract\n\t * @returns {String}\n\t * Returns histogram selection type\n\t */\n\tgetSelectionType(){\n\t\tthrow \"HistogramSelection.getSelectionType() has to be implemented\";\n\t}\n\n\t/**\n\t * @abstract\n\t * @public \n\t * @returns {Boolean}\n\t * Returns true if toogle is allowed\n\t */\n\tallowsToggle(){\n\t\tthrow \"HistogramSelection.allowsToogle() has to be implemented\";\n\t}\t\n\n\t/**\n\t * @public\n\t * @abstract \n\t * @returns {Array}\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tthrow \"HistogramSelection.getSelection() has to be implemented\";\n\t}  \t\n}\n\nvar SelectionTypes = {\n\tMULTI:\"multi\",\n\tFILTER:\"filter\",\n\tINVERTED_FILTER:\"inverted-filter\"\n}\n\nexport {SelectionTypes} ","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class MultipleHistogramSelection extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n    }\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.MULTI;\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn true;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\t\t\t\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t \t\n}","import MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport * as Defaults from \"../HistogramDefaults\";\n\n/**\n * @class\n * DefaultHistogramSelectionImpl representing histogram selection\n */\nexport default class DefaultHistogramSelectionImpl extends MultipleHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData) {\n\t\tvar minMax = histogramData.getMinMax();\n\t\tvar colors = Defaults.DEFAULT_COLORS;\n\t\tvar start = minMax.min;\n\t\tvar step = (minMax.max - minMax.min) / colors.length;\n\t\tvar selection = colors.map(color=>{\n\t\t\tvar from = start;\n\t\t\tvar to = start + step;\n\t\t\tstart += step;\n\n\t\t\treturn {\n\t\t\t\tfrom:from, \n\t\t\t\tto:to,\n\t\t\t\tcolor:color\n\t\t\t}\n\t\t});\n\n\t\tsuper(histogramData, selection);\n    }\n}","import HistogramSelection from \"./HistogramSelection\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class FilterHistogramSelectionImpl extends HistogramSelection{\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tif (selection.length != 1){\n\t\t\tthrow \"Filter selection doesn't allow more than one selection\"\n\t\t}\n\t\tsuper(histogramData, selection);\n\t}\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn this._selection;\n\t}\t\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.FILTER;\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.allowsToggle()\n\t * Returns true if selection allows toggle\n\t */\n\tallowsToggle(){\n\t\treturn false;\n\t}\t\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = [];\n\t\tvar selection = this.getSelection();\n\t\tselection.forEach((s, index)=>{\n\t\t\tresult.push({\n\t\t\t\tvalue:s.from\n\t\t\t});\n\n\t\t\tif (index == selection.length-1){\n\t\t\t\tresult.push({\n\t\t\t\t\tvalue:s.to\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}  \t\n}","import FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * MultipleHistogramSelection representing histogram selection that support multiple selections\n */\nexport default class InvertedFilterHistogramSelectionImpl extends FilterHistogramSelectionImpl {\n\t/**\n\t * @param {HistogramData} histogramData\n\t * @param {Array} selection\n\t */\n    constructor(histogramData, selection) {\n\t\tsuper(histogramData, selection);\n\n\t\tthis._selection = this._getInvertedSelection(histogramData, selection);\n    }\n\n\n\t_getInvertedSelection(histogramData, selection){\n\t\tvar minMax = histogramData.getMinMax();\n\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:minMax.min,\n\t\t\t\tto:selection[0].from\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].from,\n\t\t\t\tdisabled:true,\n\t\t\t\tto:selection[0].to\n\t\t\t},\n\t\t\t{\n\t\t\t\tfrom:selection[0].to,\n\t\t\t\tto:minMax.max\n\t\t\t}\n\t\t];\n\t}\n\n\t/**\n\t * @public\n\t * @returns {Array} histogram selection\n\t * @implements HistogramSelection.getOutputSelection()\n\t * Returns histogram selection \n\t */\n\tgetOutputSelection(){\n\t\treturn [\n\t\t\t{\n\t\t\t\tfrom:this._selection[1].from,\n\t\t\t\tto:this._selection[1].to\n\t\t\t}\n\t\t];\n\t}\t\n\n\t/**\n\t * @public\n\t * @implements HistogramSelection.getSelectionType()\n\t * Returns histogram selection\n\t */\n\tgetSelectionType(){\n\t\treturn SelectionTypes.INVERTED_FILTER;\n\t}\n\n\t/**\n\t * @public \n\t * @implements HistogramSelection.getSelectionPoints()\n\t * Returns histogram selection points\n\t */\n\tgetSelectionPoints(){\n\t\tvar result = super.getSelectionPoints();\n\t\t\n\t\tresult[0].hidden = true;\n\t\tresult[result.length-1].hidden = true;\n\n\t\treturn result;\n\t}  \t\n}","import DefaultHistogramSelectionImpl from \"./DefaultHistogramSelectionImpl\";\nimport MultipleHistogramSelectionImpl from \"./MultipleHistogramSelectionImpl\";\nimport FilterHistogramSelectionImpl from \"./FilterHistogramSelectionImpl\";\nimport InvertedFilterHistogramSelectionImpl from \"./InvertedFilterHistogramSelectionImpl\";\nimport {SelectionTypes} from \"./HistogramSelection\";\n\n/**\n * @class\n * HistogramSelection factory returns appropriate selection implementation\n */\nexport default class HistogramSelectionFactory {\n\t/**\n\t * @param {Object} options\n\t */\n\tconstructor(options) {\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * @public\n\t * @param {HistogramData} histogramData\n\t * @returns {HistogramSelection} returns histogram selection\n\t * Returns histogram selection\n\t */\n\tgetHistogramSelection(selection, histogramData){\t\t\n\t\t// use default histogram selection if selection is not provided\n\t\tif (!selection){\n\t\t\treturn new DefaultHistogramSelectionImpl(histogramData, this._options.selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.FILTER){\n\t\t\treturn new FilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else if (this._options.selectionType == SelectionTypes.INVERTED_FILTER){\n\t\t\treturn new InvertedFilterHistogramSelectionImpl(histogramData, selection);\n\t\t} else {\n\t\t\treturn new MultipleHistogramSelectionImpl(histogramData, selection);\n\t\t}\n\t}  \t\n}","/**\r\n * @public\r\n * Default widget width\r\n */\r\nexport const WIDTH = 360;\r\n\r\n/**\r\n * @public\r\n * Default widget height\r\n */\r\nexport const HEIGHT = 200;\r\n\r\n/**\r\n * @public\r\n * Default line color\r\n */\r\nexport const LINE_COLOR = \"#7ed321\";\r\n\r\n/**\r\n * @public\r\n * Default line colors\r\n */\r\nexport const LINE_COLORS = [];\r\n\r\n/**\r\n * @public\r\n * Default line opacity\r\n */\r\nexport const LINE_OPACITY = 1;\r\n\r\n/**\r\n * @public\r\n * Default fill color\r\n */\r\nexport const FILL_COLOR = \"#7ed321\";\r\n\r\n/**\r\n * @public\r\n * Default fill colors\r\n */\r\nexport const FILL_COLORS = [];\r\n\r\n/**\r\n * @public\r\n * Default fill opacity\r\n */\r\nexport const FILL_OPACITY = 0.1;\r\n\r\n/**\r\n * @public\r\n * Default line width\r\n */\r\nexport const LINE_WIDTH = 3;\r\n\r\n/**\r\n * @public\r\n * Default dot size\r\n */\r\nexport const DOT_SIZE = 6;\r\n\r\n/**\r\n * @public\r\n * Default margin \r\n */\r\nexport const MARGIN = {\r\n    bottom:28\r\n};\r\n\r\n/**\r\n * @public \r\n * Default axis color \r\n */\r\nexport const AXIS_COLOR = \"#f0f0f0\";\r\n\r\n\r\n/**\r\n * @public \r\n * Vertical label offset\r\n */\r\nexport const LABEL_OFFSET = 5;\r\n\r\n\r\n/**\r\n * @public \r\n * Zero line color\r\n */\r\nexport const ZERO_LINE_COLOR = \"#bababa\";","import * as d3 from \"d3\";\n\n/**\n * @class\n * series representing data for the line\n */\nexport default class LineData {\n\t/**\n\t * @param {Array} series\n\t * @param {Object} options\n\t */\n\tconstructor(series) {\n\t\tthis._series = series.slice();\n\t\tthis._minMax = this._calculateMinMax(this._series);\n\t}\n\n\t/**\n\t * @public\n\t * Returns min max of history data\n\t * @returns {Object} minMax\n\t * @returns {Number} minMax.min\n\t * @returns {Number} minMax.max\n\t */\n\tgetMinMax() {\n\t\treturn this._minMax;\n\t}\n\n\t/**\n\t * @public\n\t * Returns line series\n\t * @returns {Array} line series\n\t */\n\tgetSeries() {\n\t\treturn this._series;\n\t}\n\n\t/**\n\t * @public\n\t * Returns all data from all series merged into one array\n\t * @returns {Array}\n\t */\n\tgetAllData() {\n\t\treturn [].concat.apply([], this._series);\n\t}\n\n\t/**\n\t * Returns merged data where each unique label has an array of values\n\t */\n\tgetMergedData() {\n\t\tvar dataMap = {};\n\t\tthis.getAllData().forEach((item=>{\n\t\t\tconst result = dataMap[item.label] || {\n\t\t\t\tlabel:item.label,\n\t\t\t\tvalues:[],\n\t\t\t\ttooltips:[]\n\t\t\t};\n\t\t\tresult.values.push(item.value);\n\t\t\tresult.tooltips.push(item.tooltip);\n\t\t\tdataMap[item.label] = result;\n\t\t}));\n\n\t\treturn Object.values(dataMap);\n\t}\n\n\t/**\n\t* @private\n\t* Returns min max values for given series\n\t* @param {Array} series\n\t* @returns {Object} minMax.min\n\t* @returns {Object} minMax.max\n\t*/\n\t_calculateMinMax(series) {\n\t\tvar data = [].concat.apply([], series);\n\t\tvar min = d3.min(data, function (d) { return d.value; });\n\t\tvar max = d3.max(data, function (d) { return d.value; });\n\n\t\tif (data.length <= series.length) {\n\t\t\tmin = Math.min(min, 0);\n\t\t\tmax = Math.max(max, 0);\n\t\t}\n\n\t\treturn {\n\t\t\tmin: min,\n\t\t\tmax: max\n\t\t}\n\t}\n\n\t/**\n\t * @public\n\t * Returns precision (number of floating digits) for given number\n\t */\n\tgetPrecision() {\n\t\tvar num = this._minMax.max;\n\t\tvar numParts = num.toString().split(\".\");\n\t\tif (numParts.length > 1) {\n\t\t\treturn numParts[1].length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}","import style from \"./Line.css\";\r\nimport * as Defaults from \"./LineDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport * as d3 from \"d3\";\r\n\r\nvar gradientID = 0;\r\n\r\n/**\r\n * @class\r\n * Line renderer class\r\n * @param {Object} options\r\n */\r\nexport default class TooltipRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Line options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Line data \r\n\t\t */\r\n\t\tthis._lineData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Line has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a line point\r\n\t\t\t * @param {Array} [x,y] data\r\n\t\t\t */\r\n\t\t\t\"pointOver\"\r\n\t\t]);\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Line has been rendered or not\r\n\t * @returns {boolean} true if Line has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {LineHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Line} returns this widget instance\r\n\t */\r\n\trender(groupEl){\r\n\t\tthis._groupEl = groupEl;\r\n\t\tthis._rendered = true;\r\n\r\n\t\tthis._groupEl.on(\"mouseout\", this._onMouseOut.bind(this))\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t_getTextAnchor(xPos, bottomLabelWidth, width){\r\n\t\tvar xpos = xPos;\r\n\t\tif (xpos - bottomLabelWidth/2 < 0){\r\n\t\t\treturn \"start\"\r\n\t\t} else if (xpos + bottomLabelWidth/2 > width){\r\n\t\t\treturn \"end\"\r\n\t\t} else {\r\n\t\t\treturn \"middle\";\r\n\t\t}\r\n\t}\r\n\r\n\t_getTooltipHTML(d){\r\n\t\treturn d.tooltips.filter((tooltip, index)=>{\r\n\t\t\treturn d.values[index] != null;\r\n\t\t}).map((tooltip, index)=>{\r\n\t\t\tconst value = tooltip || this._options.format(d.values[index]);\r\n\t\t\tvar color = this._options.lineColors[index] || this._options.lineColor;\r\n\t\t\tconst icon = `\r\n\t\t\t\t<span style=\"display:inline-block;position:relative;top:-1px;margin-right:5px;width:6px;height:6px;border-radius:50%;background-color:${color}\"></span>\r\n\t\t\t`;\r\n\t\t\treturn icon + value;\r\n\t\t}).join(\"<br />\");\r\n\t}\r\n\r\n\t_onHoverAreaOver(d){\r\n\t\tvar duration = this._tooltipGroup.attr(\"visibility\") == \"visible\"?0:0;\r\n\t\tvar x = this._xAxis;\r\n\t\tvar y = this._yAxis;\r\n\t\tvar width = this._options.width;\r\n\t\tvar xPos = x(d.label);\r\n\r\n\t\t// update tooltip position\r\n\t\tthis._tooltipGroup\r\n\t\t\t.transition()\r\n\t\t\t.duration(duration)\r\n\t\t\t.attr(\"visibility\", \"visible\")\r\n\t\t\t.attr(\"transform\", \"translate(\"+xPos+\", 0)\")\r\n\r\n\t\t// update tooltip bottom label\r\n\t\tvar bottomLabelWidth = this._tooltipBottomLabel.node().getBBox().width;\r\n\t\tvar bottomMaskPadding = 25;\r\n\t\tvar textAnchor = this._getTextAnchor(xPos, bottomLabelWidth, width);\r\n\r\n\t\tthis._tooltipBottomLabel\r\n\t\t\t.text(d.label)\r\n\t\t\t.attr(\"text-anchor\", textAnchor);\r\n\r\n\t\tthis._tooltipBottomLabel.attr(\"transform\", ()=>{\r\n\t\t\treturn {\r\n\t\t\t\t\"start\":\"translate(\"+-xPos+\", 0)\",\r\n\t\t\t\t\"middle\":\"translate(0, 0)\",\r\n\t\t\t\t\"end\":\"translate(\"+(width-xPos)+\", 0)\"\r\n\t\t\t}[textAnchor]\r\n\t\t});\r\n\t\t\r\n\t\tvar bottomMaskWidth = bottomMaskPadding*2 + bottomLabelWidth;\r\n\t\tthis._tooltipBottomLabelMask\r\n\t\t\t.attr(\"width\", bottomMaskWidth)\r\n\t\t\t.attr(\"x\", ()=>{\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\"start\":-xPos-bottomMaskPadding,\r\n\t\t\t\t\t\"middle\":-bottomMaskWidth/2,\r\n\t\t\t\t\t\"end\":width-xPos-bottomMaskWidth+bottomMaskPadding,\r\n\t\t\t\t}[textAnchor]\r\n\t\t\t})\r\n\r\n\t\tthis._handleMaskGradientEl.attr(\"x1\", -bottomMaskWidth/2);\r\n\t\tthis._handleMaskGradientEl.attr(\"x2\", bottomMaskWidth/2);\t\t\t\r\n\r\n\t\t// update tooltip top label \r\n\t\tvar tooltipHtml = this._getTooltipHTML(d);\r\n\t\tthis._tooltipTopLabel.node().innerHTML = tooltipHtml;\r\n\t\tvar labelLeft = this._getLabelLeft(xPos);\r\n\r\n\t\t// if value is not null or undefined\r\n\t\tif (d.values.some(d => d != null)){\r\n\t\t\tthis._tooltipTopLabel\r\n\t\t\t\t.style(\"left\", labelLeft+\"px\")\r\n\t\t\t\t.style(\"visibility\", \"visible\")\r\n\t\t\t\t.style(\"top\", y(Math.max.apply(Math,d.values))-50+\"px\")\r\n\r\n\t\t\t// update line circle\r\n\t\t\tthis._tooltipLineCircle\r\n\t\t\t\t.transition()\r\n\t\t\t\t.duration(duration)\r\n\t\t\t\t.style(\"visibility\", (circle, i)=>{\r\n\t\t\t\t\treturn d.values[i]?\"visible\":\"hidden\";\r\n\t\t\t\t})\r\n\t\t\t\t.attr(\"cy\", (circle, i)=>{\r\n\t\t\t\t\treturn d.values[i]?y(d.values[i]):0\r\n\t\t\t\t})\t\t\t\t\r\n\t\t} else {\r\n\t\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\");\r\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n\t_getLabelLeft(xPos){\r\n\t\tvar labelWidth = this._tooltipTopLabel.node().offsetWidth;\r\n\t\tvar labelLeft = xPos-labelWidth/2;\r\n\t\t\r\n\t\tif (labelLeft<0){\r\n\t\t\tlabelLeft = 0;\r\n\t\t}\r\n\r\n\t\tif (labelLeft>this._options.width - labelWidth){\r\n\t\t\tlabelLeft = this._options.width - labelWidth;\r\n\t\t}\r\n\r\n\t\treturn labelLeft;\r\n\t}\r\n\r\n\t_onMouseOut(){\r\n\t\t// only hide when mouse is outside of widget\r\n\t\tif (!this._groupEl.node().parentNode.contains(d3.event.relatedTarget)){\r\n\t\t\tthis._hideTooltip();\r\n\t\t\tthis._tooltipLineCircle.style(\"visibility\", \"hidden\");\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\t_hideTooltip(){\r\n\t\tthis._tooltipGroup.attr(\"visibility\", \"hidden\")\r\n\t\tthis._tooltipTopLabel.style(\"visibility\", \"hidden\")\r\n\t}\r\n\r\n\t_renderTooltip(){\r\n\t\tvar data = this._lineData.getMergedData();\r\n\t\t\r\n\t\tvar series = this._lineData.getSeries();\r\n\t\tvar hoverWidth;\r\n\t\tif (data.length>series.length){\r\n\t\t\thoverWidth = this._options.width / (data.length-1);\r\n\t\t} else {\r\n\t\t\thoverWidth = this._options.width;\r\n\t\t}\r\n\r\n\t\tthis._hoverAreas = this._groupEl\r\n\t\t\t.selectAll(\".\"+style[\"tooltip-hover-area\"])\r\n\t\t\t.data(data)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-hover-area\"])\r\n\t\t\t.attr(\"width\", hoverWidth)\r\n\t\t\t.attr(\"fill-opacity\", 0.00)\r\n\t\t\t.attr(\"x\", (d)=>{\r\n\t\t\t\treturn this._xAxis(d.label) - hoverWidth/2\r\n\t\t\t})\r\n\t\t\t.attr(\"height\", this._options.height)\r\n\t\t\t.on(\"mouseover\", this._onHoverAreaOver.bind(this))\r\n\r\n\t\tthis._tooltipGroup = this._groupEl\r\n\t\t\t.append(\"g\")\r\n\t\t\t.attr(\"visibility\", \"hidden\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-group\"])\r\n\r\n\r\n\t\tthis._tooltipLineCircle = this._tooltipGroup\r\n\t\t\t.selectAll(\".\"+style[\"tooltip-line-circle\"])\r\n\t\t\t.data(series)\r\n\t\t\t.enter()\r\n\t\t\t.append(\"circle\")\r\n\t\t\t.attr(\"visibility\", \"hidden\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-line-circle\"])\r\n\t\t\t.attr(\"stroke-width\", this._options.lineWidth)\r\n\t\t\t.attr(\"stroke\", (d, i)=>{\r\n\t\t\t\treturn this._options.lineColors[i] || this._options.lineColor;\r\n\t\t\t})\r\n\t\t\t.attr(\"stroke-opacity\", this._options.lineOpacity)\r\n\t\t\t.attr(\"r\", 2.5+this._options.lineWidth/2)\r\n\r\n\t\tthis._tooltipAxisCircle = this._tooltipGroup\r\n\t\t\t.append(\"circle\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-axis-circle\"])\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"cy\", this._options.height - Defaults.MARGIN.bottom)\r\n\t\t\t.attr(\"r\", 2.5 + 1/2)\r\n\r\n\t\tthis._tooltipBottomLabelMask = this._tooltipGroup\r\n\t\t\t.append(\"rect\")\r\n\t\t\t.attr(\"fill\", \"url(#\"+this._handleMaskGradientEl.attr(\"id\")+\")\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-label-mask\"])\r\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET-15)\r\n\t\t\t.attr(\"height\", 20)\r\n\r\n\t\tthis._tooltipBottomLabel = this._tooltipGroup\r\n\t\t\t.append(\"text\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-label\"])\r\n\t\t\t.attr(\"y\", this._options.height - Defaults.LABEL_OFFSET)\r\n\t\t\t.attr(\"text-anchor\", \"start\")\r\n\t\t\t.text(data[0].label)\r\n\r\n\t\tthis._tooltipTopLabel = d3.select(this._groupEl.node().parentNode.parentNode)\r\n\t\t\t.insert(\"span\", \":first-child\")\r\n\t\t\t.attr(\"class\", style[\"tooltip-top-label\"])\r\n\t\t\t.style(\"position\", \"absolute\")\r\n\t\t\t.style(\"visibility\", \"hidden\")\r\n\r\n\t\tthis._tooltipRendered = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates mask gradient element\r\n\t * @param {Number} handleIndex \r\n\t */\r\n\t_createMaskGradientElement(){\r\n\t\tthis._handleMaskGradientEl = this._groupEl.append(\"linearGradient\")\r\n\t\t\t.attr(\"id\", style[\"tooltip-label-mask\"]+\"-\"+(gradientID++)+\"-gradient\")\r\n\t\t\t.attr(\"gradientUnits\", \"userSpaceOnUse\")\r\n\t\t\t.attr(\"y1\", \"0\").attr(\"x1\", \"0\")\r\n\t\t\t.attr(\"y2\", \"0\").attr(\"x2\", \"0\");\r\n\r\n\t\tthis._handleMaskGradientEl.selectAll(\"stop\")\r\n\t\t\t.data([\r\n\t\t\t\t{ offset: \"0%\", color: \"rgba(255,255,255,0)\" },\r\n\t\t\t\t{ offset: \"20%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"80%\", color: \"rgba(255,255,255,1)\" },\r\n\t\t\t\t{ offset: \"100%\", color: \"rgba(255,255,255,0)\" }\r\n\t\t\t])\r\n\t\t\t.enter().append(\"stop\")\r\n\t\t\t.attr(\"offset\", function (d) { return d.offset; })\r\n\t\t\t.attr(\"stop-color\", function (d) { return d.color; });\r\n\r\n\t\treturn this._handleMaskGradientEl;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tif (this._tooltipRendered){\r\n\t\t\tthis._hoverAreas.remove();\r\n\t\t\tthis._tooltipGroup.remove();\r\n\t\t\tthis._tooltipTopLabel.remove();\r\n\t\t\tthis._tooltipRendered = false;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Sets line data \r\n\t * @param {LineData}\r\n\t */\r\n\tupdate(lineData, x, y){\r\n\t\tthis._xAxis = x;\r\n\t\tthis._yAxis = y; \r\n\t\tthis._lineData = lineData;\r\n\r\n\t\tthis._createMaskGradientElement();\r\n\t\tthis._clear();\r\n\t\tthis._renderTooltip();\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Line UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._clear();\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","import style from \"./Line.css\";\r\nimport * as Defaults from \"./LineDefaults\";\r\nimport Observable from \"../utils/Observable\";\r\nimport TooltipRenderer from \"./TooltipRenderer\";\r\nimport * as d3 from \"d3\";\r\n\r\n/**\r\n * @class\r\n * Line renderer class\r\n * @param {Object} options\r\n */\r\nexport default class LineRenderer {\r\n    constructor(options) {\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Line options\r\n\t\t */\r\n\t\tthis._options = options;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * DOM container of this widget\r\n\t\t */\r\n\t\tthis._containerEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main group element of this widget\r\n\t\t */\r\n\t\tthis._groupEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private \r\n\t\t * Main SVG element of this widget\r\n\t\t */\r\n\t\tthis._svgEl = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Line data \r\n\t\t */\r\n\t\tthis._lineData = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * X axis\r\n\t\t */\r\n\t\tthis._xAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * Y axis\r\n\t\t */\r\n\t\tthis._yAxis = null;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * true if Line has been rendered\r\n\t\t */\r\n\t\tthis._rendered = false;\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * stores previous data for animation\r\n\t\t */\r\n\t\tthis._prevData = null;\t\t\r\n\r\n\t\t/**\r\n\t\t * @private\r\n\t\t * observable handler\r\n\t\t */\r\n\t\tthis._observable = new Observable([\r\n\t\t\t/**\r\n\t\t\t * @event \r\n\t\t\t * Fires when mouse is over a line point\r\n\t\t\t * @param {Array} [x,y] data\r\n\t\t\t */\r\n\t\t\t\"pointOver\"\r\n\t\t]);\r\n\r\n\t\tthis._tooltipRenderer = new TooltipRenderer(options);\r\n    }\r\n\r\n\t/**\r\n\t * @public\r\n\t * Returns whether Line has been rendered or not\r\n\t * @returns {boolean} true if Line has been rendered\r\n\t */\r\n\tisRendered(){\r\n\t\treturn this._rendered;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Bind handle event\r\n\t * @param {String} event event name\r\n\t * @param {Function} handler event handler\r\n\t * @returns {LineHandle} returns this handle instance\r\n\t */\r\n\ton(eventName, handler) {\r\n\t\tthis._observable.on(eventName, handler);\r\n\t\treturn this;\r\n\t}\t\r\n\r\n\t/**\r\n\t * @public\r\n\t * Render logic of this widget\r\n\t * @param {String|DOMElement} selector selector or DOM element \r\n\t * @returns {Line} returns this widget instance\r\n\t */\r\n\trender(selector){\r\n\t\t// get container element using selector or given element\r\n\t\tvar ct = this._containerEl = d3.select(selector);\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\r\n\t\t// force position relative so the toolip shows correctly\r\n\t\tct.style(\"position\", \"relative\");\r\n\r\n\t\t// render SVG\r\n\t\tthis._svgEl = ct.append(\"svg\")\r\n\t\t\t.attr(\"width\", width)\r\n\t\t\t.attr(\"height\", height)\r\n\t\t\t.classed(style.svg, true)\r\n\t\t\t.classed(style.line, true);\r\n\r\n\t\t// render group element\r\n\t\tthis._groupEl = this._svgEl.append(\"g\");\r\n\r\n\t\tthis._tooltipRenderer.render(this._groupEl);\r\n\r\n\t\tthis._rendered = true;\r\n\r\n\t\treturn this;\r\n\t} \r\n\r\n\t/**\r\n\t * @private\r\n\t * Clears selection controls and data \r\n\t */\r\n\t_clear(){\r\n\t\tthis._groupEl.node().innerHTML = \"\";\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Sets line data \r\n\t * @param {LineData}\r\n\t */\r\n\tupdate(lineData){\r\n\t\tthis._lineData = lineData;\t\t\r\n\t\tthis._clear();\r\n\r\n\t\tvar width = this._options.width;\r\n\t\tvar height = this._options.height;\r\n\t\tvar verticalSpacing = this._options.verticalSpacing;\r\n\r\n\t\tvar series = lineData.getSeries();\r\n\t\tvar allData = lineData.getAllData()\r\n\t\tvar minMax = lineData.getMinMax();\r\n\r\n\t\tvar x = this._xAxis = d3.scalePoint().range([0, width]);\t\r\n\t\tvar y = this._yAxis = d3.scaleLinear().range([height-verticalSpacing, verticalSpacing]);\r\n\r\n\t\tx.domain(allData.map(function (d) {return d.label; }));\r\n\t\ty.domain([minMax.min, minMax.max]);\r\n\r\n\t\tthis._renderZeroLine(allData);\r\n\t\tseries.forEach((data, seriesIndex)=>{\r\n\t\t\tthis._renderDataLines(data, seriesIndex);\r\n\t\t});\r\n\t\tthis._renderXAxis(allData);\r\n\t\tthis._tooltipRenderer.update(lineData, x, y);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * Renders x axis\r\n\t*/\r\n\t_renderXAxis(data){\r\n\t\tthis._groupEl.append(\"line\")\r\n\t\t\t.attr(\"x1\", 0)\r\n\t\t\t.attr(\"x2\", this._options.width)\r\n\t\t\t.attr(\"y1\", this._options.height-Defaults.MARGIN.bottom)\r\n\t\t\t.attr(\"y2\", this._options.height-Defaults.MARGIN.bottom)\r\n\t\t\t.attr(\"stroke-width\", 1)\r\n\t\t\t.attr(\"stroke\", this._options.axisColor)\r\n\r\n\t\t// render to labels on start and end sides if multiple items are available\r\n\t\tif (data.length>1){\r\n\t\t\tthis._groupEl\r\n\t\t\t\t.append(\"text\")\r\n\t\t\t\t.text(data[0].label)\r\n\t\t\t\t.attr(\"x\", 0)\r\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\r\n\r\n\t\t\tthis._groupEl\r\n\t\t\t\t.append(\"text\")\r\n\t\t\t\t.text(data[data.length-1].label)\r\n\t\t\t\t.attr(\"x\", this._options.width)\r\n\t\t\t\t.attr(\"text-anchor\", \"end\")\r\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\r\n\r\n\t\t// render single label in the middle if only one item is available\t\t\t\t\r\n\t\t} else if (data.length == 1){\r\n\t\t\tthis._groupEl\r\n\t\t\t\t.append(\"text\")\r\n\t\t\t\t.text(data[0].label)\r\n\t\t\t\t.attr(\"x\", this._options.width/2)\r\n\t\t\t\t.attr(\"text-anchor\", \"middle\")\r\n\t\t\t\t.attr(\"y\", this._options.height-Defaults.LABEL_OFFSET)\t\r\n\t\t}\t\r\n\t}\r\n\t/**\r\n\t * Returns true if graph should render zero line\r\n\t * @param {Array} data \r\n\t */\r\n\t_showZeroLine(){\r\n\t\tvar zeroLinePosition = this._yAxis(0);\r\n\t\tvar axisPosition = this._options.height-Defaults.MARGIN.bottom;\r\n\t\tvar treshold = 10;\r\n\t\treturn zeroLinePosition<axisPosition-treshold;\r\n\t}\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * Renders zero line\r\n\t*/\r\n\t_renderZeroLine(){\r\n\t\tif (this._showZeroLine()){\r\n\t\t\tthis._groupEl.append(\"line\")\r\n\t\t\t\t.attr(\"x1\", 0)\r\n\t\t\t\t.attr(\"x2\", this._options.width)\r\n\t\t\t\t.attr(\"y1\", Math.round(this._yAxis(0)))\r\n\t\t\t\t.attr(\"y2\", Math.round(this._yAxis(0)))\r\n\t\t\t\t.attr(\"stroke-dasharray\",\"2 ,2\")\r\n\t\t\t\t.attr(\"stroke\", this._options.zeroLineColor)\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * @param {Array} data\r\n\t * @param {Number} seriesIndex\r\n\t * Renders data lines\r\n\t*/\r\n\t_renderDataLines(data, seriesIndex) { \r\n\t\tvar x = this._xAxis;\r\n\t\tvar y = this._yAxis;\r\n\t\t\r\n\t\tvar options = this._options;\r\n\t\tvar minHeight = this._options.height-Defaults.MARGIN.bottom;\r\n\t\tvar areaZero = this._showZeroLine()?Math.min(minHeight, y(0)):minHeight;\r\n\t\tvar lineColor = options.lineColors[seriesIndex] || options.lineColor;\r\n\t\tvar fillColor = options.fillColors[seriesIndex] || options.fillColor;\r\n\r\n\t\t// define the area\r\n\t\tvar area = d3.area()\r\n\t\t\t.x(function(d) {return x(d.label); })\r\n\t\t\t.y0(areaZero)\r\n\t\t\t.y1(function(d) { return y(d.value); });\r\n\r\n\t\t// define the line\r\n\t\tvar line = d3.line()\r\n\t\t\t.x(function(d) { return x(d.label); })\r\n\t\t\t.y(function(d) { return y(d.value); });\t\t\r\n\r\n\t\t// apply grouping if needed (null or other splits)\r\n\t\tconst groupedData = this._getGroupedData(data);\r\n\r\n\t\tgroupedData.forEach(lineData=>{\r\n\t\t\t// only add area if not rendering a dot\r\n\t\t\tif (lineData.length>1){\r\n\t\t\t\t// add the area path\r\n\t\t\t\tthis._groupEl.append(\"path\")\r\n\t\t\t\t.data([lineData])\r\n\t\t\t\t.attr(\"class\", style[\"area\"])\r\n\t\t\t\t.attr(\"fill\", fillColor)\r\n\t\t\t\t.attr(\"fill-opacity\", options.fillOpacity)\r\n\t\t\t\t.attr(\"d\", area);\r\n\t\t\t}\r\n\r\n\t\t\tif (lineData.length){\r\n\t\t\t\t// add the line path\r\n\t\t\t\tthis._groupEl.append(\"path\")\r\n\t\t\t\t\t.data([lineData])\r\n\t\t\t\t\t.attr(\"fill\", \"none\")\r\n\t\t\t\t\t.attr(\"stroke-linecap\", \"round\")\r\n\t\t\t\t\t.attr(\"stroke\", lineColor)\r\n\t\t\t\t\t.attr(\"stroke-opacity\", 1)\r\n\t\t\t\t\t// note that in case of a single item, dot is rendered with a different size\r\n\t\t\t\t\t.attr(\"stroke-width\", lineData.length>1?options.lineWidth:options.dotSize)\r\n\t\t\t\t\t.attr(\"class\", style[\"line\"])\r\n\t\t\t\t\t.attr(\"d\", (d)=>{\r\n\t\t\t\t\t\tvar path = line(d);\r\n\t\t\t\t\t\t// Fix issue in Chrome on Mac and Surface where\r\n\t\t\t\t\t\t// path points are not rendererd if it's a single point \r\n\t\t\t\t\t\tif (path && path.split(\",\").length == 2){\r\n\t\t\t\t\t\t\treturn path + \" \" + path;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn path;\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * @private\r\n\t * Splits given array into multiple in case there is null in value\r\n\t * @param {Array} data \r\n\t */\r\n\t_getGroupedData(data){\r\n\t\tlet group = [];\r\n\t\tconst result = [group];\r\n\t\t\r\n\t\tdata.forEach(item=>{\r\n\t\t\tif (item.value === null){\r\n\t\t\t\tgroup = [];\r\n\t\t\t\tresult.push(group);\r\n\t\t\t} else {\r\n\t\t\t\tgroup.push(item);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * @public\r\n\t * Destorys Line UI  \r\n\t */\r\n\tdestroy() {\r\n\t\tif (this._rendered){\r\n\t\t\tthis._containerEl.node().removeChild(this._svgEl.node());\r\n\t\t}\r\n\r\n\t\tthis._observable.destroy();\r\n\r\n\t\treturn this;\r\n    }\t\r\n\t\r\n}","import Bar from \"./bar/Bar\";\r\nimport Doughnut from \"./doughnut/Doughnut\";\r\nimport Histogram from \"./histogram/Histogram\";\r\nimport Line from \"./line/Line\";\r\n\r\nexport default {\r\n\tBar:Bar,\r\n    Doughnut:Doughnut,\r\n    Histogram:Histogram,\r\n    Line:Line\r\n}"],"names":["getOptionValue","optionValue","defaultOptionValue","getHandlePositionOffsets","handle1","handle2","maskPadding","width","label1Box","getLabelBox","label2Box","conflictDiff","x","posDiff1","posDiff2","xMax","Observable","events","_handlers","reduce","acc","cur","event","handler","this","push","handlers","index","indexOf","splice","args","i","length","apply","WIDTH","BAR_HEIGHT","INACTIVE_BAR_COLOR","OVER_BAR_COLOR","ACTIVE_BAR_COLOR","ACTIVE_BAR_COLORS","ENABLE_BAR_TOGGLE","ENABLE_BAR_HOVER","LABEL_FONT_SIZE","VALUE_FONT_SIZE","BarData","series","_series","slice","_minMax","_calculateMinMax","concat","dataMap","getAllData","forEach","result","item","label","disabled","highlighted","values","value","tooltips","tooltip","colors","color","Object","data","min","d3","d","max","Math","numParts","toString","split","BarRenderer","options","_options","_containerEl","_groupEl","_svgEl","_barData","_xAxis","_yAxis","_rendered","_observable","_maskIndex","MASK_INDEX","eventName","on","selector","ct","height","append","attr","style","bar","_clipPath","labelFontSize","node","innerHTML","barData","_clear","getMergedData","minMax","getMinMax","barHeight","range","domain","map","reverse","_renderDataBars","y","observable","barGroup","_this","datum","floor","classed","enableBarHover","fire","enableBarToggle","text","tooltipX","valueIndex","tooltipEl","reversedIndex","format","valueFontSize","getComputedTextLength","activeBarColors","activeBarColor","barOffset","Defaults","removeChild","destroy","Bar","inactiveBarColor","overBarColor","_barRenderer","barIndex","off","render","isRendered","getPrecision","setData","OUTER_RADIUS","INNER_RADIUS","VALUE","ACTIVE_COLOR","INACTIVE_COLOR","BACKGROUND_COLOR","ANIMATION_DURATION","DoughnutRenderer","offsetWidth","offsetHeight","_value","angle","_angle","tau","innerRadius","_innerRadius","outerRadius","_outerRadius","arc","_arc","startAngle","g","_inactiveArc","endAngle","inactiveColor","_activeArc","activeColor","_backgroundArc","backgroundColor","_hoverEl","opts","activeArcTransition","transition","duration","animationDuration","attrTween","_arcTween","_this2","interpolateOuterRadius","interpolateInnerRadius","interpolateAngle","t","_this3","Doughnut","renderTo","_doughnutRenderer","update","HEIGHT","MARGIN","INACTIVE_BAR_OPACITY","OVER_SELECTION_COLOR","OVER_SELECTION_OPACITY","SELECTION_COLOR","ENABLE_SELECTION_TOGGLE","FONT_SIZE","DEFAULT_COLORS","HistogramData","_histogramData","_loadHistogramData","histogramData","position","getValueRatio","valueRatio","constrainedValue","round","numOfBarsPerBucket","bucket","step","volume","Array","isArray","HistogramHandle","groupEl","_handleEl","_handleLineEl","_handleCircleEl","_handleMaskEl","_handleMaskGradientEl","_handleLabelEl","_isOver","_index","_initialValue","Number","_position","valueToPosition","_initialPosition","_labelSizeCache","_elements","_renderHandle","element","remove","_createHandleElement","_createHandleLineElement","_createHandleCircleElement","_createDragMaskElement","_createMaskGradientElement","_createDragLabelElement","_handleHoverState","_handleDrag","parseInt","_updateLabelPosition","getBBox","offset","setLabelOffset","setHoverState","unsetHoverState","xpos","positionToValue","_getLabelText","call","_onDrag","bind","_onStartDrag","_onEndDrag","content","fontSize","textLength","_getComputedLabelTextLength","maskWidth","xPosition","gradientIndex","selectAll","enter","HistogramSelectionRenderer","_histogramSelection","_overSelectionIndex","_handles","_draggingHandle","_prevSelection","_animating","_destroyHandles","_selectionBars","handle","handleIndex","handleValue","promptHandler","then","promptResult","startSelectionSnapshot","JSON","stringify","getOutputSelection","parseFloat","points","getSelectionPoints","positions","sort","p1","p2","point","_updateSelectionPositions","_updateSelection","_renderHandles","selection","selectionIndex","enabled","target","allowsToggle","_toggleSelection","_onHandleClick","_onClick","histogramSelection","_animate","animate","getSelection","_prevHistogramData","_renderSelection","_handleClick","handles","h1","h2","getXPosition","labelOffsets","PositionUtils","nodes","_updateSelectionControlsHoverState","selectionbar","_onSelectionMouseOut","_onSelectionMouseOver","p","from","to","pos","hidden","hide","_onHandleDrag","disable","enable","barX","s","isLast","volumeIndex","selectionColor","overSelectionColor","barSelectionIndex","_getBarSelectionIndex","_getSelectionColor","isOver","isDisabled","overSelectionOpacity","inactiveBarOpacity","opacity","selection1","selection2","data1","data2","onTransition","onComplete","s1","s2","_this4","transitions","frames","abs","si","hi","bars","fillBars","_this5","_getBarColor","_getBarOpacity","prevSelection","prevData","setHandleXPosition","setLabelPosition","_onSelectionTransition","showLabel","_this6","hideLabel","HistogramRenderer","_historyData","_prevData","_selectionRenderer","_labelsVisible","margin","svg","left","right","top","bottom","histogram","inactive","active","getData","_renderXAxis","refresh","showSelectionLabels","hideSelectionLabels","v","ceil","HistogramSelection","_selection","assign","SelectionTypes","MultipleHistogramSelection","MULTI","DefaultHistogramSelectionImpl","start","MultipleHistogramSelectionImpl","FilterHistogramSelectionImpl","FILTER","InvertedFilterHistogramSelectionImpl","_getInvertedSelection","INVERTED_FILTER","HistogramSelectionFactory","selectionType","Histogram","enableSelectionToggle","_histogramRenderer","_selectionFactory","getHistogramSelection","String","setSelection","LINE_COLOR","LINE_COLORS","LINE_OPACITY","FILL_COLOR","FILL_COLORS","FILL_OPACITY","LINE_WIDTH","DOT_SIZE","AXIS_COLOR","ZERO_LINE_COLOR","LineData","TooltipRenderer","_lineData","_onMouseOut","xPos","bottomLabelWidth","filter","lineColors","lineColor","join","_tooltipGroup","_tooltipBottomLabel","textAnchor","_getTextAnchor","bottomMaskWidth","bottomMaskPadding","_tooltipBottomLabelMask","tooltipHtml","_getTooltipHTML","_tooltipTopLabel","labelLeft","_getLabelLeft","some","_tooltipLineCircle","circle","labelWidth","parentNode","contains","relatedTarget","_hideTooltip","hoverWidth","getSeries","_hoverAreas","_onHoverAreaOver","lineWidth","lineOpacity","_tooltipAxisCircle","insert","_tooltipRendered","gradientID","lineData","_renderTooltip","LineRenderer","_tooltipRenderer","line","verticalSpacing","allData","_renderZeroLine","seriesIndex","_renderDataLines","axisColor","_showZeroLine","zeroLineColor","minHeight","areaZero","fillColor","fillColors","area","y0","y1","_getGroupedData","fillOpacity","dotSize","path","group","_lineRenderer"],"mappings":"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"}